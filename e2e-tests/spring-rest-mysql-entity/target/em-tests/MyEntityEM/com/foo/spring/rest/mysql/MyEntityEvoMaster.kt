/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
package com.foo.spring.rest.mysql


import  org.junit.jupiter.api.AfterAll
import  org.junit.jupiter.api.BeforeAll
import  org.junit.jupiter.api.BeforeEach
import  org.junit.jupiter.api.Test
import  org.junit.jupiter.api.Timeout
import  org.junit.jupiter.api.Assertions.*
import  java.util.List
import  org.evomaster.test.utils.EMTestUtils.*
import  org.evomaster.client.java.controller.SutHandler
import  io.restassured.RestAssured
import  io.restassured.RestAssured.given
import  io.restassured.response.ValidatableResponse
import  org.evomaster.client.java.sql.dsl.SqlDsl.sql
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto
import  org.hamcrest.Matchers.*
import  io.restassured.config.JsonConfig
import  io.restassured.path.json.config.JsonPathConfig
import  io.restassured.config.RedirectConfig.redirectConfig
import  org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.StringMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*




/**
*  This file was automatically generated by EvoMaster on 2025-03-17T15:54:51.899953-03:00\[America/Argentina/Buenos_Aires\]
*  
*  The generated test suite contains 4 tests
*  
*  Covered targets: 33
*  
*  Used time: 0h 0m 7s
*  
*  Needed budget for current results: 62%
*  
*  
*/
internal class MyEntityEvoMaster {

    
    companion object {
        private val controller : SutHandler = com.foo.spring.rest.mysql.SpringRestMyEntityController()
        private lateinit var baseUrlOfSut: String
        
        
        @BeforeAll
        @JvmStatic
        fun initClass() {
            controller.setupForGeneratedTest()
            baseUrlOfSut = controller.startSut()
            controller.registerOrExecuteInitSqlCommandsIfNeeded()
            assertNotNull(baseUrlOfSut)
            RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
            RestAssured.useRelaxedHTTPSValidation()
            RestAssured.urlEncodingEnabled = false
            RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false))
        }
        
        
        @AfterAll
        @JvmStatic
        fun tearDown() {
            controller.stopSut()
        }
    }
    
    
    @BeforeEach
    fun initTest() {
        controller.resetDatabase(listOf("myentities"))
        controller.resetStateOfSUT()
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    fun test_0()  {
        
        given().accept("*/*")
                .get("${baseUrlOfSut}/v2/api-docs")
                .then()
                .statusCode(200)
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/myentities/{id}
    */
    @Test @Timeout(60)
    fun test_1()  {
        val insertions = sql().insertInto("myentities", 30L)
                .d("name", "\"BzmoEzy7g40j\"")
                .d("email", "\"kM@q.naPa\"")
            .and().insertInto("myentities", 5L)
                .d("name", "\"_EM_2_XYZ_\"")
                .d("email", "\"au@OE.mjzk\"")
            .dtos()
        val insertionsresult = controller.execInsertionsIntoDatabase(insertions)
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/myentities/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("BzmoEzy7g40j"))
                .body("'email'", containsString("kM@q.naPa"))
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/myentities/{id}
    */
    @Test @Timeout(60)
    fun test_2()  {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/myentities/970?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString())
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/myentities/{id}
    */
    @Test @Timeout(60)
    fun test_3()  {
        val insertions = sql().insertInto("myentities", 15L)
                .d("name", "\"OP72\"")
                .d("email", "\"Yaf@d.pU\"")
            .dtos()
        val insertionsresult = controller.execInsertionsIntoDatabase(insertions)
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get("${baseUrlOfSut}/api/myentities/-731817520?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString())
    }


}
