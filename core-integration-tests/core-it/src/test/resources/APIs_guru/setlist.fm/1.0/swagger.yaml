swagger: "2.0"
schemes: []
basePath: /rest
info:
  contact:
    x-twitter: setlistfm
  description: |-
    <p>
    The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and
    other applications. Before starting to use the API, be sure to ...
    <ol>
    <li>... understand how setlist.fm works (the <a href="https://www.setlist.fm/faq">FAQ</a> and the
    <a href="https://www.setlist.fm/guidelines">Guidelines</a> are a good starting point),</li>
    <li>... read this documentation carefully and</li>
    <li>... <a href="https://www.setlist.fm/settings/api">apply for an API key</a> (link for logged in users only) - if
    you're no registered user yet, then <a href="https://www.setlist.fm/signup">register first</a> (it's free).</li>
    </ol>
    </p>
    <p>
    If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the
    <a href="https://www.setlist.fm/forum/setlistfm/setlistfm-api">API Forum</a>.
    </p>
    <p>
    Note that the setlist.fm API is, according to the <a href="https://www.setlist.fm/help/api-terms">API terms of
    service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes,
    <a href="https://www.setlist.fm/contact">contact us</a>.
    </p>

    <h2>About this Service</h2>
    <p>
    This service provides methods to get both setlists and components of setlists such as artists, cities, countries or
    venues.
    </p>

    <h2>Supported Content Types</h2>
    <p>
    The REST service currently supports XML (default) and JSON content.
    </p>
    <p>
    To receive a JSON response, set the <code>Accept</code>
    <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">header</a> to <em>application/json</em>.
    </p>

    <h2>Internationalization</h2>
    <p>
    <small>(Please note that this is an experimental feature and does not work for all cities!)</small>
    </p>
    <p>
    Most of the featured methods honor the <code>Accept-Language</code>
    <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4">header</a>. This header is used for
    localizing cities and countries. The default language is English (en), but you can provide any of the languages
    Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl).
    </p>
    <p>
    E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll
    get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/>
    This also works if you use a different language than the country's native language.
    </p>
    <p>
    E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New
    York, United States&quot;</em> if you pass &quot;es&quot; as language.
    </p>

    <h2>API Keys</h2>

    API keys (<a href="https://www.setlist.fm/settings/api">application form</a>) must be included in the request with
    the <code>x-api-key</code> header.

    <h2>Version History</h2>
    <table class="table table-bordered table-versions">
    <thead>
    <tr>
    <th>Version</th>
    <th>Docs</th>
    <th>End of Service</th>
    </tr>
    </thead> <tbody>
    <tr>
    <td><strong>1.0</strong></td>
    <td><a href="/docs/1.0">Docs</a></td>
    <td>-</li>
    </tr>
    <tr>
    <td><strong>0.1</strong></td>
    <td></td>
    <td>December 31, 2017</li>
    </tr>
    </tbody>
    </table>
  title: setlist.fm API
  version: "1.0"
  x-apisguru-categories:
    - media
  x-logo:
    url: https://twitter.com/setlistfm/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://api.setlist.fm/docs/1.0/ui/swagger.json
      version: "2.0"
  x-providerName: setlist.fm
tags:
  - name: /1.0/artist/{mbid}
  - name: /1.0/artist/{mbid}/setlists
  - name: /1.0/city/{geoId}
  - name: /1.0/search/artists
  - name: /1.0/search/cities
  - name: /1.0/search/countries
  - name: /1.0/search/setlists
  - name: /1.0/search/venues
  - name: /1.0/setlist/version/{versionId}
  - name: /1.0/setlist/{setlistId}
  - name: /1.0/user/{userId}
  - name: /1.0/user/{userId}/attended
  - name: /1.0/user/{userId}/edited
  - name: /1.0/venue/{venueId}
  - name: /1.0/venue/{venueId}/setlists
paths:
  "/1.0/artist/{mbid}":
    get:
      description: |-
        <p>
        Returns an artist for a given Musicbrainz MBID
        </p>
      operationId: resource__1.0_artist__mbid__getArtist_GET
      parameters:
        - description: a Musicbrainz MBID, e.g. 0bfba3d3-6a04-4779-bb0a-df07df5b0558
          in: path
          name: mbid
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              disambiguation: John, Paul, George and Ringo
              mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
              name: The Beatles
              sortName: Beatles, The
              tmid: 735610
              url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
          headers: {}
          schema:
            $ref: "#/definitions/json_Artist"
            description: ""
      summary: .
      tags:
        - /1.0/artist/{mbid}
  "/1.0/artist/{mbid}/setlists":
    get:
      description: |-
        <p>
        Get a list of an artist's setlists.
        </p>
      operationId: resource__1.0_artist__mbid__setlists_getArtistSetlists_GET
      parameters:
        - description: the Musicbrainz MBID of the artist
          in: path
          name: mbid
          required: true
          type: string
        - default: "1"
          description: the number of the result page
          in: query
          name: p
          type: integer
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              setlist:
                - artist:
                    disambiguation: John, Paul, George and Ringo
                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                    name: The Beatles
                    sortName: Beatles, The
                    tmid: 735610
                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                  eventDate: 23-08-1964
                  id: 63de4613
                  info: Recorded and published as 'The Beatles at the Hollywood Bowl'
                  lastUpdated: 2013-10-20T05:18:08.000+0000
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: North American Tour 1964
                  url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
                  venue:
                    city: {}
                    id: 6bd6ca6e
                    name: Compaq Center
                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                  versionId: 7be1aaa0
                - artist:
                    disambiguation: ...
                    mbid: ...
                    name: ...
                    sortName: ...
                    tmid: 12345
                    url: ...
                  eventDate: ...
                  id: ...
                  info: ...
                  lastUpdated: ...
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: ...
                  url: ...
                  venue:
                    city: {}
                    id: ...
                    name: ...
                    url: ...
                  versionId: ...
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlists"
            description: ""
      summary: .
      tags:
        - /1.0/artist/{mbid}/setlists
  "/1.0/city/{geoId}":
    get:
      description: Get a city by its unique geoId.
      operationId: resource__1.0_city__geoId__getCity_GET
      parameters:
        - description: the city's geoId
          in: path
          name: geoId
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              coords:
                lat: 34.0983425
                long: -118.3267434
              country:
                code: US
                name: United States
              id: "5357527"
              name: Hollywood
              state: California
              stateCode: CA
          headers: {}
          schema:
            $ref: "#/definitions/json_City"
            description: ""
      summary: Get a city by its unique geoId.
      tags:
        - /1.0/city/{geoId}
  /1.0/search/artists:
    get:
      description: Search for artists.
      operationId: resource__1.0_search_artists_getArtists_GET
      parameters:
        - description: the artist's Musicbrainz Identifier (mbid)
          in: query
          name: artistMbid
          type: string
        - description: the artist's name
          in: query
          name: artistName
          type: string
        - description: the artist's Ticketmaster Identifier (tmid)
          in: query
          name: artistTmid
          type: integer
        - default: "1"
          description: the number of the result page you'd like to have
          in: query
          name: p
          type: integer
        - default: sortName
          description: the sort of the result, either sortName (default) or relevance
          in: query
          name: sort
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              artist:
                - disambiguation: John, Paul, George and Ringo
                  mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                  name: The Beatles
                  sortName: Beatles, The
                  tmid: 735610
                  url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                - disambiguation: ...
                  mbid: ...
                  name: ...
                  sortName: ...
                  tmid: 12345
                  url: ...
              itemsPerPage: 20
              page: 1
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Artists"
            description: ""
      summary: Search for artists.
      tags:
        - /1.0/search/artists
  /1.0/search/cities:
    get:
      description: Search for a city.
      operationId: resource__1.0_search_cities_getCities_GET
      parameters:
        - description: the city's country
          in: query
          name: country
          type: string
        - description: name of the city
          in: query
          name: name
          type: string
        - default: "1"
          description: the number of the result page you'd like to have
          in: query
          name: p
          type: integer
        - description: state the city lies in
          in: query
          name: state
          type: string
        - description: state code the city lies in
          in: query
          name: stateCode
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              cities:
                - coords:
                    lat: 34.0983425
                    long: -118.3267434
                  country:
                    code: US
                    name: United States
                  id: "5357527"
                  name: Hollywood
                  state: California
                  stateCode: CA
                - coords:
                    lat: 12345
                    long: 12345
                  country:
                    code: ...
                    name: ...
                  id: ...
                  name: ...
                  state: ...
                  stateCode: ...
              itemsPerPage: 20
              page: 1
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Cities"
            description: ""
      summary: Search for a city.
      tags:
        - /1.0/search/cities
  /1.0/search/countries:
    get:
      description: Get a complete list of all supported countries.
      operationId: resource__1.0_search_countries_getCountries_GET
      parameters: []
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              country:
                - code: US
                  name: United States
                - code: ...
                  name: ...
              itemsPerPage: 20
              page: 1
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Countries"
            description: ""
      summary: Get a complete list of all supported countries.
      tags:
        - /1.0/search/countries
  /1.0/search/setlists:
    get:
      description: Search for setlists.
      operationId: resource__1.0_search_setlists_getSetlists_GET
      parameters:
        - description: the artist's Musicbrainz Identifier (mbid)
          in: query
          name: artistMbid
          type: string
        - description: the artist's name
          in: query
          name: artistName
          type: string
        - description: the artist's Ticketmaster Identifier (tmid)
          in: query
          name: artistTmid
          type: integer
        - description: the city's geoId
          in: query
          name: cityId
          type: string
        - description: the name of the city
          in: query
          name: cityName
          type: string
        - description: the country code
          in: query
          name: countryCode
          type: string
        - description: the date of the event (format dd-MM-yyyy)
          in: query
          name: date
          type: string
        - description: the event's Last.fm Event ID (deprecated)
          in: query
          name: lastFm
          type: integer
        - description: |-
            the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or
            reverted. search will return setlists that were updated on or after this date
          in: query
          name: lastUpdated
          type: string
        - default: "1"
          description: the number of the result page
          in: query
          name: p
          type: integer
        - description: the state
          in: query
          name: state
          type: string
        - description: the state code
          in: query
          name: stateCode
          type: string
        - description: ""
          in: query
          name: tourName
          type: string
        - description: the venue id
          in: query
          name: venueId
          type: string
        - description: the name of the venue
          in: query
          name: venueName
          type: string
        - description: the year of the event
          in: query
          name: year
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              setlist:
                - artist:
                    disambiguation: John, Paul, George and Ringo
                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                    name: The Beatles
                    sortName: Beatles, The
                    tmid: 735610
                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                  eventDate: 23-08-1964
                  id: 63de4613
                  info: Recorded and published as 'The Beatles at the Hollywood Bowl'
                  lastUpdated: 2013-10-20T05:18:08.000+0000
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: North American Tour 1964
                  url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
                  venue:
                    city: {}
                    id: 6bd6ca6e
                    name: Compaq Center
                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                  versionId: 7be1aaa0
                - artist:
                    disambiguation: ...
                    mbid: ...
                    name: ...
                    sortName: ...
                    tmid: 12345
                    url: ...
                  eventDate: ...
                  id: ...
                  info: ...
                  lastUpdated: ...
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: ...
                  url: ...
                  venue:
                    city: {}
                    id: ...
                    name: ...
                    url: ...
                  versionId: ...
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlists"
            description: ""
      summary: Search for setlists.
      tags:
        - /1.0/search/setlists
  /1.0/search/venues:
    get:
      description: Search for venues.
      operationId: resource__1.0_search_venues_getVenues_GET
      parameters:
        - description: the city's geoId
          in: query
          name: cityId
          type: string
        - description: name of the city where the venue is located
          in: query
          name: cityName
          type: string
        - description: the city's country
          in: query
          name: country
          type: string
        - description: name of the venue
          in: query
          name: name
          type: string
        - default: "1"
          description: the number of the result page you'd like to have
          in: query
          name: p
          type: integer
        - description: the city's state
          in: query
          name: state
          type: string
        - description: the city's state code
          in: query
          name: stateCode
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              total: 42
              venue:
                - city:
                    coords: {}
                    country: {}
                    id: "5357527"
                    name: Hollywood
                    state: California
                    stateCode: CA
                  id: 6bd6ca6e
                  name: Compaq Center
                  url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                - city:
                    coords: {}
                    country: {}
                    id: ...
                    name: ...
                    state: ...
                    stateCode: ...
                  id: ...
                  name: ...
                  url: ...
          headers: {}
          schema:
            $ref: "#/definitions/json_Venues"
            description: ""
      summary: Search for venues.
      tags:
        - /1.0/search/venues
  "/1.0/setlist/version/{versionId}":
    get:
      description: |-
        <p>
        Returns a setlist for the given versionId. The setlist returned isn't necessarily the most recent version. E.g.
        if you pass the versionId of a setlist that got edited since you last accessed it, you'll get the same version as
        last time.
        </p>
      operationId: resource__1.0_setlist_version__versionId__getSetlistVersion_GET
      parameters:
        - description: the version id
          in: path
          name: versionId
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              artist:
                disambiguation: John, Paul, George and Ringo
                mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                name: The Beatles
                sortName: Beatles, The
                tmid: 735610
                url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
              eventDate: 23-08-1964
              id: 63de4613
              info: Recorded and published as 'The Beatles at the Hollywood Bowl'
              lastUpdated: 2013-10-20T05:18:08.000+0000
              set:
                - encore: 12345
                  name: ...
                  song:
                    - cover: {}
                      info: ...
                      name: Yesterday
                      tape: false
                      with: {}
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
                - encore: 12345
                  name: ...
                  song:
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
              tour:
                name: North American Tour 1964
              url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
              venue:
                city:
                  coords: {}
                  country: {}
                  id: "5357527"
                  name: Hollywood
                  state: California
                  stateCode: CA
                id: 6bd6ca6e
                name: Compaq Center
                url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
              versionId: 7be1aaa0
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlist"
            description: ""
      summary: .
      tags:
        - /1.0/setlist/version/{versionId}
  "/1.0/setlist/{setlistId}":
    get:
      description: |-
        <p>
        Returns the current version of a setlist. E.g. if you pass the id of a setlist that got edited since you last
        accessed it, you'll get the current version.
        </p>
      operationId: resource__1.0_setlist__setlistId__getSetlist_GET
      parameters:
        - description: the setlist id
          in: path
          name: setlistId
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              artist:
                disambiguation: John, Paul, George and Ringo
                mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                name: The Beatles
                sortName: Beatles, The
                tmid: 735610
                url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
              eventDate: 23-08-1964
              id: 63de4613
              info: Recorded and published as 'The Beatles at the Hollywood Bowl'
              lastUpdated: 2013-10-20T05:18:08.000+0000
              set:
                - encore: 12345
                  name: ...
                  song:
                    - cover: {}
                      info: ...
                      name: Yesterday
                      tape: false
                      with: {}
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
                - encore: 12345
                  name: ...
                  song:
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
                    - cover: {}
                      info: ...
                      name: ...
                      tape: true
                      with: {}
              tour:
                name: North American Tour 1964
              url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
              venue:
                city:
                  coords: {}
                  country: {}
                  id: "5357527"
                  name: Hollywood
                  state: California
                  stateCode: CA
                id: 6bd6ca6e
                name: Compaq Center
                url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
              versionId: 7be1aaa0
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlist"
            description: ""
      summary: .
      tags:
        - /1.0/setlist/{setlistId}
  "/1.0/user/{userId}":
    get:
      description: Get a user by userId.
      operationId: resource__1.0_user__userId__getUser_GET
      parameters:
        - description: the user's userId
          in: path
          name: userId
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              about: ...
              flickr: ...
              fullname: ...
              lastFm: ...
              mySpace: ...
              twitter: ...
              url: ...
              userId: ...
              website: ...
          headers: {}
          schema:
            $ref: "#/definitions/json_User"
            description: ""
      summary: Get a user by userId.
      tags:
        - /1.0/user/{userId}
  "/1.0/user/{userId}/attended":
    get:
      description: |-
        <p>
        Get a list of setlists of concerts attended by a user.
        </p>
      operationId: resource__1.0_user__userId__attended_getUserAttendedSetlists_GET
      parameters:
        - description: the user's userId
          in: path
          name: userId
          required: true
          type: string
        - default: "1"
          description: the number of the result page
          in: query
          name: p
          type: integer
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              setlist:
                - artist:
                    disambiguation: John, Paul, George and Ringo
                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                    name: The Beatles
                    sortName: Beatles, The
                    tmid: 735610
                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                  eventDate: 23-08-1964
                  id: 63de4613
                  info: Recorded and published as 'The Beatles at the Hollywood Bowl'
                  lastUpdated: 2013-10-20T05:18:08.000+0000
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: North American Tour 1964
                  url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
                  venue:
                    city: {}
                    id: 6bd6ca6e
                    name: Compaq Center
                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                  versionId: 7be1aaa0
                - artist:
                    disambiguation: ...
                    mbid: ...
                    name: ...
                    sortName: ...
                    tmid: 12345
                    url: ...
                  eventDate: ...
                  id: ...
                  info: ...
                  lastUpdated: ...
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: ...
                  url: ...
                  venue:
                    city: {}
                    id: ...
                    name: ...
                    url: ...
                  versionId: ...
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlists"
            description: ""
      summary: .
      tags:
        - /1.0/user/{userId}/attended
  "/1.0/user/{userId}/edited":
    get:
      description: |-
        <p>
        Get a list of setlists of concerts edited by a user. The list contains the current version, not the version
        edited.
        </p>
      operationId: resource__1.0_user__userId__edited_getUserEditedSetlists_GET
      parameters:
        - description: the user's userId
          in: path
          name: userId
          required: true
          type: string
        - default: "1"
          description: the number of the result page
          in: query
          name: p
          type: integer
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              setlist:
                - artist:
                    disambiguation: John, Paul, George and Ringo
                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                    name: The Beatles
                    sortName: Beatles, The
                    tmid: 735610
                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                  eventDate: 23-08-1964
                  id: 63de4613
                  info: Recorded and published as 'The Beatles at the Hollywood Bowl'
                  lastUpdated: 2013-10-20T05:18:08.000+0000
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: North American Tour 1964
                  url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
                  venue:
                    city: {}
                    id: 6bd6ca6e
                    name: Compaq Center
                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                  versionId: 7be1aaa0
                - artist:
                    disambiguation: ...
                    mbid: ...
                    name: ...
                    sortName: ...
                    tmid: 12345
                    url: ...
                  eventDate: ...
                  id: ...
                  info: ...
                  lastUpdated: ...
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: ...
                  url: ...
                  venue:
                    city: {}
                    id: ...
                    name: ...
                    url: ...
                  versionId: ...
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlists"
            description: ""
      summary: .
      tags:
        - /1.0/user/{userId}/edited
  "/1.0/venue/{venueId}":
    get:
      description: Get a venue by its unique id.
      operationId: resource__1.0_venue__venueId__getVenue_GET
      parameters:
        - description: the venue's id
          in: path
          name: venueId
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              city:
                coords:
                  lat: 34.0983425
                  long: -118.3267434
                country:
                  code: US
                  name: United States
                id: "5357527"
                name: Hollywood
                state: California
                stateCode: CA
              id: 6bd6ca6e
              name: Compaq Center
              url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
          headers: {}
          schema:
            $ref: "#/definitions/json_Venue"
            description: ""
      summary: Get a venue by its unique id.
      tags:
        - /1.0/venue/{venueId}
  "/1.0/venue/{venueId}/setlists":
    get:
      description: |-
        <p>
        Get setlists for a specific venue.
        </p>
      operationId: resource__1.0_venue__venueId__setlists_getVenueSetlists_GET
      parameters:
        - description: the id of the venue
          in: path
          name: venueId
          required: true
          type: string
        - default: "1"
          description: the number of the result page
          in: query
          name: p
          type: integer
      produces:
        - application/xml
        - application/json
      responses:
        "200":
          description: Success
          examples:
            application/json:
              itemsPerPage: 20
              page: 1
              setlist:
                - artist:
                    disambiguation: John, Paul, George and Ringo
                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
                    name: The Beatles
                    sortName: Beatles, The
                    tmid: 735610
                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
                  eventDate: 23-08-1964
                  id: 63de4613
                  info: Recorded and published as 'The Beatles at the Hollywood Bowl'
                  lastUpdated: 2013-10-20T05:18:08.000+0000
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: North American Tour 1964
                  url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
                  venue:
                    city: {}
                    id: 6bd6ca6e
                    name: Compaq Center
                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
                  versionId: 7be1aaa0
                - artist:
                    disambiguation: ...
                    mbid: ...
                    name: ...
                    sortName: ...
                    tmid: 12345
                    url: ...
                  eventDate: ...
                  id: ...
                  info: ...
                  lastUpdated: ...
                  set:
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                    - encore: 12345
                      name: ...
                      song:
                        - {}
                        - {}
                  tour:
                    name: ...
                  url: ...
                  venue:
                    city: {}
                    id: ...
                    name: ...
                    url: ...
                  versionId: ...
              total: 42
          headers: {}
          schema:
            $ref: "#/definitions/json_Setlists"
            description: ""
      summary: .
      tags:
        - /1.0/venue/{venueId}/setlists
definitions:
  json_Artist:
    description: |-
      This class represents an artist. An artist is a musician or a group of musicians. Each artist has a definite
      <a href="http://wiki.musicbrainz.org/MBID">Musicbrainz Identifier</a> (MBID) with which the artist can be uniquely
      identified.
    example:
      disambiguation: John, Paul, George and Ringo
      mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
      name: The Beatles
      sortName: Beatles, The
      tmid: 735610
      url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
    properties:
      disambiguation:
        description: disambiguation to distinguish between artists with same names
        example: John, Paul, George and Ringo
        type: string
      mbid:
        description: unique Musicbrainz Identifier (MBID), e.g. <em>&quot;b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d&quot;</em>
        example: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
        type: string
      name:
        description: the artist's name, e.g. <em>&quot;The Beatles&quot;</em>
        example: The Beatles
        type: string
      sortName:
        description: the artist's sort name, e.g. <em>&quot;Beatles, The&quot;</em> or <em>&quot;Springsteen, Bruce&quot;</em>
        example: Beatles, The
        type: string
      tmid:
        description: unique Ticket Master Identifier (TMID), e.g. <em>735610</em>
        example: 735610
        type: number
      url:
        description: the attribution url
        example: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
        type: string
    title: artist
    type: object
  json_Artists:
    description: A Result consisting of a list of artists.
    example:
      artist:
        - disambiguation: John, Paul, George and Ringo
          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
          name: The Beatles
          sortName: Beatles, The
          tmid: 735610
          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
        - disambiguation: ...
          mbid: ...
          name: ...
          sortName: ...
          tmid: 12345
          url: ...
      itemsPerPage: 20
      page: 1
      total: 42
    properties:
      artist:
        description: result list of artists
        items:
          $ref: "#/definitions/json_Artist"
        type: array
      itemsPerPage:
        description: the amount of items you get per page
        example: 20
        type: number
      page:
        description: the current page. starts at 1
        example: 1
        type: number
      total:
        description: the total amount of items matching the query
        example: 42
        type: number
    title: artists
    type: object
  json_Cities:
    description: A Result consisting of a list of cities.
    example:
      cities:
        - coords:
            lat: 34.0983425
            long: -118.3267434
          country:
            code: US
            name: United States
          id: "5357527"
          name: Hollywood
          state: California
          stateCode: CA
        - coords:
            lat: 12345
            long: 12345
          country:
            code: ...
            name: ...
          id: ...
          name: ...
          state: ...
          stateCode: ...
      itemsPerPage: 20
      page: 1
      total: 42
    properties:
      cities:
        description: result list of cities
        items:
          $ref: "#/definitions/json_City"
        type: array
      itemsPerPage:
        description: the amount of items you get per page
        example: 20
        type: number
      page:
        description: the current page. starts at 1
        example: 1
        type: number
      total:
        description: the total amount of items matching the query
        example: 42
        type: number
    title: cities
    type: object
  json_City:
    description: |-
      This class represents a city where Venues are located. Most of the original city data was taken from
      <a href="http://geonames.org/">Geonames.org</a>.
    example:
      coords:
        lat: 34.0983425
        long: -118.3267434
      country:
        code: US
        name: United States
      id: "5357527"
      name: Hollywood
      state: California
      stateCode: CA
    properties:
      coords:
        $ref: "#/definitions/json_Coords"
        description: The city's coordinates. Usually the coordinates of the city centre are used.
      country:
        $ref: "#/definitions/json_Country"
        description: The city's country.
      id:
        description: unique identifier
        example: "5357527"
        type: string
      name:
        description: |-
          the city's name, depending on the language valid values are e.g. <em>&quot;M&uuml;chen&quot;</em> or
          <em>Munich</em>
        example: Hollywood
        type: string
      state:
        description: The name of city's state, e.g. <em>&quot;Bavaria&quot;</em> or <em>&quot;Florida&quot;</em>
        example: California
        type: string
      stateCode:
        description: |-
          The code of the city's state. For most countries this is a two-digit numeric code, with which the state can be
          identified uniquely in the specific Country. The code can also be a String for other cities. Valid
          examples are <em>&quot;CA&quot;</em> or <em>&quot;02&quot;</em>

          which in turn get uniquely identifiable when combined with the state's country:

          <em>&quot;US.CA&quot;</em> for California, United States or <em>&quot;DE.02&quot;</em> for Bavaria, Germany

          For a complete list of available states (that aren't necessarily used in this database) is available in
          <a href= "http://download.geonames.org/export/dump/admin1CodesASCII.txt">a textfile on geonames.org</a>.

          Note that this code is only unique combined with the city's Country. The code alone is
          <strong>not</strong> unique.
        example: CA
        type: string
    title: city
    type: object
  json_Coords:
    description: Coordinates of a point on the globe. Mostly used for Cities.
    example:
      lat: 34.0983425
      long: -118.3267434
    properties:
      lat:
        description: The latitude part of the coordinates.
        example: 34.0983425
        type: number
      long:
        description: The longitude part of the coordinates.
        example: -118.3267434
        type: number
    title: coords
    type: object
  json_Countries:
    description: A Result consisting of a list of countries.
    example:
      country:
        - code: US
          name: United States
        - code: ...
          name: ...
      itemsPerPage: 20
      page: 1
      total: 42
    properties:
      country:
        description: result list of countries
        items:
          $ref: "#/definitions/json_Country"
        type: array
      itemsPerPage:
        description: the amount of items you get per page
        example: 20
        type: number
      page:
        description: the current page. starts at 1
        example: 1
        type: number
      total:
        description: the total amount of items matching the query
        example: 42
        type: number
    title: countries
    type: object
  json_Country:
    description: This class represents a country on earth.
    example:
      code: US
      name: United States
    properties:
      code:
        description: |-
          The country's <a href= "http://www.iso.org/iso/english_country_names_and_code_elements" >ISO code</a>. E.g.
          <em>&quot;ie&quot;</em> for Ireland
        example: US
        type: string
      name:
        description: |-
          The country's name. Can be a localized name - e.g. <em>&quot;Austria&quot;</em> or
          <em>&quot;&Ouml;sterreich&quot;</em> for Austria if the German name was requested.
        example: United States
        type: string
    title: country
    type: object
  json_Error:
    description: Returned in case of an error.
    example:
      code: 404
      message: unknown mbid
      status: Not Found
      timestamp: 2016-12-08T17:52:48.817+0000
    properties:
      code:
        description: the HTTP status code
        example: 404
        type: number
      message:
        description: an additional error message
        example: unknown mbid
        type: string
      status:
        description: the HTTP status message
        example: Not Found
        type: string
      timestamp:
        description: current timestamp
        example: 2016-12-08T17:52:48.817+0000
        type: string
    title: error
    type: object
  json_Set:
    description: |-
      A setlist consists of different (at least one) sets. Sets can either be sets as defined in the
      <a href="https://www.setlist.fm/guidelines">Guidelines</a> or encores.
    example:
      encore: 12345
      name: ...
      song:
        - cover:
            disambiguation: John, Paul, George and Ringo
            mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
            name: The Beatles
            sortName: Beatles, The
            tmid: 735610
            url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
          info: ...
          name: Yesterday
          tape: false
          with:
            disambiguation: John, Paul, George and Ringo
            mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
            name: The Beatles
            sortName: Beatles, The
            tmid: 735610
            url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
        - cover:
            disambiguation: ...
            mbid: ...
            name: ...
            sortName: ...
            tmid: 12345
            url: ...
          info: ...
          name: ...
          tape: true
          with:
            disambiguation: ...
            mbid: ...
            name: ...
            sortName: ...
            tmid: 12345
            url: ...
    properties:
      encore:
        description: |-
          if the set is an encore, this is the number of the encore, starting with 1 for the first encore, 2 for the second
          and so on.
        type: number
      name:
        description: |-
          the description/name of the set. E.g. <em>&quot;Acoustic set&quot;</em> or <em>&quot;Paul McCartney
          solo&quot;</em>
        type: string
      song:
        description: this set's songs
        items:
          $ref: "#/definitions/json_Song"
        type: array
    title: set
    type: object
  json_Setlist:
    description: |-
      Setlists, that's what it's all about. So if you're trying to use this API without knowing what a setlist is then
      you're kinda wrong on this page ;-).

      A setlist can be distinguished from other setlists by its unique id. But as
      <a href="https://www.setlist.fm/">setlist.fm</a> works the wiki way, there can be different versions of one setlist
      (each time a user updates a setlist a new version gets created). These different versions have a unique id on its
      own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to
      check if two setlists are the same is to compare their versionIds.
    example:
      artist:
        disambiguation: John, Paul, George and Ringo
        mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
        name: The Beatles
        sortName: Beatles, The
        tmid: 735610
        url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
      eventDate: 23-08-1964
      id: 63de4613
      info: Recorded and published as 'The Beatles at the Hollywood Bowl'
      lastUpdated: 2013-10-20T05:18:08.000+0000
      set:
        - encore: 12345
          name: ...
          song:
            - cover: {}
              info: ...
              name: Yesterday
              tape: false
              with: {}
            - cover: {}
              info: ...
              name: ...
              tape: true
              with: {}
        - encore: 12345
          name: ...
          song:
            - cover: {}
              info: ...
              name: ...
              tape: true
              with: {}
            - cover: {}
              info: ...
              name: ...
              tape: true
              with: {}
      tour:
        name: North American Tour 1964
      url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
      venue:
        city:
          coords: {}
          country: {}
          id: "5357527"
          name: Hollywood
          state: California
          stateCode: CA
        id: 6bd6ca6e
        name: Compaq Center
        url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
      versionId: 7be1aaa0
    properties:
      artist:
        $ref: "#/definitions/json_Artist"
        description: the setlist's artist
      eventDate:
        description: date of the concert in the format &quot;dd-MM-yyyy&quot;
        example: 23-08-1964
        type: string
      id:
        description: unique identifier
        example: 63de4613
        type: string
      info:
        description: |-
          additional information on the concert - see the <a href="https://www.setlist.fm/guidelines">setlist.fm
          guidelines</a> for a complete list of allowed content.
        example: Recorded and published as 'The Beatles at the Hollywood Bowl'
        type: string
      lastFmEventId:
        description: the id this event has on <a href="http://last.fm/">last.fm</a> (deprecated)
        example: 1164056
        type: number
      lastUpdated:
        description: |-
          date, time and time zone of the last update to this setlist in the format
          &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ&quot;
        example: 2013-10-20T05:18:08.000+0000
        type: string
      set:
        description: all sets of this setlist
        items:
          $ref: "#/definitions/json_Set"
        type: array
      tour:
        $ref: "#/definitions/json_Tour"
        description: the setlist's tour
      url:
        description: the attribution url to which you have to link to wherever you use data from this setlist in your application
        example: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
        type: string
      venue:
        $ref: "#/definitions/json_Venue"
        description: the setlist's venue
      versionId:
        description: unique identifier of the version
        example: 7be1aaa0
        type: string
    title: setlist
    type: object
  json_Setlists:
    description: A Result consisting of a list of setlists.
    example:
      itemsPerPage: 20
      page: 1
      setlist:
        - artist:
            disambiguation: John, Paul, George and Ringo
            mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
            name: The Beatles
            sortName: Beatles, The
            tmid: 735610
            url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
          eventDate: 23-08-1964
          id: 63de4613
          info: Recorded and published as 'The Beatles at the Hollywood Bowl'
          lastUpdated: 2013-10-20T05:18:08.000+0000
          set:
            - encore: 12345
              name: ...
              song:
                - {}
                - {}
            - encore: 12345
              name: ...
              song:
                - {}
                - {}
          tour:
            name: North American Tour 1964
          url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html
          venue:
            city: {}
            id: 6bd6ca6e
            name: Compaq Center
            url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
          versionId: 7be1aaa0
        - artist:
            disambiguation: ...
            mbid: ...
            name: ...
            sortName: ...
            tmid: 12345
            url: ...
          eventDate: ...
          id: ...
          info: ...
          lastUpdated: ...
          set:
            - encore: 12345
              name: ...
              song:
                - {}
                - {}
            - encore: 12345
              name: ...
              song:
                - {}
                - {}
          tour:
            name: ...
          url: ...
          venue:
            city: {}
            id: ...
            name: ...
            url: ...
          versionId: ...
      total: 42
    properties:
      itemsPerPage:
        description: the amount of items you get per page
        example: 20
        type: number
      page:
        description: the current page. starts at 1
        example: 1
        type: number
      setlist:
        description: result list of setlists
        items:
          $ref: "#/definitions/json_Setlist"
        type: array
      total:
        description: the total amount of items matching the query
        example: 42
        type: number
    title: setlists
    type: object
  json_Song:
    description: This class represents a song that is part of a Set.
    example:
      cover:
        disambiguation: John, Paul, George and Ringo
        mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
        name: The Beatles
        sortName: Beatles, The
        tmid: 735610
        url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
      info: ...
      name: Yesterday
      tape: false
      with:
        disambiguation: John, Paul, George and Ringo
        mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d
        name: The Beatles
        sortName: Beatles, The
        tmid: 735610
        url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html
    properties:
      cover:
        $ref: "#/definitions/json_Artist"
        description: The original Artist of this song, if different to the performing artist.
      info:
        description: |-
          Special incidents or additional information about the way the song was performed at this specific concert. See
          the <a href="https://www.setlist.fm/guidelines">setlist.fm guidelines</a> for a complete list of allowed content.
        type: string
      name:
        description: The name of the song. E.g. <em>Yesterday</em> or <em>&quot;Wish You Were Here&quot;</em>
        example: Yesterday
        type: string
      tape:
        description: |-
          The song came from tape rather than being performed live. See the
          <a href="https://www.setlist.fm/guidelines#tape-songs">tape section of the guidelines</a> for valid usage.
        example: false
        type: boolean
      with:
        $ref: "#/definitions/json_Artist"
        description: A different Artist than the performing one that joined the stage for this song.
    title: song
    type: object
  json_Tour:
    description: The tour a setlist was a part of.
    example:
      name: North American Tour 1964
    properties:
      name:
        description: The name of the tour.
        example: North American Tour 1964
        type: string
    title: tour
    type: object
  json_User:
    description: This class represents a user.
    example:
      about: ...
      flickr: ...
      fullname: ...
      lastFm: ...
      mySpace: ...
      twitter: ...
      url: ...
      userId: ...
      website: ...
    properties:
      about:
        description: ""
        type: string
      flickr:
        description: ""
        type: string
      fullname:
        description: ""
        type: string
      lastFm:
        description: ""
        type: string
      mySpace:
        description: ""
        type: string
      twitter:
        description: ""
        type: string
      url:
        description: ""
        type: string
      userId:
        description: ""
        type: string
      website:
        description: ""
        type: string
    title: user
    type: object
  json_Venue:
    description: |-
      Venues are places where concerts take place. They usually consist of a venue name and a city - but there are also
      some venues that do not have a city attached yet. In such a case, the city simply isn't set and the city and country
      may (but do not have to) be in the name.
    example:
      city:
        coords:
          lat: 34.0983425
          long: -118.3267434
        country:
          code: US
          name: United States
        id: "5357527"
        name: Hollywood
        state: California
        stateCode: CA
      id: 6bd6ca6e
      name: Compaq Center
      url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
    properties:
      city:
        $ref: "#/definitions/json_City"
        description: the city in which the venue is located
      id:
        description: unique identifier
        example: 6bd6ca6e
        type: string
      name:
        description: |-
          the name of the venue, usually without city and country. E.g. <em>&quot;Madison Square Garden&quot;</em> or
          <em>&quot;Royal Albert Hall&quot;</em>
        example: Compaq Center
        type: string
      url:
        description: the attribution url
        example: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
        type: string
    title: venue
    type: object
  json_Venues:
    description: A Result consisting of a list of venues.
    example:
      itemsPerPage: 20
      page: 1
      total: 42
      venue:
        - city:
            coords: {}
            country: {}
            id: "5357527"
            name: Hollywood
            state: California
            stateCode: CA
          id: 6bd6ca6e
          name: Compaq Center
          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html
        - city:
            coords: {}
            country: {}
            id: ...
            name: ...
            state: ...
            stateCode: ...
          id: ...
          name: ...
          url: ...
    properties:
      itemsPerPage:
        description: the amount of items you get per page
        example: 20
        type: number
      page:
        description: the current page. starts at 1
        example: 1
        type: number
      total:
        description: the total amount of items matching the query
        example: 42
        type: number
      venue:
        description: result list of venues
        items:
          $ref: "#/definitions/json_Venue"
        type: array
    title: venues
    type: object
  xml_ns0_artist:
    allOf:
      - properties:
          disambiguation:
            description: disambiguation to distinguish between artists with same names
            type: string
            xml:
              attribute: true
              namespace: ""
          mbid:
            description: unique Musicbrainz Identifier (MBID), e.g. <em>&quot;b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          name:
            description: the artist's name, e.g. <em>&quot;The Beatles&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          sortName:
            description: the artist's sort name, e.g. <em>&quot;Beatles, The&quot;</em> or <em>&quot;Springsteen, Bruce&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          tmid:
            description: unique Ticket Master Identifier (TMID), e.g. <em>735610</em>
            type: number
            xml:
              attribute: true
              namespace: ""
          url:
            description: the attribution url
            type: string
            xml:
              namespace: ""
    description: |-
      This class represents an artist. An artist is a musician or a group of musicians. Each artist has a definite
      <a href="http://wiki.musicbrainz.org/MBID">Musicbrainz Identifier</a> (MBID) with which the artist can be uniquely
      identified.
    required:
      - mbid
      - sortName
      - name
      - url
    title: artist
    type: object
  xml_ns0_artists:
    allOf:
      - $ref: "#/definitions/xml_ns0_result"
      - {}
    description: A Result consisting of a list of artists.
    title: artists
    type: object
  xml_ns0_cities:
    allOf:
      - $ref: "#/definitions/xml_ns0_result"
      - {}
    description: A Result consisting of a list of cities.
    title: cities
    type: object
  xml_ns0_city:
    allOf:
      - properties:
          coords:
            $ref: "#/definitions/xml_ns0_coords"
            description: The city's coordinates. Usually the coordinates of the city centre are used.
            xml:
              namespace: ""
          country:
            $ref: "#/definitions/xml_ns0_country"
            description: The city's country.
            xml:
              namespace: ""
          id:
            description: unique identifier
            type: string
            xml:
              attribute: true
              namespace: ""
          name:
            description: |-
              the city's name, depending on the language valid values are e.g. <em>&quot;M&uuml;chen&quot;</em> or
              <em>Munich</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          state:
            description: The name of city's state, e.g. <em>&quot;Bavaria&quot;</em> or <em>&quot;Florida&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          stateCode:
            description: |-
              The code of the city's state. For most countries this is a two-digit numeric code, with which the state can be
              identified uniquely in the specific Country. The code can also be a String for other cities. Valid
              examples are <em>&quot;CA&quot;</em> or <em>&quot;02&quot;</em>

              which in turn get uniquely identifiable when combined with the state's country:

              <em>&quot;US.CA&quot;</em> for California, United States or <em>&quot;DE.02&quot;</em> for Bavaria, Germany

              For a complete list of available states (that aren't necessarily used in this database) is available in
              <a href= "http://download.geonames.org/export/dump/admin1CodesASCII.txt">a textfile on geonames.org</a>.

              Note that this code is only unique combined with the city's Country. The code alone is
              <strong>not</strong> unique.
            type: string
            xml:
              attribute: true
              namespace: ""
    description: |-
      This class represents a city where Venues are located. Most of the original city data was taken from
      <a href="http://geonames.org/">Geonames.org</a>.
    required:
      - id
      - name
      - country
    title: city
    type: object
  xml_ns0_coords:
    allOf:
      - properties:
          lat:
            description: The latitude part of the coordinates.
            type: number
            xml:
              attribute: true
              namespace: ""
          long:
            description: The longitude part of the coordinates.
            type: number
            xml:
              attribute: true
              namespace: ""
    description: Coordinates of a point on the globe. Mostly used for Cities.
    required:
      - lat
      - long
    title: coords
    type: object
  xml_ns0_countries:
    allOf:
      - $ref: "#/definitions/xml_ns0_result"
      - {}
    description: A Result consisting of a list of countries.
    title: countries
    type: object
  xml_ns0_country:
    allOf:
      - properties:
          code:
            description: |-
              The country's <a href= "http://www.iso.org/iso/english_country_names_and_code_elements" >ISO code</a>. E.g.
              <em>&quot;ie&quot;</em> for Ireland
            type: string
            xml:
              attribute: true
              namespace: ""
          name:
            description: |-
              The country's name. Can be a localized name - e.g. <em>&quot;Austria&quot;</em> or
              <em>&quot;&Ouml;sterreich&quot;</em> for Austria if the German name was requested.
            type: string
            xml:
              attribute: true
              namespace: ""
    description: This class represents a country on earth.
    required:
      - code
      - name
    title: country
    type: object
  xml_ns0_error:
    allOf:
      - properties:
          code:
            description: the HTTP status code
            type: number
            xml:
              namespace: ""
          message:
            description: an additional error message
            type: string
            xml:
              namespace: ""
          status:
            description: the HTTP status message
            type: string
            xml:
              namespace: ""
          timestamp:
            description: current timestamp
            type: string
            xml:
              namespace: ""
    description: Returned in case of an error.
    required:
      - code
      - status
      - timestamp
    title: error
    type: object
  xml_ns0_result:
    allOf:
      - properties:
          itemsPerPage:
            description: the amount of items you get per page
            type: number
            xml:
              attribute: true
              namespace: ""
          page:
            description: the current page. starts at 1
            type: number
            xml:
              attribute: true
              namespace: ""
          total:
            description: the total amount of items matching the query
            type: number
            xml:
              attribute: true
              namespace: ""
    description: |-
      <p>
      If a request returns a list of items they're always wrapped into a Result. As there is a maximum amount of items to
      be returned at once a Result consists of the total amount of items (total), how many items per page you get
      (itemsPerPage), the current page (page) and the current list of items.
      </p>

      <p>
      E.g. if there are 35 items, itemsPerPage is 10 and the current page is 2, then items 11 to 20 are in the list.
      </p>
    required:
      - itemsPerPage
      - page
      - total
    title: result
    type: object
  xml_ns0_set:
    allOf:
      - properties:
          encore:
            description: |-
              if the set is an encore, this is the number of the encore, starting with 1 for the first encore, 2 for the second
              and so on.
            type: number
            xml:
              attribute: true
              namespace: ""
          name:
            description: |-
              the description/name of the set. E.g. <em>&quot;Acoustic set&quot;</em> or <em>&quot;Paul McCartney
              solo&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          song:
            $ref: "#/definitions/xml_ns0_song"
            description: this set's songs
            xml:
              namespace: ""
    description: |-
      A setlist consists of different (at least one) sets. Sets can either be sets as defined in the
      <a href="https://www.setlist.fm/guidelines">Guidelines</a> or encores.
    required:
      - song
    title: set
    type: object
  xml_ns0_setlist:
    allOf:
      - properties:
          artist:
            $ref: "#/definitions/xml_ns0_artist"
            description: the setlist's artist
            xml:
              namespace: ""
          eventDate:
            description: date of the concert in the format &quot;dd-MM-yyyy&quot;
            type: string
            xml:
              attribute: true
              namespace: ""
          id:
            description: unique identifier
            type: string
            xml:
              attribute: true
              namespace: ""
          info:
            description: |-
              additional information on the concert - see the <a href="https://www.setlist.fm/guidelines">setlist.fm
              guidelines</a> for a complete list of allowed content.
            type: string
            xml:
              namespace: ""
          lastFmEventId:
            description: the id this event has on <a href="http://last.fm/">last.fm</a> (deprecated)
            type: number
            xml:
              attribute: true
              namespace: ""
          lastUpdated:
            description: |-
              date, time and time zone of the last update to this setlist in the format
              &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ&quot;
            type: string
            xml:
              attribute: true
              namespace: ""
          set:
            $ref: "#/definitions/xml_ns0_set"
            description: all sets of this setlist
            xml:
              name: sets
              namespace: ""
              wrapped: true
          tour:
            $ref: "#/definitions/xml_ns0_tour"
            description: the setlist's tour
            xml:
              namespace: ""
          url:
            description: the attribution url to which you have to link to wherever you use data from this setlist in your application
            type: string
            xml:
              namespace: ""
          venue:
            $ref: "#/definitions/xml_ns0_venue"
            description: the setlist's venue
            xml:
              namespace: ""
          versionId:
            description: unique identifier of the version
            type: string
            xml:
              attribute: true
              namespace: ""
    description: |-
      Setlists, that's what it's all about. So if you're trying to use this API without knowing what a setlist is then
      you're kinda wrong on this page ;-).

      A setlist can be distinguished from other setlists by its unique id. But as
      <a href="https://www.setlist.fm/">setlist.fm</a> works the wiki way, there can be different versions of one setlist
      (each time a user updates a setlist a new version gets created). These different versions have a unique id on its
      own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to
      check if two setlists are the same is to compare their versionIds.
    required:
      - lastUpdated
      - versionId
      - id
      - eventDate
      - artist
      - venue
      - url
    title: setlist
    type: object
  xml_ns0_setlists:
    allOf:
      - $ref: "#/definitions/xml_ns0_result"
      - {}
    description: A Result consisting of a list of setlists.
    title: setlists
    type: object
  xml_ns0_song:
    allOf:
      - properties:
          cover:
            $ref: "#/definitions/xml_ns0_artist"
            description: The original Artist of this song, if different to the performing artist.
            xml:
              namespace: ""
          info:
            description: |-
              Special incidents or additional information about the way the song was performed at this specific concert. See
              the <a href="https://www.setlist.fm/guidelines">setlist.fm guidelines</a> for a complete list of allowed content.
            type: string
            xml:
              namespace: ""
          name:
            description: The name of the song. E.g. <em>Yesterday</em> or <em>&quot;Wish You Were Here&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          tape:
            description: |-
              The song came from tape rather than being performed live. See the
              <a href="https://www.setlist.fm/guidelines#tape-songs">tape section of the guidelines</a> for valid usage.
            type: boolean
            xml:
              attribute: true
              namespace: ""
          with:
            $ref: "#/definitions/xml_ns0_artist"
            description: A different Artist than the performing one that joined the stage for this song.
            xml:
              namespace: ""
    description: This class represents a song that is part of a Set.
    required:
      - name
    title: song
    type: object
  xml_ns0_tour:
    allOf:
      - properties:
          name:
            description: The name of the tour.
            type: string
            xml:
              attribute: true
              namespace: ""
    description: The tour a setlist was a part of.
    required:
      - name
    title: tour
    type: object
  xml_ns0_user:
    allOf:
      - properties:
          about:
            description: ""
            type: string
            xml:
              namespace: ""
          flickr:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          fullname:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          lastFm:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          mySpace:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          twitter:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          url:
            description: ""
            type: string
            xml:
              namespace: ""
          userId:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
          website:
            description: ""
            type: string
            xml:
              attribute: true
              namespace: ""
    description: This class represents a user.
    required:
      - userId
      - url
    title: user
    type: object
  xml_ns0_venue:
    allOf:
      - properties:
          city:
            $ref: "#/definitions/xml_ns0_city"
            description: the city in which the venue is located
            xml:
              namespace: ""
          id:
            description: unique identifier
            type: string
            xml:
              attribute: true
              namespace: ""
          name:
            description: |-
              the name of the venue, usually without city and country. E.g. <em>&quot;Madison Square Garden&quot;</em> or
              <em>&quot;Royal Albert Hall&quot;</em>
            type: string
            xml:
              attribute: true
              namespace: ""
          url:
            description: the attribution url
            type: string
            xml:
              namespace: ""
    description: |-
      Venues are places where concerts take place. They usually consist of a venue name and a city - but there are also
      some venues that do not have a city attached yet. In such a case, the city simply isn't set and the city and country
      may (but do not have to) be in the name.
    required:
      - id
    title: venue
    type: object
  xml_ns0_venues:
    allOf:
      - $ref: "#/definitions/xml_ns0_result"
      - {}
    description: A Result consisting of a list of venues.
    title: venues
    type: object
