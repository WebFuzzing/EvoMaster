openapi: 3.0.0
info:
  version: '2017-11-27'
  x-release: v4
  title: AmazonMQ
  description: 'Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: mq
  x-aws-signingName: mq
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mq-2017-11-27.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/mq/'
servers:
  - url: 'http://mq.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AmazonMQ multi-region endpoint
  - url: 'https://mq.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AmazonMQ multi-region endpoint
  - url: 'http://mq.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://mq.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /v1/brokers:
    post:
      operationId: CreateBroker
      description: '<p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user">Create an IAM User and Get Your AWS Credentials</a> and <a href="https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBrokerResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - autoMinorVersionUpgrade
                - brokerName
                - deploymentMode
                - engineType
                - engineVersion
                - hostInstanceType
                - publiclyAccessible
                - users
              properties:
                authenticationStrategy:
                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
                  type: string
                  enum:
                    - SIMPLE
                    - LDAP
                autoMinorVersionUpgrade:
                  description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.'
                  type: boolean
                brokerName:
                  description: 'Required. The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'
                  type: string
                configuration:
                  description: <p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
                  type: object
                  properties:
                    Id:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: id
                          description: Required. The unique ID that Amazon MQ generates for the configuration.
                    Revision:
                      allOf:
                        - $ref: '#/components/schemas/__integer'
                        - xml:
                            name: revision
                          description: The revision number of the configuration.
                creatorRequestId:
                  description: 'The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn''t require idempotency.'
                  type: string
                deploymentMode:
                  description: The broker's deployment mode.
                  type: string
                  enum:
                    - SINGLE_INSTANCE
                    - ACTIVE_STANDBY_MULTI_AZ
                    - CLUSTER_MULTI_AZ
                encryptionOptions:
                  description: <important><p>Does not apply to RabbitMQ brokers.</p></important> <p>Encryption options for the broker.</p>
                  type: object
                  properties:
                    KmsKeyId:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: kmsKeyId
                          description: 'The customer master key (CMK) to use for the AWS Key Management Service (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.'
                    UseAwsOwnedKey:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: useAwsOwnedKey
                          description: 'Enables the use of an AWS owned CMK using AWS Key Management Service (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.'
                engineType:
                  description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
                  type: string
                  enum:
                    - ACTIVEMQ
                    - RABBITMQ
                engineVersion:
                  description: 'Required. The broker engine''s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
                  type: string
                hostInstanceType:
                  description: Required. The broker's instance type.
                  type: string
                ldapServerMetadata:
                  description: <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
                  type: object
                  properties:
                    Hosts:
                      allOf:
                        - $ref: '#/components/schemas/__listOf__string'
                        - xml:
                            name: hosts
                          description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
                    RoleBase:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleBase
                          description: |-
                            The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                              dc=example, dc=com.
                    RoleName:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleName
                          description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
                    RoleSearchMatching:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleSearchMatching
                          description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'
                    RoleSearchSubtree:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: roleSearchSubtree
                          description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'
                    ServiceAccountPassword:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: serviceAccountPassword
                          description: |-
                            Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                              dc=com.
                    ServiceAccountUsername:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: serviceAccountUsername
                          description: |-
                            Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                              dc=com.
                    UserBase:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userBase
                          description: |-
                            Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                              dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
                    UserRoleName:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userRoleName
                          description: Specifies the name of the LDAP attribute for the user group membership.
                    UserSearchMatching:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userSearchMatching
                          description: |-
                            The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                                              dc=com.
                    UserSearchSubtree:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: userSearchSubtree
                          description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'
                logs:
                  description: The list of information about logs to be enabled for the specified broker.
                  type: object
                  properties:
                    Audit:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: audit
                          description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
                    General:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: general
                          description: Enables general logging.
                maintenanceWindowStartTime:
                  description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
                  type: object
                  properties:
                    DayOfWeek:
                      allOf:
                        - $ref: '#/components/schemas/DayOfWeek'
                        - xml:
                            name: dayOfWeek
                          description: Required. The day of the week.
                    TimeOfDay:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: timeOfDay
                          description: 'Required. The time, in 24-hour format.'
                    TimeZone:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: timeZone
                          description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'
                publiclyAccessible:
                  description: 'Enables connections from applications outside of the VPC that hosts the broker''s subnets. Set to false by default, if no value is provided.'
                  type: boolean
                securityGroups:
                  description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                storageType:
                  description: <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>
                  type: string
                  enum:
                    - EBS
                    - EFS
                subnetIds:
                  description: '<p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.</p></important>'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                tags:
                  description: Create tags when creating the broker.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/__string'
                users:
                  description: '<p>Required. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p> <important><title>Amazon MQ for RabbitMQ</title> <p>When you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p></important>'
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListBrokers
      description: Returns a list of all brokers.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBrokersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /v1/configurations:
    post:
      operationId: CreateConfiguration
      description: Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConfigurationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - engineType
                - engineVersion
                - name
              properties:
                authenticationStrategy:
                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
                  type: string
                  enum:
                    - SIMPLE
                    - LDAP
                engineType:
                  description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
                  type: string
                  enum:
                    - ACTIVEMQ
                    - RABBITMQ
                engineVersion:
                  description: 'Required. The broker engine''s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
                  type: string
                name:
                  description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
                  type: string
                tags:
                  description: Create tags when creating the configuration.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/__string'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListConfigurations
      description: Returns a list of all configurations.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigurationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
  '/v1/tags/{resource-arn}':
    post:
      operationId: CreateTags
      description: Add a tag to a resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource tag.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: The key-value pair for the resource tag.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/__string'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListTags
      description: Lists tags for a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource tag.
          schema:
            type: string
  '/v1/brokers/{broker-id}/users/{username}':
    post:
      operationId: CreateUser
      description: Creates an ActiveMQ user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
        - name: username
          in: path
          required: true
          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                consoleAccess:
                  description: Enables access to the ActiveMQ Web Console for the ActiveMQ user.
                  type: boolean
                groups:
                  description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                password:
                  description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteUser
      description: Deletes an ActiveMQ user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
        - name: username
          in: path
          required: true
          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
          schema:
            type: string
    get:
      operationId: DescribeUser
      description: Returns information about an ActiveMQ user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
        - name: username
          in: path
          required: true
          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
          schema:
            type: string
    put:
      operationId: UpdateUser
      description: Updates the information for an ActiveMQ user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
        - name: username
          in: path
          required: true
          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consoleAccess:
                  description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
                  type: boolean
                groups:
                  description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                password:
                  description: 'The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'
                  type: string
  '/v1/brokers/{broker-id}':
    delete:
      operationId: DeleteBroker
      description: 'Deletes a broker. Note: This API is asynchronous.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBrokerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeBroker
      description: Returns information about the specified broker.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
    put:
      operationId: UpdateBroker
      description: Adds a pending configuration change to a broker.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBrokerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authenticationStrategy:
                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
                  type: string
                  enum:
                    - SIMPLE
                    - LDAP
                autoMinorVersionUpgrade:
                  description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'
                  type: boolean
                configuration:
                  description: <p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
                  type: object
                  properties:
                    Id:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: id
                          description: Required. The unique ID that Amazon MQ generates for the configuration.
                    Revision:
                      allOf:
                        - $ref: '#/components/schemas/__integer'
                        - xml:
                            name: revision
                          description: The revision number of the configuration.
                engineVersion:
                  description: 'The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
                  type: string
                hostInstanceType:
                  description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.'
                  type: string
                ldapServerMetadata:
                  description: <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
                  type: object
                  properties:
                    Hosts:
                      allOf:
                        - $ref: '#/components/schemas/__listOf__string'
                        - xml:
                            name: hosts
                          description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
                    RoleBase:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleBase
                          description: |-
                            The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                              dc=example, dc=com.
                    RoleName:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleName
                          description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
                    RoleSearchMatching:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: roleSearchMatching
                          description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'
                    RoleSearchSubtree:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: roleSearchSubtree
                          description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'
                    ServiceAccountPassword:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: serviceAccountPassword
                          description: |-
                            Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                              dc=com.
                    ServiceAccountUsername:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: serviceAccountUsername
                          description: |-
                            Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                              dc=com.
                    UserBase:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userBase
                          description: |-
                            Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                              dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
                    UserRoleName:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userRoleName
                          description: Specifies the name of the LDAP attribute for the user group membership.
                    UserSearchMatching:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: userSearchMatching
                          description: |-
                            The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                                              dc=com.
                    UserSearchSubtree:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: userSearchSubtree
                          description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'
                logs:
                  description: The list of information about logs to be enabled for the specified broker.
                  type: object
                  properties:
                    Audit:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: audit
                          description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
                    General:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: general
                          description: Enables general logging.
                maintenanceWindowStartTime:
                  description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
                  type: object
                  properties:
                    DayOfWeek:
                      allOf:
                        - $ref: '#/components/schemas/DayOfWeek'
                        - xml:
                            name: dayOfWeek
                          description: Required. The day of the week.
                    TimeOfDay:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: timeOfDay
                          description: 'Required. The time, in 24-hour format.'
                    TimeZone:
                      allOf:
                        - $ref: '#/components/schemas/__string'
                        - xml:
                            name: timeZone
                          description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'
                securityGroups:
                  description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
  '/v1/tags/{resource-arn}#tagKeys':
    delete:
      operationId: DeleteTags
      description: Removes a tag from a resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource tag.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: An array of tag keys to delete
          schema:
            type: array
            items:
              $ref: '#/components/schemas/__string'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/broker-engine-types:
    get:
      operationId: DescribeBrokerEngineTypes
      description: Describe available engine types and versions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerEngineTypesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: engineType
          in: query
          required: false
          description: Filter response by engine type.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/broker-instance-options:
    get:
      operationId: DescribeBrokerInstanceOptions
      description: Describe available broker instance options.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerInstanceOptionsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: engineType
          in: query
          required: false
          description: Filter response by engine type.
          schema:
            type: string
        - name: hostInstanceType
          in: query
          required: false
          description: Filter response by host instance type.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
        - name: storageType
          in: query
          required: false
          description: Filter response by storage type.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v1/configurations/{configuration-id}':
    get:
      operationId: DescribeConfiguration
      description: Returns information about the specified configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeConfigurationResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: configuration-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the configuration.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateConfiguration
      description: Updates the specified configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConfigurationResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: configuration-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the configuration.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  description: Required. The base64-encoded XML configuration.
                  type: string
                description:
                  description: The description of the configuration.
                  type: string
  '/v1/configurations/{configuration-id}/revisions/{configuration-revision}':
    get:
      operationId: DescribeConfigurationRevision
      description: Returns the specified configuration revision for the specified configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeConfigurationRevisionResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: configuration-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the configuration.
          schema:
            type: string
        - name: configuration-revision
          in: path
          required: true
          description: The revision of the configuration.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v1/configurations/{configuration-id}/revisions':
    get:
      operationId: ListConfigurationRevisions
      description: Returns a list of all revisions for the specified configuration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigurationRevisionsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: configuration-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the configuration.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v1/brokers/{broker-id}/users':
    get:
      operationId: ListUsers
      description: Returns a list of all ActiveMQ users.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v1/brokers/{broker-id}/reboot':
    post:
      operationId: RebootBroker
      description: 'Reboots a broker. Note: This API is asynchronous.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebootBrokerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
      parameters:
        - name: broker-id
          in: path
          required: true
          description: The unique ID that Amazon MQ generates for the broker.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateBrokerResponse:
      type: object
      properties:
        BrokerArn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerArn
              description: The broker's Amazon Resource Name (ARN).
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: The unique ID that Amazon MQ generates for the broker.
    __string:
      type: string
    __integer:
      type: integer
    __boolean:
      type: boolean
    __listOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    DayOfWeek:
      type: string
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY
    User:
      type: object
      required:
        - Username
        - Password
      properties:
        ConsoleAccess:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: consoleAccess
              description: Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
        Groups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: groups
              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.'
        Password:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: password
              description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'
        Username:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: username
              description: '<p>important><title>Amazon MQ for ActiveMQ</title> <para>For ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>/important> <important><title>Amazon MQ for RabbitMQ</title> <p>For RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.</p></important></para>'
      description: 'A user associated with the broker. For RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.'
    BadRequestException: {}
    UnauthorizedException: {}
    InternalServerErrorException: {}
    ConflictException: {}
    ForbiddenException: {}
    CreateConfigurationResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: arn
              description: Required. The Amazon Resource Name (ARN) of the configuration.
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration.
        Id:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: id
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        LatestRevision:
          allOf:
            - $ref: '#/components/schemas/ConfigurationRevision'
            - xml:
                name: latestRevision
              description: The latest revision of the configuration.
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
    NotFoundException: {}
    CreateUserResponse:
      type: object
      properties: {}
    DeleteBrokerResponse:
      type: object
      properties:
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: The unique ID that Amazon MQ generates for the broker.
    DeleteUserResponse:
      type: object
      properties: {}
    DescribeBrokerResponse:
      type: object
      properties:
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: The authentication strategy used to secure the broker. The default is SIMPLE.
        AutoMinorVersionUpgrade:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoMinorVersionUpgrade
              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'
        BrokerArn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerArn
              description: The broker's Amazon Resource Name (ARN).
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: The unique ID that Amazon MQ generates for the broker.
        BrokerInstances:
          allOf:
            - $ref: '#/components/schemas/__listOfBrokerInstance'
            - xml:
                name: brokerInstances
              description: A list of information about allocated brokers.
        BrokerName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerName
              description: 'The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'
        BrokerState:
          allOf:
            - $ref: '#/components/schemas/BrokerState'
            - xml:
                name: brokerState
              description: The broker's status.
        Configurations:
          allOf:
            - $ref: '#/components/schemas/Configurations'
            - xml:
                name: configurations
              description: The list of all revisions for the specified configuration.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: The time when the broker was created.
        DeploymentMode:
          allOf:
            - $ref: '#/components/schemas/DeploymentMode'
            - xml:
                name: deploymentMode
              description: The broker's deployment mode.
        EncryptionOptions:
          allOf:
            - $ref: '#/components/schemas/EncryptionOptions'
            - xml:
                name: encryptionOptions
              description: Encryption options for the broker. Does not apply to RabbitMQ brokers.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: 'The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'The broker engine''s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: The broker's instance type.
        LdapServerMetadata:
          allOf:
            - $ref: '#/components/schemas/LdapServerMetadataOutput'
            - xml:
                name: ldapServerMetadata
              description: The metadata of the LDAP server used to authenticate and authorize connections to the broker.
        Logs:
          allOf:
            - $ref: '#/components/schemas/LogsSummary'
            - xml:
                name: logs
              description: The list of information about logs currently enabled and pending to be deployed for the specified broker.
        MaintenanceWindowStartTime:
          allOf:
            - $ref: '#/components/schemas/WeeklyStartTime'
            - xml:
                name: maintenanceWindowStartTime
              description: The parameters that determine the WeeklyStartTime.
        PendingAuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: pendingAuthenticationStrategy
              description: The authentication strategy that will be applied when the broker is rebooted. The default is SIMPLE.
        PendingEngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: pendingEngineVersion
              description: 'The broker engine version to upgrade to. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        PendingHostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: pendingHostInstanceType
              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.'
        PendingLdapServerMetadata:
          allOf:
            - $ref: '#/components/schemas/LdapServerMetadataOutput'
            - xml:
                name: pendingLdapServerMetadata
              description: The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker after it is rebooted.
        PendingSecurityGroups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: pendingSecurityGroups
              description: The list of pending security groups to authorize connections to brokers.
        PubliclyAccessible:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: publiclyAccessible
              description: Enables connections from applications outside of the VPC that hosts the broker's subnets.
        SecurityGroups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: securityGroups
              description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'
        StorageType:
          allOf:
            - $ref: '#/components/schemas/BrokerStorageType'
            - xml:
                name: storageType
              description: The broker's storage type.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: subnetIds
              description: The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones.
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: The list of all tags associated with this broker.
        Users:
          allOf:
            - $ref: '#/components/schemas/__listOfUserSummary'
            - xml:
                name: users
              description: The list of all broker usernames for the specified broker.
    DescribeBrokerEngineTypesResponse:
      type: object
      properties:
        BrokerEngineTypes:
          allOf:
            - $ref: '#/components/schemas/__listOfBrokerEngineType'
            - xml:
                name: brokerEngineTypes
              description: List of available engine types and versions.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/__integerMin5Max100'
            - xml:
                name: maxResults
              description: Required. The maximum number of engine types that can be returned per page (20 by default). This value must be an integer from 5 to 100.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
    DescribeBrokerInstanceOptionsResponse:
      type: object
      properties:
        BrokerInstanceOptions:
          allOf:
            - $ref: '#/components/schemas/__listOfBrokerInstanceOption'
            - xml:
                name: brokerInstanceOptions
              description: List of available broker instance options.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/__integerMin5Max100'
            - xml:
                name: maxResults
              description: Required. The maximum number of instance options that can be returned per page (20 by default). This value must be an integer from 5 to 100.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
    DescribeConfigurationResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: arn
              description: Required. The ARN of the configuration.
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration revision.
        Description:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: description
              description: Required. The description of the configuration.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'Required. The broker engine''s version. For a list of supported engine versions, see, <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        Id:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: id
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        LatestRevision:
          allOf:
            - $ref: '#/components/schemas/ConfigurationRevision'
            - xml:
                name: latestRevision
              description: Required. The latest revision of the configuration.
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: The list of all tags associated with this configuration.
    DescribeConfigurationRevisionResponse:
      type: object
      properties:
        ConfigurationId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: configurationId
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration.
        Data:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: data
              description: Required. The base64-encoded XML configuration.
        Description:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: description
              description: The description of the configuration.
    DescribeUserResponse:
      type: object
      properties:
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: Required. The unique ID that Amazon MQ generates for the broker.
        ConsoleAccess:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: consoleAccess
              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
        Groups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: groups
              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
        Pending:
          allOf:
            - $ref: '#/components/schemas/UserPendingChanges'
            - xml:
                name: pending
              description: The status of the changes pending for the ActiveMQ user.
        Username:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: username
              description: 'Required. The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
    ListBrokersResponse:
      type: object
      properties:
        BrokerSummaries:
          allOf:
            - $ref: '#/components/schemas/__listOfBrokerSummary'
            - xml:
                name: brokerSummaries
              description: A list of information about all brokers.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
    ListConfigurationRevisionsResponse:
      type: object
      properties:
        ConfigurationId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: configurationId
              description: The unique ID that Amazon MQ generates for the configuration.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/__integer'
            - xml:
                name: maxResults
              description: The maximum number of configuration revisions that can be returned per page (20 by default). This value must be an integer from 5 to 100.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
        Revisions:
          allOf:
            - $ref: '#/components/schemas/__listOfConfigurationRevision'
            - xml:
                name: revisions
              description: The list of all revisions for the specified configuration.
    ListConfigurationsResponse:
      type: object
      properties:
        Configurations:
          allOf:
            - $ref: '#/components/schemas/__listOfConfiguration'
            - xml:
                name: configurations
              description: The list of all revisions for the specified configuration.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/__integer'
            - xml:
                name: maxResults
              description: The maximum number of configurations that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
    ListTagsResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: The key-value pair for the resource tag.
    ListUsersResponse:
      type: object
      properties:
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: Required. The unique ID that Amazon MQ generates for the broker.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/__integerMin5Max100'
            - xml:
                name: maxResults
              description: Required. The maximum number of ActiveMQ users that can be returned per page (20 by default). This value must be an integer from 5 to 100.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: nextToken
              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'
        Users:
          allOf:
            - $ref: '#/components/schemas/__listOfUserSummary'
            - xml:
                name: users
              description: Required. The list of all ActiveMQ usernames for the specified broker. Does not apply to RabbitMQ brokers.
    RebootBrokerResponse:
      type: object
      properties: {}
    UpdateBrokerResponse:
      type: object
      properties:
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
        AutoMinorVersionUpgrade:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoMinorVersionUpgrade
              description: The new boolean value that specifies whether broker engines automatically upgrade to new minor versions as new versions are released and supported by Amazon MQ.
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: Required. The unique ID that Amazon MQ generates for the broker.
        Configuration:
          allOf:
            - $ref: '#/components/schemas/ConfigurationId'
            - xml:
                name: configuration
              description: The ID of the updated configuration.
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'The broker engine version to upgrade to. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.'
        LdapServerMetadata:
          allOf:
            - $ref: '#/components/schemas/LdapServerMetadataOutput'
            - xml:
                name: ldapServerMetadata
              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        Logs:
          allOf:
            - $ref: '#/components/schemas/Logs'
            - xml:
                name: logs
              description: The list of information about logs to be enabled for the specified broker.
        MaintenanceWindowStartTime:
          allOf:
            - $ref: '#/components/schemas/WeeklyStartTime'
            - xml:
                name: maintenanceWindowStartTime
              description: The parameters that determine the WeeklyStartTime.
        SecurityGroups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: securityGroups
              description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'
    UpdateConfigurationResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: arn
              description: Required. The Amazon Resource Name (ARN) of the configuration.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration.
        Id:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: id
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        LatestRevision:
          allOf:
            - $ref: '#/components/schemas/ConfigurationRevision'
            - xml:
                name: latestRevision
              description: The latest revision of the configuration.
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOfSanitizationWarning'
            - xml:
                name: warnings
              description: The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.
    UpdateUserResponse:
      type: object
      properties: {}
    AuthenticationStrategy:
      type: string
      enum:
        - SIMPLE
        - LDAP
      description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
    AvailabilityZone:
      type: object
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: Id for the availability zone.
      description: Name of the availability zone.
    EngineType:
      type: string
      enum:
        - ACTIVEMQ
        - RABBITMQ
      description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
    __listOfEngineVersion:
      type: array
      items:
        $ref: '#/components/schemas/EngineVersion'
    BrokerEngineType:
      type: object
      properties:
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: The broker's engine type.
        EngineVersions:
          allOf:
            - $ref: '#/components/schemas/__listOfEngineVersion'
            - xml:
                name: engineVersions
              description: The list of engine versions.
      description: Types of broker engines.
    BrokerInstance:
      type: object
      properties:
        ConsoleURL:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: consoleURL
              description: The brokers web console URL.
        Endpoints:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: endpoints
              description: The broker's wire-level protocol endpoints.
        IpAddress:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: ipAddress
              description: The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.
      description: Returns information about all brokers.
    __listOfAvailabilityZone:
      type: array
      items:
        $ref: '#/components/schemas/AvailabilityZone'
    BrokerStorageType:
      type: string
      enum:
        - EBS
        - EFS
      description: <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>
    __listOfDeploymentMode:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentMode'
    BrokerInstanceOption:
      type: object
      properties:
        AvailabilityZones:
          allOf:
            - $ref: '#/components/schemas/__listOfAvailabilityZone'
            - xml:
                name: availabilityZones
              description: The list of available az.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: The broker's engine type.
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: The broker's instance type.
        StorageType:
          allOf:
            - $ref: '#/components/schemas/BrokerStorageType'
            - xml:
                name: storageType
              description: The broker's storage type.
        SupportedDeploymentModes:
          allOf:
            - $ref: '#/components/schemas/__listOfDeploymentMode'
            - xml:
                name: supportedDeploymentModes
              description: The list of supported deployment modes.
        SupportedEngineVersions:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: supportedEngineVersions
              description: The list of supported engine versions.
      description: Option for host instance type.
    BrokerState:
      type: string
      enum:
        - CREATION_IN_PROGRESS
        - CREATION_FAILED
        - DELETION_IN_PROGRESS
        - RUNNING
        - REBOOT_IN_PROGRESS
      description: The broker's status.
    __timestampIso8601:
      type: string
      format: date-time
    DeploymentMode:
      type: string
      enum:
        - SINGLE_INSTANCE
        - ACTIVE_STANDBY_MULTI_AZ
        - CLUSTER_MULTI_AZ
      description: The broker's deployment mode.
    BrokerSummary:
      type: object
      required:
        - DeploymentMode
        - EngineType
      properties:
        BrokerArn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerArn
              description: The broker's Amazon Resource Name (ARN).
        BrokerId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerId
              description: The unique ID that Amazon MQ generates for the broker.
        BrokerName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerName
              description: 'The broker''s name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'
        BrokerState:
          allOf:
            - $ref: '#/components/schemas/BrokerState'
            - xml:
                name: brokerState
              description: The broker's status.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: The time when the broker was created.
        DeploymentMode:
          allOf:
            - $ref: '#/components/schemas/DeploymentMode'
            - xml:
                name: deploymentMode
              description: The broker's deployment mode.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: The type of broker engine.
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: The broker's instance type.
      description: Returns information about all brokers.
    ChangeType:
      type: string
      enum:
        - CREATE
        - UPDATE
        - DELETE
      description: The type of change pending for the ActiveMQ user.
    ConfigurationRevision:
      type: object
      required:
        - Revision
        - Created
      properties:
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration revision.
        Description:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: description
              description: The description of the configuration revision.
        Revision:
          allOf:
            - $ref: '#/components/schemas/__integer'
            - xml:
                name: revision
              description: Required. The revision number of the configuration.
      description: Returns information about the specified configuration revision.
    __mapOf__string:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/__string'
    Configuration:
      type: object
      required:
        - Description
        - EngineVersion
        - LatestRevision
        - AuthenticationStrategy
        - EngineType
        - Id
        - Arn
        - Name
        - Created
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: arn
              description: Required. The ARN of the configuration.
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.
        Created:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: created
              description: Required. The date and time of the configuration revision.
        Description:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: description
              description: Required. The description of the configuration.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'Required. The broker engine''s version. For a list of supported engine versions, see, <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        Id:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: id
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        LatestRevision:
          allOf:
            - $ref: '#/components/schemas/ConfigurationRevision'
            - xml:
                name: latestRevision
              description: Required. The latest revision of the configuration.
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: The list of all tags associated with this configuration.
      description: Returns information about all configurations.
    ConfigurationId:
      type: object
      required:
        - Id
      properties:
        Id:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: id
              description: Required. The unique ID that Amazon MQ generates for the configuration.
        Revision:
          allOf:
            - $ref: '#/components/schemas/__integer'
            - xml:
                name: revision
              description: The revision number of the configuration.
      description: <p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
    __listOfConfigurationId:
      type: array
      items:
        $ref: '#/components/schemas/ConfigurationId'
    Configurations:
      type: object
      properties:
        Current:
          allOf:
            - $ref: '#/components/schemas/ConfigurationId'
            - xml:
                name: current
              description: The broker's current configuration.
        History:
          allOf:
            - $ref: '#/components/schemas/__listOfConfigurationId'
            - xml:
                name: history
              description: The history of configurations applied to the broker.
        Pending:
          allOf:
            - $ref: '#/components/schemas/ConfigurationId'
            - xml:
                name: pending
              description: The broker's pending configuration.
      description: Broker configuration information
    EncryptionOptions:
      type: object
      required:
        - UseAwsOwnedKey
      properties:
        KmsKeyId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: kmsKeyId
              description: 'The customer master key (CMK) to use for the AWS Key Management Service (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.'
        UseAwsOwnedKey:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: useAwsOwnedKey
              description: 'Enables the use of an AWS owned CMK using AWS Key Management Service (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.'
      description: <important><p>Does not apply to RabbitMQ brokers.</p></important> <p>Encryption options for the broker.</p>
    LdapServerMetadataInput:
      type: object
      required:
        - Hosts
        - UserSearchMatching
        - UserBase
        - RoleSearchMatching
        - ServiceAccountUsername
        - RoleBase
        - ServiceAccountPassword
      properties:
        Hosts:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: hosts
              description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
        RoleBase:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleBase
              description: |-
                The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                  dc=example, dc=com.
        RoleName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleName
              description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
        RoleSearchMatching:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleSearchMatching
              description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'
        RoleSearchSubtree:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: roleSearchSubtree
              description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'
        ServiceAccountPassword:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: serviceAccountPassword
              description: |-
                Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                  dc=com.
        ServiceAccountUsername:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: serviceAccountUsername
              description: |-
                Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                  dc=com.
        UserBase:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userBase
              description: |-
                Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                  dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
        UserRoleName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userRoleName
              description: Specifies the name of the LDAP attribute for the user group membership.
        UserSearchMatching:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userSearchMatching
              description: |-
                The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                                  dc=com.
        UserSearchSubtree:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: userSearchSubtree
              description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'
      description: <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
    Logs:
      type: object
      properties:
        Audit:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: audit
              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
        General:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: general
              description: Enables general logging.
      description: The list of information about logs to be enabled for the specified broker.
    WeeklyStartTime:
      type: object
      required:
        - TimeOfDay
        - DayOfWeek
      properties:
        DayOfWeek:
          allOf:
            - $ref: '#/components/schemas/DayOfWeek'
            - xml:
                name: dayOfWeek
              description: Required. The day of the week.
        TimeOfDay:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: timeOfDay
              description: 'Required. The time, in 24-hour format.'
        TimeZone:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: timeZone
              description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'
      description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
    __listOfUser:
      type: array
      items:
        $ref: '#/components/schemas/User'
    CreateBrokerRequest:
      type: object
      required:
        - EngineVersion
        - HostInstanceType
        - AutoMinorVersionUpgrade
        - Users
        - BrokerName
        - DeploymentMode
        - EngineType
        - PubliclyAccessible
      title: CreateBrokerRequest
      properties:
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
        AutoMinorVersionUpgrade:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoMinorVersionUpgrade
              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.'
        BrokerName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: brokerName
              description: 'Required. The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'
        Configuration:
          allOf:
            - $ref: '#/components/schemas/ConfigurationId'
            - xml:
                name: configuration
              description: A list of information about the configuration.
        CreatorRequestId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: creatorRequestId
              description: 'The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn''t require idempotency.'
        DeploymentMode:
          allOf:
            - $ref: '#/components/schemas/DeploymentMode'
            - xml:
                name: deploymentMode
              description: Required. The broker's deployment mode.
        EncryptionOptions:
          allOf:
            - $ref: '#/components/schemas/EncryptionOptions'
            - xml:
                name: encryptionOptions
              description: Encryption options for the broker. Does not apply to RabbitMQ brokers.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'Required. The broker engine''s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: Required. The broker's instance type.
        LdapServerMetadata:
          allOf:
            - $ref: '#/components/schemas/LdapServerMetadataInput'
            - xml:
                name: ldapServerMetadata
              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        Logs:
          allOf:
            - $ref: '#/components/schemas/Logs'
            - xml:
                name: logs
              description: Enables Amazon CloudWatch logging for brokers.
        MaintenanceWindowStartTime:
          allOf:
            - $ref: '#/components/schemas/WeeklyStartTime'
            - xml:
                name: maintenanceWindowStartTime
              description: The parameters that determine the WeeklyStartTime.
        PubliclyAccessible:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: publiclyAccessible
              description: 'Enables connections from applications outside of the VPC that hosts the broker''s subnets. Set to false by default, if no value is provided.'
        SecurityGroups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: securityGroups
              description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'
        StorageType:
          allOf:
            - $ref: '#/components/schemas/BrokerStorageType'
            - xml:
                name: storageType
              description: The broker's storage type.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: subnetIds
              description: '<p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.</p></important>'
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: Create tags when creating the broker.
        Users:
          allOf:
            - $ref: '#/components/schemas/__listOfUser'
            - xml:
                name: users
              description: '<p>Required. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p> <important><title>Amazon MQ for RabbitMQ</title> <p>When you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p></important>'
      description: Creates a broker using the specified properties.
    CreateConfigurationRequest:
      type: object
      required:
        - EngineVersion
        - EngineType
        - Name
      title: CreateConfigurationRequest
      properties:
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.
        EngineType:
          allOf:
            - $ref: '#/components/schemas/EngineType'
            - xml:
                name: engineType
              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'Required. The broker engine''s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: Create tags when creating the configuration.
      description: Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
    CreateTagsRequest:
      type: object
      title: CreateTagsRequest
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/__mapOf__string'
            - xml:
                name: tags
              description: The key-value pair for the resource tag.
      description: A map of the key-value pairs for the resource tag.
    CreateUserRequest:
      type: object
      required:
        - Password
      title: CreateUserRequest
      properties:
        ConsoleAccess:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: consoleAccess
              description: Enables access to the ActiveMQ Web Console for the ActiveMQ user.
        Groups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: groups
              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
        Password:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: password
              description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'
      description: Creates a new ActiveMQ user.
    DeleteBrokerRequest:
      type: object
      title: DeleteBrokerRequest
      properties: {}
    DeleteTagsRequest:
      type: object
      title: DeleteTagsRequest
      properties: {}
    DeleteUserRequest:
      type: object
      title: DeleteUserRequest
      properties: {}
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    DescribeBrokerEngineTypesRequest:
      type: object
      title: DescribeBrokerEngineTypesRequest
      properties: {}
    __listOfBrokerEngineType:
      type: array
      items:
        $ref: '#/components/schemas/BrokerEngineType'
    __integerMin5Max100:
      type: integer
      minimum: 5
      maximum: 100
    DescribeBrokerInstanceOptionsRequest:
      type: object
      title: DescribeBrokerInstanceOptionsRequest
      properties: {}
    __listOfBrokerInstanceOption:
      type: array
      items:
        $ref: '#/components/schemas/BrokerInstanceOption'
    DescribeBrokerRequest:
      type: object
      title: DescribeBrokerRequest
      properties: {}
    __listOfBrokerInstance:
      type: array
      items:
        $ref: '#/components/schemas/BrokerInstance'
    LdapServerMetadataOutput:
      type: object
      required:
        - Hosts
        - UserSearchMatching
        - UserBase
        - RoleSearchMatching
        - ServiceAccountUsername
        - RoleBase
      properties:
        Hosts:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: hosts
              description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
        RoleBase:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleBase
              description: |-
                The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                  dc=example, dc=com.
        RoleName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleName
              description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
        RoleSearchMatching:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: roleSearchMatching
              description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'
        RoleSearchSubtree:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: roleSearchSubtree
              description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'
        ServiceAccountUsername:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: serviceAccountUsername
              description: |-
                Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                  dc=com.
        UserBase:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userBase
              description: |-
                Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                  dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
        UserRoleName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userRoleName
              description: Specifies the name of the LDAP attribute for the user group membership.
        UserSearchMatching:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: userSearchMatching
              description: |-
                The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                               dc=com.
        UserSearchSubtree:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: userSearchSubtree
              description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'
      description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.
    LogsSummary:
      type: object
      required:
        - GeneralLogGroup
        - General
      properties:
        Audit:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: audit
              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.
        AuditLogGroup:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: auditLogGroup
              description: The location of the CloudWatch Logs log group where audit logs are sent.
        General:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: general
              description: Enables general logging.
        GeneralLogGroup:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: generalLogGroup
              description: The location of the CloudWatch Logs log group where general logs are sent.
        Pending:
          allOf:
            - $ref: '#/components/schemas/PendingLogs'
            - xml:
                name: pending
              description: The list of information about logs pending to be deployed for the specified broker.
      description: The list of information about logs currently enabled and pending to be deployed for the specified broker.
    __listOfUserSummary:
      type: array
      items:
        $ref: '#/components/schemas/UserSummary'
    DescribeConfigurationRequest:
      type: object
      title: DescribeConfigurationRequest
      properties: {}
    DescribeConfigurationRevisionRequest:
      type: object
      title: DescribeConfigurationRevisionRequest
      properties: {}
    DescribeUserRequest:
      type: object
      title: DescribeUserRequest
      properties: {}
    UserPendingChanges:
      type: object
      required:
        - PendingChange
      properties:
        ConsoleAccess:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: consoleAccess
              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
        Groups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: groups
              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
        PendingChange:
          allOf:
            - $ref: '#/components/schemas/ChangeType'
            - xml:
                name: pendingChange
              description: Required. The type of change pending for the ActiveMQ user.
      description: Returns information about the status of the changes pending for the ActiveMQ user.
    EngineVersion:
      type: object
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: name
              description: Id for the version.
      description: Id of the engine version.
    ListBrokersRequest:
      type: object
      title: ListBrokersRequest
      properties: {}
    __listOfBrokerSummary:
      type: array
      items:
        $ref: '#/components/schemas/BrokerSummary'
    ListConfigurationRevisionsRequest:
      type: object
      title: ListConfigurationRevisionsRequest
      properties: {}
    __listOfConfigurationRevision:
      type: array
      items:
        $ref: '#/components/schemas/ConfigurationRevision'
    ListConfigurationsRequest:
      type: object
      title: ListConfigurationsRequest
      properties: {}
    __listOfConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/Configuration'
    ListTagsRequest:
      type: object
      title: ListTagsRequest
      properties: {}
    ListUsersRequest:
      type: object
      title: ListUsersRequest
      properties: {}
    PendingLogs:
      type: object
      properties:
        Audit:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: audit
              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.
        General:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: general
              description: Enables general logging.
      description: The list of information about logs to be enabled for the specified broker.
    RebootBrokerRequest:
      type: object
      title: RebootBrokerRequest
      properties: {}
    SanitizationWarningReason:
      type: string
      enum:
        - DISALLOWED_ELEMENT_REMOVED
        - DISALLOWED_ATTRIBUTE_REMOVED
        - INVALID_ATTRIBUTE_VALUE_REMOVED
      description: The reason for which the XML elements or attributes were sanitized.
    SanitizationWarning:
      type: object
      required:
        - Reason
      properties:
        AttributeName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: attributeName
              description: The name of the XML attribute that has been sanitized.
        ElementName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: elementName
              description: The name of the XML element that has been sanitized.
        Reason:
          allOf:
            - $ref: '#/components/schemas/SanitizationWarningReason'
            - xml:
                name: reason
              description: Required. The reason for which the XML elements or attributes were sanitized.
      description: Returns information about the XML element or attribute that was sanitized in the configuration.
    UpdateBrokerRequest:
      type: object
      title: UpdateBrokerRequest
      properties:
        AuthenticationStrategy:
          allOf:
            - $ref: '#/components/schemas/AuthenticationStrategy'
            - xml:
                name: authenticationStrategy
              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
        AutoMinorVersionUpgrade:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoMinorVersionUpgrade
              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'
        Configuration:
          allOf:
            - $ref: '#/components/schemas/ConfigurationId'
            - xml:
                name: configuration
              description: A list of information about the configuration.
        EngineVersion:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: engineVersion
              description: 'The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.'
        HostInstanceType:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostInstanceType
              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.'
        LdapServerMetadata:
          allOf:
            - $ref: '#/components/schemas/LdapServerMetadataInput'
            - xml:
                name: ldapServerMetadata
              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        Logs:
          allOf:
            - $ref: '#/components/schemas/Logs'
            - xml:
                name: logs
              description: Enables Amazon CloudWatch logging for brokers.
        MaintenanceWindowStartTime:
          allOf:
            - $ref: '#/components/schemas/WeeklyStartTime'
            - xml:
                name: maintenanceWindowStartTime
              description: The parameters that determine the WeeklyStartTime.
        SecurityGroups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: securityGroups
              description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'
      description: Updates the broker using the specified properties.
    UpdateConfigurationRequest:
      type: object
      required:
        - Data
      title: UpdateConfigurationRequest
      properties:
        Data:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: data
              description: Required. The base64-encoded XML configuration.
        Description:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: description
              description: The description of the configuration.
      description: Updates the specified configuration.
    __listOfSanitizationWarning:
      type: array
      items:
        $ref: '#/components/schemas/SanitizationWarning'
    UpdateUserRequest:
      type: object
      title: UpdateUserRequest
      properties:
        ConsoleAccess:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: consoleAccess
              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
        Groups:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: groups
              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
        Password:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: password
              description: 'The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'
      description: Updates the information for an ActiveMQ user.
    UserSummary:
      type: object
      required:
        - Username
      properties:
        PendingChange:
          allOf:
            - $ref: '#/components/schemas/ChangeType'
            - xml:
                name: pendingChange
              description: The type of change pending for the broker user.
        Username:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: username
              description: 'Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'
      description: Returns a list of all broker users. Does not apply to RabbitMQ brokers.
security:
  - hmac: []
