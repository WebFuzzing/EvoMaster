openapi: 3.0.0
info:
  version: '2020-11-30'
  x-release: v4
  title: AWS IoT Greengrass V2
  description: '<p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: greengrassv2
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/greengrassv2-2020-11-30.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/greengrass/'
servers:
  - url: 'http://greengrass.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS GreengrassV2 multi-region endpoint
  - url: 'https://greengrass.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS GreengrassV2 multi-region endpoint
  - url: 'http://greengrass.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://greengrass.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices':
    post:
      operationId: BatchAssociateClientDeviceWithCoreDevice
      description: '<p>Associate a list of client devices with a core device. Use this API operation to specify which client devices can discover a core device through cloud discovery. With cloud discovery, client devices connect to IoT Greengrass to retrieve associated core devices'' connectivity information and certificates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html">Configure cloud discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> <note> <p>Client devices are local IoT devices that connect to and communicate with an IoT Greengrass core device over MQTT. You can connect client devices to a core device to sync MQTT messages and data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html">Interact with local IoT devices</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchAssociateClientDeviceWithCoreDeviceResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entries:
                  description: The list of client devices to associate.
                  type: array
                  items:
                    $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices':
    post:
      operationId: BatchDisassociateClientDeviceFromCoreDevice
      description: 'Disassociate a list of client devices from a core device. After you disassociate a client device from a core device, the client device won''t be able to use cloud discovery to retrieve the core device''s connectivity information and certificates.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDisassociateClientDeviceFromCoreDeviceResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entries:
                  description: The list of client devices to disassociate.
                  type: array
                  items:
                    $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/deployments/{deploymentId}/cancel':
    post:
      operationId: CancelDeployment
      description: 'Cancels a deployment. This operation cancels the deployment for devices that haven''t yet received it. If a device already received the deployment, this operation doesn''t change anything for that device.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelDeploymentResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: deploymentId
          in: path
          required: true
          description: The ID of the deployment.
          schema:
            type: string
            minLength: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /greengrass/v2/createComponentVersion:
    post:
      operationId: CreateComponentVersion
      description: '<p>Creates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.</p> <p>You can use this operation to do the following:</p> <ul> <li> <p> <b>Create components from recipes</b> </p> <p>Create a component from a recipe, which is a file that defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html">IoT Greengrass component recipe reference</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call this operation.</p> </li> <li> <p> <b>Create components from Lambda functions</b> </p> <p>Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function''s deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.</p> <p>This function only accepts Lambda functions that use the following runtimes:</p> <ul> <li> <p>Python 2.7 – <code>python2.7</code> </p> </li> <li> <p>Python 3.7 – <code>python3.7</code> </p> </li> <li> <p>Python 3.8 – <code>python3.8</code> </p> </li> <li> <p>Java 8 – <code>java8</code> </p> </li> <li> <p>Node.js 10 – <code>nodejs10.x</code> </p> </li> <li> <p>Node.js 12 – <code>nodejs12.x</code> </p> </li> </ul> <p>To create a component from a Lambda function, specify <code>lambdaFunction</code> when you call this operation.</p> </li> </ul>'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateComponentVersionResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '486':
          description: RequestAlreadyInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAlreadyInProgressException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inlineRecipe:
                  description: '<p>The recipe to use to create the component. The recipe defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>'
                  type: string
                lambdaFunction:
                  description: Contains information about an Lambda function to import to create a component.
                  type: object
                  properties:
                    lambdaArn:
                      allOf:
                        - $ref: '#/components/schemas/LambdaFunctionARNWithVersionNumber'
                        - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can''t use version aliases like <code>$LATEST</code>.'
                    componentName:
                      allOf:
                        - $ref: '#/components/schemas/ComponentNameString'
                        - description: <p>The name of the component.</p> <p>Defaults to the name of the Lambda function.</p>
                    componentVersion:
                      allOf:
                        - $ref: '#/components/schemas/ComponentVersionString'
                        - description: '<p>The version of the component.</p> <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>'
                    componentPlatforms:
                      allOf:
                        - $ref: '#/components/schemas/ComponentPlatformList'
                        - description: The platforms that the component version supports.
                    componentDependencies:
                      allOf:
                        - $ref: '#/components/schemas/ComponentDependencyMap'
                        - description: The component versions on which this Lambda function component depends.
                    componentLambdaParameters:
                      allOf:
                        - $ref: '#/components/schemas/LambdaExecutionParameters'
                        - description: The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.
                tags:
                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                clientToken:
                  description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'
                  type: string
                  pattern: '^[a-zA-Z0-9-]+$'
                  minLength: 1
                  maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /greengrass/v2/deployments:
    post:
      operationId: CreateDeployment
      description: '<p>Creates a continuous deployment for a target, which is a Greengrass core device or group of core devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass deploys that group''s deployment to the new device.</p> <p>You can define one deployment for each target. When you create a new deployment for a target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the new deployment to the target devices.</p> <p>Every deployment has a revision number that indicates how many deployment revisions you define for a target. Use this operation to create a new revision of an existing deployment. This operation returns the revision number of the new deployment when you create it.</p> <p>For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: RequestAlreadyInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAlreadyInProgressException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetArn
              properties:
                targetArn:
                  description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
                  type: string
                  pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'
                deploymentName:
                  description: The name of the deployment.
                  type: string
                  minLength: 1
                components:
                  description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ComponentDeploymentSpecification'
                iotJobConfiguration:
                  description: Contains information about an IoT job configuration.
                  type: object
                  properties:
                    jobExecutionsRolloutConfig:
                      allOf:
                        - $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig'
                        - description: The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.
                    abortConfig:
                      allOf:
                        - $ref: '#/components/schemas/IoTJobAbortConfig'
                        - description: The stop configuration for the job. This configuration defines when and how to stop a job rollout.
                    timeoutConfig:
                      allOf:
                        - $ref: '#/components/schemas/IoTJobTimeoutConfig'
                        - description: The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.
                deploymentPolicies:
                  description: Contains information about policies that define how a deployment updates components and handles failure.
                  type: object
                  properties:
                    failureHandlingPolicy:
                      allOf:
                        - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'
                        - description: '<p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p> <p>Default: <code>ROLLBACK</code> </p>'
                    componentUpdatePolicy:
                      allOf:
                        - $ref: '#/components/schemas/DeploymentComponentUpdatePolicy'
                        - description: The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.
                    configurationValidationPolicy:
                      allOf:
                        - $ref: '#/components/schemas/DeploymentConfigurationValidationPolicy'
                        - description: The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.
                tags:
                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                clientToken:
                  description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'
                  type: string
                  pattern: '^[a-zA-Z0-9-]+$'
                  minLength: 1
                  maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDeployments
      description: Retrieves a paginated list of deployments.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: targetArn
          in: query
          required: false
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'
        - name: historyFilter
          in: query
          required: false
          description: '<p>The filter for the list of deployments. Choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all deployments.</p> </li> <li> <p> <code>LATEST_ONLY</code> – The list includes only the latest revision of each deployment.</p> </li> </ul> <p>Default: <code>LATEST_ONLY</code> </p>'
          schema:
            type: string
            enum:
              - ALL
              - LATEST_ONLY
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
  '/greengrass/v2/components/{arn}':
    delete:
      operationId: DeleteComponent
      description: '<p>Deletes a version of a component from IoT Greengrass.</p> <note> <p>This operation deletes the component''s recipe and artifacts. As a result, deployments that refer to this component version will fail. If you have deployments that use this component version, you can remove the component from the deployment or update the deployment to use a valid version.</p> </note>'
      responses:
        '204':
          description: Success
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: arn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetComponent
      description: Gets the recipe for a version of a component. Core devices can call this operation to identify the artifacts and requirements to install a component.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComponentResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: recipeOutputFormat
          in: query
          required: false
          description: The format of the recipe.
          schema:
            type: string
            enum:
              - JSON
              - YAML
        - name: arn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
  '/greengrass/v2/coreDevices/{coreDeviceThingName}':
    delete:
      operationId: DeleteCoreDevice
      description: 'Deletes a Greengrass core device, which is an IoT thing. This operation removes the core device from the list of core devices. This operation doesn''t delete the IoT thing. For more information about how to delete the IoT thing, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html">DeleteThing</a> in the <i>IoT API Reference</i>.'
      responses:
        '204':
          description: Success
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetCoreDevice
      description: Retrieves metadata for a Greengrass core device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCoreDeviceResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
  '/greengrass/v2/components/{arn}/metadata':
    get:
      operationId: DescribeComponent
      description: Retrieves metadata for a version of a component.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeComponentResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: arn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/components/{arn}/artifacts/{artifactName}':
    get:
      operationId: GetComponentVersionArtifact
      description: Gets the pre-signed URL to download a public component artifact. Core devices call this operation to identify the URL that they can use to download an artifact to install.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComponentVersionArtifactResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: arn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version. Specify the ARN of a public component version.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
        - name: artifactName
          in: path
          required: true
          description: '<p>The name of the artifact.</p> <p>You can use the <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_GetComponent.html">GetComponent</a> operation to download the component recipe, which includes the URI of the artifact. The artifact name is the section of the URI after the scheme. For example, in the artifact URI <code>greengrass:SomeArtifact.zip</code>, the artifact name is <code>SomeArtifact.zip</code>.</p>'
          schema:
            type: string
            minLength: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/deployments/{deploymentId}':
    get:
      operationId: GetDeployment
      description: Gets a deployment. Deployments define the components that run on Greengrass core devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: deploymentId
          in: path
          required: true
          description: The ID of the deployment.
          schema:
            type: string
            minLength: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices':
    get:
      operationId: ListClientDevicesAssociatedWithCoreDevice
      description: Retrieves a paginated list of client devices that are associated with a core device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClientDevicesAssociatedWithCoreDeviceResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/components/{arn}/versions':
    get:
      operationId: ListComponentVersions
      description: Retrieves a paginated list of all versions for a component. Greater versions are listed first.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentVersionsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: arn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+'
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /greengrass/v2/components:
    get:
      operationId: ListComponents
      description: Retrieves a paginated list of component summaries. This list includes components that you have permission to view.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: scope
          in: query
          required: false
          description: '<p>The scope of the components to list.</p> <p>Default: <code>PRIVATE</code> </p>'
          schema:
            type: string
            enum:
              - PRIVATE
              - PUBLIC
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /greengrass/v2/coreDevices:
    get:
      operationId: ListCoreDevices
      description: Retrieves a paginated list of Greengrass core devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreDevicesResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: thingGroupArn
          in: query
          required: false
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT thing group by which to filter. If you specify this parameter, the list includes only core devices that are members of this thing group.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:thinggroup/.+'
        - name: status
          in: query
          required: false
          description: '<p>The core device status by which to filter. If you specify this parameter, the list includes only core devices that have this status. Choose one of the following options:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state on the core device.</p> </li> </ul>'
          schema:
            type: string
            enum:
              - HEALTHY
              - UNHEALTHY
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments':
    get:
      operationId: ListEffectiveDeployments
      description: Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEffectiveDeploymentsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents':
    get:
      operationId: ListInstalledComponents
      description: Retrieves a paginated list of the components that a Greengrass core device runs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstalledComponentsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: coreDeviceThingName
          in: path
          required: true
          description: The name of the core device. This is also the name of the IoT thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per paginated request.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: The token to be used for the next set of paginated results.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: Retrieves the list of tags for an IoT Greengrass resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: 'Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation updates the tag''s value.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to tag.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  /greengrass/v2/resolveComponentCandidates:
    post:
      operationId: ResolveComponentCandidates
      description: '<p>Retrieves a list of components that meet the component, version, and platform requirements of a deployment. Greengrass core devices call this operation when they receive a deployment to identify the components to install.</p> <p>This operation identifies components that meet all dependency requirements for a deployment. If the requirements conflict, then this operation returns an error and the deployment fails. For example, this occurs if component <code>A</code> requires version <code>&gt;2.0.0</code> and component <code>B</code> requires version <code>&lt;2.0.0</code> of a component dependency.</p> <p>When you specify the component candidates to resolve, IoT Greengrass compares each component''s digest from the core device with the component''s digest in the Amazon Web Services Cloud. If the digests don''t match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.</p> <important> <p>To use this operation, you must use the data plane API endpoint and authenticate with an IoT device certificate. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/greengrass.html">IoT Greengrass endpoints and quotas</a>.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveComponentCandidatesResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - platform
                - componentCandidates
              properties:
                platform:
                  description: Contains information about a platform that a component supports.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: '#/components/schemas/NonEmptyString'
                        - description: '<p>The friendly name of the platform. This name helps you identify the platform.</p> <p>If you omit this parameter, IoT Greengrass creates a friendly name from the <code>os</code> and <code>architecture</code> of the platform.</p>'
                    attributes:
                      allOf:
                        - $ref: '#/components/schemas/PlatformAttributesMap'
                        - description: 'A dictionary of attributes for the platform. The IoT Greengrass Core software defines the <code>os</code> and <code>platform</code> by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html">Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
                componentCandidates:
                  description: The list of components to resolve.
                  type: array
                  items:
                    $ref: '#/components/schemas/ComponentCandidate'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes a tag from an IoT Greengrass resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to untag.'
          schema:
            type: string
            pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'
        - name: tagKeys
          in: query
          required: true
          description: A list of keys for tags to remove from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchAssociateClientDeviceWithCoreDeviceResponse:
      type: object
      properties:
        errorEntries:
          allOf:
            - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorList'
            - description: The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to associate.
    AssociateClientDeviceWithCoreDeviceEntry:
      type: object
      required:
        - thingName
      properties:
        thingName:
          allOf:
            - $ref: '#/components/schemas/IoTThingName'
            - description: The name of the IoT thing that represents the client device to associate.
      description: 'Contains a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.'
    ValidationException: {}
    ResourceNotFoundException: {}
    AccessDeniedException: {}
    InternalServerException: {}
    ThrottlingException: {}
    BatchDisassociateClientDeviceFromCoreDeviceResponse:
      type: object
      properties:
        errorEntries:
          allOf:
            - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorList'
            - description: The list of errors (if any) for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.
    DisassociateClientDeviceFromCoreDeviceEntry:
      type: object
      required:
        - thingName
      properties:
        thingName:
          allOf:
            - $ref: '#/components/schemas/IoTThingName'
            - description: The name of the IoT thing that represents the client device to disassociate.
      description: 'Contains a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.'
    CancelDeploymentResponse:
      type: object
      properties:
        message:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: A message that communicates if the cancel was successful.
    ConflictException: {}
    CreateComponentVersionResponse:
      type: object
      required:
        - componentName
        - componentVersion
        - creationTimestamp
        - status
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the component was created, expressed in ISO 8601 format.'
        status:
          allOf:
            - $ref: '#/components/schemas/CloudComponentStatus'
            - description: The status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.
    LambdaFunctionARNWithVersionNumber:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:lambda:[^:]+:[0-9]+:function:[a-zA-Z0-9-_]+:[0-9]+'
    ComponentNameString:
      type: string
      pattern: '[a-zA-Z0-9-_.]+'
      minLength: 1
      maxLength: 128
    ComponentVersionString:
      type: string
      pattern: '[0-9a-zA-Z-.+]+'
      minLength: 1
      maxLength: 64
    ComponentPlatformList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentPlatform'
    ComponentDependencyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentDependencyRequirement'
    LambdaExecutionParameters:
      type: object
      properties:
        eventSources:
          allOf:
            - $ref: '#/components/schemas/LambdaEventSourceList'
            - description: The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.
        maxQueueSize:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.
        maxInstancesCount:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: The maximum number of instances that a non-pinned Lambda function can run at the same time.
        maxIdleTimeInSeconds:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.
        timeoutInSeconds:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: The maximum amount of time in seconds that the Lambda function can process a work item.
        statusTimeoutInSeconds:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.
        pinned:
          allOf:
            - $ref: '#/components/schemas/OptionalBoolean'
            - description: '<p>Whether or not the Lambda function is pinned, or long-lived.</p> <ul> <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li> <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li> </ul> <p>Default: <code>true</code> </p>'
        inputPayloadEncodingType:
          allOf:
            - $ref: '#/components/schemas/LambdaInputPayloadEncodingType'
            - description: '<p>The encoding type that the Lambda function supports.</p> <p>Default: <code>json</code> </p>'
        execArgs:
          allOf:
            - $ref: '#/components/schemas/LambdaExecArgsList'
            - description: The list of arguments to pass to the Lambda function when it runs.
        environmentVariables:
          allOf:
            - $ref: '#/components/schemas/LambdaEnvironmentVariables'
            - description: The map of environment variables that are available to the Lambda function when it runs.
        linuxProcessParams:
          allOf:
            - $ref: '#/components/schemas/LambdaLinuxProcessParams'
            - description: The parameters for the Linux process that contains the Lambda function.
      description: Contains parameters for a Lambda function that runs on IoT Greengrass.
    TagValue:
      type: string
      maxLength: 256
    ServiceQuotaExceededException: {}
    RequestAlreadyInProgressException: {}
    CreateDeploymentResponse:
      type: object
      properties:
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The ID of the deployment.
        iotJobId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The ID of the IoT job that applies the deployment to target devices.
        iotJobArn:
          allOf:
            - $ref: '#/components/schemas/IoTJobARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.'
    ComponentDeploymentSpecification:
      type: object
      properties:
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        configurationUpdate:
          allOf:
            - $ref: '#/components/schemas/ComponentConfigurationUpdate'
            - description: 'The configuration updates to deploy for the component. You can define <i>reset</i> updates and <i>merge</i> updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device''s component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
        runWith:
          allOf:
            - $ref: '#/components/schemas/ComponentRunWith'
            - description: 'The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
      description: Contains information about a component to deploy.
    IoTJobExecutionsRolloutConfig:
      type: object
      properties:
        exponentialRate:
          allOf:
            - $ref: '#/components/schemas/IoTJobExponentialRolloutRate'
            - description: The exponential rate to increase the job rollout rate.
        maximumPerMinute:
          allOf:
            - $ref: '#/components/schemas/IoTJobMaxExecutionsPerMin'
            - description: 'The maximum number of devices that receive a pending job notification, per minute.'
      description: Contains information about the rollout configuration for a job. This configuration defines the rate at which the job deploys a configuration to a fleet of target devices.
    IoTJobAbortConfig:
      type: object
      required:
        - criteriaList
      properties:
        criteriaList:
          allOf:
            - $ref: '#/components/schemas/IoTJobAbortCriteriaList'
            - description: The list of criteria that define when and how to cancel the configuration deployment.
      description: Contains a list of criteria that define when and how to cancel a configuration deployment.
    IoTJobTimeoutConfig:
      type: object
      properties:
        inProgressTimeoutInMinutes:
          allOf:
            - $ref: '#/components/schemas/IoTJobInProgressTimeoutInMinutes'
            - description: '<p>The amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to <code>IN_PROGRESS</code>. If the job status doesn''t change to a terminal state before the time expires, then the job status is set to <code>TIMED_OUT</code>.</p> <p>The timeout interval must be between 1 minute and 7 days (10080 minutes).</p>'
      description: Contains information about the timeout configuration for a job.
    DeploymentFailureHandlingPolicy:
      type: string
      enum:
        - ROLLBACK
        - DO_NOTHING
    DeploymentComponentUpdatePolicy:
      type: object
      properties:
        timeoutInSeconds:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: '<p>The amount of time in seconds that each component on a device has to report that it''s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.</p> <p>Default: <code>60</code> </p>'
        action:
          allOf:
            - $ref: '#/components/schemas/DeploymentComponentUpdatePolicyAction'
            - description: '<p>Whether or not to notify components and wait for components to become safe to update. Choose from the following options:</p> <ul> <li> <p> <code>NOTIFY_COMPONENTS</code> – The deployment notifies each component before it stops and updates that component. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates">SubscribeToComponentUpdates</a> IPC operation to receive these notifications. Then, components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate">DeferComponentUpdate</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> </li> <li> <p> <code>SKIP_NOTIFY_COMPONENTS</code> – The deployment doesn''t notify components or wait for them to be safe to update.</p> </li> </ul> <p>Default: <code>NOTIFY_COMPONENTS</code> </p>'
      description: '<p>Contains information about a deployment''s policy that defines when components are safe to update.</p> <p>Each component on a device can report whether or not it''s ready to update. After a component and its dependencies are ready, they can apply the update in the deployment. You can configure whether or not the deployment notifies components of an update and waits for a response. You specify the amount of time each component has to respond to the update notification.</p>'
    DeploymentConfigurationValidationPolicy:
      type: object
      properties:
        timeoutInSeconds:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: '<p>The amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.</p> <p>Default: <code>30</code> </p>'
      description: 'Contains information about how long a component on a core device can validate its configuration updates before it times out. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates">SubscribeToValidateConfigurationUpdates</a> IPC operation to receive notifications when a deployment specifies a configuration update. Then, components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport">SendConfigurationValidityReport</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    DescribeComponentResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the component was created, expressed in ISO 8601 format.'
        publisher:
          allOf:
            - $ref: '#/components/schemas/PublisherString'
            - description: The publisher of the component version.
        description:
          allOf:
            - $ref: '#/components/schemas/DescriptionString'
            - description: The description of the component version.
        status:
          allOf:
            - $ref: '#/components/schemas/CloudComponentStatus'
            - description: The status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.
        platforms:
          allOf:
            - $ref: '#/components/schemas/ComponentPlatformList'
            - description: The platforms that the component version supports.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    GetComponentResponse:
      type: object
      required:
        - recipeOutputFormat
        - recipe
      properties:
        recipeOutputFormat:
          allOf:
            - $ref: '#/components/schemas/RecipeOutputFormat'
            - description: The format of the recipe.
        recipe:
          allOf:
            - $ref: '#/components/schemas/RecipeBlob'
            - description: The recipe of the component version.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    GetComponentVersionArtifactResponse:
      type: object
      required:
        - preSignedUrl
      properties:
        preSignedUrl:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The URL of the artifact.
    GetCoreDeviceResponse:
      type: object
      properties:
        coreDeviceThingName:
          allOf:
            - $ref: '#/components/schemas/CoreDeviceThingName'
            - description: The name of the core device. This is also the name of the IoT thing.
        coreVersion:
          allOf:
            - $ref: '#/components/schemas/GGCVersion'
            - description: 'The version of the IoT Greengrass Core software that the core device runs. This version is equivalent to the version of the Greengrass nucleus component that runs on the core device. For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html">Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
        platform:
          allOf:
            - $ref: '#/components/schemas/CoreDevicePlatformString'
            - description: The operating system platform that the core device runs.
        architecture:
          allOf:
            - $ref: '#/components/schemas/CoreDeviceArchitectureString'
            - description: The computer architecture of the core device.
        status:
          allOf:
            - $ref: '#/components/schemas/CoreDeviceStatus'
            - description: '<p>The status of the core device. The core device status can be:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state on the core device.</p> </li> </ul>'
        lastStatusUpdateTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the core device''s status last updated, expressed in ISO 8601 format.'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    GetDeploymentResponse:
      type: object
      properties:
        targetArn:
          allOf:
            - $ref: '#/components/schemas/TargetARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
        revisionId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The revision number of the deployment.
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The ID of the deployment.
        deploymentName:
          allOf:
            - $ref: '#/components/schemas/NullableString'
            - description: The name of the deployment.
        deploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - description: The status of the deployment.
        iotJobId:
          allOf:
            - $ref: '#/components/schemas/NullableString'
            - description: The ID of the IoT job that applies the deployment to target devices.
        iotJobArn:
          allOf:
            - $ref: '#/components/schemas/IoTJobARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.'
        components:
          allOf:
            - $ref: '#/components/schemas/ComponentDeploymentSpecifications'
            - description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'
        deploymentPolicies:
          allOf:
            - $ref: '#/components/schemas/DeploymentPolicies'
            - description: The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.
        iotJobConfiguration:
          allOf:
            - $ref: '#/components/schemas/DeploymentIoTJobConfiguration'
            - description: 'The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.'
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'
        isLatestForTarget:
          allOf:
            - $ref: '#/components/schemas/IsLatestForTarget'
            - description: Whether or not the deployment is the latest revision for its target.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    ListClientDevicesAssociatedWithCoreDeviceResponse:
      type: object
      properties:
        associatedClientDevices:
          allOf:
            - $ref: '#/components/schemas/AssociatedClientDeviceList'
            - description: A list that describes the client devices that are associated with the core device.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListComponentVersionsResponse:
      type: object
      properties:
        componentVersions:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionList'
            - description: A list of versions that exist for the component.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListComponentsResponse:
      type: object
      properties:
        components:
          allOf:
            - $ref: '#/components/schemas/ComponentList'
            - description: A list that summarizes each component.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListCoreDevicesResponse:
      type: object
      properties:
        coreDevices:
          allOf:
            - $ref: '#/components/schemas/CoreDevicesList'
            - description: A list that summarizes each core device.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListDeploymentsResponse:
      type: object
      properties:
        deployments:
          allOf:
            - $ref: '#/components/schemas/DeploymentList'
            - description: A list that summarizes each deployment.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListEffectiveDeploymentsResponse:
      type: object
      properties:
        effectiveDeployments:
          allOf:
            - $ref: '#/components/schemas/EffectiveDeploymentsList'
            - description: A list that summarizes each deployment on the core device.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListInstalledComponentsResponse:
      type: object
      properties:
        installedComponents:
          allOf:
            - $ref: '#/components/schemas/InstalledComponentList'
            - description: A list that summarizes each component on the core device.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextTokenString'
            - description: 'The token for the next set of results, or null if there are no additional results.'
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    ResolveComponentCandidatesResponse:
      type: object
      properties:
        resolvedComponentVersions:
          allOf:
            - $ref: '#/components/schemas/ResolvedComponentVersionsList'
            - description: A list of components that meet the requirements that you specify in the request. This list includes each component's recipe that you can use to install the component.
    NonEmptyString:
      type: string
      minLength: 1
    PlatformAttributesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
    ComponentCandidate:
      type: object
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        versionRequirements:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionRequirementMap'
            - description: '<p>The version requirements for the component''s dependencies. Greengrass core devices get the version requirements from component recipes.</p> <p>IoT Greengrass V2 uses semantic version constraints. For more information, see <a href="https://semver.org/">Semantic Versioning</a>.</p>'
      description: Contains information about a component that is a candidate to deploy to a Greengrass core device.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
      minLength: 1
      maxLength: 128
    IoTThingName:
      type: string
      minLength: 1
      maxLength: 128
    AssociateClientDeviceWithCoreDeviceEntryList:
      type: array
      items:
        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'
      minItems: 1
      maxItems: 100
    AssociateClientDeviceWithCoreDeviceErrorEntry:
      type: object
      properties:
        thingName:
          allOf:
            - $ref: '#/components/schemas/IoTThingName'
            - description: The name of the IoT thing whose associate request failed.
        code:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The error code for the request.
        message:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: A message that provides additional information about the error.
      description: 'Contains an error that occurs from a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.'
    AssociateClientDeviceWithCoreDeviceErrorList:
      type: array
      items:
        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorEntry'
      minItems: 1
      maxItems: 100
    Timestamp:
      type: string
      format: date-time
    AssociatedClientDevice:
      type: object
      properties:
        thingName:
          allOf:
            - $ref: '#/components/schemas/IoTThingName'
            - description: The name of the IoT thing that represents the associated client device.
        associationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time that the client device was associated, expressed in ISO 8601 format.'
      description: Contains information about a client device that is associated to a core device for cloud discovery.
    AssociatedClientDeviceList:
      type: array
      items:
        $ref: '#/components/schemas/AssociatedClientDevice'
      minItems: 1
      maxItems: 100
    BatchAssociateClientDeviceWithCoreDeviceRequest:
      type: object
      title: BatchAssociateClientDeviceWithCoreDeviceRequest
      properties:
        entries:
          allOf:
            - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntryList'
            - description: The list of client devices to associate.
    DisassociateClientDeviceFromCoreDeviceEntryList:
      type: array
      items:
        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'
      minItems: 1
      maxItems: 100
    BatchDisassociateClientDeviceFromCoreDeviceRequest:
      type: object
      title: BatchDisassociateClientDeviceFromCoreDeviceRequest
      properties:
        entries:
          allOf:
            - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntryList'
            - description: The list of client devices to disassociate.
    DisassociateClientDeviceFromCoreDeviceErrorList:
      type: array
      items:
        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorEntry'
      minItems: 1
      maxItems: 100
    CPU:
      type: number
      format: double
      minimum: 0
    CancelDeploymentRequest:
      type: object
      title: CancelDeploymentRequest
      properties: {}
    ClientTokenString:
      type: string
      pattern: '^[a-zA-Z0-9-]+$'
      minLength: 1
      maxLength: 64
    CloudComponentState:
      type: string
      enum:
        - REQUESTED
        - INITIATED
        - DEPLOYABLE
        - FAILED
        - DEPRECATED
    StringMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
    CloudComponentStatus:
      type: object
      properties:
        componentState:
          allOf:
            - $ref: '#/components/schemas/CloudComponentState'
            - description: The state of the component.
        message:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: 'A message that communicates details, such as errors, about the status of the component.'
        errors:
          allOf:
            - $ref: '#/components/schemas/StringMap'
            - description: 'A dictionary of errors that communicate why the component is in an error state. For example, if IoT Greengrass can''t access an artifact for the component, then <code>errors</code> contains the artifact''s URI as a key, and the error message as the value for that key.'
      description: Contains the status of a component in the IoT Greengrass service.
    ComponentARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+'
    ComponentLatestVersion:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the component was created, expressed in ISO 8601 format.'
        description:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The description of the component version.
        publisher:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The publisher of the component version.
        platforms:
          allOf:
            - $ref: '#/components/schemas/ComponentPlatformList'
            - description: The platforms that the component version supports.
      description: Contains information about the latest version of a component.
    Component:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ComponentARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        latestVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentLatestVersion'
            - description: The latest version of the component and its details.
      description: Contains information about a component.
    ComponentVersionRequirementMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
    ComponentCandidateList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentCandidate'
    ComponentConfigurationPath:
      type: string
      minLength: 0
      maxLength: 256
    ComponentConfigurationPathList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentConfigurationPath'
    ComponentConfigurationString:
      type: string
      minLength: 1
      maxLength: 65536
    ComponentConfigurationUpdate:
      type: object
      properties:
        merge:
          allOf:
            - $ref: '#/components/schemas/ComponentConfigurationString'
            - description: 'A serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component''s existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component''s default configuration. This means that the core device keeps it''s existing configuration for keys and values that you don''t specify in this object. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#merge-configuration-update">Merge configuration updates</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
        reset:
          allOf:
            - $ref: '#/components/schemas/ComponentConfigurationPathList'
            - description: 'The list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash (<code>/</code>) and use forward slashes to separate the key for each level in the object. For more information, see the <a href="https://tools.ietf.org/html/rfc6901">JSON pointer specification</a> and <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#reset-configuration-update">Reset configuration updates</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
      description: 'Contains information about a deployment''s update to a component''s configuration on Greengrass core devices. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    ComponentDependencyRequirement:
      type: object
      properties:
        versionRequirement:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: '<p>The component version requirement for the component dependency.</p> <p>IoT Greengrass V2 uses semantic version constraints. For more information, see <a href="https://semver.org/">Semantic Versioning</a>.</p>'
        dependencyType:
          allOf:
            - $ref: '#/components/schemas/ComponentDependencyType'
            - description: '<p>The type of this dependency. Choose from the following options:</p> <ul> <li> <p> <code>SOFT</code> – The component doesn''t restart if the dependency changes state.</p> </li> <li> <p> <code>HARD</code> – The component restarts if the dependency changes state.</p> </li> </ul> <p>Default: <code>HARD</code> </p>'
      description: Contains information about a component dependency for a Lambda function component.
    ComponentDependencyType:
      type: string
      enum:
        - HARD
        - SOFT
    ComponentRunWith:
      type: object
      properties:
        posixUser:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: '<p>The POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon (<code>:</code>) in the following format: <code>user:group</code>. The group is optional. If you don''t specify a group, the IoT Greengrass Core software uses the primary user for the group.</p> <p>If you omit this parameter, the IoT Greengrass Core software uses the default system user and group that you configure on the Greengrass nucleus component. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a>.</p>'
        systemResourceLimits:
          allOf:
            - $ref: '#/components/schemas/SystemResourceLimits'
            - description: '<p>The system resource limits to apply to this component''s process on the core device.</p> <p>If you omit this parameter, the IoT Greengrass Core software uses the default system resource limits that you configure on the Greengrass nucleus component. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.</p>'
      description: 'Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    ComponentDeploymentSpecifications:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentDeploymentSpecification'
    ComponentVersionARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
    ComponentList:
      type: array
      items:
        $ref: '#/components/schemas/Component'
    ComponentPlatform:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: '<p>The friendly name of the platform. This name helps you identify the platform.</p> <p>If you omit this parameter, IoT Greengrass creates a friendly name from the <code>os</code> and <code>architecture</code> of the platform.</p>'
        attributes:
          allOf:
            - $ref: '#/components/schemas/PlatformAttributesMap'
            - description: 'A dictionary of attributes for the platform. The IoT Greengrass Core software defines the <code>os</code> and <code>platform</code> by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html">Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
      description: Contains information about a platform that a component supports.
    SystemResourceLimits:
      type: object
      properties:
        memory:
          allOf:
            - $ref: '#/components/schemas/Memory'
            - description: 'The maximum amount of RAM, expressed in kilobytes, that a component''s processes can use on the core device.'
        cpus:
          allOf:
            - $ref: '#/components/schemas/CPU'
            - description: 'The maximum amount of CPU time that a component''s processes can use on the core device. A core device''s total CPU time is equivalent to the device''s number of CPU cores. For example, on a core device with 4 CPU cores, you can set this value to <code>2</code> to limit the component''s processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you can set this value to <code>0.25</code> to limit the component''s processes to 25 percent usage of the CPU. If you set this value to a number greater than the number of CPU cores, the IoT Greengrass Core software doesn''t limit the component''s CPU usage.'
      description: 'Contains information about system resource limits that the IoT Greengrass Core software applies to a component''s processes. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.'
    ComponentVersionListItem:
      type: object
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        arn:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
      description: Contains information about a component version in a list.
    ComponentVersionList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentVersionListItem'
    ComponentVisibilityScope:
      type: string
      enum:
        - PRIVATE
        - PUBLIC
    CoreDeviceThingName:
      type: string
      minLength: 1
      maxLength: 128
    CoreDeviceStatus:
      type: string
      enum:
        - HEALTHY
        - UNHEALTHY
    CoreDevice:
      type: object
      properties:
        coreDeviceThingName:
          allOf:
            - $ref: '#/components/schemas/CoreDeviceThingName'
            - description: The name of the core device. This is also the name of the IoT thing.
        status:
          allOf:
            - $ref: '#/components/schemas/CoreDeviceStatus'
            - description: '<p>The status of the core device. Core devices can have the following statuses:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state on the core device.</p> </li> </ul>'
        lastStatusUpdateTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the core device''s status last updated, expressed in ISO 8601 format.'
      description: 'Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.'
    CoreDeviceArchitectureString:
      type: string
      minLength: 1
      maxLength: 255
    CoreDevicePlatformString:
      type: string
      minLength: 1
      maxLength: 255
    CoreDevicesList:
      type: array
      items:
        $ref: '#/components/schemas/CoreDevice'
    RecipeBlob:
      type: string
    LambdaFunctionRecipeSource:
      type: object
      required:
        - lambdaArn
      properties:
        lambdaArn:
          allOf:
            - $ref: '#/components/schemas/LambdaFunctionARNWithVersionNumber'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can''t use version aliases like <code>$LATEST</code>.'
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: <p>The name of the component.</p> <p>Defaults to the name of the Lambda function.</p>
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: '<p>The version of the component.</p> <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>'
        componentPlatforms:
          allOf:
            - $ref: '#/components/schemas/ComponentPlatformList'
            - description: The platforms that the component version supports.
        componentDependencies:
          allOf:
            - $ref: '#/components/schemas/ComponentDependencyMap'
            - description: The component versions on which this Lambda function component depends.
        componentLambdaParameters:
          allOf:
            - $ref: '#/components/schemas/LambdaExecutionParameters'
            - description: The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.
      description: Contains information about an Lambda function to import to create a component.
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateComponentVersionRequest:
      type: object
      title: CreateComponentVersionRequest
      properties:
        inlineRecipe:
          allOf:
            - $ref: '#/components/schemas/RecipeBlob'
            - description: '<p>The recipe to use to create the component. The recipe defines the component''s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>'
        lambdaFunction:
          allOf:
            - $ref: '#/components/schemas/LambdaFunctionRecipeSource'
            - description: <p>The parameters to create a component from a Lambda function.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientTokenString'
            - description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'
    TargetARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+'
    DeploymentIoTJobConfiguration:
      type: object
      properties:
        jobExecutionsRolloutConfig:
          allOf:
            - $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig'
            - description: The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.
        abortConfig:
          allOf:
            - $ref: '#/components/schemas/IoTJobAbortConfig'
            - description: The stop configuration for the job. This configuration defines when and how to stop a job rollout.
        timeoutConfig:
          allOf:
            - $ref: '#/components/schemas/IoTJobTimeoutConfig'
            - description: The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.
      description: Contains information about an IoT job configuration.
    DeploymentPolicies:
      type: object
      properties:
        failureHandlingPolicy:
          allOf:
            - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'
            - description: '<p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p> <p>Default: <code>ROLLBACK</code> </p>'
        componentUpdatePolicy:
          allOf:
            - $ref: '#/components/schemas/DeploymentComponentUpdatePolicy'
            - description: The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.
        configurationValidationPolicy:
          allOf:
            - $ref: '#/components/schemas/DeploymentConfigurationValidationPolicy'
            - description: The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.
      description: Contains information about policies that define how a deployment updates components and handles failure.
    CreateDeploymentRequest:
      type: object
      required:
        - targetArn
      title: CreateDeploymentRequest
      properties:
        targetArn:
          allOf:
            - $ref: '#/components/schemas/TargetARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
        deploymentName:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The name of the deployment.
        components:
          allOf:
            - $ref: '#/components/schemas/ComponentDeploymentSpecifications'
            - description: 'The components to deploy. This is a dictionary, where each key is the name of a component, and each key''s value is the version and configuration to deploy for that component.'
        iotJobConfiguration:
          allOf:
            - $ref: '#/components/schemas/DeploymentIoTJobConfiguration'
            - description: 'The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.'
        deploymentPolicies:
          allOf:
            - $ref: '#/components/schemas/DeploymentPolicies'
            - description: The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
        clientToken:
          allOf:
            - $ref: '#/components/schemas/ClientTokenString'
            - description: 'A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.'
    IoTJobARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:job/.+'
    DefaultMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    DeleteComponentRequest:
      type: object
      title: DeleteComponentRequest
      properties: {}
    DeleteCoreDeviceRequest:
      type: object
      title: DeleteCoreDeviceRequest
      properties: {}
    DeploymentStatus:
      type: string
      enum:
        - ACTIVE
        - COMPLETED
        - CANCELED
        - FAILED
        - INACTIVE
    IsLatestForTarget:
      type: boolean
    Deployment:
      type: object
      properties:
        targetArn:
          allOf:
            - $ref: '#/components/schemas/TargetARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
        revisionId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The revision number of the deployment.
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The ID of the deployment.
        deploymentName:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The name of the deployment.
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'
        deploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - description: The status of the deployment.
        isLatestForTarget:
          allOf:
            - $ref: '#/components/schemas/IsLatestForTarget'
            - description: Whether or not the deployment is the latest revision for its target.
      description: Contains information about a deployment.
    OptionalInteger:
      type: integer
    DeploymentComponentUpdatePolicyAction:
      type: string
      enum:
        - NOTIFY_COMPONENTS
        - SKIP_NOTIFY_COMPONENTS
    DeploymentHistoryFilter:
      type: string
      enum:
        - ALL
        - LATEST_ONLY
    DeploymentID:
      type: string
    DeploymentList:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    DeploymentName:
      type: string
    DescribeComponentRequest:
      type: object
      title: DescribeComponentRequest
      properties: {}
    PublisherString:
      type: string
    DescriptionString:
      type: string
    Description:
      type: string
      minLength: 1
      maxLength: 500
    DisassociateClientDeviceFromCoreDeviceErrorEntry:
      type: object
      properties:
        thingName:
          allOf:
            - $ref: '#/components/schemas/IoTThingName'
            - description: The name of the IoT thing whose disassociate request failed.
        code:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: The error code for the request.
        message:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: A message that provides additional information about the error.
      description: 'Contains an error that occurs from a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.'
    IoTJobId:
      type: string
      minLength: 1
      maxLength: 255
    EffectiveDeploymentExecutionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - QUEUED
        - FAILED
        - COMPLETED
        - TIMED_OUT
        - CANCELED
        - REJECTED
    Reason:
      type: string
    EffectiveDeployment:
      type: object
      required:
        - deploymentId
        - deploymentName
        - targetArn
        - coreDeviceExecutionStatus
        - creationTimestamp
        - modifiedTimestamp
      properties:
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/DeploymentID'
            - description: The ID of the deployment.
        deploymentName:
          allOf:
            - $ref: '#/components/schemas/DeploymentName'
            - description: The name of the deployment.
        iotJobId:
          allOf:
            - $ref: '#/components/schemas/IoTJobId'
            - description: The ID of the IoT job that applies the deployment to target devices.
        iotJobArn:
          allOf:
            - $ref: '#/components/schemas/IoTJobARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.'
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the deployment job.
        targetArn:
          allOf:
            - $ref: '#/components/schemas/TargetARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.'
        coreDeviceExecutionStatus:
          allOf:
            - $ref: '#/components/schemas/EffectiveDeploymentExecutionStatus'
            - description: The status of the deployment job on the Greengrass core device.
        reason:
          allOf:
            - $ref: '#/components/schemas/Reason'
            - description: 'The reason code for the update, if the job was updated.'
        creationTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the deployment was created, expressed in ISO 8601 format.'
        modifiedTimestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time at which the deployment job was last modified, expressed in ISO 8601 format.'
      description: Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.
    EffectiveDeploymentsList:
      type: array
      items:
        $ref: '#/components/schemas/EffectiveDeployment'
    FileSystemPath:
      type: string
    GGCVersion:
      type: string
      minLength: 1
      maxLength: 255
    GenericV2ARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'
    RecipeOutputFormat:
      type: string
      enum:
        - JSON
        - YAML
    GetComponentRequest:
      type: object
      title: GetComponentRequest
      properties: {}
    GetComponentVersionArtifactRequest:
      type: object
      title: GetComponentVersionArtifactRequest
      properties: {}
    GetCoreDeviceRequest:
      type: object
      title: GetCoreDeviceRequest
      properties: {}
    GetDeploymentRequest:
      type: object
      title: GetDeploymentRequest
      properties: {}
    NullableString:
      type: string
    InstalledComponentLifecycleState:
      type: string
      enum:
        - NEW
        - INSTALLED
        - STARTING
        - RUNNING
        - STOPPING
        - ERRORED
        - BROKEN
        - FINISHED
    LifecycleStateDetails:
      type: string
      minLength: 1
      maxLength: 1000
    IsRoot:
      type: boolean
    InstalledComponent:
      type: object
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        lifecycleState:
          allOf:
            - $ref: '#/components/schemas/InstalledComponentLifecycleState'
            - description: The lifecycle state of the component.
        lifecycleStateDetails:
          allOf:
            - $ref: '#/components/schemas/LifecycleStateDetails'
            - description: The details about the lifecycle state of the component.
        isRoot:
          allOf:
            - $ref: '#/components/schemas/IsRoot'
            - description: Whether or not the component is a root component.
      description: Contains information about a component on a Greengrass core device.
    InstalledComponentList:
      type: array
      items:
        $ref: '#/components/schemas/InstalledComponent'
    IoTJobAbortAction:
      type: string
      enum:
        - CANCEL
    IoTJobAbortCriteriaList:
      type: array
      items:
        $ref: '#/components/schemas/IoTJobAbortCriteria'
      minItems: 1
    IoTJobExecutionFailureType:
      type: string
      enum:
        - FAILED
        - REJECTED
        - TIMED_OUT
        - ALL
    IoTJobAbortThresholdPercentage:
      type: number
      format: double
      maximum: 100
    IoTJobMinimumNumberOfExecutedThings:
      type: integer
      minimum: 1
    IoTJobAbortCriteria:
      type: object
      required:
        - failureType
        - action
        - thresholdPercentage
        - minNumberOfExecutedThings
      properties:
        failureType:
          allOf:
            - $ref: '#/components/schemas/IoTJobExecutionFailureType'
            - description: The type of job deployment failure that can cancel a job.
        action:
          allOf:
            - $ref: '#/components/schemas/IoTJobAbortAction'
            - description: The action to perform when the criteria are met.
        thresholdPercentage:
          allOf:
            - $ref: '#/components/schemas/IoTJobAbortThresholdPercentage'
            - description: '<p>The minimum percentage of <code>failureType</code> failures that occur before the job can cancel.</p> <p>This parameter supports up to two digits after the decimal (for example, you can specify <code>10.9</code> or <code>10.99</code>, but not <code>10.999</code>).</p>'
        minNumberOfExecutedThings:
          allOf:
            - $ref: '#/components/schemas/IoTJobMinimumNumberOfExecutedThings'
            - description: The minimum number of things that receive the configuration before the job can cancel.
      description: '<p>Contains criteria that define when and how to cancel a job.</p> <p>The deployment stops if the following conditions are true:</p> <ol> <li> <p>The number of things that receive the deployment exceeds the <code>minNumberOfExecutedThings</code>.</p> </li> <li> <p>The percentage of failures with type <code>failureType</code> exceeds the <code>thresholdPercentage</code>.</p> </li> </ol>'
    IoTJobExponentialRolloutRate:
      type: object
      required:
        - baseRatePerMinute
        - incrementFactor
        - rateIncreaseCriteria
      properties:
        baseRatePerMinute:
          allOf:
            - $ref: '#/components/schemas/IoTJobRolloutBaseRatePerMinute'
            - description: 'The minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.'
        incrementFactor:
          allOf:
            - $ref: '#/components/schemas/IoTJobRolloutIncrementFactor'
            - description: '<p>The exponential factor to increase the rollout rate for the job.</p> <p>This parameter supports up to one digit after the decimal (for example, you can specify <code>1.5</code>, but not <code>1.55</code>).</p>'
        rateIncreaseCriteria:
          allOf:
            - $ref: '#/components/schemas/IoTJobRateIncreaseCriteria'
            - description: The criteria to increase the rollout rate for the job.
      description: Contains information about an exponential rollout rate for a configuration deployment job.
    IoTJobMaxExecutionsPerMin:
      type: integer
      minimum: 1
      maximum: 1000
    IoTJobRolloutBaseRatePerMinute:
      type: integer
      minimum: 1
      maximum: 1000
    IoTJobRolloutIncrementFactor:
      type: number
      format: double
      minimum: 1
      maximum: 5
    IoTJobRateIncreaseCriteria:
      type: object
      properties:
        numberOfNotifiedThings:
          allOf:
            - $ref: '#/components/schemas/IoTJobNumberOfThings'
            - description: The number of devices to receive the job notification before the rollout rate increases.
        numberOfSucceededThings:
          allOf:
            - $ref: '#/components/schemas/IoTJobNumberOfThings'
            - description: The number of devices to successfully run the configuration job before the rollout rate increases.
      description: Contains information about criteria to meet before a job increases its rollout rate. Specify either <code>numberOfNotifiedThings</code> or <code>numberOfSucceededThings</code>.
    IoTJobInProgressTimeoutInMinutes:
      type: integer
    IoTJobNumberOfThings:
      type: integer
      minimum: 1
    OptionalBoolean:
      type: boolean
    LambdaVolumeList:
      type: array
      items:
        $ref: '#/components/schemas/LambdaVolumeMount'
    LambdaDeviceList:
      type: array
      items:
        $ref: '#/components/schemas/LambdaDeviceMount'
    LambdaContainerParams:
      type: object
      properties:
        memorySizeInKB:
          allOf:
            - $ref: '#/components/schemas/OptionalInteger'
            - description: '<p>The memory size of the container, expressed in kilobytes.</p> <p>Default: <code>16384</code> (16 MB)</p>'
        mountROSysfs:
          allOf:
            - $ref: '#/components/schemas/OptionalBoolean'
            - description: '<p>Whether or not the container can read information from the device''s <code>/sys</code> folder.</p> <p>Default: <code>false</code> </p>'
        volumes:
          allOf:
            - $ref: '#/components/schemas/LambdaVolumeList'
            - description: The list of volumes that the container can access.
        devices:
          allOf:
            - $ref: '#/components/schemas/LambdaDeviceList'
            - description: The list of system devices that the container can access.
      description: Contains information about a container in which Lambda functions run on Greengrass core devices.
    LambdaDeviceMount:
      type: object
      required:
        - path
      properties:
        path:
          allOf:
            - $ref: '#/components/schemas/FileSystemPath'
            - description: The mount path for the device in the file system.
        permission:
          allOf:
            - $ref: '#/components/schemas/LambdaFilesystemPermission'
            - description: '<p>The permission to access the device: read/only (<code>ro</code>) or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>'
        addGroupOwner:
          allOf:
            - $ref: '#/components/schemas/OptionalBoolean'
            - description: '<p>Whether or not to add the component''s system user as an owner of the device.</p> <p>Default: <code>false</code> </p>'
      description: Contains information about a device that Linux processes in a container can access.
    LambdaFilesystemPermission:
      type: string
      enum:
        - ro
        - rw
    String:
      type: string
    LambdaEnvironmentVariables:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    TopicString:
      type: string
    LambdaEventSourceType:
      type: string
      enum:
        - PUB_SUB
        - IOT_CORE
    LambdaEventSource:
      type: object
      required:
        - topic
        - type
      properties:
        topic:
          allOf:
            - $ref: '#/components/schemas/TopicString'
            - description: The topic to which to subscribe to receive event messages.
        type:
          allOf:
            - $ref: '#/components/schemas/LambdaEventSourceType'
            - description: '<p>The type of event source. Choose from the following options:</p> <ul> <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn''t support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li> <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li> </ul>'
      description: Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.
    LambdaEventSourceList:
      type: array
      items:
        $ref: '#/components/schemas/LambdaEventSource'
    LambdaExecArg:
      type: string
    LambdaExecArgsList:
      type: array
      items:
        $ref: '#/components/schemas/LambdaExecArg'
    LambdaInputPayloadEncodingType:
      type: string
      enum:
        - json
        - binary
    LambdaLinuxProcessParams:
      type: object
      properties:
        isolationMode:
          allOf:
            - $ref: '#/components/schemas/LambdaIsolationMode'
            - description: '<p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p> <p>Default: <code>GreengrassContainer</code> </p>'
        containerParams:
          allOf:
            - $ref: '#/components/schemas/LambdaContainerParams'
            - description: The parameters for the container in which the Lambda function runs.
      description: Contains parameters for a Linux process that contains an Lambda function.
    LambdaIsolationMode:
      type: string
      enum:
        - GreengrassContainer
        - NoContainer
    LambdaVolumeMount:
      type: object
      required:
        - sourcePath
        - destinationPath
      properties:
        sourcePath:
          allOf:
            - $ref: '#/components/schemas/FileSystemPath'
            - description: The path to the physical volume in the file system.
        destinationPath:
          allOf:
            - $ref: '#/components/schemas/FileSystemPath'
            - description: The path to the logical volume in the file system.
        permission:
          allOf:
            - $ref: '#/components/schemas/LambdaFilesystemPermission'
            - description: '<p>The permission to access the volume: read/only (<code>ro</code>) or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>'
        addGroupOwner:
          allOf:
            - $ref: '#/components/schemas/OptionalBoolean'
            - description: '<p>Whether or not to add the IoT Greengrass user group as an owner of the volume.</p> <p>Default: <code>false</code> </p>'
      description: 'Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.'
    NextTokenString:
      type: string
    ListClientDevicesAssociatedWithCoreDeviceRequest:
      type: object
      title: ListClientDevicesAssociatedWithCoreDeviceRequest
      properties: {}
    ListComponentVersionsRequest:
      type: object
      title: ListComponentVersionsRequest
      properties: {}
    ListComponentsRequest:
      type: object
      title: ListComponentsRequest
      properties: {}
    ThingGroupARN:
      type: string
      pattern: 'arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:thinggroup/.+'
    ListCoreDevicesRequest:
      type: object
      title: ListCoreDevicesRequest
      properties: {}
    ListDeploymentsRequest:
      type: object
      title: ListDeploymentsRequest
      properties: {}
    ListEffectiveDeploymentsRequest:
      type: object
      title: ListEffectiveDeploymentsRequest
      properties: {}
    ListInstalledComponentsRequest:
      type: object
      title: ListInstalledComponentsRequest
      properties: {}
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    Memory:
      type: integer
      minimum: 0
      maximum: 9223372036854772000
    ResolveComponentCandidatesRequest:
      type: object
      required:
        - platform
        - componentCandidates
      title: ResolveComponentCandidatesRequest
      properties:
        platform:
          allOf:
            - $ref: '#/components/schemas/ComponentPlatform'
            - description: The platform to use to resolve compatible components.
        componentCandidates:
          allOf:
            - $ref: '#/components/schemas/ComponentCandidateList'
            - description: The list of components to resolve.
    ResolvedComponentVersionsList:
      type: array
      items:
        $ref: '#/components/schemas/ResolvedComponentVersion'
    ResolvedComponentVersion:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionARN'
            - description: 'The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.'
        componentName:
          allOf:
            - $ref: '#/components/schemas/ComponentNameString'
            - description: The name of the component.
        componentVersion:
          allOf:
            - $ref: '#/components/schemas/ComponentVersionString'
            - description: The version of the component.
        recipe:
          allOf:
            - $ref: '#/components/schemas/RecipeBlob'
            - description: The recipe of the component version.
      description: Contains information about a component version that is compatible to run on a Greengrass core device.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'A list of key-value pairs that contain metadata for the resource. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.'
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
security:
  - hmac: []
