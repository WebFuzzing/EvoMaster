openapi: 3.0.3
servers:
  - description: Production server
    url: https://dev.to/api
info:
  contact:
    email: yo@dev.to
    name: DEV Team
    url: https://dev.to/contact
  description: |
    
    Access Forem articles, users and other resources via API.

    For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

    All endpoints that don't require authentication are CORS enabled.

    Dates and date times, unless otherwise specified, must be in
    the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
  termsOfService: https://dev.to/terms
  title: DEV API (beta)
  version: 0.9.7
  x-apisguru-categories:
    - social
  x-logo:
    altText: Forem logo
    backgroundColor: ""
    url: https://res.cloudinary.com/practicaldev/image/fetch/s--EYllUmBG--/c_limit,f_auto,fl_progressive,q_80,w_190/https://res.cloudinary.com/practicaldev/image/fetch/s--m5i3pkpk--/c_limit%252cf_auto%252cfl_progressive%252cq_auto%252cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sf6uve8ehm4ogwka0mez.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/forem/forem/master/docs/api_v0.yml
      version: "3.0"
  x-providerName: dev.to
tags:
  - description: Articles are all the posts users create on DEV
    name: articles
  - description: Users can leave comments to articles and podcasts episodes
    name: comments
  - description: Resources are user can follow
    name: follows
  - description: Users can follow other users on the website
    name: followers
  - description: Listings are classified ads
    name: listings
  - description: Users can create and join organizations
    name: organizations
  - description: Podcast episodes
    name: podcast-episodes
  - description: User's reading list
    name: readinglist
  - description: Tags for articles
    name: tags
  - description: Users own resources that require authentication
    name: users
  - description: Video articles
    name: videos
  - description: Webhooks are HTTP endpoints registered to receive events
    name: webhooks
  - description: User or organization profile images
    name: profile images
paths:
  /articles:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        By default it will return featured, published articles ordered
        by descending popularity.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
        - description: |
            Using this parameter will retrieve articles that contain the
            requested tag.

            Articles will be ordered by descending popularity.

            This parameter can be used in conjuction with `top`.
          example: discuss
          in: query
          name: tag
          schema:
            type: string
        - description: |
            Using this parameter will retrieve articles with any of the comma-separated tags.

            Articles will be ordered by descending popularity.
          example: javascript, css
          in: query
          name: tags
          schema:
            type: string
        - description: |
            Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.

            Articles will be ordered by descending popularity.
          example: node, java
          in: query
          name: tags_exclude
          schema:
            type: string
        - description: |
            Using this parameter will retrieve articles belonging
            to a User or Organization ordered by descending publication date.

            If `state=all` the number of items returned will be `1000` instead of the default `30`.

            This parameter can be used in conjuction with `state`.
          example: ben
          in: query
          name: username
          schema:
            type: string
        - description: |
            Using this parameter will allow the client to check which articles are fresh or rising.

            If `state=fresh` the server will return fresh articles.
            If `state=rising` the server will return rising articles.

            This param can be used in conjuction with `username`, only if set to `all`.
          example: fresh
          in: query
          name: state
          schema:
            enum:
              - fresh
              - rising
              - all
            type: string
        - description: |
            Using this parameter will allow the client to return the most popular articles
            in the last `N` days.

            `top` indicates the number of days since publication of the articles
            returned.

            This param can be used in conjuction with `tag`.
          example: 2
          in: query
          name: top
          schema:
            format: int32
            minimum: 1
            type: integer
        - description: |
            Adding this will allow the client to return the list of articles
            belonging to the requested collection, ordered by ascending
            publication date.
          example: 99
          in: query
          name: collection_id
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                articles-success:
                  $ref: "#/components/examples/ArticlesIndex"
              schema:
                items:
                  $ref: "#/components/schemas/ArticleIndex"
                type: array
          description: A list of articles
      summary: Published articles
      tags:
        - articles
      x-codeSamples:
        - label: curl (all articles)
          lang: Shell
          source: |
            curl https://dev.to/api/articles
        - label: curl (user's articles)
          lang: Shell
          source: |
            curl https://dev.to/api/articles?username=ben
    post:
      description: |
        This endpoint allows the client to create a new article.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        ### Rate limiting

        There is a limit of 10 requests per 30 seconds.

        ### Additional resources

        - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)
      operationId: createArticle
      requestBody:
        content:
          application/json:
            examples:
              article-create-front-matter:
                $ref: "#/components/examples/ArticleCreateFrontMatter"
              article-create-organization:
                $ref: "#/components/examples/ArticleCreateOrganization"
              article-create-title-body:
                $ref: "#/components/examples/ArticleCreateTitleBody"
            schema:
              $ref: "#/components/schemas/ArticleCreate"
        description: Article to create
      responses:
        "201":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticleShow"
              schema:
                $ref: "#/components/schemas/ArticleShow"
          description: A newly created article
          headers:
            Location:
              description: The URL of the new article
              schema:
                format: url
                type: string
        "400":
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: "#/components/examples/ErrorBadRequest"
              schema:
                $ref: "#/components/schemas/APIError"
          description: BadRequest
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error-forbidden:
                  $ref: "#/components/examples/ErrorForbidden"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Forbidden
        "422":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorUnprocessableEntity"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorTooManyRequests"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Too Many Requests
          headers:
            Retry-After:
              description: The number of seconds to wait until the next request
              schema:
                format: int32
                type: integer
      security:
        - api_key: []
        - oauth2: []
      summary: Create a new article
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"article":{"title":"Title","body_markdown":"Body","published":false,"tags":["discuss", "javascript"]}}' \
              https://dev.to/api/articles
        - label: curl (with front matter)
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
            -H "api-key: API_KEY" \
            -d '{"article":{"body_markdown":"---\ntitle:A sample article about...\npublished:false\n---\n..."}}' \
            https://dev.to/api/articles
  /articles/latest:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles.
        ordered by descending publish date.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getLatestArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                articles-success:
                  $ref: "#/components/examples/ArticlesIndex"
              schema:
                items:
                  $ref: "#/components/schemas/ArticleIndex"
                type: array
          description: A list of articles sorted by descending publish date
      summary: Published articles sorted by publish date
      tags:
        - articles
  /articles/me:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ArticleMe"
                type: array
          description: A list of published articles
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: User's articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me
  /articles/me/all:
    get:
      description: |
        This endpoint allows the client to retrieve a list of all articles on
        behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        It will return both published and unpublished articles with pagination.

        Unpublished articles will be at the top of the list in reverse chronological creation order.
        Published articles will follow in reverse chronological publication order.

        By default a page will contain `30` articles.
      operationId: getUserAllArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ArticleMe"
                type: array
          description: A list of articles
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: User's all articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me/all
  /articles/me/published:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserPublishedArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ArticleMe"
                type: array
          description: A list of published articles
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: User's published articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me/published
  /articles/me/unpublished:
    get:
      description: |
        This endpoint allows the client to retrieve a list of unpublished articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Unpublished articles will be in reverse chronological creation order.

        It will return unpublished articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserUnpublishedArticles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ArticleMe"
                type: array
          description: A list of articles
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: User's unpublished articles
      tags:
        - articles
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/articles/me/unpublished
  "/articles/{id}":
    get:
      description: |
        This endpoint allows the client to retrieve a single
        published article given its `id`.
      operationId: getArticleById
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticleShow"
              schema:
                $ref: "#/components/schemas/ArticleShow"
          description: An article
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: A published article by ID
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/articles/150589
    parameters:
      - description: Id of the article
        example: 150589
        in: path
        name: id
        required: true
        schema:
          format: int32
          minimum: 1
          type: integer
    put:
      description: |
        This endpoint allows the client to update an existing article.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        ### Rate limiting

        There is a limit of 30 requests per 30 seconds.

        ### Additional resources

        - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)
      operationId: updateArticle
      requestBody:
        content:
          application/json:
            examples:
              article-update-front-matter:
                $ref: "#/components/examples/ArticleCreateFrontMatter"
              article-update-organization:
                $ref: "#/components/examples/ArticleCreateOrganization"
              article-update-title-body:
                $ref: "#/components/examples/ArticleCreateTitleBody"
            schema:
              $ref: "#/components/schemas/ArticleUpdate"
        description: |
          Article params for the update.

          *Note: if the article contains a front matter in its body, its front
          matter properties will still take precedence over any JSON equivalent
          params, which means that the full body_markdown with the modified
          front matter params needs to be provided for an update to be successful*
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticleShow"
              schema:
                $ref: "#/components/schemas/ArticleShow"
          description: The updated article
        "400":
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: "#/components/examples/ErrorBadRequest"
              schema:
                $ref: "#/components/schemas/APIError"
          description: BadRequest
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error-forbidden:
                  $ref: "#/components/examples/ErrorForbidden"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Forbidden
        "422":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorUnprocessableEntity"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorTooManyRequests"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Too Many Requests
          headers:
            Retry-After:
              description: The number of seconds to wait until the next request
              schema:
                format: int32
                type: integer
      security:
        - api_key: []
        - oauth2: []
      summary: Update an article
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"article":{"title":"Title"}}' \
              https://dev.to/api/articles/{id}
  "/articles/{username}/{slug}":
    get:
      description: |
        This endpoint allows the client to retrieve a single
        published article given its `path`.
      operationId: getArticleByPath
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticleShow"
              schema:
                $ref: "#/components/schemas/ArticleShow"
          description: An article
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: A published article by path
      tags:
        - articles
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/articles/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
    parameters:
      - description: User or organization username.
        example: devteam
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Slug of the article.
        example: for-empowering-community-2k6h
        in: path
        name: slug
        required: true
        schema:
          type: string
  /comments:
    get:
      description: |
        This endpoint allows the client to retrieve all comments belonging to an
        article or podcast episode as threaded conversations.

        It will return the all top level comments with their nested comments as
        threads. See the format specification for further details.
      operationId: getCommentsByArticleId
      parameters:
        - description: Article identifier.
          example: 270180
          in: query
          name: a_id
          schema:
            format: int32
            minimum: 1
            type: integer
        - description: Podcast Episode identifier.
          example: 124
          in: query
          name: p_id
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                comments-success:
                  $ref: "#/components/examples/Comments"
                comments-success-deleted:
                  $ref: "#/components/examples/CommentsDeleted"
                comments-success-hidden:
                  $ref: "#/components/examples/CommentsHidden"
              schema:
                items:
                  $ref: "#/components/schemas/Comment"
                type: array
          description: A list of threads of comments
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Comments
      tags:
        - comments
      x-codeSamples:
        - label: curl (all comments of an article)
          lang: Shell
          source: |
            curl https://dev.to/api/comments?a_id=270180
        - label: curl (all comments of a podcast episode)
          lang: Shell
          source: |
            curl https://dev.to/api/comments?p_id=124
  "/comments/{id}":
    get:
      description: |
        This endpoint allows the client to retrieve a comment as well as his
        descendants comments.

        It will return the required comment (the root) with its nested
        descendants as a thread.

        See the format specification for further details.
      operationId: getCommentById
      parameters:
        - description: Comment identifier.
          example: m35m
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                comment-success:
                  $ref: "#/components/examples/Comment"
                comments-success-deleted:
                  $ref: "#/components/examples/CommentDeleted"
                comments-success-hidden:
                  $ref: "#/components/examples/CommentHidden"
              schema:
                $ref: "#/components/schemas/Comment"
          description: A comment and its descendants
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Comment
      tags:
        - comments
      x-codeSamples:
        - label: curl (a comment and its descendants)
          lang: Shell
          source: |
            curl https://dev.to/api/comments/m51e
  /followers/users:
    get:
      description: |
        This endpoint allows the client to retrieve a list of the followers
        they have.

        "Followers" are users that are following other users on the website.

        It supports pagination, each page will contain `80` followers by default.
      operationId: getFollowers
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam80to1000"
        - description: |
            Specifies the sort order for the `created_at` param of the follow
            relationship. To sort by newest followers first (descending order)
            specify `?sort=-created_at`.
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            pattern: ^-?\w+(,-?\w+)*$
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                followers-success:
                  $ref: "#/components/examples/Followers"
              schema:
                items:
                  $ref: "#/components/schemas/Follower"
                type: array
          description: A list of followers
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
      summary: Followers
      tags:
        - followers
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/followers/users
  /follows/tags:
    get:
      description: |
        This endpoint allows the client to retrieve a list of the tags
        they follow.
      operationId: getFollowedTags
      responses:
        "200":
          content:
            application/json:
              examples:
                followers-success:
                  $ref: "#/components/examples/TagsFollowed"
              schema:
                items:
                  $ref: "#/components/schemas/FollowedTag"
                type: array
          description: A list of followed tags
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
      summary: Followed tags
      tags:
        - follows
        - tags
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/follows/tags
  /listings:
    get:
      description: |
        This endpoint allows the client to retrieve a list of listings.

        "Listings" are classified ads that users create on DEV.
        They can be related to conference announcements, job offers, mentorships,
        upcoming events and more.

        By default it will return published listings ordered by descending
        freshness.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getListings
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
        - $ref: "#/components/parameters/listingCategoryParam"
      responses:
        "200":
          content:
            application/json:
              examples:
                listings-success:
                  $ref: "#/components/examples/Listings"
              schema:
                items:
                  $ref: "#/components/schemas/Listing"
                type: array
          description: A list of listings
      summary: Published listings
      tags:
        - listings
      x-codeSamples:
        - label: curl (all listings)
          lang: Shell
          source: |
            curl https://dev.to/api/listings
    post:
      description: |
        This endpoint allows the client to create a new listing.

        "Listings" are classified ads that users create on DEV.
        They can be related to conference announcements, job offers, mentorships,
        upcoming events and more.

        The user creating the listing or the organization on which behalf the user
        is creating for need to have enough creadits for this operation to be
        successful. The server will prioritize the organization's credits over
        the user's credits.

        ### Additional resources

        - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb)
      operationId: createListing
      requestBody:
        content:
          application/json:
            examples:
              listing-create:
                $ref: "#/components/examples/ListingCreate"
              listing-create-organization:
                $ref: "#/components/examples/ListingCreateOrganization"
            schema:
              $ref: "#/components/schemas/ListingCreate"
        description: Listing to create
      responses:
        "201":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/Listing"
              schema:
                $ref: "#/components/schemas/Listing"
          description: A newly created Listing
        "400":
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: "#/components/examples/ErrorBadRequest"
              schema:
                $ref: "#/components/schemas/APIError"
          description: BadRequest
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "402":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorPaymentRequired"
              schema:
                $ref: "#/components/schemas/APIError"
          description: PaymentRequired
        "422":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorUnprocessableEntity"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unprocessable Entity
      security:
        - api_key: []
      summary: Create a new listing
      tags:
        - listings
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp"}}' \
              https://dev.to/api/listings
        - label: curl (with tags)
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp","tags":["python"]}}' \
              https://dev.to/api/listings
        - label: curl (draft)
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title","body_markdown":"Body","category":"cfp","action":"draft"}}' \
              https://dev.to/api/listings
  "/listings/category/{category}":
    get:
      description: |
        This endpoint allows the client to retrieve a list of listings belonging
        to the specified category.

        "Listings" are classified ads that users create on DEV.
        They can be related to conference announcements, job offers, mentorships,
        upcoming events and more.

        By default it will return published listings ordered by descending
        freshness.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getListingsByCategory
      parameters:
        - description: The category of the listing
          in: path
          name: category
          required: true
          schema:
            $ref: "#/components/schemas/ListingCategory"
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                listings-success:
                  $ref: "#/components/examples/Listings"
              schema:
                items:
                  $ref: "#/components/schemas/Listing"
                type: array
          description: A list of listings
      summary: Published listings by category
      tags:
        - listings
      x-codeSamples:
        - label: curl (call for papers listings)
          lang: Shell
          source: |
            curl https://dev.to/api/listings/category/cfp
  "/listings/{id}":
    get:
      description: |
        This endpoint allows the client to retrieve
        a single listing given its `id`.

        An unpublished listing is only accessible if authentication is supplied
        and it belongs to the authenticated user.
      operationId: getListingById
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/Listing"
              schema:
                $ref: "#/components/schemas/Listing"
          description: A listing
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      security:
        - {}
        - api_key: []
      summary: A listing
      tags:
        - listings
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/listings/1184
        - label: curl (with authentication)
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/listings/1185
    parameters:
      - description: Id of the listing
        example: 1
        in: path
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
    put:
      description: |
        This endpoint allows the client to update an existing listing.
      operationId: updateListing
      requestBody:
        content:
          application/json:
            examples:
              listing-update:
                $ref: "#/components/examples/ListingUpdate"
              listing-update-action-bump:
                $ref: "#/components/examples/ListingUpdateActionBump"
              listing-update-action-publish:
                $ref: "#/components/examples/ListingUpdateActionPublish"
              listing-update-action-unpublish:
                $ref: "#/components/examples/ListingUpdateActionUnpublish"
            schema:
              $ref: "#/components/schemas/ListingUpdate"
        description: |
          Listing params for the update.

          **Note**: except for bumping, publishing and unpublishing there are the
          following restrictions on the ability to update listings:

          - the payload has to contain at least one param among `title`, `body_markdown` or `tags`/`tag_list`
          - the listing can't be updated if it has not been bumped in the last 24 hours
          - the listing can't be updated if it has been published but not recently bumped
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticleShow"
              schema:
                $ref: "#/components/schemas/ArticleShow"
          description: The updated article
        "400":
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: "#/components/examples/ErrorBadRequest"
              schema:
                $ref: "#/components/schemas/APIError"
          description: BadRequest
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "402":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorPaymentRequired"
              schema:
                $ref: "#/components/schemas/APIError"
          description: PaymentRequired
        "422":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorUnprocessableEntity"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unprocessable Entity
      security:
        - api_key: []
      summary: Update a listing
      tags:
        - listings
      x-codeSamples:
        - label: curl (bump)
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"action":"bump"}' \
              https://dev.to/api/listings/{id}
        - label: curl (update)
          lang: Shell
          source: |
            curl -X PUT -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"listing":{"title":"Title"}' \
              https://dev.to/api/listings/{id}
  "/organizations/{username}":
    get:
      description: |
        This endpoint allows the client to retrieve a single organization by their username
      operationId: getOrganization
      parameters:
        - description: |
            Username of the organization
          example: ecorp
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                user-success:
                  $ref: "#/components/examples/Organization"
              schema:
                $ref: "#/components/schemas/Organization"
          description: An organization
        "404":
          content:
            application/json:
              examples:
                user-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: An organization
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp
  "/organizations/{username}/articles":
    get:
      description: |
        This endpoint allows the client to retrieve a list of Articles belonging to the organization

        It supports pagination, each page will contain `30` listing by default.
      operationId: getOrgArticles
      parameters:
        - description: |
            Username of the organization
          example: ecorp
          in: path
          name: username
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                article-success:
                  $ref: "#/components/examples/ArticlesIndex"
              schema:
                items:
                  $ref: "#/components/schemas/ArticleIndex"
                type: array
          description: A list of users belonging to the organization
        "404":
          content:
            application/json:
              examples:
                user-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Organization's Articles
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/listings
  "/organizations/{username}/listings":
    get:
      description: |
        This endpoint allows the client to retrieve a list of listings belonging to the organization

        It supports pagination, each page will contain `30` listing by default.
      operationId: getOrgListings
      parameters:
        - description: |
            Username of the organization
          example: ecorp
          in: path
          name: username
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
        - $ref: "#/components/parameters/listingCategoryParam"
      responses:
        "200":
          content:
            application/json:
              examples:
                user-success:
                  $ref: "#/components/examples/ListingsByOrganization"
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/Listing"
                    - required:
                        - organization
                type: array
          description: A list of listings belonging to the organization
        "404":
          content:
            application/json:
              examples:
                user-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Organization's listings
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/listings
  "/organizations/{username}/users":
    get:
      description: |
        This endpoint allows the client to retrieve a list of users belonging to the organization

        It supports pagination, each page will contain `30` users by default.
      operationId: getOrgUsers
      parameters:
        - description: |
            Username of the organization
          example: ecorp
          in: path
          name: username
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                user-success:
                  $ref: "#/components/examples/Users"
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
          description: A list of users belonging to the organization
        "404":
          content:
            application/json:
              examples:
                user-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Organization's users
      tags:
        - organizations
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/organizations/ecorp/users
  /podcast_episodes:
    get:
      description: |
        This endpoint allows the client to retrieve a list of podcast episodes.

        "Podcast episodes" are episodes belonging to podcasts.

        It will only return active podcast episodes that belong to published
        podcasts available on the platform,
        ordered by descending publication date.

        It supports pagination, each page will contain `30` articles by default.
      operationId: getPodcastEpisodes
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to1000"
        - description: |
            Using this parameter will retrieve episodes belonging
            to a specific podcast.
          example: codenewbie
          in: query
          name: username
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                articles-success:
                  $ref: "#/components/examples/PodcastEpisodes"
              schema:
                items:
                  $ref: "#/components/schemas/PodcastEpisode"
                type: array
          description: A list of podcast episodes
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: Published podcast episodes
      tags:
        - podcast-episodes
      x-codeSamples:
        - label: curl (all podcast episodes)
          lang: Shell
          source: |
            curl https://dev.to/api/podcast_episodes
        - label: curl (all episodes belonging to a podcast)
          lang: Shell
          source: |
            curl https://dev.to/api/podcast_episodes?username=codenewbie
  "/profile_images/{username}":
    get:
      description: |
        This endpoint allows the client to retrieve a user or organization
        profile image information by its corresponding username
      operationId: getProfileImage
      parameters:
        - description: Username of the user or organization
          example: diogoosorio
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                profile-image-success:
                  $ref: "#/components/examples/ProfileImage"
              schema:
                $ref: "#/components/schemas/ProfileImage"
          description: The profile image
        "404":
          content:
            application/json:
              examples:
                profile-image-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: User or organization profile picture
      tags:
        - profile images
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/profile_images/diogoosorio
  /readinglist:
    get:
      description: |
        This endpoint allows the client to retrieve a list of readinglist reactions along with the related article for the authenticated user.

        Reading list will be in reverse chronological order base
        on the creation of the reaction.

        It will return paginated reading list items along with the articles
        they refer to. By default a page will contain `30` items
      operationId: getReadinglist
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam30to100"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReadingList"
                type: array
          description: The reading list with a overwiew of the article
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: User's reading list
      tags:
        - readinglist
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/readinglist
  /tags:
    get:
      description: |
        This endpoint allows the client to retrieve a list of tags
        that can be used to tag articles.

        It will return tags ordered by popularity.

        It supports pagination, each page will contain `10` tags by default.
      operationId: getTags
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam10to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                articles-success:
                  $ref: "#/components/examples/Tags"
              schema:
                items:
                  $ref: "#/components/schemas/Tag"
                type: array
          description: A list of tags
      summary: Tags
      tags:
        - tags
      x-codeSamples:
        - label: curl (all tags)
          lang: Shell
          source: |
            curl https://dev.to/api/tags
  /users/me:
    get:
      description: |
        This endpoint allows the client to retrieve information
        about the authenticated user
      operationId: getUserMe
      responses:
        "200":
          content:
            application/json:
              examples:
                user-success:
                  $ref: "#/components/examples/User"
              schema:
                $ref: "#/components/schemas/User"
          description: A user
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: The authenticated user
      tags:
        - users
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/users/me
  "/users/{id}":
    get:
      description: |
        This endpoint allows the client to retrieve a single user, either by
        id or by the user's username
      operationId: getUser
      parameters:
        - description: |
            Id of the user.

            It can be either of the following two values:

              - an integer representing the id of the user
              - the string `by_username` (needs to be used in conjuction with the param `url`)
          example: "1"
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Username of the user
          example: ben
          in: query
          name: url
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                user-success:
                  $ref: "#/components/examples/User"
              schema:
                $ref: "#/components/schemas/User"
          description: A user
        "404":
          content:
            application/json:
              examples:
                user-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      summary: A user
      tags:
        - users
      x-codeSamples:
        - label: curl (by id)
          lang: Shell
          source: |
            curl https://dev.to/api/users/1
        - label: curl (by username)
          lang: Shell
          source: |
            curl https://dev.to/api/users/by_username?url=ben
  /videos:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles
        that are uploaded with a video.

        It will only return published video articles
        ordered by descending popularity.

        It supports pagination, each page will contain `24` articles by default.
      operationId: getArticlesWithVideo
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/perPageParam24to1000"
      responses:
        "200":
          content:
            application/json:
              examples:
                articles-success:
                  $ref: "#/components/examples/ArticleVideo"
              schema:
                items:
                  $ref: "#/components/schemas/ArticleVideo"
                type: array
          description: A list of video articles
      summary: Articles with a video
      tags:
        - articles
        - videos
      x-codeSamples:
        - label: curl (all video articles)
          lang: Shell
          source: |
            curl https://dev.to/api/videos
  /webhooks:
    get:
      description: |
        This endpoint allows the client to retrieve a list of webhooks they have
        previously registered.

        "Webhooks" are used to register HTTP endpoints that will be called once a relevant event is
        triggered inside the web application, events like `article_created`, `article_updated`.

        It will return all webhooks, without pagination.
      operationId: getWebhooks
      responses:
        "200":
          content:
            application/json:
              examples:
                webhooks-success:
                  summary: Successful response
                  value:
                    - created_at: 2019-09-02T09:47:39.230Z
                      events:
                        - article_created
                      id: 1
                      source: DEV
                      target_url: https://example.com/webhooks/webhook1
                      type_of: webhook_endpoint
              schema:
                items:
                  $ref: "#/components/schemas/WebhookIndex"
                type: array
          description: A list of webhooks
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
      security:
        - api_key: []
        - oauth2: []
      summary: Webhooks
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -H "api-key: API_KEY" https://dev.to/api/webhooks
    post:
      description: |
        This endpoint allows the client to create a new webhook.

        "Webhooks" are used to register HTTP endpoints that will be called once a relevant event is
        triggered inside the web application, events like `article_created`, `article_updated`.
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            examples:
              webhook-create:
                $ref: "#/components/examples/WebhookCreate"
            schema:
              $ref: "#/components/schemas/WebhookCreate"
        description: Webhook to create
      responses:
        "201":
          content:
            application/json:
              examples:
                webhook-success:
                  $ref: "#/components/examples/WebhookShow"
              schema:
                $ref: "#/components/schemas/WebhookShow"
          description: A newly created webhook
        "400":
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: "#/components/examples/ErrorBadRequest"
              schema:
                $ref: "#/components/schemas/APIError"
          description: BadRequest
        "401":
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "422":
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: "#/components/examples/ErrorUnprocessableEntity"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unprocessable Entity
      security:
        - api_key: []
        - oauth2: []
      summary: Create a new webhook
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X POST -H "Content-Type: application/json" \
              -H "api-key: API_KEY" \
              -d '{"webhook_endpoint":{"target_url":"https://example.org/webhooks/webhook1","source":"DEV","events":["article_created"]}}' \
              https://dev.to/api/webhooks
  "/webhooks/{id}":
    delete:
      description: |
        This endpoint allows the client to delete a single
        webhook given its `id`.
      operationId: deleteWebhook
      responses:
        "204":
          description: A successful deletion
        "401":
          content:
            application/json:
              examples:
                article-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      security:
        - api_key: []
        - oauth2: []
      summary: A webhook endpoint
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl -X DELETE \
              -H "api-key: API_KEY" \
              https://dev.to/api/webhooks/1
    get:
      description: |
        This endpoint allows the client to retrieve a single
        webhook given its `id`.
      operationId: getWebhookById
      responses:
        "200":
          content:
            application/json:
              examples:
                webhook-success:
                  $ref: "#/components/examples/WebhookShow"
              schema:
                $ref: "#/components/schemas/WebhookShow"
          description: A webhook endpoint
        "401":
          content:
            application/json:
              examples:
                article-unauthorized:
                  $ref: "#/components/examples/ErrorUnauthorized"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: "#/components/examples/ErrorNotFound"
              schema:
                $ref: "#/components/schemas/APIError"
          description: Resource not found
      security:
        - api_key: []
        - oauth2: []
      summary: A webhook endpoint
      tags:
        - webhooks
      x-codeSamples:
        - label: curl
          lang: Shell
          source: |
            curl https://dev.to/api/webhooks/123
    parameters:
      - description: Id of the webhook
        example: 123
        in: path
        name: id
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
components:
  examples:
    ArticleCreateFrontMatter:
      value:
        article:
          body_markdown: |
            ---
            title: Hello, World!
            published: true
            tags: discuss, help
            date: 20190701T10:00Z
            series: Hello series
            ---

            Hello DEV, this is my first post
    ArticleCreateOrganization:
      value:
        article:
          body_markdown: Hello DEV, this is my first post
          organization_id: 1234
          published: true
          series: Hello series
          tags:
            - discuss
            - help
          title: Hello, World!
    ArticleCreateTitleBody:
      value:
        article:
          body_markdown: Hello DEV, this is my first post
          published: true
          series: Hello series
          tags:
            - discuss
            - help
          title: Hello, World!
    ArticleShow:
      value:
        body_html: |
          <p>Today's episode of Byte Sized is about Leonhard Euler and the creation of <a href="https://en.wikipedia.org/wiki/Graph_theory">Graph Theory</a>.</p>

          <p>For more about how Graph Theory works, check out this video from BaseCS!</p>...
        body_markdown: "---\r

          title: Byte Sized Episode 2: The Creation of Graph Theory \r

          published: true\r

          description: The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.\r

          tags: computerscience, graphtheory, bytesized, history\r

          cover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\r

          series: Byte Sized Season 1\r

          ---\r

          \r

          Today's episode of Byte Sized is about Leonhard Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\r

          \r

          For more about how Graph Theory works, check out this video from BaseCS!..."
        canonical_url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        collection_id: 1693
        comments_count: 21
        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        created_at: 2019-07-31T11:15:06Z
        crossposted_at: null
        description: The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.
        edited_at: null
        id: 150589
        last_comment_at: 2019-08-06T16:48:10Z
        organization:
          name: Byte Sized
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
          slug: bytesized
          username: bytesized
        path: /bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        positive_reactions_count: 122
        public_reactions_count: 322
        published_at: 2019-08-01T15:47:54Z
        published_timestamp: 2019-08-01T15:47:54Z
        readable_publish_date: Aug  1
        reading_time_minutes: 15
        slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1
        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        tag_list: computerscience, graphtheory, bytesized, history
        tags:
          - computerscience
          - graphtheory
          - bytesized
          - history
        title: "Byte Sized Episode 2: The Creation of Graph Theory "
        type_of: article
        url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        user:
          github_username: vaidehijoshi
          name: Vaidehi Joshi
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
          twitter_username: vaidehijoshi
          username: vaidehijoshi
          website_url: http://www.vaidehi.com
    ArticleVideo:
      value:
        - cloudinary_video_url: https://res.cloudinary.com/....png
          id: 273532
          path: /devteam/basecs-depth-first-search-implementing-4kkl
          title: "BaseCS: Depth First Search Implementing"
          type_of: video_article
          user:
            name: Vaidehi Joshi
          user_id: 2882
          video_duration_in_minutes: 11:47
          video_source_url: https://dw71fyauz7yz9.cloudfront.net/123/123.m3u8
    ArticlesIndex:
      value:
        - canonical_url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          collection_id: null
          comments_count: 37
          cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--74Bl23tz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
          created_at: 2019-10-24T13:41:29Z
          crossposted_at: null
          description: ""
          edited_at: 2019-10-24T13:56:35Z
          id: 194541
          last_comment_at: 2019-10-25T08:12:43Z
          organization:
            name: The DEV Team
            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--0kDBq1Ne--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--8tTU-XkZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
            slug: devteam
            username: devteam
          path: /devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          positive_reactions_count: 12
          public_reactions_count: 142
          published_at: 2019-10-24T13:52:17Z
          published_timestamp: 2019-10-24T13:52:17Z
          readable_publish_date: Oct 24
          reading_time_minutes: 15
          slug: there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--SeMxdKIa--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
          tag_list:
            - meta
            - changelog
            - css
            - ux
          tags: meta, changelog, css, ux
          title: There's a new DEV theme in town for all you 10x hackers out there (plus one actually useful new feature)
          type_of: article
          url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
          user:
            github_username: benhalpern
            name: Ben Halpern
            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--Y1sq1tFG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--DcW51A6v--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
            twitter_username: bendhalpern
            username: ben
            website_url: http://benhalpern.com
    Comment:
      value:
        body_html: |
          <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
          <html><body>
          <p>...</p>

          <p>...</p>

          </body></html>
        children:
          - body_html: |
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
              <html><body>

              <p>...</p>

              </body></html>
            children: []
            created_at: 2020-07-02T17:19:40Z
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: https://res.cloudinary.com/...jpeg
              profile_image_90: https://res.cloudinary.com/....jpeg
              twitter_username: null
              username: rhymes
              website_url: null
        created_at: 2020-08-02T17:19:40Z
        id_code: m357
        type_of: comment
        user:
          github_username: null
          name: Dario Waelchi
          profile_image: https://res.cloudinary.com/...png
          profile_image_90: https://res.cloudinary.com/...png
          twitter_username: null
          username: dario waelchi
          website_url: null
    CommentDeleted:
      value:
        body_html: <p>[deleted]</p>
        children:
          - body_html: |
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
              <html><body>

              <p>...</p>

              </body></html>
            children: []
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: https://res.cloudinary.com/...jpeg
              profile_image_90: https://res.cloudinary.com/...jpeg
              twitter_username: null
              username: rhymes
              website_url: null
        id_code: m357
        type_of: comment
        user: {}
    CommentHidden:
      value:
        body_html: <p>[hidden by post author]</p>
        children:
          - body_html: |
              <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
              <html><body>

              <p>...</p>

              </body></html>
            children: []
            id_code: m35m
            type_of: comment
            user:
              github_username: null
              name: rhymes
              profile_image: https://res.cloudinary.com/...jpeg
              profile_image_90: https://res.cloudinary.com/...jpeg
              twitter_username: null
              username: rhymes
              website_url: null
        id_code: m357
        type_of: comment
        user: {}
    Comments:
      value:
        - body_html: |
            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
            <html><body>
            <p>...</p>

            </body></html>
          children: []
          created_at: 2020-07-01T17:59:43Z
          id_code: m3m0
          type_of: comment
          user:
            github_username: null
            name: Heriberto Morissette
            profile_image: https://res.cloudinary.com/...jpeg
            profile_image_90: https://res.cloudinary.com/...jpeg
            twitter_username: null
            username: heriberto_morissette
            website_url: null
        - body_html: |
            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
            <html><body>
            <p>...</p>

            <p>...</p>

            </body></html>
          children:
            - body_html: |
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
                <html><body>

                <p>...</p>

                </body></html>
              children: []
              created_at: 2020-08-01T11:59:40Z
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: https://res.cloudinary.com/...jpeg
                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          created_at: 2020-07-02T17:19:40Z
          id_code: m357
          type_of: comment
          user:
            github_username: null
            name: Dario Waelchi
            profile_image: https://res.cloudinary.com/...png
            profile_image_90: https://res.cloudinary.com/...png
            twitter_username: null
            username: dario waelchi
            website_url: null
    CommentsDeleted:
      value:
        - body_html: <p>[deleted]</p>
          children:
            - body_html: |
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
                <html><body>

                <p>...</p>

                </body></html>
              children: []
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: https://res.cloudinary.com/...jpeg
                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          id_code: m357
          type_of: comment
          user: {}
    CommentsHidden:
      value:
        - body_html: <p>[hidden by post author]</p>
          children:
            - body_html: |
                <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
                <html><body>

                <p>...</p>

                </body></html>
              children: []
              id_code: m35m
              type_of: comment
              user:
                github_username: null
                name: rhymes
                profile_image: https://res.cloudinary.com/...jpeg
                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg
                twitter_username: null
                username: rhymes
                website_url: null
          id_code: m357
          type_of: comment
          user: {}
    ErrorBadRequest:
      value:
        error: bad request
        status: 400
    ErrorForbidden:
      value:
        error: forbidden
        status: 403
    ErrorNotFound:
      value:
        error: not found
        status: 404
    ErrorPaymentRequired:
      value:
        error: not enough available credits
        status: 402
    ErrorTooManyRequests:
      value:
        error: Rate limit reached, try again in 30 seconds
        status: 429
    ErrorUnauthorized:
      value:
        error: unauthorized
        status: 401
    ErrorUnprocessableEntity:
      value:
        error: "param is missing or the value is empty: article"
        status: 422
    Followers:
      value:
        - created_at: 2021-04-02T04:21:46Z
          id: 12
          name: Mrs. Neda Morissette
          path: /nedamrsmorissette
          profile_image: https://res.cloudinary.com/...
          type_of: user_follower
          username: nedamrsmorissette
        - created_at: 2021-04-02T04:21:46Z
          id: 11
          name: Yoko Hintz
          path: /yokohintz
          profile_image: https://res.cloudinary.com/...
          type_of: user_follower
          username: yokohintz
    Listing:
      value:
        body_markdown: |-
          Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! 

          https://bit.ly/TBDetroit
        category: cfp
        id: 1157
        processed_html: |
          <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>

          <p><a href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
        published: true
        slug: testbash-detroit-50gb
        tag_list: events
        tags:
          - events
        title: TestBash Detroit
        type_of: listing
        user:
          github_username: Heather-R
          name: Heather
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
          twitter_username: null
          username: heatherr
          website_url: null
    ListingCreate:
      value:
        listing:
          body_markdown: Awesome conference
          category: cfp
          tags:
            - events
          title: ACME Conference
    ListingCreateOrganization:
      value:
        listing:
          body_markdown: Awesome conference
          category: cfp
          organization_id: 1
          tags:
            - events
          title: ACME Conference
    ListingUpdate:
      value:
        listing:
          body_markdown: Awesome new conference
          title: ACME New Conference
    ListingUpdateActionBump:
      value:
        listing:
          action: bump
    ListingUpdateActionPublish:
      value:
        listing:
          action: publish
    ListingUpdateActionUnpublish:
      value:
        listing:
          action: unpublish
    Listings:
      value:
        - body_markdown: |-
            Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! 

            https://bit.ly/TBDetroit
          category: cfp
          created_at: 2021-04-07 08:29:42 UTC
          id: 1157
          processed_html: |
            <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>

            <p><a href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
          published: true
          slug: testbash-detroit-50gb
          tag_list: events
          tags:
            - events
          title: TestBash Detroit
          type_of: listing
          user:
            github_username: Heather-R
            name: Heather
            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            twitter_username: null
            username: heatherr
            website_url: null
    ListingsByOrganization:
      value:
        - body_markdown: |-
            Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! 

            https://bit.ly/TBDetroit
          category: cfp
          id: 1157
          organization:
            name: E Corp
            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            slug: ecorp
            username: ecorp
          processed_html: |
            <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>

            <p><a href="https://bit.ly/TBDetroit">https://bit.ly/TBDetroit</a></p>
          published: true
          slug: testbash-detroit-50gb
          tag_list: events
          tags:
            - events
          title: TestBash Detroit
          type_of: listing
          user:
            github_username: Heather-R
            name: Heather
            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg
            twitter_username: null
            username: heatherr
            website_url: null
    Organization:
      value:
        github_username: ecorp
        joined_at: 2019-10-24T13:41:29Z
        location: New York
        name: E Corp
        profile_image: https://res.cloudinary.com/...jpeg
        story: null
        summary: Together we can change the world, with E Corp
        tag_line: null
        tech_stack: Ruby
        twitter_username: ecorp
        type_of: organization
        url: https://ecorp.internet
        username: ecorp
    PodcastEpisodes:
      value:
        - id: 13894
          image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
          path: /codenewbie/s11-e7-why-site-reliability-is-so-important-molly-struve
          podcast:
            image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
            slug: codenewbie
            title: CodeNewbie
          title: S11:E7 - Why site reliability is so important (Molly Struve)
          type_of: podcast_episodes
        - id: 13829
          image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
          path: /codenewbie/s11-e6-what-are-the-pros-and-cons-of-working-in-civic-tech-aidan-feldman
          podcast:
            image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png
            slug: codenewbie
            title: CodeNewbie
          title: S11:E6 - What are the pros and cons of working in civic tech (Aidan Feldman)
          type_of: podcast_episodes
    ProfileImage:
      value:
        image_of: user
        profile_image: https://res.cloudinary.com/...jpeg
        profile_image_90: https://res.cloudinary.com/...jpeg
        type_of: profile_image
    Tags:
      value:
        - bg_color_hex: "#F7DF1E"
          id: 6
          name: javascript
          text_color_hex: "#000000"
        - bg_color_hex: "#562765"
          id: 8
          name: webdev
          text_color_hex: "#ffffff"
    TagsFollowed:
      value:
        - id: 13
          name: discuss
          points: 3
        - id: 12
          name: webdev
          points: 1
    User:
      value:
        github_username: bob
        id: 1234
        joined_at: Jan 1, 2017
        location: New York
        name: bob
        profile_image: https://res.cloudinary.com/...jpeg
        summary: Hello, world
        twitter_username: bob
        type_of: user
        username: bob
        website_url: null
    Users:
      value:
        - github_username: bob
          id: 1234
          joined_at: Jan 1, 2017
          location: New York
          name: bob
          profile_image: https://res.cloudinary.com/...jpeg
          summary: Hello, world
          twitter_username: bob
          type_of: user
          username: bob
          website_url: null
    WebhookCreate:
      value:
        webhook_endpoint:
          events:
            - article_created
          source: DEV
          target_url: https://example.com/webhooks/webhook1
    WebhookShow:
      value:
        created_at: 2019-09-02T09:47:39.230Z
        events:
          - article_created
        id: 1
        source: DEV
        target_url: https://example.com/webhooks/webhook1
        type_of: webhook_endpoint
        user:
          github_username: bob
          name: bob
          profile_image: ...
          profile_image_90: ...
          twitter_username: null
          username: bob
          website_url: null
  parameters:
    listingCategoryParam:
      description: |
        Using this parameter will return listings belonging to the
        requested category.
      example: cfp
      in: query
      name: category
      schema:
        type: string
    pageParam:
      description: Pagination page.
      in: query
      name: page
      required: false
      schema:
        default: 1
        format: int32
        minimum: 1
        type: integer
    perPageParam10to1000:
      description: Page size (the number of items to return per page).
      in: query
      name: per_page
      required: false
      schema:
        default: 10
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
    perPageParam24to1000:
      description: Page size (the number of items to return per page).
      in: query
      name: per_page
      required: false
      schema:
        default: 24
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
    perPageParam30to100:
      description: Page size (the number of items to return per page).
      in: query
      name: per_page
      required: false
      schema:
        default: 30
        format: int32
        maximum: 100
        minimum: 1
        type: integer
    perPageParam30to1000:
      description: Page size (the number of items to return per page).
      in: query
      name: per_page
      required: false
      schema:
        default: 30
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
    perPageParam80to1000:
      description: Page size (the number of items to return per page).
      in: query
      name: per_page
      required: false
      schema:
        default: 80
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
  schemas:
    APIError:
      properties:
        error:
          type: string
        status:
          format: int32
          type: integer
      required:
        - error
        - status
      type: object
    ArticleCreate:
      properties:
        article:
          properties:
            body_markdown:
              description: |
                The body of the article.

                It can contain an optional front matter. For example

                ```markdown
                ---
                title: Hello, World!
                published: true
                tags: discuss, help
                date: 20190701T10:00Z
                series: Hello series
                canonical_url: https://example.com/blog/hello
                cover_image: article_published_cover_image
                ---
                ```

                `date`, `series` and `canonical_url` are optional.
                `date` is the publication date-time
                `series` is the name of the series the article belongs to
                `canonical_url` is the canonical URL of the article
                `cover_image` is the main image of the article

                *If the markdown contains a front matter, it will take precedence
                on the equivalent params given in the payload.*
              type: string
            canonical_url:
              format: url
              type: string
            description:
              type: string
            main_image:
              format: url
              type: string
            organization_id:
              description: |
                Only users belonging to an organization can assign the article to it
              format: int32
              type: integer
            published:
              description: |
                True to create a published article, false otherwise. Defaults to false
              type: boolean
            series:
              description: |
                Article series name.

                All articles belonging to the same series need to have the same name
                in this parameter.
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
      type: object
    ArticleFlareTag:
      description: Flare tag of the article
      properties:
        bg_color_hex:
          description: Background color (hexadecimal)
          type: string
        name:
          type: string
        text_color_hex:
          description: Text color (hexadecimal)
          type: string
      type: object
    ArticleIndex:
      properties:
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        cover_image:
          format: url
          nullable: true
          type: string
        created_at:
          format: date-time
          type: string
        crossposted_at:
          format: date-time
          nullable: true
          type: string
        description:
          type: string
        edited_at:
          format: date-time
          nullable: true
          type: string
        flare_tag:
          $ref: "#/components/schemas/ArticleFlareTag"
        id:
          format: int32
          type: integer
        last_comment_at:
          format: date-time
          type: string
        organization:
          $ref: "#/components/schemas/SharedOrganization"
        path:
          format: path
          type: string
        positive_reactions_count:
          format: int32
          type: integer
        public_reactions_count:
          format: int32
          type: integer
        published_at:
          format: date-time
          type: string
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        readable_publish_date:
          type: string
        reading_time_minutes:
          description: Reading time, in minutes
          format: int32
          type: integer
        slug:
          type: string
        social_image:
          format: url
          type: string
        tag_list:
          items:
            type: string
          type: array
        tags:
          type: string
        title:
          type: string
        type_of:
          type: string
        url:
          format: url
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      required:
        - type_of
        - id
        - title
        - description
        - cover_image
        - readable_publish_date
        - social_image
        - tag_list
        - tags
        - slug
        - path
        - url
        - canonical_url
        - comments_count
        - positive_reactions_count
        - public_reactions_count
        - created_at
        - edited_at
        - crossposted_at
        - published_at
        - last_comment_at
        - published_timestamp
        - user
        - reading_time_minutes
      type: object
    ArticleMe:
      properties:
        body_markdown:
          description: The body of the article in Markdown format
          type: string
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        cover_image:
          format: url
          nullable: true
          type: string
        description:
          type: string
        flare_tag:
          $ref: "#/components/schemas/ArticleFlareTag"
        id:
          format: int32
          type: integer
        organization:
          $ref: "#/components/schemas/SharedOrganization"
        page_views_count:
          format: int32
          type: integer
        path:
          format: path
          type: string
        positive_reactions_count:
          format: int32
          type: integer
        public_reactions_count:
          format: int32
          type: integer
        published:
          type: boolean
        published_at:
          format: date-time
          type: string
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        reading_time_minutes:
          description: Reading time, in minutes
          format: int32
          type: integer
        slug:
          type: string
        tag_list:
          items:
            type: string
          type: array
        title:
          type: string
        type_of:
          type: string
        url:
          format: url
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      required:
        - type_of
        - id
        - title
        - description
        - cover_image
        - published
        - published_at
        - tag_list
        - slug
        - path
        - url
        - canonical_url
        - comments_count
        - positive_reactions_count
        - public_reactions_count
        - page_views_count
        - published_timestamp
        - body_markdown
        - user
        - reading_time_minutes
      type: object
    ArticleShow:
      properties:
        body_html:
          type: string
        body_markdown:
          type: string
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        cover_image:
          format: url
          nullable: true
          type: string
        created_at:
          format: date-time
          type: string
        crossposted_at:
          format: date-time
          nullable: true
          type: string
        description:
          type: string
        edited_at:
          format: date-time
          nullable: true
          type: string
        flare_tag:
          $ref: "#/components/schemas/ArticleFlareTag"
        id:
          format: int32
          type: integer
        last_comment_at:
          format: date-time
          type: string
        organization:
          $ref: "#/components/schemas/SharedOrganization"
        path:
          format: path
          type: string
        positive_reactions_count:
          format: int32
          type: integer
        public_reactions_count:
          format: int32
          type: integer
        published_at:
          format: date-time
          type: string
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        readable_publish_date:
          type: string
        reading_time_minutes:
          description: Reading time, in minutes
          format: int32
          type: integer
        slug:
          type: string
        social_image:
          format: url
          type: string
        tag_list:
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        type_of:
          type: string
        url:
          format: url
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      required:
        - type_of
        - id
        - title
        - description
        - cover_image
        - readable_publish_date
        - social_image
        - tag_list
        - tags
        - slug
        - path
        - url
        - canonical_url
        - comments_count
        - positive_reactions_count
        - public_reactions_count
        - created_at
        - edited_at
        - crossposted_at
        - published_at
        - last_comment_at
        - published_timestamp
        - body_html
        - body_markdown
        - user
        - reading_time_minutes
      type: object
    ArticleUpdate:
      properties:
        article:
          properties:
            body_markdown:
              description: |
                The body of the article.

                It can contain an optional front matter. For example

                ```markdown
                ---
                title: Hello, World!
                published: true
                tags: discuss, help
                date: 20190701T10:00Z
                series: Hello series
                canonical_url: https://example.com/blog/hello
                cover_image: article_published_cover_image
                ---
                ```

                `date`, `series` and `canonical_url` are optional.
                `date` is the publication date-time
                `series` is the name of the series the article belongs to
                `canonical_url` is the canonical URL of the article
                `cover_image` is the main image of the article

                *If the markdown contains a front matter, it will take precedence
                on the equivalent params given in the payload.*
              type: string
            canonical_url:
              format: url
              type: string
            description:
              type: string
            main_image:
              format: url
              type: string
            organization_id:
              description: |
                Only users belonging to an organization can assign the article to it
              format: int32
              type: integer
            published:
              description: |
                True to create a published article, false otherwise. Defaults to false
              type: boolean
            series:
              description: |
                Article series name.

                All articles belonging to the same series need to have the same name
                in this parameter.

                To remove an article from a series, the `null` value can be used.
              type: string
            tags:
              items:
                type: string
              type: array
            title:
              type: string
          type: object
      type: object
    ArticleVideo:
      properties:
        cloudinary_video_url:
          description: The preview image of the video
          format: url
          type: string
        id:
          format: int32
          type: integer
        path:
          type: string
        title:
          type: string
        type_of:
          type: string
        user:
          properties:
            name:
              description: The user's name
              type: string
          type: object
        user_id:
          format: int32
          type: integer
        video_duration_in_minutes:
          description: |
            The duration of the video.

            If the video duration is below 1 hour, the format will be `mm:ss`,
            if it's 1 hour or above the format will be `h:mm:ss`.
          type: string
        video_source_url:
          format: url
          type: string
      required:
        - type_of
        - id
        - path
        - cloudinary_video_url
        - title
        - user_id
        - video_duration_in_minutes
        - video_source_url
        - user
      type: object
    Comment:
      properties:
        body_html:
          description: HTML formatted comment
          type: string
        children:
          items:
            $ref: "#/components/schemas/Comment"
          type: array
        created_at:
          format: date-time
          type: string
        id_code:
          type: string
        type_of:
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      required:
        - type_of
        - id_code
        - created_at
        - body_html
        - user
        - children
      type: object
    FollowedTag:
      properties:
        id:
          description: Tag id
          format: int64
          type: integer
        name:
          type: string
        points:
          format: float
          type: number
      required:
        - id
        - name
        - points
      type: object
    Follower:
      properties:
        created_at:
          description: Date the user became a follower
          format: date-time
          type: string
        id:
          description: Follow id
          format: int32
          type: integer
        name:
          type: string
        path:
          type: string
        profile_image:
          description: Profile image (60x60)
          format: url
          type: string
        type_of:
          type: string
        username:
          type: string
      required:
        - type_of
        - created_at
        - id
        - name
        - path
        - username
        - profile_image
      type: object
    Listing:
      properties:
        body_markdown:
          type: string
        category:
          $ref: "#/components/schemas/ListingCategory"
        id:
          format: int64
          type: integer
        organization:
          $ref: "#/components/schemas/SharedOrganization"
        processed_html:
          type: string
        published:
          type: boolean
        slug:
          type: string
        tag_list:
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        type_of:
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      required:
        - type_of
        - id
        - title
        - slug
        - body_markdown
        - tag_list
        - tags
        - category
        - processed_html
        - published
        - user
      type: object
    ListingCategory:
      enum:
        - cfp
        - forhire
        - collabs
        - education
        - jobs
        - mentors
        - products
        - mentees
        - forsale
        - events
        - misc
      type: string
    ListingCreate:
      properties:
        listing:
          properties:
            action:
              description: Set it to "draft" to create an unpublished listing
              enum:
                - draft
              type: string
            body_markdown:
              description: The body of the listing in Markdown format.
              type: string
            category:
              $ref: "#/components/schemas/ListingCategory"
            contact_via_connect:
              description: |
                True if users are allowed to contact the listing's owner
                via DEV connect, false otherwise.

                Defaults to false.
              type: boolean
            expires_at:
              description: Date and time of expiration.
              format: date-time
              type: string
            location:
              description: Geographical area or city for the listing.
              type: string
            organization_id:
              description: |
                The id of the organization the user is creating the listing for.

                Only users belonging to an organization can assign the listing to it.
              format: int64
              type: integer
            tag_list:
              description: |
                Comma separated list of tags.

                A maximum of 8 tags are allowed.
              type: string
            tags:
              description: |
                Tags related to the listing.

                A maximum of 8 tags are allowed and it takes precedence over `tag_list`.
              items:
                type: string
              type: array
            title:
              type: string
          required:
            - title
            - body_markdown
            - category
          type: object
      type: object
    ListingUpdate:
      properties:
        listing:
          properties:
            action:
              description: |
                This param can be provided by itself to invoke some actions:

                - `bump` bumps the listing and charge either the
                  organization or the user
                - `publish` publishes a draft listing
                - `unpublish` unpublishes a published listing

                It will take priority on any other param in the payload.
              enum:
                - bump
                - publish
                - unpublish
              type: string
            body_markdown:
              description: The body of the listing in Markdown format.
              type: string
            category:
              $ref: "#/components/schemas/ListingCategory"
            contact_via_connect:
              description: |
                True if users are allowed to contact the listing's owner
                via DEV connect, false otherwise.

                Defaults to false.
              type: boolean
            expires_at:
              description: Date and time of expiration.
              format: date-time
              type: string
            location:
              description: Geographical area or city for the listing.
              type: string
            tag_list:
              description: |
                Comma separated list of tags.

                A maximum of 8 tags are allowed.
              type: string
            tags:
              description: |
                Tags related to the listing.

                A maximum of 8 tags are allowed and it takes precedence over `tag_list`.
              items:
                type: string
              type: array
            title:
              type: string
          type: object
      type: object
    Organization:
      description: Organization
      properties:
        github_username:
          nullable: true
          type: string
        joined_at:
          description: Date of joining
          format: date-time
          type: string
        location:
          nullable: true
          type: string
        name:
          type: string
        profile_image:
          description: Profile image (640x640)
          format: url
          type: string
        story:
          nullable: true
          type: string
        summary:
          nullable: true
          type: string
        tag_line:
          nullable: true
          type: string
        tech_stack:
          nullable: true
          type: string
        twitter_username:
          nullable: true
          type: string
        type_of:
          type: string
        url:
          format: url
          type: string
        username:
          type: string
      type: object
    PodcastEpisode:
      properties:
        id:
          format: int32
          type: integer
        image_url:
          format: url
          type: string
        path:
          type: string
        podcast:
          properties:
            image_url:
              format: url
              type: string
            slug:
              type: string
            title:
              type: string
          type: object
        title:
          type: string
        type_of:
          type: string
      required:
        - type_of
        - id
        - path
        - image_url
        - title
        - podcast
      type: object
    ProfileImage:
      description: Profile image
      properties:
        image_of:
          description: Discriminates what is the type of the profile image owner (user or organization)
          enum:
            - user
            - organization
          type: string
        profile_image:
          description: Profile image (640x640)
          type: string
        profile_image_90:
          description: Profile image (90x90)
          type: string
        type_of:
          enum:
            - profile_image
          type: string
      type: object
    ReadingList:
      properties:
        article:
          $ref: "#/components/schemas/ArticleIndex"
        created_at:
          format: date-time
          type: string
        id:
          description: Follow id
          format: int32
          type: integer
        status:
          enum:
            - valid
            - invalid
            - confirmed
            - archived
          type: string
        type_of:
          type: string
      required:
        - type_of
        - id
        - status
        - created_at
        - article
      type: object
    SharedOrganization:
      description: The organization the resource belongs to
      properties:
        name:
          type: string
        profile_image:
          description: Profile image (640x640)
          format: url
          type: string
        profile_image_90:
          description: Profile image (90x90)
          format: url
          type: string
        slug:
          type: string
        username:
          type: string
      type: object
    SharedUser:
      description: The resource creator
      properties:
        github_username:
          nullable: true
          type: string
        name:
          type: string
        profile_image:
          description: Profile image (640x640)
          type: string
        profile_image_90:
          description: Profile image (90x90)
          type: string
        twitter_username:
          nullable: true
          type: string
        username:
          type: string
        website_url:
          format: url
          nullable: true
          type: string
      type: object
    Tag:
      properties:
        bg_color_hex:
          description: Background color (hexadecimal)
          type: string
        id:
          format: int32
          type: integer
        name:
          type: string
        text_color_hex:
          description: Text color (hexadecimal)
          type: string
      required:
        - id
        - name
        - bg_color_hex
        - text_color_hex
      type: object
    User:
      properties:
        github_username:
          nullable: true
          type: string
        id:
          format: int32
          type: integer
        joined_at:
          description: Date of joining (formatted with strftime `"%b %e, %Y"`)
          type: string
        location:
          nullable: true
          type: string
        name:
          type: string
        profile_image:
          description: Profile image (320x320)
          format: url
          type: string
        summary:
          nullable: true
          type: string
        twitter_username:
          nullable: true
          type: string
        type_of:
          type: string
        username:
          type: string
        website_url:
          format: url
          nullable: true
          type: string
      required:
        - type_of
        - id
        - username
        - name
        - summary
        - twitter_username
        - github_username
        - website_url
        - location
        - joined_at
        - profile_image
      type: object
    WebhookCreate:
      description: Webhook creation payload
      properties:
        webhook_endpoint:
          properties:
            events:
              description: An array of events identifiers
              items:
                enum:
                  - article_created
                  - article_updated
                  - article_destroyed
                type: string
              type: array
            source:
              description: The name of the requester, eg. "DEV"
              type: string
            target_url:
              format: url
              type: string
          required:
            - source
            - target_url
            - events
          type: object
      type: object
    WebhookIndex:
      description: Webhook
      properties:
        created_at:
          format: date-time
          type: string
        events:
          description: An array of events identifiers
          items:
            type: string
          type: array
        id:
          format: int64
          type: integer
        source:
          description: The name of the requester, eg. "DEV"
          type: string
        target_url:
          format: url
          type: string
        type_of:
          type: string
      type: object
    WebhookShow:
      description: Webhook
      properties:
        created_at:
          format: date-time
          type: string
        events:
          description: An array of events identifiers
          items:
            type: string
          type: array
        id:
          format: int64
          type: integer
        source:
          description: The name of the requester, eg. "DEV"
          type: string
        target_url:
          format: url
          type: string
        type_of:
          type: string
        user:
          $ref: "#/components/schemas/SharedUser"
      type: object
  securitySchemes:
    api_key:
      description: |
        API Key authentication.

        Authentication for some endpoints, like write operations on the
        Articles API require a DEV API key.

        ### Getting an API key

        To obtain one, please follow these steps:

          - visit https://dev.to/settings/account
          - in the "DEV API Keys" section create a new key by adding a
            description and clicking on "Generate API Key"

            ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)
          - You'll see the newly generated key in the same view
            ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)
      in: header
      name: api-key
      type: apiKey
    oauth2:
      description: |
        OAuth2 authentication.

        OAuth2 authentication is still in private alpha.
      flows:
        authorizationCode:
          authorizationUrl: https://dev.to/oauth/authorize
          refreshUrl: https://dev.to/oauth/token
          scopes: {}
          tokenUrl: https://dev.to/oauth/token
        clientCredentials:
          refreshUrl: https://dev.to/oauth/token
          scopes: {}
          tokenUrl: https://dev.to/oauth/token
      type: oauth2
