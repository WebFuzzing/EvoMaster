openapi: 3.1.0
servers:
  - url: https://balanceplatform-api-test.adyen.com/bcl/v1
info:
  contact:
    email: developer-experience@adyen.com
    name: Adyen Developer Experience team
    url: https://www.adyen.help/hc/en-us/community/topics
    x-twitter: Adyen
  description: |-
    The Balance Platform API enables you to create a platform, onboard users as account holders, create balance accounts, and issue cards.

    For information about use cases, refer to [Adyen Issuing](https://docs.adyen.com/issuing).

     ## Authentication
    Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:

     ```
    curl
    -H "Content-Type: application/json" \
    -H "X-API-Key: YOUR_API_KEY" \
    ...
    ```

    Alternatively, you can use the username and password to connect to the API using basic authentication. For example:

    ```
    curl
    -H "Content-Type: application/json" \
    -U "ws@BalancePlatform.YOUR_BALANCE_PLATFORM":"YOUR_WS_PASSWORD" \
    ...
    ```
    ## Versioning
    Balance Platform API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.

    For example:
    ```
    https://balanceplatform-api-test.adyen.com/bcl/v1
    ```
    ## Going live
    When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.

    For more information, refer to our [Going live documentation](https://docs.adyen.com/issuing/integration-checklist#going-live).
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  title: "Issuing: Balance Platform API"
  version: "1"
  x-apisguru-categories:
    - payment
  x-logo:
    url: https://adyen.com/.resources/adyen-website/themes/images/apple-icon-180x180.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/Adyen/adyen-openapi/master/json/BalancePlatformService-v1.json
      version: "3.1"
  x-providerName: adyen.com
  x-publicVersion: true
  x-serviceName: BalancePlatformService
paths:
  /accountHolders:
    post:
      description: |-
        Creates an account holder. This resource represents your user's entity within the balance platform.

        For more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts).
      operationId: post-accountHolders
      requestBody:
        content:
          application/json:
            examples:
              createAccountHolder:
                $ref: "#/components/examples/post-accountHolders-createAccountHolder"
            schema:
              $ref: "#/components/schemas/AccountHolderInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/post-accountHolders-success-200"
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create an account holder.
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-sortIndex: 1
  "/accountHolders/{id}":
    get:
      description: Returns a specific account holder.
      operationId: get-accountHolders-id
      parameters:
        - description: Unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-accountHolders-id-success-200"
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve an account holder.
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-sortIndex: 3
    patch:
      description: |-
        Updates a specific account holder. When updating an account holder resource, note that:

        * If a parameter is not provided in the request, the parameter is left unchanged.

        * When updating any parameter in the `contactDetails` object, you must send all other existing `contactDetails` parameters.
      operationId: patch-accountHolders-id
      parameters:
        - description: Unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updateAccountHolderStatus:
                $ref: "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus"
            schema:
              $ref: "#/components/schemas/AccountHolder"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/patch-accountHolders-id-success-200"
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update an account holder.
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-sortIndex: 2
  "/accountHolders/{id}/balanceAccounts":
    get:
      description: |-
        Returns a paginated list of balance accounts associated with a specific account holder. To fetch multiple pages, use the query parameters. 

        For example, to limit the page to 5 balance accounts and to skip the first 10: `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.
      operationId: get-accountHolders-id-balanceAccounts
      parameters:
        - description: Unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-accountHolders-id-balanceAccounts-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedBalanceAccountsResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve all balance accounts of a specific account holder.
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-sortIndex: 4
  /balanceAccounts:
    post:
      description: |-
        Creates a balance account. The balance account resource holds the funds of the associated account holder. 

        For more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts).
      operationId: post-balanceAccounts
      requestBody:
        content:
          application/json:
            examples:
              createBalanceAccount:
                $ref: "#/components/examples/post-balanceAccounts-createBalanceAccount"
            schema:
              $ref: "#/components/schemas/BalanceAccountInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/post-balanceAccounts-success-200"
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a balance account.
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-sortIndex: 1
  "/balanceAccounts/{id}":
    get:
      description: Returns a specific balance account.
      operationId: get-balanceAccounts-id
      parameters:
        - description: Unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balanceAccounts-id-success-200"
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a balance account.
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-sortIndex: 3
    patch:
      description: Updates a balance account.
      operationId: patch-balanceAccounts-id
      parameters:
        - description: Unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceAccountUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a balance account.
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-sortIndex: 2
  "/balanceAccounts/{id}/paymentInstruments":
    get:
      description: |-
        Returns a paginated list of the payment instruments associated with a specific balance account. To fetch multiple pages, use the query parameters. 

        For example, to limit the page to 3 payment instruments and to skip the first 6: `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`
      operationId: get-balanceAccounts-id-paymentInstruments
      parameters:
        - description: Unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedPaymentInstrumentsResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve all payment instruments for a specific balance account.
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-sortIndex: 4
  "/balancePlatforms/{id}":
    get:
      description: Returns a specific balance platform.
      operationId: get-balancePlatforms-id
      parameters:
        - description: Unique identifier of the balance platform.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balancePlatforms-id-success-200"
              schema:
                $ref: "#/components/schemas/BalancePlatform"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a balance platform.
      tags:
        - General
      x-addedInVersion: "1"
      x-groupName: General
      x-sortIndex: 0
  "/balancePlatforms/{id}/accountHolders":
    get:
      description: |-
        Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. 

        For example, to limit the page to 5 account holders and to skip the first 20: `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.
      operationId: get-balancePlatforms-id-accountHolders
      parameters:
        - description: Unique identifier of the balance platform.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balancePlatforms-id-accountHolders-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedAccountHoldersResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve all account holders under a specific balance platform.
      tags:
        - General
      x-addedInVersion: "1"
      x-groupName: General
      x-sortIndex: 0
  /documents:
    post:
      description: |-
        Uploads a document for verification checks. Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities) to run automated Know Your Customer checks. If these checks fail, your Adyen contact will inform you so you can provide additional documents. Adyen uses the documents to validate the identity of the individual or organization legal entity, or the legal entity's bank account details.

         You should only upload documents when your Adyen contact informs you to provide additional information for the legal entity. For more information, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).
      operationId: post-documents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Upload a document for verification checks.
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-sortIndex: 4
  "/documents/{id}":
    delete:
      description: Deletes a document.
      operationId: delete-documents-id
      parameters:
        - description: Unique identifier of the document to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoidResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a document.
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-sortIndex: 7
    get:
      description: Returns a specific document.
      operationId: get-documents-id
      parameters:
        - description: Unique identifier of the document.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a document.
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-sortIndex: 5
    patch:
      description: Updates a specific document.
      operationId: patch-documents-id
      parameters:
        - description: Unique identifier of the document to be updated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a document.
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-sortIndex: 6
  /legalEntities:
    post:
      description: |-
        Creates a legal entity. This resource contains information about an individual or organization that will be onboarded on your balance platform. Adyen uses this information to perform Know Your Customer (KYC) checks as required by payment industry regulations. Your Adyen contact will inform you of the status and results of the KYC checks. 

        When the legal entity passes the verification checks, you can issue a card to them. For more information, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).
      operationId: post-legalEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LegalEntityInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a legal entity.
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-sortIndex: 1
  "/legalEntities/{id}":
    get:
      description: Returns a specific legal entity.
      operationId: get-legalEntities-id
      parameters:
        - description: Unique identifier of the legal entity.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a legal entity.
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-sortIndex: 2
    patch:
      description: |-
        Updates a legal entity. When updating a legal entity resource, note that:

         * To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.
      operationId: patch-legalEntities-id
      parameters:
        - description: Unique identifier of the legal entity.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericEntityInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a legal entity.
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-sortIndex: 3
  /paymentInstrumentGroups:
    post:
      description: Creates a payment instrument group, which you use to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.
      operationId: post-paymentInstrumentGroups
      requestBody:
        content:
          application/json:
            examples:
              createPaymentInstrumentGroups:
                $ref: "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentGroupInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/post-paymentInstrumentGroups-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrumentGroup"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a payment instrument group.
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-sortIndex: 1
  "/paymentInstrumentGroups/{id}":
    get:
      description: Returns a specific payment instrument group.
      operationId: get-paymentInstrumentGroups-id
      parameters:
        - description: Unique identifier of the payment instrument group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstrumentGroups-id-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrumentGroup"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a payment instrument group.
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-sortIndex: 2
  "/paymentInstrumentGroups/{id}/transactionRules":
    get:
      description: Returns a list of all the transaction rules associated with a specific payment instrument group.
      operationId: get-paymentInstrumentGroups-id-transactionRules
      parameters:
        - description: Unique identifier of the payment instrument group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRulesResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve all transaction rules for a specific payment instruments group.
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-sortIndex: 3
  /paymentInstruments:
    post:
      description: |-
        Creates a payment instrument, which results in issuing either a physical or a virtual card to your user.

         For more information, refer to [Create cards](https://docs.adyen.com/issuing/create-cards).
      operationId: post-paymentInstruments
      requestBody:
        content:
          application/json:
            examples:
              createPhysicalCard:
                $ref: "#/components/examples/post-paymentInstruments-createPhysicalCard"
              createVirtualCard:
                $ref: "#/components/examples/post-paymentInstruments-createVirtualCard"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/post-paymentInstruments-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a payment instrument.
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-sortIndex: 11
  "/paymentInstruments/{id}":
    get:
      description: Returns a specific payment instrument.
      operationId: get-paymentInstruments-id
      parameters:
        - description: Unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstruments-id-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a payment instrument.
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-sortIndex: 13
    patch:
      description: Updates a specific payment instrument. Once a payment instrument is already active, you can only update the status. However, for cards created with a **Requested** or **Inactive** status, you can still update the balance account associated with the card.
      operationId: patch-paymentInstruments-id
      parameters:
        - description: Unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updatePaymentInstrumentBalanceAccount:
                $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount"
              updatePaymentInstrumentStatus:
                $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/patch-paymentInstruments-id-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
                invalidData:
                  $ref: "#/components/examples/patch-paymentInstruments-id-invalidData-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a payment instrument.
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-sortIndex: 12
  "/paymentInstruments/{id}/transactionRules":
    get:
      description: Returns a list of transaction rules associated to a specific payment instrument.
      operationId: get-paymentInstruments-id-transactionRules
      parameters:
        - description: Unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstruments-id-transactionRules-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRulesResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve all transaction rules for a specific payment instrument.
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-sortIndex: 14
  /transactionRules:
    post:
      description: |-
        Creates a transaction rule. Transaction rules define conditions to automatically approve or deny transactions. You can apply transaction rules to a specific payment instrument, a group of payment instruments, or to all the payment instruments in your balance platform.

        For more information on how you can set conditions, refer to [Transaction rules](https://docs.adyen.com/issuing/transaction-rules).
      operationId: post-transactionRules
      requestBody:
        content:
          application/json:
            examples:
              createTransactionRule:
                $ref: "#/components/examples/post-transactionRules-createTransactionRule"
            schema:
              $ref: "#/components/schemas/TransactionRuleInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/post-transactionRules-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a transaction rule.
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-sortIndex: 1
  "/transactionRules/{transactionRuleId}":
    delete:
      description: Deletes a transaction rule.
      operationId: delete-transactionRules-transactionRuleId
      parameters:
        - description: Unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/delete-transactionRules-transactionRuleId-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a transaction rule.
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-sortIndex: 5
    get:
      description: Returns a specific transaction rule.
      operationId: get-transactionRules-transactionRuleId
      parameters:
        - description: Unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-transactionRules-transactionRuleId-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRuleResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a transaction rule.
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-sortIndex: 2
    patch:
      description: |-
        Updates a transaction rule.  When updating a transaction rule resource, note that: 

        * When updating only the `status`, you can send only the `status` parameter. All other parameters not provided in the request are left unchanged.

        * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, the parameter is removed from the resource.
      operationId: patch-transactionRules-transactionRuleId
      parameters:
        - description: Unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updateTransactionRuleStatus:
                $ref: "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus"
            schema:
              $ref: "#/components/schemas/TransactionRuleInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/patch-transactionRules-transactionRuleId-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a transaction rule.
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-sortIndex: 3
  /transferInstruments:
    post:
      description: |-
        Creates a transfer instrument. A transfer instrument is a bank account or other payment details that a legal entity owns. Adyen performs Know Your Customer (KYC) checks on the transfer instrument as required by payment industry regulations. Your Adyen contact will inform you of the status and results of the KYC checks.

        When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
      operationId: post-transferInstruments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a transfer instrument.
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-sortIndex: 8
  "/transferInstruments/{id}":
    delete:
      description: Deletes a transfer instrument.
      operationId: delete-transferInstruments-id
      parameters:
        - description: Unique identifier of the transfer instrument to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoidResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a transfer instrument
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-sortIndex: 11
    get:
      description: Returns a specific transfer instrument.
      operationId: get-transferInstruments-id
      parameters:
        - description: Unique identifier of the transfer instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Retrieve a transfer instrument.
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-sortIndex: 9
    patch:
      description: Updates a transfer instrument.
      operationId: patch-transferInstruments-id
      parameters:
        - description: Unique identifier of the transfer instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic"
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a transfer instrument.
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-sortIndex: 10
components:
  examples:
    delete-transactionRules-transactionRuleId-success-200:
      description: Example response for successfully deleting a transaction rule
      summary: Response code - 200 OK
      value:
        amount:
          currency: EUR
          value: 10000
        description: Allow up to 100 EUR per month
        id: TR3227C223222B5CMDKQTBQ5M
        interval:
          type: monthly
        paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
        reference: myRule16378
        startDate: 2021-01-25T12:46:35.476629Z
        type: velocity
    generic: {}
    generic-400:
      summary: Response code - 400 Bad request
      value:
        detail: Empty input which would have resulted in a null result.
        errorCode: 00_400
        status: 400
        title: Bad request
        type: https://docs.adyen.com/errors/general/bad-request
    generic-401:
      summary: Response code - 401 Unauthorized
      value:
        errorCode: 00_401
        status: 401
        title: Unauthorized
        type: https://docs.adyen.com/errors/security/unauthorized
    generic-403:
      summary: Response code - 403 Forbidden.
      value:
        detail: Not the right permission to access this service.
        errorCode: 00_403
        status: 403
        title: Forbidden
        type: https://docs.adyen.com/errors/security/unauthorized
    generic-404:
      summary: Response code 404 - Not found
      value:
        errorCode: 00_404
        status: 404
        title: Not found
        type: https://docs.adyen.com/errors/general/not-found
    generic-422:
      summary: Response code - 422 Unprocessable Entity.
      value:
        detail: The balanceAccountId can only be changed when the status is Inactive or Requested
        errorCode: 30_031
        requestId: 1W1UI15PLVGC9V8O
        status: 422
        title: Invalid Payment Instrument information provided
        type: https://docs.adyen.com/errors/general/invalid-field-value
    generic-500:
      summary: Response code - 500 Internal Server Error
      value:
        detail: Unrecoverable error while trying to create payment instrument
        errorCode: 00_500
        requestId: 1WAF555PLWNTLYOQ
        status: 500
        title: An internal error happened
        type: https://docs.adyen.com/errors/general/internal
    generic-503:
      summary: Response code - 503 Internal Server Error
      value:
        detail: Error while determining the payment instrument workflow
        errorCode: 99_500
        requestId: 1W1UHY5O2CONU4R7
        status: 500
        title: Error processing request
        type: https://docs.adyen.com/errors/general/processing-error
    get-accountHolders-id-balanceAccounts-success-200:
      description: Example response when retrieving a list of balance accounts under an account holder
      summary: Response code - 200 OK
      value:
        balanceAccounts:
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B59K6ZXHBFN6
            status: Active
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B59K72CKBFNJ
            status: Active
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B5BRR27B2M7G
            status: Active
        hasNext: true
        hasPrevious: false
    get-accountHolders-id-success-200:
      description: Example response when retrieving an account holder
      summary: Response code - 200 OK
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: "274"
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: "+315551231234"
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH32272223222B5CM4MWJ892H
        status: Active
    get-balanceAccounts-id-paymentInstruments-success-200:
      description: Example response when retrieving a list of payment instruments under a balance account
      summary: Response code - 200 OK
      value:
        hasNext: "true"
        hasPrevious: "false"
        paymentInstruments:
          - balanceAccountId: BA32272223222B59CZ3T52DKZ
            card:
              bin: "555544"
              brandVariant: mc
              cardholderName: name
              expiration:
                month: "12"
                year: "2022"
              formFactor: virtual
              lastFour: "2357"
              number: "************2357"
            id: PI32272223222B59M5TM658DT
            issuingCountryCode: GB
            status: Active
            type: card
          - balanceAccountId: BA32272223222B59CZ3T52DKZ
            card:
              bin: "555544"
              brandVariant: mc
              cardholderName: name
              expiration:
                month: "01"
                year: "2023"
              formFactor: virtual
              lastFour: "8331"
              number: "************8331"
            id: PI32272223222B59PXDGQDLSF
            issuingCountryCode: GB
            status: Active
            type: card
    get-balanceAccounts-id-success-200:
      description: Example response when retrieving a balance account
      summary: Response code - 200 OK
      value:
        accountHolderId: AH32272223222B59K6RTQBFNZ
        balances:
          - available: 0
            balance: 0
            currency: EUR
            reserved: 0
        defaultCurrencyCode: EUR
        id: BA3227C223222B5BLP6JQC3FD
        paymentInstruments:
          - id: PI32272223222B5BRM4FZ7J9J
        status: Active
    get-balancePlatforms-id-accountHolders-success-200:
      description: Example response when retrieving a list of account holders under a balance platform
      summary: Response code - 200 OK
      value:
        accountHolders:
          - contactDetails:
              address:
                city: Amsterdam
                country: NL
                houseNumberOrName: "6"
                postalCode: "12336750"
                street: Simon Carmiggeltstraat
            description: J. Doe
            id: AH32272223222B59DDWSCCMP7
            status: Active
          - contactDetails:
              address:
                city: Amsterdam
                country: NL
                houseNumberOrName: "11"
                postalCode: "12336750"
                street: Simon Carmiggeltstraat
            description: S. Hopper
            id: AH32272223222B59DJ7QBCMPN
            status: Active
        hasNext: "true"
        hasPrevious: "false"
    get-balancePlatforms-id-success-200:
      description: Example response when retrieving a balance platform
      summary: Response code - 200 OK
      value:
        id: YOUR_BALANCE_PLATFORM
        status: Active
    get-paymentInstrumentGroups-id-success-200:
      description: Example response when retrieving a payment instrument group
      summary: Response code - 200 OK
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        id: PG3227C223222B5CMD3FJFKGZ
        txVariant: mc
    get-paymentInstrumentGroups-id-transactionRules-success-200:
      description: Example response when retrieving a list of transaction rules applied to a payment instrument group
      summary: Response code - 200 OK
      value:
        transactionRules:
          - description: Allow 5 transactions per month
            id: TR32272223222B5CMDGMC9F4F
            interval:
              type: monthly
            maxTransactions: 5
            paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
            reference: myRule12345
            startDate: 2021-01-25T12:46:35.476629Z
            status: active
            type: velocity
          - amount:
              currency: EUR
              value: 10000
            description: Allow up to 100 EUR per month
            id: TR32272223222B5CMDGT89F4F
            interval:
              type: monthly
            paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
            reference: myRule16378
            startDate: 2021-01-25T12:46:35.476629Z
            status: active
            type: velocity
    get-paymentInstruments-id-success-200:
      description: Example response when retrieving a payment instrument
      summary: Response code - 200 OK
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "3548"
          number: "************3548"
        description: S. Hopper - Main card
        id: PI32272223222B5CMD3MQ3HXX
        issuingCountryCode: GB
        status: Active
        type: card
    get-paymentInstruments-id-transactionRules-success-200:
      description: Example response when retrieving a list of transaction rules applied to a payment instrument
      summary: Response code - 200 OK
      value:
        transactionRules:
          - description: Allow 5 transactions per month
            id: TR32272223222B5CMDGMC9F4F
            interval:
              type: monthly
            maxTransactions: 5
            paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
            reference: myRule12345
            startDate: 2021-01-25T12:46:35.476629Z
            status: active
            type: velocity
          - amount:
              currency: EUR
              value: 10000
            description: Allow up to 100 EUR per month
            id: TR32272223222B5CMDGT89F4F
            interval:
              type: monthly
            paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
            reference: myRule16378
            startDate: 2021-01-25T12:46:35.476629Z
            status: active
            type: velocity
    get-transactionRules-transactionRuleId-success-200:
      description: Example response when retrieving a transaction rule
      summary: Response code - 200 OK
      value:
        transactionRule:
          description: Allow 5 transactions per month
          id: TR32272223222B5CMD3V73HXG
          interval:
            type: monthly
          maxTransactions: 5
          paymentInstrumentId: PI3227C223222B59KGTXP884R
          reference: myRule12345
          startDate: 2021-01-25T12:46:35.476629Z
          status: active
          type: velocity
    patch-accountHolders-id-success-200:
      description: Example response for successfully updating the status of an account holder
      summary: Response code - 200 OK
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: "274"
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: "+315551231234"
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH32272223222B5CM4MWJ892H
        status: Suspended
    patch-accountHolders-id-updateAccountHolderStatus:
      description: Example request for updating the status of an account holder
      summary: Update the status of an account holder.
      value:
        status: Suspended
    patch-paymentInstruments-id-invalidData-422:
      description: Example response for a failed request to update the balance account ID
      summary: Response code - 422 Unprocessable Entity
      value:
        detail: The balanceAccountId can only be changed when the status is Inactive or Requested
        errorCode: 30_031
        requestId: 1W1UI15PLVGC9V8O
        status: 422
        title: Invalid Payment Instrument information provided
        type: https://docs.adyen.com/errors/general/invalid-field-value
    patch-paymentInstruments-id-success-200:
      description: Example respones for successfully updating the status of a payment instrument
      summary: Response code - 200 OK
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "5785"
          number: "************5785"
        description: S. Hopper - Main card
        id: PI3227C223222B5CMD278FKGS
        issuingCountryCode: GB
        status: Suspended
        type: card
    patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount:
      description: Example request for updating the balance account of a payment instrument
      summary: Update the balance account linked to a payment instrument.
      value:
        balanceAccountId: BA32272223222B5CM82WL892M
    patch-paymentInstruments-id-updatePaymentInstrumentStatus:
      summary: Update the status of a payment instrument.
      value:
        status: Suspended
    patch-transactionRules-transactionRuleId-success-200:
      description: Example response for successfully updating the status of a transaction rule
      summary: Response code - 200 OK
      value:
        description: Allow 5 transactions per month
        id: TR3227C223222B5B85CDV4DRS
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: 2021-01-21T12:46:35.476629Z
        status: inactive
        type: velocity
    patch-transactionRules-transactionRuleId-updateTransactionRuleStatus:
      description: Example request for updating the status of a transaction rule
      summary: Update the status of transaction rule.
      value:
        status: inactive
    post-accountHolders-createAccountHolder:
      description: Example request for creating an account holder
      summary: Create an account holder.
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: "274"
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: "+315551231234"
            type: Mobile
        description: S.Hopper - Staff 123
    post-accountHolders-success-200:
      description: Example response for successfully creating an account holder
      summary: Response code - 200 OK
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: "274"
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: "+315551231234"
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH3227C223222B5CMD2SXFKGT
        status: Active
    post-balanceAccounts-createBalanceAccount:
      description: Example request for creating a balance account
      summary: Create a balance account.
      value:
        accountHolderId: AH32272223222B59K6ZKBBFNQ
        description: S.Hopper - Main balance account
    post-balanceAccounts-success-200:
      description: Example response for successfully creating a balance account
      summary: Response code - 200 OK
      value:
        accountHolderId: AH32272223222B59K6ZKBBFNQ
        balances:
          - available: 0
            balance: 0
            currency: EUR
            reserved: 0
        defaultCurrencyCode: EUR
        description: S.Hopper - Main balance account
        id: BA3227C223222B5CMD38HFKGH
        status: Active
    post-paymentInstrumentGroups-createPaymentInstrumentGroups:
      description: Example request for creating a payment instrument group
      summary: Create a payment instrument group.
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        txVariant: mc
    post-paymentInstrumentGroups-success-200:
      description: Example response for successfully creating a payment instrument group
      summary: Response code - 200 OK
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        id: PG3227C223222B5CMD3FJFKGZ
        txVariant: mc
    post-paymentInstruments-createPhysicalCard:
      description: Example request for creating a physical card
      summary: Create a physical card
      value:
        balanceAccountId: BALANCE_ACCOUNT_ID
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          configuration:
            configurationProfileId: YOUR_CONFIGURATION_PROFILE_ID
          deliveryContact:
            address:
              city: Amsterdam
              country: NL
              houseNumberOrName: 6-50
              postalCode: 1011DJ
              stateOrProvince: NH
              street: Simon Carmiggeltstraat
            name:
              firstName: Sam
              lastName: Hopper
          expiry:
            month: 8
            year: 2024
          formFactor: physical
        description: S.Hopper - Main card
        issuingCountryCode: NL
        status: Inactive
        type: card
    post-paymentInstruments-createVirtualCard:
      description: Example request for creating a virtual card
      summary: Create a virtual card.
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          formFactor: virtual
        description: S. Hopper - Main card
        issuingCountryCode: GB
        type: card
    post-paymentInstruments-success-200:
      description: Example response for successfully creating a virtual card
      summary: Response code - 200 OK
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          cvc: "873"
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "3548"
        description: S. Hopper - Main card
        id: PI32272223222B5CMD3MQ3HXX
        issuingCountryCode: GB
        status: Active
        type: card
    post-transactionRules-createTransactionRule:
      summary: Create a transaction rule.
      value:
        description: Allow 5 transactions per month
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: 2021-01-21T12:46:35.476629Z
        status: inactive
        type: velocity
    post-transactionRules-success-200:
      description: Example response for successfully creating a transaction rule
      summary: Response code - 200 OK
      value:
        description: Allow 5 transactions per month
        id: TR32272223222B5CMD3V73HXG
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: 2021-01-21T12:46:35.476629Z
        status: active
        type: velocity
  schemas:
    AccountHolder:
      properties:
        balancePlatform:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) where the account holder belongs. Required in the request if your API credentials has access to multiple balance platforms.
          type: string
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/AccountHolderCapability"
          description: Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability, such as **issueCard**, and the value is an object containing the settings for the capability.
          type: object
        contactDetails:
          $ref: "#/components/schemas/ContactDetails"
          description: Contact details of the account holder.
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: Unique identifier of the account holder.
          type: string
        legalEntityId:
          description: |-
            The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities) associated with the account holder. Adyen performs the Know Your Customer (KYC) verification process against the legal entity of the account holder.

            To create a legal entity, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).
          type: string
        primaryBalanceAccount:
          description: The ID of the account holder's primary balance account. By default, this is set to the account holder's first balance account. This can be updated in a PATCH request.
          type: string
        reference:
          description: Your reference to the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: |-
            The status of the account holder.

            Possible values: 

             * **Active**: The account holder is active. This the default status when creating an account holder. 

             * **Suspended**: The account holder is temporarily suspended. You can set the account back to active or permanently close the account. 

            * **Closed**: The account holder is permanently closed. This action cannot be undone.
          enum:
            - Active
            - Closed
            - Inactive
            - Suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |+
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

             Sweep configurations on the account holder level applies to all the account holder's balance accounts.

             The key must be a currency code in the three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format and in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.

          type: object
      required:
        - id
    AccountHolderCapability:
      properties:
        allowed:
          description: Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful, and the account holder is permitted to use the capability.
          readOnly: true
          type: boolean
        allowedLevel:
          description: "The capability level that is allowed for the account holder.Possible values: **notApplicable**, **low**, **medium**, **high**"
          enum:
            - high
            - low
            - medium
            - notApplicable
          readOnly: true
          type: string
        allowedSettings:
          $ref: "#/components/schemas/JSONObject"
          description: A JSON object containing the settings that are allowed for the account holder.
          readOnly: true
        enabled:
          description: Indicates whether the capability is enabled. You can set this field to **false** if you want to temporarily stop an account holder from using a capability.
          type: boolean
        problems:
          description: Contains verification errors and the actions that you can take to resolve them.
          items:
            $ref: "#/components/schemas/CapabilityProblem"
          readOnly: true
          type: array
        requested:
          description: Indicates whether the capability is requested. To know whether the account holder is permitted to use the capability, refer to the `allowed` field.
          type: boolean
        requestedLevel:
          description: |-
            The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels) have different levels. Levels increase the capability, but also require additional checks and increased monitoring.

            Possible values: **notApplicable**, **low**, **medium**, **high**
          enum:
            - high
            - low
            - medium
            - notApplicable
          type: string
        requestedSettings:
          $ref: "#/components/schemas/JSONObject"
          description: A JSON object containing the settings that were requested for the account holder.
          readOnly: true
        verificationStatus:
          description: |
            The status of the verification checks for the capability.

            Possible values:

            - **pending** - Adyen is running the verification.

            - **invalid** - The verification failed. Check if the `errors` array contains more information.

            - **valid** - The verification has been successfully completed.

            - **rejected** - Adyen has verified the information, but has found reasons to not allow the capability.
          enum:
            - invalid
            - pending
            - rejected
            - valid
          readOnly: true
          type: string
    AccountHolderInfo:
      properties:
        balancePlatform:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) where the account holder belongs. Required in the request if your API credentials has access to multiple balance platforms.
          type: string
        contactDetails:
          $ref: "#/components/schemas/ContactDetails"
          description: Contact details of the account holder.
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        legalEntityId:
          description: |-
            The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities) associated with the account holder. Adyen performs the Know Your Customer (KYC) verification process against the legal entity of the account holder.

            To create a legal entity, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).
          type: string
        reference:
          description: Your reference to the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |+
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

             Sweep configurations on the account holder level applies to all the account holder's balance accounts.

             The key must be a currency code in the three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format and in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.

          type: object
    Address:
      properties:
        city:
          description: The name of the city.
          type: string
        country:
          description: |-
            The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.
            > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
          type: string
        houseNumberOrName:
          description: The number or name of the house.
          type: string
        postalCode:
          description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
          type: string
        stateOrProvince:
          description: |-
            State or province codes as defined in ISO 3166-2. For example, **CA** in the US or **ON** in Canada.
            > Required for the US and Canada.
          type: string
        street:
          description: |-
            The name of the street.
            > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
          type: string
      required:
        - street
        - houseNumberOrName
        - city
        - postalCode
        - country
    Address2:
      properties:
        city:
          description: The name of the city.
          type: string
        country:
          description: The two-letter country code, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
          type: string
        postalCode:
          description: Postal code.
          type: string
        stateOrProvince:
          description: State or province as defined in ISO 3166-2. For example, **CA** in the US.
          type: string
        street:
          description: The name of the street, and the house or building number.
          type: string
        street2:
          description: The apartment, unit, or suite number.
          type: string
    Amount:
      properties:
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
        - value
        - currency
    Attachment:
      properties:
        content:
          contentEncoding: base64
          description: The document, in Base64-encoded string format.
          type: string
        contentType:
          deprecated: true
          description: |-
            The file format.

             Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, or **image/png**. 
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is being deprecated.
        filename:
          deprecated: true
          description: The name of the file including the file extension.
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is being deprecated.
        pageType:
          description: |-
            Specifies which side of the ID card is being uploaded.

            - When `type` is **driversLicense**, set this to **front** or **back**.

            - When omitted, we infer the page number based on the order of attachments.
          type: string
    Authentication:
      properties:
        password:
          description: |-
            The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.

            - Characters between **a-z**, **A-Z**, and **0-9**

            - Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'",;:$&àùòâôûáúó**
          type: string
        phone:
          $ref: "#/components/schemas/Phone"
          description: |-
            The phone number where the one-time password (OTP) is sent.

            This object must have:

            - A `type` set to **mobile**.

            - A `number` with a valid country code.

            - A `number` with more than 4 digits, excluding the country code.

            >Make sure to verify that the card user owns the phone number.
    Balance:
      properties:
        available:
          description: The remaining amount available for spending.
          format: int64
          type: integer
        balance:
          description: The total amount in the balance.
          format: int64
          type: integer
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
          type: string
        reserved:
          description: The amount reserved for payments that have been authorised, but have not been captured yet.
          format: int64
          type: integer
      required:
        - currency
        - balance
        - reserved
        - available
    BalanceAccount:
      properties:
        accountHolderId:
          description: Unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/accountHolders/{id}) associated with the balance account.
          type: string
        balances:
          description: List of balances with the amount and currency.
          items:
            $ref: "#/components/schemas/Balance"
          type: array
        defaultCurrencyCode:
          description: |-
            The default currency code of this balance account, in three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format.
            The default value is **EUR**.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to help distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        id:
          description: Unique identifier of the balance account.
          type: string
        paymentInstruments:
          description: List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/paymentInstruments/{id}__queryParam_id) associated with the balance account.
          items:
            $ref: "#/components/schemas/PaymentInstrumentReference"
          type: array
        reference:
          description: Your reference to the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: |
            The status of the balance account, set to **Active** by default. 
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

            Sweep configurations on the balance account override [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/accountHolders__reqParam_sweepConfigurations) configurations.

            The key must be a currency code in the three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format and in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
          type: object
      required:
        - accountHolderId
        - id
    BalanceAccountInfo:
      properties:
        accountHolderId:
          description: Unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/accountHolders/{id}) associated with the balance account.
          type: string
        defaultCurrencyCode:
          description: |-
            The default currency code of this balance account, in three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format.
            The default value is **EUR**.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to help distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        reference:
          description: Your reference to the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

            Sweep configurations on the balance account override [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/accountHolders__reqParam_sweepConfigurations) configurations.

            The key must be a currency code in the three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format and in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
          type: object
      required:
        - accountHolderId
    BalanceAccountUpdateRequest:
      properties:
        accountHolderId:
          description: Unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/accountHolders/{id}) associated with the balance account.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to help distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        status:
          description: |-
            The status of the balance account. Payment instruments linked to the balance account can only be used if the balance account status is **Active**.

            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.
          enum:
            - Active
            - Closed
            - Inactive
            - Suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify [balance sweep configuration per currency code](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__reqParam_sweepConfigurations).

            You can update the balance account to add, update, or delete configurations.

            * To add a configuration, send the currency code as a key and the configuration as the object.

             * To update a configuration, send the whole configuration with your updates.

            * To delete a configuration, set the value to **null**. For example, `"EUR": null`.
          type: object
      required:
        - accountHolderId
    BalancePlatform:
      properties:
        description:
          description: A description of the balance platform, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: Unique identifier of the balance platform.
          type: string
        status:
          description: |-
            The status of the balance platform.

            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.
          type: string
      required:
        - id
    BankAccountInfo:
      properties:
        accountNumber:
          description: |-
            The bank account number (without separators).

             When this is provided, the `bankCode` and `branchCode` are also required.
          type: string
        accountType:
          description: |-
            The type of bank account. Only applies to bank accounts held in the US. 

            Possible values: **checking**, **savings**.
          type: string
        bankBicSwift:
          description: The bank's BIC or SWIFT code.
          type: string
        bankCity:
          description: The city where the bank is located.
          type: string
        bankCode:
          description: |-
            The bank code of the banking institution with which the bank account is registered.

            Required when you provide an `accountNumber`.
          type: string
        bankName:
          description: The name of the banking institution with which the bank account is held.
          type: string
        branchCode:
          description: |-
            The branch code of the branch under which the bank account is registered.

            Required when you provide an `accountNumber`.

             In the following countries, this value corresponds to:


            * United States - Routing number
            * United Kingdom - Sort code
            * Germany - Bankleitzahl
          type: string
        checkCode:
          description: The check code of the bank account.
          type: string
        countryCode:
          description: Country where the bank account is registered, in the two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**.
          type: string
        currencyCode:
          description: The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.
          type: string
        iban:
          description: The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
          type: string
    BirthData:
      properties:
        dateOfBirth:
          description: The individual's date of birth, in YYYY-MM-DD format.
          type: string
    BulkAddress:
      properties:
        city:
          description: The name of the city.
          type: string
        company:
          description: The name of the company.
          type: string
        country:
          description: The two-character country code in ISO-3166-1 alpha-2 format. For example, **US**.
          type: string
        email:
          description: The email address.
          type: string
        houseNumberOrName:
          description: The house number or name.
          type: string
        mobile:
          description: The full telephone number.
          type: string
        postalCode:
          description: |-
            The postal code.

            Maximum length:

            * 5 digits for addresses in the US.

            * 10 characters for all other countries.
          type: string
        stateOrProvince:
          description: |-
            State or province codes as defined in ISO 3166-2.

            Maximum length: 2 characters for addresses in the US.
          type: string
        street:
          description: The streetname of the house.
          type: string
      required:
        - country
    CapabilityProblem:
      properties:
        entity:
          $ref: "#/components/schemas/CapabilityProblemEntity"
          description: Contains the type of the entity and the corresponding ID.
        verificationErrors:
          description: Contains information about the verification error.
          items:
            $ref: "#/components/schemas/VerificationError"
          type: array
    CapabilityProblemEntity:
      properties:
        id:
          description: The ID of the entity.
          type: string
        owner:
          $ref: "#/components/schemas/CapabilityProblemEntity-recursive"
          description: Contains details about the owner of the entity that has an error.
        type:
          description: "The type of the entity. Possible values: **LegalEntity**, **BankAccount**, **Document**"
          enum:
            - BankAccount
            - Document
            - LegalEntity
          type: string
    CapabilityProblemEntity-recursive:
      properties:
        id:
          description: The ID of the entity.
          type: string
        type:
          description: "The type of the entity. Possible values: **LegalEntity**, **BankAccount**, **Document**"
          enum:
            - BankAccount
            - Document
            - LegalEntity
          type: string
    Card:
      properties:
        authentication:
          $ref: "#/components/schemas/Authentication"
          description: Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.
        bin:
          description: The BIN of the card number.
          type: string
        brand:
          description: |-
            The brand for the payment instrument.
            Possible values: **visa**, **mc**.
          type: string
        brandVariant:
          description: |-
            The brand variant for the payment instrument.
            >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
          type: string
        cardholderName:
          description: The name of the card holder. Maximum length 26 characters.
          type: string
        configuration:
          $ref: "#/components/schemas/CardConfiguration"
          description: Settings required when creating a physical card. Reach out to your Adyen contact to get the values that you can send in this object.
        cvc:
          description: |-
            The CVC2 value of the card.
            > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
          type: string
        deliveryContact:
          $ref: "#/components/schemas/Contact"
          description: The delivery contact (name and address) for physical card delivery.
        expiration:
          $ref: "#/components/schemas/Expiry"
          description: The expiration date of the card.
        formFactor:
          description: |-
            The form factor of the card.
            Possible values: **virtual**, **physical**.
          enum:
            - physical
            - unknown
            - virtual
          type: string
        lastFour:
          description: Last last four digits of the card number.
          type: string
        number:
          description: |-
            The primary account number of the card.
            > The primary account number is masked by default. The full primary account number is only returned for single-use virtual cards.
          readOnly: true
          type: string
      required:
        - formFactor
        - cardholderName
        - brand
        - brandVariant
        - number
    CardConfiguration:
      properties:
        activation:
          description: Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card containing activation instructions.
          type: string
        activationUrl:
          description: |-
            Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier.

             Maximum length: 255 characters.
          type: string
        bulkAddress:
          $ref: "#/components/schemas/BulkAddress"
          description: Overrides the shipment bulk address defined in the `configurationProfileId`.
        cardImageId:
          description: The ID of the card image. This is the image that will be printed on the full front of the card.
          type: string
        carrier:
          description: Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
          type: string
        carrierImageId:
          description: The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
          type: string
        configurationProfileId:
          description: |-
            The ID of the card configuration profile, which contains settings for the card. Examples of these settings include the envelope and PIN mailer designs, and the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override the settings.

            For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
          type: string
        currency:
          description: The three-letter currency code for the card, in the [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) format. For example **EUR**.
          type: string
        envelope:
          description: "Overrides the envelope design ID defined in the `configurationProfileId`. "
          type: string
        insert:
          description: Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
          type: string
        language:
          description: The language for the card, in the [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format. For example, **en**.
          type: string
        logoImageId:
          description: The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
          type: string
        pinMailer:
          description: Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
          type: string
        shipmentMethod:
          description: Overrides the logistics company defined in the `configurationProfileId`.
          type: string
      required:
        - configurationProfileId
    CardInfo:
      properties:
        authentication:
          $ref: "#/components/schemas/Authentication"
          description: Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.
        brand:
          description: |-
            The brand for the payment instrument.
            Possible values: **visa**, **mc**.
          type: string
        brandVariant:
          description: |-
            The brand variant for the payment instrument.
            >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
          type: string
        cardholderName:
          description: The name of the card holder. Maximum length 26 characters.
          type: string
        configuration:
          $ref: "#/components/schemas/CardConfiguration"
          description: Settings required when creating a physical card. Reach out to your Adyen contact to get the values that you can send in this object.
        deliveryContact:
          $ref: "#/components/schemas/Contact"
          description: The delivery contact (name and address) for physical card delivery.
        formFactor:
          description: |-
            The form factor of the card.
            Possible values: **virtual**, **physical**.
          enum:
            - physical
            - unknown
            - virtual
          type: string
      required:
        - formFactor
        - cardholderName
        - brand
        - brandVariant
    Contact:
      properties:
        address:
          $ref: "#/components/schemas/Address"
          description: The address of the contact.
        email:
          description: The e-mail address of the contact.
          type: string
        fullPhoneNumber:
          description: |-
            The phone number of the contact provided as a single string.  It will be handled as a landline phone.
            **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
          type: string
        name:
          $ref: "#/components/schemas/Name"
          description: The name of the contact.
        personalData:
          $ref: "#/components/schemas/PersonalData"
          description: Personal data of the contact.
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
          description: The phone number of the contact.
        webAddress:
          description: The URL of the website of the contact.
          type: string
    ContactDetails:
      properties:
        address:
          $ref: "#/components/schemas/Address"
          description: The address of the account holder.
        email:
          description: The e-mail address of the account holder.
          type: string
        phone:
          $ref: "#/components/schemas/Phone"
          description: The phone number of the account holder.
        webAddress:
          description: URL to the website of the account holder.
          type: string
      required:
        - email
        - phone
        - address
    Document:
      properties:
        attachment:
          $ref: "#/components/schemas/Attachment"
          deprecated: true
          description: Object that contains the document.
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Use the `attachments` array instead.
        attachments:
          description: Array that contains the document. The array supports multiple attachments for uploading different sides or pages of one document.
          items:
            $ref: "#/components/schemas/Attachment"
          type: array
        description:
          description: Your description of the document.
          type: string
        expiryDate:
          deprecated: true
          description: The expiry date of the document, in YYYY-MM-DD format.
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is deprecated.
        id:
          description: Unique identifier of the document.
          type: string
        issuerCountry:
          deprecated: true
          description: The country where the document was issued, in the two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**.
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is deprecated.
        issuerState:
          deprecated: true
          description: The state or province where the document was issued (AU only).
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is being deprecated.
        number:
          description: The number in the document.
          type: string
        owner:
          $ref: "#/components/schemas/Entity"
          description: Contains information about the resource that owns the document.
        type:
          description: |-
            The type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity `type`.

            * When providing ID numbers for individuals, the values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.

            When uploading documents:
            * For `type` **organization**, the values can be **proofOfAddress**, **registrationDocument**, **taxDocument**. 

            * For `type` **individual**, the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, or **proofOfResidency**.

            * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/documents__reqParam_owner).
          enum:
            - bankStatement
            - driversLicense
            - identityCard
            - nationalIdNumber
            - passport
            - proofOfAddress
            - proofOfNationalIdNumber
            - proofOfResidency
            - registrationDocument
            - taxDocument
          type: string
    Entity:
      properties:
        id:
          description: Unique identifier of the resource that owns the document. Depending on the entity `type`, this value can be the unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/legalEntities/{id}__queryParam_id) or the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/transferInstruments/{id}__queryParam_id).
          type: string
        type:
          description: "The type of resource that owns the document. Possible values: **legalEntity**, **bankAccount**."
          type: string
    EntityReference:
      properties:
        id:
          description: Unique identifier of the resource.
          type: string
    Expiry:
      properties:
        month:
          description: The month in which the card will expire.
          type: string
        year:
          description: The year in which the card will expire.
          type: string
    GenericEntityInfo:
      properties:
        entityAssociations:
          description: |-
            List of individual legal entities associated with the organization legal entity. 
            For example, ultimate business owners through ownership or control, and signatories. 
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
    IdentificationData:
      properties:
        expiryDate:
          deprecated: true
          description: The expiry date of the document, in YYYY-MM-DD format.
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is deprecated.
        issuerCountry:
          deprecated: true
          description: The country where the document was issued, in the two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**.
          type: string
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Field is deprecated.
        issuerState:
          description: The state or province where the document was issued (AU only).
          type: string
        nationalIdExempt:
          description: Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, note that Adyen will require them to [upload an ID document](https://docs.adyen.com/issuing/kyc-verification#upload-documents).
          type: boolean
        number:
          description: The number in the document.
          type: string
        type:
          description: |-
            The type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity `type`.

            * When providing ID numbers for individuals, the values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.

            When uploading documents:
            * For `type` **organization**, the values can be **proofOfAddress**, **registrationDocument**, **taxDocument**. 

            * For `type` **individual**, the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, or **proofOfResidency**.

            * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/documents__reqParam_owner).
          enum:
            - bankStatement
            - driversLicense
            - identityCard
            - nationalIdNumber
            - passport
            - proofOfAddress
            - proofOfNationalIdNumber
            - proofOfResidency
            - registrationDocument
            - taxDocument
          type: string
    Individual:
      properties:
        birthData:
          $ref: "#/components/schemas/BirthData"
          description: The individual's birth information.
        email:
          description: The email address of the legal entity.
          type: string
        identificationData:
          $ref: "#/components/schemas/IdentificationData"
          description: Information about the individual's identification document.
        name:
          $ref: "#/components/schemas/Name2"
          description: The individual's name.
        nationality:
          description: The individual's nationality.
          type: string
        phone:
          $ref: "#/components/schemas/PhoneNumber2"
          description: The phone number of the legal entity.
        residentialAddress:
          $ref: "#/components/schemas/Address2"
          description: The residential address of the individual.
        webData:
          $ref: "#/components/schemas/WebData"
          deprecated: true
          description: The website and app URL of the legal entity.
    InvalidField:
      properties:
        message:
          description: Description of the validation error.
          type: string
        name:
          description: The field that has an invalid value.
          type: string
        value:
          description: The invalid value.
          type: string
      required:
        - name
        - value
        - message
    JSONObject:
      properties:
        paths:
          items:
            $ref: "#/components/schemas/JSONPath"
          type: array
        rootPath:
          $ref: "#/components/schemas/JSONPath"
    JSONPath:
      properties:
        content:
          items:
            type: string
          type: array
    LegalEntity:
      properties:
        documents:
          description: List of documents uploaded for the legal entity.
          items:
            $ref: "#/components/schemas/EntityReference"
          type: array
        entityAssociations:
          description: |-
            List of individual legal entities associated with the organization legal entity. 
            For example, ultimate business owners through ownership or control, and signatories. 
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        id:
          description: Unique identifier of the legal entity.
          type: string
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
        transferInstruments:
          description: List of transfer instruments that the legal entity owns.
          items:
            $ref: "#/components/schemas/EntityReference"
          type: array
        type:
          description: "The type of legal entity. Possible values: **individual**, **organization**."
          enum:
            - individual
            - organization
          type: string
    LegalEntityAssociation:
      properties:
        jobTitle:
          description: The individual's job title in case of `type` **uboThroughControl** or **signatory**.
          type: string
        legalEntityId:
          description: Unique identifier of the individual legal entity associated with the organization.
          type: string
        type:
          description: |-
            How the individual is associated with the organization. 

            Possible values: **uboThroughOwnership**, **uboThroughControl**, **signatory**. 
          enum:
            - signatory
            - uboThroughControl
            - uboThroughOwnership
          type: string
    LegalEntityInfo:
      properties:
        entityAssociations:
          description: |-
            List of individual legal entities associated with the organization legal entity. 
            For example, ultimate business owners through ownership or control, and signatories. 
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
        type:
          description: "The type of legal entity. Possible values: **individual**, **organization**."
          enum:
            - individual
            - organization
          type: string
    Name:
      properties:
        firstName:
          description: The first name.
          type: string
        lastName:
          description: The last name.
          type: string
      required:
        - firstName
        - lastName
    Name2:
      properties:
        firstName:
          description: The individual's first name.
          type: string
        infix:
          description: The infix in the individual's name, if any.
          type: string
        lastName:
          description: The individual's last name.
          type: string
    Organization:
      properties:
        description:
          description: Your description for the organization.
          type: string
        doingBusinessAs:
          description: The organization's registered name, if different from the legal name.
          type: string
        email:
          description: The email address of the legal entity.
          type: string
        legalName:
          description: The organization's legal name.
          type: string
        phone:
          $ref: "#/components/schemas/PhoneNumber2"
          description: The phone number of the legal entity.
        principalPlaceOfBusiness:
          $ref: "#/components/schemas/Address2"
          description: The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.
        registeredAddress:
          $ref: "#/components/schemas/Address2"
          description: The address of the organization registered at their registrar (such as the Chamber of Commerce).
        registrationNumber:
          description: The organization's registration number.
          type: string
        stockData:
          $ref: "#/components/schemas/StockData"
          description: Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.
        taxId:
          description: The organization's tax identifier.
          type: string
        taxIdAbsenceReason:
          description: |-
            The reason the organization has not provided a tax identifier.

            Possible values: **industryExemption**, **belowTaxThreshold**.
          enum:
            - industryExemption
            - belowTaxThreshold
          type: string
        type:
          description: "The type of organization. Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**,**nonProfit**, **partnershipIncorporated**, **privateCompany**."
          enum:
            - associationIncorporated
            - governmentalOrganization
            - listedPublicCompany
            - nonProfit
            - partnershipIncorporated
            - privateCompany
          type: string
        webData:
          $ref: "#/components/schemas/WebData"
          deprecated: true
          description: The website and app URL of the legal entity.
    PaginatedAccountHoldersResponse:
      properties:
        accountHolders:
          description: List of account holders.
          items:
            $ref: "#/components/schemas/AccountHolder"
          type: array
        hasNext:
          description: Indicates if there are more items in the next page.
          type: boolean
        hasPrevious:
          description: Indicates if there are more items in the previous page.
          type: boolean
      required:
        - accountHolders
        - hasPrevious
        - hasNext
    PaginatedBalanceAccountsResponse:
      properties:
        balanceAccounts:
          description: List of balance accounts.
          items:
            $ref: "#/components/schemas/BalanceAccount"
          type: array
        hasNext:
          description: Indicates if there are more items in the next page.
          type: boolean
        hasPrevious:
          description: Indicates if there are more items in the previous page.
          type: boolean
      required:
        - balanceAccounts
        - hasPrevious
        - hasNext
    PaginatedPaymentInstrumentsResponse:
      properties:
        hasNext:
          description: Indicates if there are more items in the next page.
          type: boolean
        hasPrevious:
          description: Indicates if there are more items in the previous page.
          type: boolean
        paymentInstruments:
          description: List of payment instruments associated with the balance account.
          items:
            $ref: "#/components/schemas/PaymentInstrument"
          type: array
      required:
        - paymentInstruments
        - hasPrevious
        - hasNext
    PaymentInstrument:
      properties:
        balanceAccountId:
          description: Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__queryParam_id) associated with the payment instrument.
          type: string
        card:
          $ref: "#/components/schemas/Card"
          description: Contains information about the card payment instrument.
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: Unique identifier of the payment instrument.
          type: string
        issuingCountryCode:
          description: Country where the payment instrument is being issued, in the two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**, **US**.
          type: string
        paymentInstrumentGroupId:
          description: The ID of a payment instrument group that this payment instrument is part of.
          type: string
        reference:
          description: Your reference to the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, the status is set to **Active** by default. However, there can be exceptions based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards issued in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable when creating physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
        type:
          description: |-
            The type of payment instrument.

            Possible value: **card** 
          enum:
            - bankAccount
            - card
            - unknown
          type: string
      required:
        - balanceAccountId
        - issuingCountryCode
        - type
        - id
    PaymentInstrumentGroup:
      properties:
        balancePlatform:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) where this payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: Unique identifier of the payment instrument group.
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference to the payment instrument group, maximum 150 characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
        - balancePlatform
        - txVariant
    PaymentInstrumentGroupInfo:
      properties:
        balancePlatform:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) where this payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum 300 characters.
          maxLength: 300
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference to the payment instrument group, maximum 150 characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
        - balancePlatform
        - txVariant
    PaymentInstrumentInfo:
      properties:
        balanceAccountId:
          description: Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__queryParam_id) associated with the payment instrument.
          type: string
        card:
          $ref: "#/components/schemas/CardInfo"
          description: Object that contains information about the card payment instrument.
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        issuingCountryCode:
          description: Country where the payment instrument is being issued, in the two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**, **US**.
          type: string
        paymentInstrumentGroupId:
          description: The ID of a payment instrument group that this payment instrument is part of.
          type: string
        reference:
          description: Your reference to the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, the status is set to **Active** by default. However, there can be exceptions based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards issued in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable when creating physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
        type:
          description: |-
            The type of payment instrument.

            Possible value: **card** 
          enum:
            - bankAccount
            - card
            - unknown
          type: string
      required:
        - balanceAccountId
        - issuingCountryCode
        - type
    PaymentInstrumentReference:
      properties:
        id:
          description: Unique identifier of the payment instrument.
          type: string
      required:
        - id
    PaymentInstrumentUpdateRequest:
      properties:
        balanceAccountId:
          description: |-
            Unique identifier of the balance account associated with this payment instrument.
            >You can only change the balance account ID if the payment instrument has a **Requested** or **Inactive** status.
          type: string
        card:
          $ref: "#/components/schemas/CardInfo"
          description: Object that contains information about the card payment instrument.
        status:
          description: "The new status of the payment instrument.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable when creating physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
    PersonalData:
      properties:
        dateOfBirth:
          description: |-
            The date of birth of the person.
            The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
          type: string
        idNumber:
          description: An ID number of the person.
          type: string
        nationality:
          description: |-
            The nationality of the person represented by a two-character country code.
            >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
          maxLength: 2
          minLength: 2
          type: string
    Phone:
      properties:
        number:
          description: |-
            The full phone number provided as a single string. 
            For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**, 

             or **"(0031) 611223344"**.
          type: string
        type:
          description: |
            The type of phone number.
            Possible values: 
            **Landline**, **Mobile**.
          enum:
            - Landline
            - Mobile
          type: string
      required:
        - number
        - type
    PhoneNumber:
      properties:
        phoneCountryCode:
          description: |-
            The two-character country code of the phone number.
            >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
          type: string
        phoneNumber:
          description: |-
            The phone number.
            >The inclusion of the phone number country code is not necessary.
          type: string
        phoneType:
          description: |-
            The type of the phone number.
            >The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.
          enum:
            - Fax
            - Landline
            - Mobile
            - SIP
          type: string
      required:
        - phoneCountryCode
        - phoneNumber
    PhoneNumber2:
      properties:
        countryCode:
          description: The two-letter country code, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US** or **NL**.
          type: string
        number:
          description: The phone number.
          type: string
        type:
          description: |-
            The type of phone number.
             Possible values: **mobile**, **landline**, **sip**, or **fax.** 
          type: string
    RecurringDetail:
      properties:
        merchantAccount:
          description: The merchant account used when the payment details were stored.
          type: string
        reference:
          description: The `recurringDetailReference` returned in the response when the payment details were stored.
          type: string
        shopperReference:
          description: The unique identifier used when the payment details were stored.
          type: string
    RemediatingAction:
      properties:
        code:
          description: The remediating action code.
          type: string
        message:
          description: A description of how you can resolve the verification error.
          type: string
    RestServiceError:
      properties:
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
        errorCode:
          description: A code that identifies the problem type.
          type: string
        errorType:
          description: A URI that identifies the problem type, which points to human-readable documentation on this problem type.
          type: string
        instance:
          description: A unique URI that identifies the specific occurrence of the problem.
          type: string
        invalidFields:
          description: Detailed explanations of each validation error, when applicable.
          items:
            $ref: "#/components/schemas/InvalidField"
          type: array
        requestId:
          description: A unique reference for the request, essentially same as `pspReference`.
          type: string
        status:
          description: The HTTP status code.
          format: int32
          type: integer
        title:
          description: A short, human-readable summary of the problem type.
          type: string
      required:
        - errorType
        - errorCode
        - title
        - detail
        - status
    ServiceError:
      properties:
        errorCode:
          description: The error code mapped to the error message.
          type: string
        errorType:
          description: The category of the error.
          type: string
        message:
          description: A short explanation of the issue.
          type: string
        pspReference:
          description: The PSP reference of the payment.
          type: string
        status:
          description: The HTTP response status.
          format: int32
          type: integer
    StockData:
      properties:
        marketIdentifier:
          description: The [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization's stocks are traded.
          type: string
        stockNumber:
          description: The stock number.
          type: string
        tickerSymbol:
          description: The stock ticker symbol.
          type: string
    SweepConfiguration:
      properties:
        balanceAccountId:
          description: Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}) that will be the source or destination of the balance sweep. This can only be used for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
          type: string
        merchantAccount:
          description: The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
          type: string
        schedule:
          $ref: "#/components/schemas/SweepSchedule"
          description: The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
        sweepAmount:
          $ref: "#/components/schemas/Amount"
          description: The amount that must be pushed out or pulled in. You can configure only one of `sweepAmount` or `targetAmount`.
        targetAmount:
          $ref: "#/components/schemas/Amount"
          description: The amount that must be available in the balance account after the sweep. You can configure only one of `sweepAmount` or `targetAmount`.
        transferInstrumentId:
          description: Unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/transferInstruments/{id}__queryParam_id) that will be the source or destination of the balance sweep. This can only be used for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
          type: string
        triggerAmount:
          $ref: "#/components/schemas/Amount"
          description: |-
            The threshold amount that triggers the sweep. If not specified, the amount defaults to zero. The `triggerAmount` is evaluated at the specified `schedule.type`.

            * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds will be pulled in to the balance account.

            * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds will be pushed out of the balance account.
        type:
          default: push
          description: |-
            The direction of sweep. Possible values:

             * **push**: _Push funds out_ to a destination balance account or transfer instrument.

             * **pull**: _Pull funds in_ from a source merchant account or balance account. 
          enum:
            - pull
            - push
          type: string
      required:
        - schedule
        - type
    SweepSchedule:
      properties:
        type:
          description: |-
            The schedule type.

            Possible values:

            * **daily**: Push out funds daily at 07:00 AM CET.

            * **weekly**: Push out funds every Monday at 07:00 AM CET.

            * **monthly**: Push out funds every 1st of the month at 07:00 AM CET.

            * **balance**: Only for sweeps of `type` **pull** and with a `merchantAccount` source. Pull in funds instantly if the balance is less than or equal to the `triggerAmount`.
          enum:
            - balance
            - daily
            - monthly
            - weekly
          type: string
    TransactionRule:
      properties:
        amount:
          $ref: "#/components/schemas/Amount"
          description: The maximum amount that a payment instrument can be used for in a given period specified in the `interval.type`.
        balancePlatformId:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.
          type: string
        countries:
          description: 'List of countries to which the rule applies. For example: **["NL","US"]**.'
          items:
            type: string
          type: array
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: |-
            The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format.  For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the rule will be evaluated until the rule status is set to **inactive**.
          type: string
        entryModes:
          description: |-
            List of point-of-sale entry modes to which the rule applies.

            Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
          items:
            enum:
              - barcode
              - chip
              - cof
              - contactless
              - magstripe
              - manual
              - ocr
              - server
              - token
              - unknown
            type: string
          type: array
        id:
          description: Unique identifier of the transaction rule.
          type: string
        interval:
          $ref: "#/components/schemas/TransactionRuleInterval"
          description: The interval when the rule conditions must be applied.
        maxTransactions:
          description: The maximum number of transactions that a payment instrument can be used for in a given period specified in the `interval.type`.
          format: int32
          type: integer
        mccs:
          description: List of Merchant Category Codes (MCCs) to which the rule applies.
          items:
            type: string
          type: array
        paymentInstrumentGroupId:
          description: Unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/paymentInstrumentGroups/{id}) to which the rule applies.
          type: string
        paymentInstrumentId:
          description: Unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/paymentInstruments/{id}) to which the rule applies.
          type: string
        processingTypes:
          description: |-
            List of processing types to which the rule applies.

            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
          items:
            enum:
              - atmWithdraw
              - balanceInquiry
              - ecommerce
              - moto
              - pos
              - purchaseWithCashback
              - recurring
              - token
              - unknown
            type: string
          type: array
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        startDate:
          description: |+
            The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. 

          type: string
        status:
          description: |-
            The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created 
            with an **active** status. 

            Possible values: **active**, **inactive**.
          enum:
            - active
            - inactive
          type: string
        type:
          description: |
            The type of conditions provided in the rule.

            Possible values:
              * **allowList** - The rule provides categories (such as country and MCC) where payments must be allowed. 
             * **blockList** - The rule provides categories (such as country and MCC) where payments must be blocked. 
             * **maxUsage** - The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument. 
             * **velocity** - The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
          enum:
            - allowList
            - blockList
            - maxUsage
            - velocity
          type: string
          x-enum:
            - description: The rule provides categories (such as country and MCC) where payments must be allowed.
              value: allowList
            - description: The rule provides categories (such as country and MCC) where payments must be blocked.
              value: blockList
            - description: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
              value: velocity
            - description: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
              value: maxUsage
      required:
        - type
        - description
        - reference
        - interval
    TransactionRuleInfo:
      properties:
        amount:
          $ref: "#/components/schemas/Amount"
          description: The maximum amount that a payment instrument can be used for in a given period specified in the `interval.type`.
        balancePlatformId:
          description: Unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.
          type: string
        countries:
          description: 'List of countries to which the rule applies. For example: **["NL","US"]**.'
          items:
            type: string
          type: array
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: |-
            The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format.  For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the rule will be evaluated until the rule status is set to **inactive**.
          type: string
        entryModes:
          description: |-
            List of point-of-sale entry modes to which the rule applies.

            Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
          items:
            enum:
              - barcode
              - chip
              - cof
              - contactless
              - magstripe
              - manual
              - ocr
              - server
              - token
              - unknown
            type: string
          type: array
        interval:
          $ref: "#/components/schemas/TransactionRuleInterval"
          description: The interval when the rule conditions must be applied.
        maxTransactions:
          description: The maximum number of transactions that a payment instrument can be used for in a given period specified in the `interval.type`.
          format: int32
          type: integer
        mccs:
          description: List of Merchant Category Codes (MCCs) to which the rule applies.
          items:
            type: string
          type: array
        paymentInstrumentGroupId:
          description: Unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/paymentInstrumentGroups/{id}) to which the rule applies.
          type: string
        paymentInstrumentId:
          description: Unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/paymentInstruments/{id}) to which the rule applies.
          type: string
        processingTypes:
          description: |-
            List of processing types to which the rule applies.

            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
          items:
            enum:
              - atmWithdraw
              - balanceInquiry
              - ecommerce
              - moto
              - pos
              - purchaseWithCashback
              - recurring
              - token
              - unknown
            type: string
          type: array
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        startDate:
          description: |+
            The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. 

          type: string
        status:
          description: |-
            The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created 
            with an **active** status. 

            Possible values: **active**, **inactive**.
          enum:
            - active
            - inactive
          type: string
        type:
          description: |
            The type of conditions provided in the rule.

            Possible values:
              * **allowList** - The rule provides categories (such as country and MCC) where payments must be allowed. 
             * **blockList** - The rule provides categories (such as country and MCC) where payments must be blocked. 
             * **maxUsage** - The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument. 
             * **velocity** - The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
          enum:
            - allowList
            - blockList
            - maxUsage
            - velocity
          type: string
          x-enum:
            - description: The rule provides categories (such as country and MCC) where payments must be allowed.
              value: allowList
            - description: The rule provides categories (such as country and MCC) where payments must be blocked.
              value: blockList
            - description: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
              value: velocity
            - description: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
              value: maxUsage
      required:
        - type
        - description
        - reference
        - interval
    TransactionRuleInterval:
      properties:
        type:
          description: |-
            Defines the period when the rule conditions and limits apply, and how often the amount and transaction counters are reset.

            Possible values:
              * **perTransaction**: The conditions are evaluated and the counters are reset for every transaction.
             * **daily**: The counters are reset daily at 00:00:00 UTC.
             * **weekly**: The counters are reset every Monday at 00:00:00 UTC. 
             * **monthly**: The counters reset every 1st day of the month at 00:00:00 UTC. 
             * **lifetime**: The conditions and limits apply to the lifetime of the payment instrument.
          enum:
            - daily
            - lifetime
            - monthly
            - perTransaction
            - weekly
          type: string
      required:
        - type
    TransactionRuleResponse:
      properties:
        transactionRule:
          $ref: "#/components/schemas/TransactionRule"
          description: The transaction rule.
    TransactionRulesResponse:
      properties:
        transactionRules:
          description: List of transaction rules.
          items:
            $ref: "#/components/schemas/TransactionRule"
          type: array
    TransferInstrument:
      properties:
        bankAccount:
          $ref: "#/components/schemas/BankAccountInfo"
          description: Contains information about the legal entity's bank account. Required when `type` is **bankAccount**.
        id:
          description: Unique identifier of the transfer instrument.
          type: string
        legalEntityId:
          description: Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/legalEntities/{id}__queryParam_id) that owns the transfer instrument.
          type: string
        recurringDetail:
          $ref: "#/components/schemas/RecurringDetail"
          description: Contains information about the legal entity's previously stored payment details. Required when `type` is **recurringDetail**.
        type:
          description: |-
            The type of transfer instrument.

            Possible values: **bankAccount**, **recurringDetail**.
          type: string
    TransferInstrumentInfo:
      properties:
        bankAccount:
          $ref: "#/components/schemas/BankAccountInfo"
          description: Contains information about the legal entity's bank account. Required when `type` is **bankAccount**.
        legalEntityId:
          description: Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/legalEntities/{id}__queryParam_id) that owns the transfer instrument.
          type: string
        recurringDetail:
          $ref: "#/components/schemas/RecurringDetail"
          description: Contains information about the legal entity's previously stored payment details. Required when `type` is **recurringDetail**.
        type:
          description: |-
            The type of transfer instrument.

            Possible values: **bankAccount**, **recurringDetail**.
          type: string
    VerificationError:
      properties:
        code:
          description: The verification error code.
          type: string
        message:
          description: A description of the error.
          type: string
        remediatingActions:
          description: Contains the actions that you can take to resolve the verification error.
          items:
            $ref: "#/components/schemas/RemediatingAction"
          type: array
        subErrors:
          description: Contains more granular information about the verification error.
          items:
            $ref: "#/components/schemas/VerificationError-recursive"
          type: array
        type:
          description: "The type of error. Possible values: **invalidInput**, **dataMissing**"
          enum:
            - dataMissing
            - invalidInput
          type: string
    VerificationError-recursive:
      properties:
        code:
          description: The verification error code.
          type: string
        message:
          description: A description of the error.
          type: string
        remediatingActions:
          description: Contains the actions that you can take to resolve the verification error.
          items:
            $ref: "#/components/schemas/RemediatingAction"
          type: array
        type:
          description: "The type of error. Possible values: **invalidInput**, **dataMissing**"
          enum:
            - dataMissing
            - invalidInput
          type: string
    VoidResponse: {}
    WebData:
      properties:
        appAddress:
          description: Application URL.
          type: string
        webAddress:
          description: Website URL.
          type: string
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
x-groups:
  - General
  - Account holders
  - Balance accounts
  - Payment instruments
  - Payment instrument groups
  - Transaction rules
  - Legal entities
  - Transfer instruments
  - Documents
