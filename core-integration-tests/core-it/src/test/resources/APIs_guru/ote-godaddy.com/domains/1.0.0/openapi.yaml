openapi: 3.0.0
servers:
  - url: //api.ote-godaddy.com
info:
  title: ""
  version: 1.0.0
  x-apisguru-categories:
    - hosting
  x-origin:
    - format: swagger
      url: https://developer.godaddy.com/swagger/swagger_domains.json
      version: "2.0"
  x-providerName: ote-godaddy.com
  x-serviceName: domains
tags:
  - description: ""
    name: v1
  - description: ""
    name: v2
paths:
  /v1/domains:
    get:
      operationId: list
      parameters:
        - description: Shopper ID whose domains are to be retrieved
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Only include results with `status` value in the specified set
          explode: false
          in: query
          name: statuses
          required: false
          schema:
            items:
              enum:
                - ACTIVE
                - AWAITING_CLAIM_ACK
                - AWAITING_DOCUMENT_AFTER_TRANSFER
                - AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT
                - AWAITING_DOCUMENT_UPLOAD
                - AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY
                - AWAITING_PAYMENT
                - AWAITING_RENEWAL_TRANSFER_IN_COMPLETE
                - AWAITING_TRANSFER_IN_ACK
                - AWAITING_TRANSFER_IN_AUTH
                - AWAITING_TRANSFER_IN_AUTO
                - AWAITING_TRANSFER_IN_WHOIS
                - AWAITING_TRANSFER_IN_WHOIS_FIX
                - AWAITING_VERIFICATION_ICANN
                - AWAITING_VERIFICATION_ICANN_MANUAL
                - CANCELLED
                - CANCELLED_HELD
                - CANCELLED_REDEEMABLE
                - CANCELLED_TRANSFER
                - CONFISCATED
                - DISABLED_SPECIAL
                - EXCLUDED_INVALID_CLAIM_FIREHOSE
                - EXPIRED_REASSIGNED
                - FAILED_BACKORDER_CAPTURE
                - FAILED_DROP_IMMEDIATE_THEN_ADD
                - FAILED_PRE_REGISTRATION
                - FAILED_REDEMPTION
                - FAILED_REDEMPTION_REPORT
                - FAILED_REGISTRATION
                - FAILED_REGISTRATION_FIREHOSE
                - FAILED_RESTORATION_REDEMPTION_MOCK
                - FAILED_SETUP
                - FAILED_TRANSFER_IN
                - FAILED_TRANSFER_IN_BAD_STATUS
                - FAILED_TRANSFER_IN_REGISTRY
                - HELD_COURT_ORDERED
                - HELD_DISPUTED
                - HELD_EXPIRATION_PROTECTION
                - HELD_EXPIRED_REDEMPTION_MOCK
                - HELD_REGISTRAR_ADD
                - HELD_REGISTRAR_REMOVE
                - HELD_SHOPPER
                - HELD_TEMPORARY
                - LOCKED_ABUSE
                - LOCKED_COPYRIGHT
                - LOCKED_REGISTRY
                - LOCKED_SUPER
                - PARKED_AND_HELD
                - PARKED_EXPIRED
                - PARKED_VERIFICATION_ICANN
                - PENDING_ABORT_CANCEL_SETUP
                - PENDING_AGREEMENT_PRE_REGISTRATION
                - PENDING_APPLY_RENEWAL_CREDITS
                - PENDING_BACKORDER_CAPTURE
                - PENDING_BLOCKED_REGISTRY
                - PENDING_CANCEL_REGISTRANT_PROFILE
                - PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_COMPLETE_REGISTRANT_PROFILE
                - PENDING_COO
                - PENDING_COO_COMPLETE
                - PENDING_DNS
                - PENDING_DNS_ACTIVE
                - PENDING_DNS_INACTIVE
                - PENDING_DOCUMENT_VALIDATION
                - PENDING_DOCUMENT_VERIFICATION
                - PENDING_DROP_IMMEDIATE
                - PENDING_DROP_IMMEDIATE_THEN_ADD
                - PENDING_EPP_CREATE
                - PENDING_EPP_DELETE
                - PENDING_EPP_UPDATE
                - PENDING_ESCALATION_REGISTRY
                - PENDING_EXPIRATION
                - PENDING_EXPIRATION_RESPONSE
                - PENDING_EXPIRATION_SYNC
                - PENDING_EXPIRED_REASSIGNMENT
                - PENDING_EXPIRE_AUTO_ADD
                - PENDING_EXTEND_REGISTRANT_PROFILE
                - PENDING_FAILED_COO
                - PENDING_FAILED_EPP_CREATE
                - PENDING_FAILED_HELD
                - PENDING_FAILED_PURCHASE_PREMIUM
                - PENDING_FAILED_RECONCILE_FIREHOSE
                - PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_FAILED_RELEASE_PREMIUM
                - PENDING_FAILED_RENEW_EXPIRATION_PROTECTION
                - PENDING_FAILED_RESERVE_PREMIUM
                - PENDING_FAILED_SUBMIT_FIREHOSE
                - PENDING_FAILED_TRANSFER_ACK_PREMIUM
                - PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM
                - PENDING_FAILED_TRANSFER_IN_PREMIUM
                - PENDING_FAILED_TRANSFER_PREMIUM
                - PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM
                - PENDING_FAILED_UNLOCK_PREMIUM
                - PENDING_FAILED_UPDATE_API
                - PENDING_FRAUD_VERIFICATION
                - PENDING_FRAUD_VERIFIED
                - PENDING_GET_CONTACTS
                - PENDING_GET_HOSTS
                - PENDING_GET_NAME_SERVERS
                - PENDING_GET_STATUS
                - PENDING_HOLD_ESCROW
                - PENDING_HOLD_REDEMPTION
                - PENDING_LOCK_CLIENT_REMOVE
                - PENDING_LOCK_DATA_QUALITY
                - PENDING_LOCK_THEN_HOLD_REDEMPTION
                - PENDING_PARKING_DETERMINATION
                - PENDING_PARK_INVALID_WHOIS
                - PENDING_PARK_INVALID_WHOIS_REMOVAL
                - PENDING_PURCHASE_PREMIUM
                - PENDING_RECONCILE
                - PENDING_RECONCILE_FIREHOSE
                - PENDING_REDEMPTION
                - PENDING_REDEMPTION_REPORT
                - PENDING_REDEMPTION_REPORT_COMPLETE
                - PENDING_REDEMPTION_REPORT_SUBMITTED
                - PENDING_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK
                - PENDING_RELEASE_PREMIUM
                - PENDING_REMOVAL
                - PENDING_REMOVAL_HELD
                - PENDING_REMOVAL_PARKED
                - PENDING_REMOVAL_UNPARK
                - PENDING_RENEWAL
                - PENDING_RENEW_EXPIRATION_PROTECTION
                - PENDING_RENEW_INFINITE
                - PENDING_RENEW_LOCKED
                - PENDING_RENEW_WITHOUT_RECEIPT
                - PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_RESERVE_PREMIUM
                - PENDING_RESET_VERIFICATION_ICANN
                - PENDING_RESPONSE_FIREHOSE
                - PENDING_RESTORATION
                - PENDING_RESTORATION_INACTIVE
                - PENDING_RESTORATION_REDEMPTION_MOCK
                - PENDING_RETRY_EPP_CREATE
                - PENDING_RETRY_HELD
                - PENDING_SEND_AUTH_CODE
                - PENDING_SETUP
                - PENDING_SETUP_ABANDON
                - PENDING_SETUP_AGREEMENT_LANDRUSH
                - PENDING_SETUP_AGREEMENT_SUNRISE2_A
                - PENDING_SETUP_AGREEMENT_SUNRISE2_B
                - PENDING_SETUP_AGREEMENT_SUNRISE2_C
                - PENDING_SETUP_AUTH
                - PENDING_SETUP_DNS
                - PENDING_SETUP_FAILED
                - PENDING_SETUP_REVIEW
                - PENDING_SETUP_SUNRISE
                - PENDING_SETUP_SUNRISE_PRE
                - PENDING_SETUP_SUNRISE_RESPONSE
                - PENDING_SUBMIT_FAILURE
                - PENDING_SUBMIT_FIREHOSE
                - PENDING_SUBMIT_HOLD_FIREHOSE
                - PENDING_SUBMIT_HOLD_LANDRUSH
                - PENDING_SUBMIT_HOLD_SUNRISE
                - PENDING_SUBMIT_LANDRUSH
                - PENDING_SUBMIT_RESPONSE_FIREHOSE
                - PENDING_SUBMIT_RESPONSE_LANDRUSH
                - PENDING_SUBMIT_RESPONSE_SUNRISE
                - PENDING_SUBMIT_SUCCESS_FIREHOSE
                - PENDING_SUBMIT_SUCCESS_LANDRUSH
                - PENDING_SUBMIT_SUCCESS_SUNRISE
                - PENDING_SUBMIT_SUNRISE
                - PENDING_SUBMIT_WAITING_LANDRUSH
                - PENDING_SUCCESS_PRE_REGISTRATION
                - PENDING_SUSPENDED_DATA_QUALITY
                - PENDING_TRANSFER_ACK_PREMIUM
                - PENDING_TRANSFER_IN
                - PENDING_TRANSFER_IN_ACK
                - PENDING_TRANSFER_IN_ACK_PREMIUM
                - PENDING_TRANSFER_IN_BAD_REGISTRANT
                - PENDING_TRANSFER_IN_CANCEL
                - PENDING_TRANSFER_IN_CANCEL_REGISTRY
                - PENDING_TRANSFER_IN_COMPLETE_ACK
                - PENDING_TRANSFER_IN_DELETE
                - PENDING_TRANSFER_IN_LOCK
                - PENDING_TRANSFER_IN_NACK
                - PENDING_TRANSFER_IN_NOTIFICATION
                - PENDING_TRANSFER_IN_PREMIUM
                - PENDING_TRANSFER_IN_RELEASE
                - PENDING_TRANSFER_IN_RESPONSE
                - PENDING_TRANSFER_IN_UNDERAGE
                - PENDING_TRANSFER_OUT
                - PENDING_TRANSFER_OUT_ACK
                - PENDING_TRANSFER_OUT_NACK
                - PENDING_TRANSFER_OUT_PREMIUM
                - PENDING_TRANSFER_OUT_UNDERAGE
                - PENDING_TRANSFER_OUT_VALIDATION
                - PENDING_TRANSFER_PREMIUM
                - PENDING_TRANSFER_PREMUIM
                - PENDING_TRANSFER_SUBMIT_PREMIUM
                - PENDING_UNLOCK_DATA_QUALITY
                - PENDING_UNLOCK_PREMIUM
                - PENDING_UPDATE
                - PENDING_UPDATED_REGISTRANT_DATA_QUALITY
                - PENDING_UPDATE_ACCOUNT
                - PENDING_UPDATE_API
                - PENDING_UPDATE_API_RESPONSE
                - PENDING_UPDATE_AUTH
                - PENDING_UPDATE_CONTACTS
                - PENDING_UPDATE_CONTACTS_PRIVACY
                - PENDING_UPDATE_DNS
                - PENDING_UPDATE_DNS_SECURITY
                - PENDING_UPDATE_ELIGIBILITY
                - PENDING_UPDATE_EPP_CONTACTS
                - PENDING_UPDATE_MEMBERSHIP
                - PENDING_UPDATE_OWNERSHIP
                - PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION
                - PENDING_UPDATE_OWNERSHIP_HELD
                - PENDING_UPDATE_REGISTRANT
                - PENDING_UPDATE_REPO
                - PENDING_VALIDATION_DATA_QUALITY
                - PENDING_VERIFICATION_FRAUD
                - PENDING_VERIFICATION_STATUS
                - PENDING_VERIFY_REGISTRANT_DATA_QUALITY
                - RESERVED
                - RESERVED_PREMIUM
                - REVERTED
                - SUSPENDED_VERIFICATION_ICANN
                - TRANSFERRED_OUT
                - UNLOCKED_ABUSE
                - UNLOCKED_SUPER
                - UNPARKED_AND_UNHELD
                - UPDATED_OWNERSHIP
                - UPDATED_OWNERSHIP_HELD
              type: string
            type: array
          style: form
        - description: Only include results with `status` value in any of the specified groups
          explode: false
          in: query
          name: statusGroups
          required: false
          schema:
            items:
              enum:
                - INACTIVE
                - PRE_REGISTRATION
                - REDEMPTION
                - RENEWABLE
                - VERIFICATION_ICANN
                - VISIBLE
              type: string
            type: array
          style: form
        - description: Maximum number of domains to return
          in: query
          name: limit
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: Marker Domain to use as the offset in results
          in: query
          name: marker
          required: false
          schema:
            type: string
        - description: Optional details to be included in the response
          explode: false
          in: query
          name: includes
          required: false
          schema:
            items:
              enum:
                - authCode
                - contacts
                - nameServers
              type: string
            type: array
          style: form
        - description: Only include results that have been modified since the specified date
          in: query
          name: modifiedDate
          required: false
          schema:
            format: iso-datetime
            type: string
      responses:
        "200":
          content:
            application/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSummary"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSummary"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSummary"
                type: array
            text/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSummary"
                type: array
            text/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSummary"
                type: array
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Limit must have a value no greater than 1000
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieve a list of Domains for the specified Shopper
      tags:
        - v1
  /v1/domains/agreements:
    get:
      operationId: getAgreement
      parameters:
        - description: Unique identifier of the Market used to retrieve/translate Legal Agreements
          in: header
          name: X-Market-Id
          required: false
          schema:
            default: en-US
            format: bcp-47
            type: string
        - description: list of TLDs whose legal agreements are to be retrieved
          explode: false
          in: query
          name: tlds
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Whether or not privacy has been requested
          in: query
          name: privacy
          required: true
          schema:
            type: boolean
        - description: Whether or not domain tranfer has been requested
          in: query
          name: forTransfer
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/LegalAgreement"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/LegalAgreement"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/LegalAgreement"
                type: array
            text/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/LegalAgreement"
                type: array
            text/xml:
              schema:
                items:
                  $ref: "#/components/schemas/LegalAgreement"
                type: array
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons
      tags:
        - v1
  /v1/domains/available:
    get:
      operationId: available
      parameters:
        - description: Domain name whose availability is to be checked
          in: query
          name: domain
          required: true
          schema:
            type: string
        - description: Optimize for time ('FAST') or accuracy ('FULL')
          in: query
          name: checkType
          required: false
          schema:
            default: FAST
            enum:
              - FAST
              - FULL
              - fast
              - full
            type: string
        - description: Whether or not to include domains available for transfer. If set to True, checkType is ignored
          in: query
          name: forTransfer
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainAvailableResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableResponse"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableResponse"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dashbr>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>domain must be specified
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Determine whether or not the specified domain is available for purchase
      tags:
        - v1
    post:
      operationId: availableBulk
      parameters:
        - description: Optimize for time ('FAST') or accuracy ('FULL')
          in: query
          name: checkType
          required: false
          schema:
            default: FAST
            enum:
              - FAST
              - FULL
              - fast
              - full
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              maximum: 500
              type: array
          application/xml:
            schema:
              items:
                type: string
              maximum: 500
              type: array
          text/xml:
            schema:
              items:
                type: string
              maximum: 500
              type: array
        description: Domain names for which to check availability
        required: true
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulk"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulk"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulk"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulk"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulk"
          description: Request was successful
        "203":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulkMixed"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulkMixed"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulkMixed"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulkMixed"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainAvailableBulkMixed"
          description: Request was partially successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>Reserved name error<br>domain must be specified
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Determine whether or not the specified domains are available for purchase
      tags:
        - v1
  /v1/domains/contacts/validate:
    post:
      description: All contacts specified in request will be validated against all domains specifed in "domains". As an alternative, you can also pass in tlds, with the exception of `uk`, which requires full domain names
      operationId: ContactsValidate
      parameters:
        - description: PrivateLabelId to operate as, if different from JWT
          in: header
          name: X-Private-Label-Id
          required: false
          schema:
            default: 1
            type: integer
        - description: MarketId in which the request is being made, and for which responses should be localized
          in: query
          name: marketId
          required: false
          schema:
            default: en-US
            format: bcp-47
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainsContactsBulk"
          application/xml:
            schema:
              $ref: "#/components/schemas/DomainsContactsBulk"
          text/xml:
            schema:
              $ref: "#/components/schemas/DomainsContactsBulk"
        description: An instance document expected for domains contacts validation
        required: true
      responses:
        "200":
          description: No response was specified
        "204":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorDomainContactsValidate"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDomainContactsValidate"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDomainContactsValidate"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorDomainContactsValidate"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorDomainContactsValidate"
          description: Request body doesn't fulfill schema, see details in `fields`
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Validate the request body using the Domain Contact Validation Schema for specified domains.
      tags:
        - v1
  /v1/domains/purchase:
    post:
      operationId: purchase
      parameters:
        - description: The Shopper for whom the domain should be purchased
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/DomainPurchase"
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: domain must be specified<br>Based on restrictions declared in JSON schema returned by `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>`body` must be specified
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Purchase and register the specified Domain
      tags:
        - v1
  "/v1/domains/purchase/schema/{tld}":
    get:
      operationId: schema
      parameters:
        - description: The Top-Level Domain whose schema should be retrieved
          in: path
          name: tld
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/JsonSchema"
            application/json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
            application/xml:
              schema:
                $ref: "#/components/schemas/JsonSchema"
            text/javascript:
              schema:
                $ref: "#/components/schemas/JsonSchema"
            text/xml:
              schema:
                $ref: "#/components/schemas/JsonSchema"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`tld` must be specified"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieve the schema to be submitted when registering a Domain for the specified TLD
      tags:
        - v1
  /v1/domains/purchase/validate:
    post:
      operationId: validate
      requestBody:
        $ref: "#/components/requestBodies/DomainPurchase"
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Based on restrictions declared in JSON schema returned by `./schema/{tld}`
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Validate the request body using the Domain Purchase Schema for the specified TLD
      tags:
        - v1
  /v1/domains/suggest:
    get:
      operationId: suggest
      parameters:
        - description: Shopper ID for which the suggestions are being generated
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain name or set of keywords for which alternative domain names will be suggested
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: |-
            Two-letter ISO country code to be used as a hint for target region<br/><br/>
            NOTE: These are sample values, there are many
            <a href="http://www.iso.org/iso/country_codes.htm">more</a>
          in: query
          name: country
          required: false
          schema:
            enum:
              - AC
              - AD
              - AE
              - AF
              - AG
              - AI
              - AL
              - AM
              - AO
              - AQ
              - AR
              - AS
              - AT
              - AU
              - AW
              - AX
              - AZ
              - BA
              - BB
              - BD
              - BE
              - BF
              - BG
              - BH
              - BI
              - BJ
              - BM
              - BN
              - BO
              - BQ
              - BR
              - BS
              - BT
              - BV
              - BW
              - BY
              - BZ
              - CA
              - CC
              - CD
              - CF
              - CG
              - CH
              - CI
              - CK
              - CL
              - CM
              - CN
              - CO
              - CR
              - CV
              - CW
              - CX
              - CY
              - CZ
              - DE
              - DJ
              - DK
              - DM
              - DO
              - DZ
              - EC
              - EE
              - EG
              - EH
              - ER
              - ES
              - ET
              - FI
              - FJ
              - FK
              - FM
              - FO
              - FR
              - GA
              - GB
              - GD
              - GE
              - GF
              - GG
              - GH
              - GI
              - GL
              - GM
              - GN
              - GP
              - GQ
              - GR
              - GS
              - GT
              - GU
              - GW
              - GY
              - HK
              - HM
              - HN
              - HR
              - HT
              - HU
              - ID
              - IE
              - IL
              - IM
              - IN
              - IO
              - IQ
              - IS
              - IT
              - JE
              - JM
              - JO
              - JP
              - KE
              - KG
              - KH
              - KI
              - KM
              - KN
              - KR
              - KV
              - KW
              - KY
              - KZ
              - LA
              - LB
              - LC
              - LI
              - LK
              - LR
              - LS
              - LT
              - LU
              - LV
              - LY
              - MA
              - MC
              - MD
              - ME
              - MG
              - MH
              - MK
              - ML
              - MM
              - MN
              - MO
              - MP
              - MQ
              - MR
              - MS
              - MT
              - MU
              - MV
              - MW
              - MX
              - MY
              - MZ
              - NA
              - NC
              - NE
              - NF
              - NG
              - NI
              - NL
              - NO
              - NP
              - NR
              - NU
              - NZ
              - OM
              - PA
              - PE
              - PF
              - PG
              - PH
              - PK
              - PL
              - PM
              - PN
              - PR
              - PS
              - PT
              - PW
              - PY
              - QA
              - RE
              - RO
              - RS
              - RU
              - RW
              - SA
              - SB
              - SC
              - SE
              - SG
              - SH
              - SI
              - SJ
              - SK
              - SL
              - SM
              - SN
              - SO
              - SR
              - ST
              - SV
              - SX
              - SZ
              - TC
              - TD
              - TF
              - TG
              - TH
              - TJ
              - TK
              - TL
              - TM
              - TN
              - TO
              - TP
              - TR
              - TT
              - TV
              - TW
              - TZ
              - UA
              - UG
              - UM
              - US
              - UY
              - UZ
              - VA
              - VC
              - VE
              - VG
              - VI
              - VN
              - VU
              - WF
              - WS
              - YE
              - YT
              - ZA
              - ZM
              - ZW
            format: iso-country-code
            type: string
        - description: Name of city to be used as a hint for target region
          in: query
          name: city
          required: false
          schema:
            format: city-name
            type: string
        - description: |-
            Sources to be queried<br/><br/><ul>
            <li><strong>CC_TLD</strong> - Varies the TLD using Country Codes</li>
            <li><strong>EXTENSION</strong> - Varies the TLD</li>
            <li><strong>KEYWORD_SPIN</strong> - Identifies keywords and then rotates each one</li>
            <li><strong>PREMIUM</strong> - Includes variations with premium prices</li></ul>
          explode: false
          in: query
          name: sources
          required: false
          schema:
            items:
              enum:
                - CC_TLD
                - EXTENSION
                - KEYWORD_SPIN
                - PREMIUM
                - cctld
                - extension
                - keywordspin
                - premium
              type: string
            type: array
          style: form
        - description: |-
            Top-level domains to be included in suggestions<br/><br/>
            NOTE: These are sample values, there are many
            <a href="http://www.godaddy.com/tlds/gtld.aspx#domain_search_form">more</a>
          explode: false
          in: query
          name: tlds
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Maximum length of second-level domain
          in: query
          name: lengthMax
          required: false
          schema:
            type: integer
        - description: Minimum length of second-level domain
          in: query
          name: lengthMin
          required: false
          schema:
            type: integer
        - description: Maximum number of suggestions to return
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: |-
            Maximum amount of time, in milliseconds, to wait for responses
            If elapses, return the results compiled up to that point
          in: query
          name: waitMs
          required: false
          schema:
            default: 1000
            format: integer-positive
            type: integer
      responses:
        "200":
          content:
            application/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSuggestion"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSuggestion"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSuggestion"
                type: array
            text/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSuggestion"
                type: array
            text/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DomainSuggestion"
                type: array
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`query` must be specified"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper's purchase history
      tags:
        - v1
  /v1/domains/tlds:
    get:
      operationId: tlds
      responses:
        "200":
          content:
            application/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/TldSummary"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TldSummary"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/TldSummary"
                type: array
            text/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/TldSummary"
                type: array
            text/xml:
              schema:
                items:
                  $ref: "#/components/schemas/TldSummary"
                type: array
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieves a list of TLDs supported and enabled for sale
      tags:
        - v1
  "/v1/domains/{domain}":
    delete:
      operationId: cancel
      parameters:
        - description: Domain to cancel
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain does not exist
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unknown domain error<br>At least two apex (aka @) `nameServers` must be specified
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Cancel a purchased domain
      tags:
        - v1
    get:
      operationId: get
      parameters:
        - description: Shopper ID expected to own the specified domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain name whose details are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainDetail"
          description: Request was successful
        "203":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainDetail"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainDetail"
          description: Request was partially successful, see verifications.status for further detail
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` must be specified"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieve details for the specified Domain
      tags:
        - v1
    patch:
      operationId: update
      parameters:
        - description: Domain whose details are to be updated
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: "Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainUpdate"
          application/xml:
            schema:
              $ref: "#/components/schemas/DomainUpdate"
          text/xml:
            schema:
              $ref: "#/components/schemas/DomainUpdate"
        description: Changes to apply to existing Domain
        required: true
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Specified Subaccount not owned by authenticated Shopper
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "409":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The given domain is not eligible to have its nameservers changed
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: At least two apex (aka @) `nameServers` must be specified<br>Failed to update nameservers
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Update details for the specified Domain
      tags:
        - v1
  "/v1/domains/{domain}/contacts":
    patch:
      operationId: updateContacts
      parameters:
        - description: "Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose Contacts are to be updated.
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainContacts"
          application/xml:
            schema:
              $ref: "#/components/schemas/DomainContacts"
          text/xml:
            schema:
              $ref: "#/components/schemas/DomainContacts"
        description: Changes to apply to existing Contacts
        required: true
      responses:
        "200":
          description: No response was specified
        "204":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Domain not found<br>Identity document not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` is not a valid Domain name"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Update domain
      tags:
        - v1
  "/v1/domains/{domain}/privacy":
    delete:
      operationId: cancelPrivacy
      parameters:
        - description: Shopper ID of the owner of the domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose privacy is to be cancelled
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain does not exist
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Customer has purchased Domain Ownership Protection and the domain has expired<br>The domain status does not allow performing the operation<br>Unknown domain error
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Submit a privacy cancellation request for the given domain
      tags:
        - v1
  "/v1/domains/{domain}/privacy/purchase":
    post:
      operationId: purchasePrivacy
      parameters:
        - description: Shopper ID of the owner of the domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain for which to purchase privacy
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrivacyPurchase"
          application/xml:
            schema:
              $ref: "#/components/schemas/PrivacyPurchase"
          text/xml:
            schema:
              $ref: "#/components/schemas/PrivacyPurchase"
        description: Options for purchasing privacy
        required: true
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "409":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain status does not allow performing the operation
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: End-user must read and consent to all of the following legal agreements<br>`domain` must match `sld.tld`
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Purchase privacy for a specified domain
      tags:
        - v1
  "/v1/domains/{domain}/records":
    patch:
      operationId: recordAdd
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be augmented
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfDNSRecord"
          application/xml:
            schema:
              $ref: "#/components/schemas/ArrayOfDNSRecord"
          text/xml:
            schema:
              $ref: "#/components/schemas/ArrayOfDNSRecord"
        description: DNS Records to add to whatever currently exists
        required: true
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` is not a valid Domain name"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Add the specified DNS Records to the specified Domain
      tags:
        - v1
    put:
      operationId: recordReplace
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecord"
              type: array
          application/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecord"
              type: array
          text/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecord"
              type: array
        description: DNS Records to replace whatever currently exists
        required: true
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` is not a valid Domain name<br>`record` does not fulfill the schema"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Replace all DNS Records for the specified Domain
      tags:
        - v1
  "/v1/domains/{domain}/records/{type}":
    put:
      operationId: recordReplaceType
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be replaced
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateType"
              type: array
          application/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateType"
              type: array
          text/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateType"
              type: array
        description: DNS Records to replace whatever currently exists
        required: true
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`record` does not fulfill the schema"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Replace all DNS Records for the specified Domain with the specified Type
      tags:
        - v1
  "/v1/domains/{domain}/records/{type}/{name}":
    delete:
      operationId: recordDeleteTypeName
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be deleted
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be deleted
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be deleted
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Domain not found
        "409":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The given domain is not eligible to have its records changed
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` is not a valid Domain name"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Delete all DNS Records for the specified Domain with the specified Type and Name
      tags:
        - v1
    get:
      operationId: recordGet
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be retrieved
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be retrieved
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Number of results to skip for pagination
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Maximum number of items to return
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DNSRecord"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DNSRecord"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DNSRecord"
                type: array
            text/javascript:
              schema:
                items:
                  $ref: "#/components/schemas/DNSRecord"
                type: array
            text/xml:
              schema:
                items:
                  $ref: "#/components/schemas/DNSRecord"
                type: array
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`record` does not fulfill the schema<br>`domain` is not a valid Domain name"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name
      tags:
        - v1
    put:
      operationId: recordReplaceTypeName
      parameters:
        - description: "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be replaced
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be replaced
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateTypeName"
              type: array
          application/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateTypeName"
              type: array
          text/xml:
            schema:
              items:
                $ref: "#/components/schemas/DNSRecordCreateTypeName"
              type: array
        description: DNS Records to replace whatever currently exists
        required: true
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`record` does not fulfill the schema"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Replace all DNS Records for the specified Domain with the specified Type and Name
      tags:
        - v1
  "/v1/domains/{domain}/renew":
    post:
      operationId: renew
      parameters:
        - description: "Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain to renew
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainRenew"
          application/xml:
            schema:
              $ref: "#/components/schemas/DomainRenew"
          text/xml:
            schema:
              $ref: "#/components/schemas/DomainRenew"
        description: Options for renewing existing Domain
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "409":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain status does not allow performing the operation
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: End-user must read and consent to all of the following legal agreements<br>`domain` must match `sld.tld`
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Renew the specified Domain
      tags:
        - v1
  "/v1/domains/{domain}/transfer":
    post:
      operationId: transferIn
      parameters:
        - description: The Shopper to whom the domain should be transfered
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain to transfer in
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainTransferIn"
          application/xml:
            schema:
              $ref: "#/components/schemas/DomainTransferIn"
          text/xml:
            schema:
              $ref: "#/components/schemas/DomainTransferIn"
        description: Details for domain transfer purchase
        required: true
      responses:
        "200":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/javascript:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DomainPurchaseResponse"
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "409":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` (domain) isn't available for transfer"
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Based on restrictions declared in JSON schema returned by `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>End-user must read and consent to all of the following legal agreements<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid period range<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>`authCode` cannot be empty<br>`domain` must match `sld.tld`<br>domain must be specified
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Purchase and start or restart transfer process
      tags:
        - v1
  "/v1/domains/{domain}/verifyRegistrantEmail":
    post:
      operationId: verifyEmail
      parameters:
        - description: "Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com"
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose Contact E-mail should be verified.
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request was successful
        "400":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request was malformed
        "401":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: "`domain` is not a valid Domain name"
        "429":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/javascript:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
            text/xml:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
        "504":
          content:
            application/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
            text/javascript:
              schema:
                $ref: "#/components/schemas/Error"
            text/xml:
              schema:
                $ref: "#/components/schemas/Error"
          description: Gateway timeout
      summary: Re-send Contact E-mail Verification for specified Domain
      tags:
        - v1
  "/v2/customers/{customerId}/domains/forwards/{fqdn}":
    delete:
      description: <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: domainsForwardsDelete
      parameters:
        - description: "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id."
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The fully qualified domain name whose forwarding details are to be deleted.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Request was successful
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain status does not allow performing the operation
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: A valid `fqdn` must be specified
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Submit a forwarding cancellation request for the given fqdn
      tags:
        - v2
    get:
      description: <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: domainsForwardsGet
      parameters:
        - description: "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id."
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The fully qualified domain name whose forwarding details are to be retrieved.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
        - description: Optionally include all sub domains if the fqdn specified is a domain and not a sub domain.
          in: query
          name: includeSubs
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DomainForwarding"
                type: array
          description: Request was successful
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: A valid `fqdn` must be specified
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Retrieve the forwarding information for the given fqdn
      tags:
        - v2
    put:
      description: <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      operationId: domainsForwardsPut
      parameters:
        - description: "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id."
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The fully qualified domain name whose forwarding details are to be modified.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainForwardingCreate"
        description: Domain forwarding rule to create or replace on the fqdn
        required: true
      responses:
        "204":
          description: Request was successful
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authentication info not sent or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Authenticated user is not allowed access
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The domain status does not allow performing the operation
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request body doesn't fulfill schema, see details in `fields`
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorLimit"
          description: Too many requests received within interval
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal server error
      summary: Modify the forwarding information for the given fqdn
      tags:
        - v2
components:
  requestBodies:
    DomainPurchase:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DomainPurchase"
        application/xml:
          schema:
            $ref: "#/components/schemas/DomainPurchase"
        text/xml:
          schema:
            $ref: "#/components/schemas/DomainPurchase"
      description: An instance document expected to match the JSON schema returned by `./schema/{tld}`
      required: true
  schemas:
    Address:
      properties:
        address1:
          format: street-address
          type: string
        address2:
          format: street-address2
          type: string
        city:
          format: city-name
          type: string
        country:
          default: US
          description: |-
            Two-letter ISO country code to be used as a hint for target region<br/><br/>
            NOTE: These are sample values, there are many
            <a href='http://www.iso.org/iso/country_codes.htm'>more</a>
          enum:
            - AC
            - AD
            - AE
            - AF
            - AG
            - AI
            - AL
            - AM
            - AO
            - AQ
            - AR
            - AS
            - AT
            - AU
            - AW
            - AX
            - AZ
            - BA
            - BB
            - BD
            - BE
            - BF
            - BG
            - BH
            - BI
            - BJ
            - BM
            - BN
            - BO
            - BQ
            - BR
            - BS
            - BT
            - BV
            - BW
            - BY
            - BZ
            - CA
            - CC
            - CD
            - CF
            - CG
            - CH
            - CI
            - CK
            - CL
            - CM
            - CN
            - CO
            - CR
            - CV
            - CW
            - CX
            - CY
            - CZ
            - DE
            - DJ
            - DK
            - DM
            - DO
            - DZ
            - EC
            - EE
            - EG
            - EH
            - ER
            - ES
            - ET
            - FI
            - FJ
            - FK
            - FM
            - FO
            - FR
            - GA
            - GB
            - GD
            - GE
            - GF
            - GG
            - GH
            - GI
            - GL
            - GM
            - GN
            - GP
            - GQ
            - GR
            - GS
            - GT
            - GU
            - GW
            - GY
            - HK
            - HM
            - HN
            - HR
            - HT
            - HU
            - ID
            - IE
            - IL
            - IM
            - IN
            - IO
            - IQ
            - IS
            - IT
            - JE
            - JM
            - JO
            - JP
            - KE
            - KG
            - KH
            - KI
            - KM
            - KN
            - KR
            - KV
            - KW
            - KY
            - KZ
            - LA
            - LB
            - LC
            - LI
            - LK
            - LR
            - LS
            - LT
            - LU
            - LV
            - LY
            - MA
            - MC
            - MD
            - ME
            - MG
            - MH
            - MK
            - ML
            - MM
            - MN
            - MO
            - MP
            - MQ
            - MR
            - MS
            - MT
            - MU
            - MV
            - MW
            - MX
            - MY
            - MZ
            - NA
            - NC
            - NE
            - NF
            - NG
            - NI
            - NL
            - NO
            - NP
            - NR
            - NU
            - NZ
            - OM
            - PA
            - PE
            - PF
            - PG
            - PH
            - PK
            - PL
            - PM
            - PN
            - PR
            - PS
            - PT
            - PW
            - PY
            - QA
            - RE
            - RO
            - RS
            - RU
            - RW
            - SA
            - SB
            - SC
            - SE
            - SG
            - SH
            - SI
            - SJ
            - SK
            - SL
            - SM
            - SN
            - SO
            - SR
            - ST
            - SV
            - SX
            - SZ
            - TC
            - TD
            - TF
            - TG
            - TH
            - TJ
            - TK
            - TL
            - TM
            - TN
            - TO
            - TP
            - TR
            - TT
            - TV
            - TW
            - TZ
            - UA
            - UG
            - UM
            - US
            - UY
            - UZ
            - VA
            - VC
            - VE
            - VG
            - VI
            - VN
            - VU
            - WF
            - WS
            - YE
            - YT
            - ZA
            - ZM
            - ZW
          format: iso-country-code
          type: string
        postalCode:
          description: Postal or zip code
          format: postal-code
          type: string
        state:
          description: State or province or territory
          format: state-province-territory
          type: string
      required:
        - address1
        - city
        - state
        - postalCode
        - country
    ArrayOfDNSRecord:
      items:
        $ref: "#/components/schemas/DNSRecord"
      type: array
    Consent:
      properties:
        agreedAt:
          description: Timestamp indicating when the end-user consented to these legal agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: Originating client IP address of the end-user's computer when they consented to these legal agreements
          type: string
        agreementKeys:
          description: Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint
          items:
            type: string
          type: array
      required:
        - agreementKeys
        - agreedBy
        - agreedAt
    ConsentDomainUpdate:
      properties:
        agreedAt:
          description: Timestamp indicating when the end-user consented to these agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: Originating client IP address of the end-user's computer when they consented to the agreements
          type: string
        agreementKeys:
          description: "Unique identifiers of the agreements to which the end-user has agreed, as required by the elements being updated<br/><ul><li><strong style='margin-left: 12px;'>EXPOSE_WHOIS</strong> - Required when the exposeWhois field is updated to true</li></ul>"
          items:
            enum:
              - EXPOSE_WHOIS
            type: string
          type: array
      required:
        - agreementKeys
        - agreedBy
        - agreedAt
    Contact:
      properties:
        addressMailing:
          $ref: "#/components/schemas/Address"
        email:
          format: email
          type: string
        fax:
          format: phone
          type: string
        jobTitle:
          type: string
        nameFirst:
          format: person-name
          type: string
        nameLast:
          format: person-name
          type: string
        nameMiddle:
          type: string
        organization:
          format: organization-name
          type: string
        phone:
          format: phone
          type: string
      required:
        - nameFirst
        - nameLast
        - email
        - phone
        - addressMailing
    DNSRecord:
      properties:
        data:
          type: string
        name:
          format: domain
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        type:
          enum:
            - A
            - AAAA
            - CNAME
            - MX
            - NS
            - SOA
            - SRV
            - TXT
          type: string
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - type
        - name
        - data
    DNSRecordCreateType:
      properties:
        data:
          type: string
        name:
          format: domain
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - name
        - data
    DNSRecordCreateTypeName:
      properties:
        data:
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - data
    DomainAvailableBulk:
      properties:
        domains:
          description: Domain available response array
          items:
            $ref: "#/components/schemas/DomainAvailableResponse"
          type: array
      required:
        - domains
    DomainAvailableBulkMixed:
      properties:
        domains:
          description: Domain available response array
          items:
            $ref: "#/components/schemas/DomainAvailableResponse"
          type: array
        errors:
          description: Errors encountered while performing a domain available check
          items:
            $ref: "#/components/schemas/DomainAvailableError"
          type: array
      required:
        - domains
    DomainAvailableError:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        domain:
          description: Domain name
          type: string
        message:
          description: Human-readable, English description of the error
          type: string
        path:
          description: |-
            <ul>
            <li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>
            <strong style='margin-left: 12px;'>OR</strong>
            <li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>
            </ul>
          format: json-path
          type: string
        status:
          description: HTTP status code that would return for a single check
          type: integer
      required:
        - code
        - domain
        - path
        - status
    DomainAvailableResponse:
      properties:
        available:
          description: Whether or not the domain name is available
          type: boolean
        currency:
          default: USD
          description: Currency in which the `price` is listed. Only returned if tld is offered
          format: iso-currency-code
          type: string
        definitive:
          description: Whether or not the `available` answer has been definitively verified with the registry
          type: boolean
        domain:
          description: Domain name
          type: string
        period:
          description: Number of years included in the price. Only returned if tld is offered
          format: integer-positive
          type: integer
        price:
          description: Price of the domain excluding taxes or fees. Only returned if tld is offered
          format: currency-micro-unit
          type: integer
      required:
        - domain
        - available
        - definitive
    DomainContacts:
      properties:
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
      required:
        - contactRegistrant
    DomainDetail:
      properties:
        authCode:
          description: Authorization code for transferring the Domain
          type: string
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
        createdAt:
          description: Date and time when this domain was created
          format: date-time
          type: string
        deletedAt:
          description: Date and time when this domain was deleted
          format: date-time
          type: string
        domain:
          description: Name of the domain
          type: string
        domainId:
          description: Unique identifier for this Domain
          format: double
          type: number
        expirationProtected:
          description: Whether or not the domain is protected from expiration
          type: boolean
        expires:
          description: Date and time when this domain will expire
          format: date-time
          type: string
        exposeWhois:
          description: Whether or not the domain contact details should be shown in the WHOIS
          type: boolean
        holdRegistrar:
          description: Whether or not the domain is on-hold by the registrar
          type: boolean
        locked:
          description: Whether or not the domain is locked to prevent transfers
          type: boolean
        nameServers:
          description: Fully-qualified domain names for DNS servers
          items:
            format: host-name
            type: string
          type: array
        privacy:
          description: Whether or not the domain has privacy protection
          type: boolean
        renewAuto:
          description: Whether or not the domain is configured to automatically renew
          type: boolean
        renewDeadline:
          description: Date the domain must renew on
          format: date-time
          type: string
        status:
          description: |-
            Processing status of the domain<br/><ul>
            <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>
            <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>
            <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>
            <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>
            <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>
            <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>
            <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>
            <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>
            <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>
            <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>
            <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>
            <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>
            </ul>
          type: string
        subaccountId:
          description: Reseller subaccount shopperid who can manage the domain
          type: string
        transferAwayEligibleAt:
          description: Date and time when this domain is eligible to transfer
          format: date-time
          type: string
        transferProtected:
          description: Whether or not the domain is protected from transfer
          type: boolean
        verifications:
          $ref: "#/components/schemas/VerificationsDomain"
      required:
        - domainId
        - domain
        - status
        - expirationProtected
        - holdRegistrar
        - locked
        - privacy
        - renewAuto
        - renewDeadline
        - transferProtected
        - createdAt
        - authCode
        - nameServers
        - contactRegistrant
        - contactBilling
        - contactAdmin
        - contactTech
    DomainForwarding:
      properties:
        fqdn:
          description: The fqdn (domain or sub domain) to forward (ex somedomain.com or sub.somedomain.com)
          type: string
        mask:
          $ref: "#/components/schemas/DomainForwardingMask"
        type:
          default: REDIRECT_PERMANENT
          description: "The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>"
          enum:
            - MASKED
            - REDIRECT_PERMANENT
            - REDIRECT_TEMPORARY
          type: string
        url:
          description: Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)
          format: url
          type: string
      required:
        - fqdn
        - type
        - url
    DomainForwardingCreate:
      properties:
        mask:
          $ref: "#/components/schemas/DomainForwardingMask"
        type:
          default: REDIRECT_PERMANENT
          description: "The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>"
          enum:
            - MASKED
            - REDIRECT_PERMANENT
            - REDIRECT_TEMPORARY
          type: string
        url:
          description: Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)
          format: url
          type: string
      required:
        - type
        - url
    DomainForwardingMask:
      properties:
        description:
          description: A short description of your website to display in search engine results.
          type: string
        keywords:
          description: A list of comma-separated keywords that describes the content and purpose of your website.
          type: string
        title:
          description: Displays at the top of the browser window and in search results.
          type: string
    DomainPurchase:
      properties:
        consent:
          $ref: "#/components/schemas/Consent"
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
        domain:
          description: For internationalized domain names with non-ascii characters, the domain name is converted to punycode before format and pattern validation rules are checked
          format: domain
          type: string
        nameServers:
          items:
            format: host-name
            type: string
          type: array
        period:
          default: 1
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
        privacy:
          default: false
          type: boolean
        renewAuto:
          default: true
          type: boolean
      required:
        - domain
        - consent
    DomainPurchaseResponse:
      properties:
        currency:
          default: USD
          description: Currency in which the `total` is listed
          format: iso-currency-code
          type: string
        itemCount:
          description: Number items included in the order
          format: integer-positive
          type: integer
        orderId:
          description: Unique identifier of the order processed to purchase the domain
          format: integer-positive
          type: integer
        total:
          description: Total cost of the domain and any selected add-ons
          format: currency-micro-unit
          type: integer
      required:
        - orderId
        - itemCount
        - total
    DomainRenew:
      properties:
        period:
          description: Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to `period` specified during original purchase
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
    DomainSuggestion:
      properties:
        domain:
          description: Suggested domain name
          type: string
      required:
        - domain
    DomainSummary:
      properties:
        authCode:
          description: Authorization code for transferring the Domain
          type: string
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
        createdAt:
          description: Date and time when this domain was created
          format: date-time
          type: string
        deletedAt:
          description: Date and time when this domain was deleted
          format: date-time
          type: string
        domain:
          description: Name of the domain
          type: string
        domainId:
          description: Unique identifier for this Domain
          format: double
          type: number
        expirationProtected:
          description: Whether or not the domain is protected from expiration
          type: boolean
        expires:
          description: Date and time when this domain will expire
          format: date-time
          type: string
        exposeWhois:
          description: Whether or not the domain contact details should be shown in the WHOIS
          type: boolean
        holdRegistrar:
          description: Whether or not the domain is on-hold by the registrar
          type: boolean
        locked:
          description: Whether or not the domain is locked to prevent transfers
          type: boolean
        nameServers:
          description: Fully-qualified domain names for DNS servers
          items:
            format: host-name
            type: string
          type: array
        privacy:
          description: Whether or not the domain has privacy protection
          type: boolean
        renewAuto:
          description: Whether or not the domain is configured to automatically renew
          type: boolean
        renewDeadline:
          description: Date the domain must renew on
          format: date-time
          type: string
        renewable:
          description: Whether or not the domain is eligble for renewal based on status
          type: boolean
        status:
          description: |-
            Processing status of the domain<br/><ul>
            <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>
            <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>
            <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>
            <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>
            <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>
            <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>
            <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>
            <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>
            <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>
            <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>
            <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>
            <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>
            <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>
            </ul>
          type: string
        transferAwayEligibleAt:
          description: Date and time when this domain is eligible to transfer
          format: date-time
          type: string
        transferProtected:
          description: Whether or not the domain is protected from transfer
          type: boolean
      required:
        - domainId
        - domain
        - status
        - expirationProtected
        - holdRegistrar
        - locked
        - privacy
        - renewAuto
        - renewDeadline
        - transferProtected
        - createdAt
        - contactRegistrant
    DomainTransferIn:
      properties:
        authCode:
          description: Authorization code from registrar for transferring a domain
          type: string
        consent:
          $ref: "#/components/schemas/Consent"
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
        period:
          default: 1
          description: Can be more than 1 but no more than 10 years total including current registration length
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
        privacy:
          default: false
          description: Whether or not privacy has been requested
          type: boolean
        renewAuto:
          default: true
          description: Whether or not the domain should be configured to automatically renew
          type: boolean
      required:
        - authCode
        - consent
    DomainUpdate:
      properties:
        consent:
          $ref: "#/components/schemas/ConsentDomainUpdate"
        exposeWhois:
          description: Whether or not the domain contact details should be shown in the WHOIS
          type: boolean
        locked:
          description: Whether or not the domain should be locked to prevent transfers
          type: boolean
        nameServers:
          description: Fully-qualified domain names for Name Servers to associate with the domain
          items:
            format: host-name
          type: array
        renewAuto:
          description: Whether or not the domain should be configured to automatically renew
          type: boolean
        subaccountId:
          description: Reseller subaccount shopperid who can manage the domain
          type: string
    DomainsContactsBulk:
      properties:
        contactAdmin:
          $ref: "#/components/schemas/Contact"
        contactBilling:
          $ref: "#/components/schemas/Contact"
        contactPresence:
          $ref: "#/components/schemas/Contact"
        contactRegistrant:
          $ref: "#/components/schemas/Contact"
        contactTech:
          $ref: "#/components/schemas/Contact"
        domains:
          description: An array of domain names to be validated against. Alternatively, you can specify the extracted tlds. However, full domain names are required if the tld is `uk`
          items:
            format: domain
            type: string
          type: array
        entityType:
          description: Canadian Presence Requirement (CA)
          enum:
            - ABORIGINAL
            - ASSOCIATION
            - CITIZEN
            - CORPORATION
            - EDUCATIONAL
            - GOVERNMENT
            - HOSPITAL
            - INDIAN_BAND
            - LEGAL_REPRESENTATIVE
            - LIBRARY_ARCHIVE_MUSEUM
            - MARK_REGISTERED
            - MARK_TRADE
            - PARTNERSHIP
            - POLITICAL_PARTY
            - RESIDENT_PERMANENT
            - TRUST
            - UNION
          type: string
      required:
        - domains
    Error:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        fields:
          description: List of the specific fields, and the errors found with their contents
          items:
            $ref: "#/components/schemas/ErrorField"
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
      required:
        - code
    ErrorDomainContactsValidate:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        fields:
          description: List of the specific fields, and the errors found with their contents
          items:
            $ref: "#/components/schemas/ErrorFieldDomainContactsValidate"
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
        stack:
          description: "Stack trace indicating where the error occurred.<br/>NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments. However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems"
          items:
            type: string
          type: array
      required:
        - code
    ErrorField:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        message:
          description: Human-readable, English description of the problem with the contents of the field
          type: string
        path:
          description: |-
            <ul>
            <li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>
            <strong style='margin-left: 12px;'>OR</strong>
            <li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>
            </ul>
          format: json-path
          type: string
        pathRelated:
          description: JSONPath referring to a field containing an error, which is referenced by `path`
          format: json-path
          type: string
      required:
        - path
        - code
    ErrorFieldDomainContactsValidate:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        domains:
          description: An array of domain names the error is for. If tlds are specified in the request, `domains` will contain tlds. For example, if `domains` in request is ["test1.com", "test2.uk", "net"], and the field is invalid for com and net, then one of the `fields` in response will have ["test1.com", "net"] as `domains`
          items:
            type: string
          type: array
        message:
          description: Human-readable, English description of the problem with the contents of the field
          type: string
        path:
          description: 1) JSONPath referring to the field within the data containing an error<br/>or<br/>2) JSONPath referring to an object containing an error
          format: json-path
          type: string
        pathRelated:
          description: JSONPath referring to the field on the object referenced by `path` containing an error
          format: json-path
          type: string
      required:
        - code
        - domains
        - path
    ErrorLimit:
      properties:
        code:
          description: Short identifier for the error, suitable for indicating the specific error within client code
          format: constant
          type: string
        fields:
          description: List of the specific fields, and the errors found with their contents
          items:
            $ref: "#/components/schemas/ErrorField"
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
        retryAfterSec:
          description: Number of seconds to wait before attempting a similar request
          format: integer-positive
          type: integer
      required:
        - retryAfterSec
        - code
    JsonDataType:
      properties:
        format:
          type: string
        pattern:
          type: string
        type:
          type: string
      required:
        - type
        - $ref
    JsonProperty:
      properties:
        defaultValue:
          type: string
        format:
          type: string
        items:
          items:
            $ref: "#/components/schemas/JsonDataType"
          type: object
        maxItems:
          type: integer
        maximum:
          type: integer
        minItems:
          type: integer
        minimum:
          type: integer
        pattern:
          type: string
        required:
          type: boolean
        type:
          type: string
      required:
        - type
        - $ref
        - required
    JsonSchema:
      properties:
        id:
          type: string
        models:
          items:
            $ref: "#/components/schemas/JsonSchema"
          type: object
        properties:
          items:
            $ref: "#/components/schemas/JsonProperty"
          type: object
        required:
          items:
            type: string
          type: array
      required:
        - id
        - properties
        - required
        - models
    LegalAgreement:
      properties:
        agreementKey:
          description: Unique identifier for the legal agreement
          type: string
        content:
          description: Contents of the legal agreement, suitable for embedding
          type: string
        title:
          description: Title of the legal agreement
          type: string
        url:
          description: URL to a page containing the legal agreement
          format: url
          type: string
      required:
        - agreementKey
        - title
        - content
    PrivacyPurchase:
      properties:
        consent:
          $ref: "#/components/schemas/Consent"
      required:
        - consent
    RealNameValidation:
      properties:
        status:
          enum:
            - APPROVED
            - PENDING
            - PENDING_ASSOCIATION_WITH_DOMAIN
            - PENDING_SUBMISSION_TO_VERIFICATION_SERVICE
            - PENDING_VERIFICATION_SERVICE_REPLY
            - PENDING_SUBMISSION_TO_REGISTRY
            - PENDING_REGISTRY_REPLY
            - PENDING_DOMAIN_UPDATE
            - REJECTED
          type: string
    TldSummary:
      properties:
        name:
          description: Name of the top-level domain
          format: tld
          type: string
        type:
          default: GENERIC
          description: Type of the top-level domain
          enum:
            - COUNTRY_CODE
            - GENERIC
          type: string
      required:
        - name
        - type
    VerificationDomainName:
      properties:
        status:
          description: Status of the domain name verification
          enum:
            - APPROVED
            - PENDING
            - REJECTED
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
      required:
        - status
    VerificationRealName:
      properties:
        status:
          description: "Status of the real name verification<br/><ul> <li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li> <li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li> <li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear name on your uploaded document, please upload a different document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li> <li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li> </ul>"
          enum:
            - APPROVED
            - PENDING
            - REJECTED_DOCUMENT_OUTDATED
            - REJECTED_EXPIRED_BUSINESS_LICENSE
            - REJECTED_EXPIRED_ORGANIZATION_CODE
            - REJECTED_ILLEGIBLE_DOCUMENT_NAME
            - REJECTED_ILLEGIBLE_IDENTIFICATION
            - REJECTED_INCOMPLETE_IDENTIFICATION
            - REJECTED_INCOMPLETE_REGISTRATION_LETTER
            - REJECTED_INCONSISTENT_IDENTITY_CARD
            - REJECTED_INCONSISTENT_ORGANIZATION_CODE
            - REJECTED_INCONSISTENT_REGISTRANT_NAME
            - REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE
            - REJECTED_INVALID_DOCUMENT
            - REJECTED_MISMATCH_BUSINESS_ID
            - REJECTED_MISMATCH_BUSINESS_NAME
            - REJECTED_MISMATCH_DOCUMENT_ID
            - REJECTED_MISMATCH_DOCUMENT_NAME
            - REJECTED_MISMATCH_DOCUMENT_TYPE
            - REJECTED_MISMATCH_REGISTRANT_INFO
            - REJECTED_MISMATCH_REGISTRANT_LOCALITY
            - REJECTED_MISMATCH_REGISTRANT_NAME
            - REJECTED_UNABLE_TO_OPEN
            - REJECTED_UNABLE_TO_VERIFY
            - REJECTED_UNKNOWN_ERROR
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
      required:
        - status
    VerificationsDomain:
      properties:
        domainName:
          $ref: "#/components/schemas/VerificationDomainName"
        realName:
          $ref: "#/components/schemas/VerificationRealName"
    domain:
      properties:
        id:
          format: double
          type: number
