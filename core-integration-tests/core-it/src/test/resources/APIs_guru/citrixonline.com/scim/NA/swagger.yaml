swagger: "2.0"
schemes:
  - https
host: api.citrixonline.com
basePath: /identity/v1
info:
  contact:
    email: developer-support@citrixonline.com
    name: Developer Support
    url: https://developer.citrixonline.com
  description: The SCIM API lets you manage users in your organization. You can then automate the provisioning of product licenses for these users, and they can use your company's Single Sign-On solution through an Identity Provider.
  termsOfService: https://developer.citrixonline.com/terms-use
  title: SCIM
  version: N/A
  x-logo:
    backgroundColor: "#5F6166"
    url: https://twitter.com/citrix/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://developer.citrixonline.com/sites/default/files/citrix/citrix-apis/scim.json
      version: "2.0"
  x-providerName: citrixonline.com
  x-serviceName: scim
externalDocs:
  url: https://developer.citrixonline.com/
consumes:
  - application/json
produces:
  - application/json
parameters:
  Authorization:
    description: Access token prefixed with 'Bearer ', e.g. 'Bearer 123456abcdef'
    in: header
    name: Authorization
    required: true
    type: string
  groupKey:
    description: The key of the group to query. The group must be in the organization domain
    format: int64
    in: path
    name: groupKey
    required: true
    type: integer
  userKey:
    description: The key of the user to query. The user must be in the organization domain
    format: int64
    in: path
    name: userKey
    required: true
    type: integer
tags:
  - description: Operations on users belonging to an organization
    name: Users
  - description: Operations on groups belonging to an organization
    name: Groups
  - description: Operations on schemas
    name: Schemas
paths:
  /Groups:
    get:
      description: Queries multiple group identities in the organization domain. Filtering, sorting and pagination are available. This call requires the role ROLE_ORG_READ.
      operationId: getGroups
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: ' Without a filter, all groups are returned. The filter parameter must be a properly formed SCIM filter using the operator "eq" (equals), "sw" (starts with), or "co" (contains). The filter works for the displayName attribute. Sorting and pagination are supported. For example, GET /Groups?filter=displayName%20eq%20%22Engineering%22&sortBy=displayName&sortOrder=ascending&count=50&startIndex=51'
          in: query
          name: filter
          type: string
      responses:
        "200":
          description: The request has succeeded
          schema:
            $ref: "#/definitions/GroupCollection"
        "400":
          description: Invalid filter syntax
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get Groups
      tags:
        - Groups
    post:
      description: Creates a new organization group and adds it to the user domain. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
      operationId: createGroup
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: The details of the group to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/GroupDefinition"
      responses:
        "201":
          description: The group has been created
          schema:
            $ref: "#/definitions/Group"
        "400":
          description: Possible reasons are:<br />The displayName field is not set<br />The displayName field is malformed<br />The displayName field exceeds 128 characters<br />The members array exceeds 100 elements<br />
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "409":
          description: The displayName is already in use within the organization
        "502":
          description: An authentication or account gateway error occurred
        "504":
          description: An authentication or account, or gateway timeout occurred.
      summary: Create Group
      tags:
        - Groups
  "/Groups/{groupKey}":
    delete:
      description: Deletes a group from the organization (but not from the account). The group must be in the organization. This call requires the role ROLE_ORG_WRITE.
      operationId: deleteGroup
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/groupKey"
      responses:
        "200":
          description: The request has succeeded
        "401":
          description: Client is not sufficiently authorized or group does not exist in organization
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Delete Group
      tags:
        - Groups
    get:
      description: Queries group details in the organization domain. This call requires the role ROLE_ORG_READ.
      operationId: getGroup
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/groupKey"
      responses:
        "200":
          description: The request has succeeded
          schema:
            $ref: "#/definitions/Group"
        "401":
          description: Client is not sufficiently authorized or group does not exist in organization
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get Group
      tags:
        - Groups
    patch:
      description: Updates one or more values of an existing group without sending the full definition. Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
      operationId: updateGroup
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/groupKey"
        - description: The group data to update. It is allowed to update one or more values of the group definition
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/GroupDefinition"
      responses:
        "200":
          description: The group has been updated
          schema:
            $ref: "#/definitions/Group"
        "400":
          description: Possible reasons are:<br />The displayName field is not set<br />The displayName field is malformed<br />The displayName field exceeds 128 characters<br />The members array exceeds 100 elements<br />
        "401":
          description: Client is not sufficiently authorized or group does not exist in organization
        "403":
          description: Invalid token passed
        "409":
          description: The displayName is already in use within the organization
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Update Group
      tags:
        - Groups
    put:
      description: Updates an existing group. The request must include the full group definition. To modify one or more values without sending the full definition, see "Update Group". Member groups and member users must be in the organization. This call requires the role ROLE_ORG_WRITE.
      operationId: replaceGroup
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/groupKey"
        - description: The new group definition
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/GroupDefinition"
      responses:
        "200":
          description: The group has been replaced.
          schema:
            $ref: "#/definitions/Group"
        "400":
          description: Possible reasons are:<br />The displayName field is not set<br />The displayName field is malformed<br />The displayName field exceeds 128 characters<br />The members array exceeds 100 elements<br />
        "401":
          description: Client is not sufficiently authorized or group does not exist in organization
        "403":
          description: Invalid token passed
        "409":
          description: The displayName is already in use within the organization
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Replace Group
      tags:
        - Groups
  /Schemas/Users:
    get:
      description: Queries the user schema. The user schema is defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#resource-schema).
      operationId: getUserSchema
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        "200":
          description: The request has succeeded.
          schema:
            $ref: "#/definitions/ResourceSchema"
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get User Schema
      tags:
        - Schemas
  /ServiceProviderConfigs:
    get:
      description: Queries service provider configurations. The service provider configurations are defined in SCIM Core Schema (http://www.simplecloud.info/specs/draft-scim-core-schema-01.html#anchor6). This call returns a description, a documentationURL, name, and specURL.
      operationId: getServiceProviderConfigs
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        "200":
          description: The request has succeeded.
          schema:
            $ref: "#/definitions/ServiceProviderConfigs"
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get Service Provider Configurations
      tags:
        - Schemas
  /Users:
    get:
      description: Queries multiple user identities in the organization domain. Filtering is available.
      operationId: getUsers
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: " Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22"
          in: query
          name: filter
          type: string
      responses:
        "200":
          description: The request has succeeded.
          schema:
            $ref: "#/definitions/UserCollection"
        "400":
          description: Invalid filter syntax
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get Users
      tags:
        - Users
    post:
      description: Creates a new organization user and adds them to the user domain. The user email domain must match an existing organization email domain.
      operationId: createUsers
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: The details of the user to create
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserDefinition"
      responses:
        "201":
          description: The user has been created.
          schema:
            $ref: "#/definitions/User"
        "400":
          description: One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters.
        "401":
          description: Client is not sufficiently authorized.
        "403":
          description: Invalid token passed
        "409":
          description: Username is already in use.
        "502":
          description: Authentication, account, or email verification gateway error occurred.
        "504":
          description: Authentication, account, or email verification gateway timeout occurred.
      summary: Create User
      tags:
        - Users
  /Users/me:
    get:
      description: Queries the identity of the current authenticated user.
      operationId: getMe
      parameters:
        - $ref: "#/parameters/Authorization"
      responses:
        "200":
          description: The request has succeeded.
          schema:
            $ref: "#/definitions/User"
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get Current User
      tags:
        - Users
    patch:
      description: "Changes a limited set (or all if you choose) of the current authenticated user's data. The updated user email domain must be an existing organization email domain. "
      operationId: updateMe
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: The new user data
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserDefinition"
      responses:
        "200":
          description: The current user has been updated.
          schema:
            $ref: "#/definitions/User"
        "400":
          description: One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters.
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "409":
          description: Email address conflict
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Update Current User
      tags:
        - Users
    put:
      description: "Changes the current authenticated user's displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain. "
      operationId: replaceMe
      parameters:
        - $ref: "#/parameters/Authorization"
        - description: The new user data
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserDefinition"
      responses:
        "200":
          description: The current user has been replaced.
          schema:
            $ref: "#/definitions/User"
        "400":
          description: One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters.
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "409":
          description: Email address conflict
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Replace Current User
      tags:
        - Users
  "/Users/{userKey}":
    delete:
      description: Deletes a user from the organization (but not from the account).
      operationId: deleteUser
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/userKey"
      responses:
        "200":
          description: The request has succeeded.
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Delete User
      tags:
        - Users
    get:
      description: Queries user identity in the organization domain.
      operationId: getUser
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/userKey"
      responses:
        "200":
          description: The request has succeeded.
          schema:
            $ref: "#/definitions/User"
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Get User
      tags:
        - Users
    patch:
      description: Changes a limited set (or all if you choose) of the user's data. The updated user email domain must be an existing organization email domain.
      operationId: updateUser
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/userKey"
        - description: The new user data
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserDefinition"
      responses:
        "200":
          description: The user has been updated.
          schema:
            $ref: "#/definitions/User"
        "400":
          description: One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters.
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "409":
          description: Email address conflict
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Update User
      tags:
        - Users
    put:
      description: Changes an existing user's displayName, locale, timezone, username and password. The request must include the full user definition (to modify one or more values without sending the full definition, see Update User). The replaced user email domain must be an existing organization email domain.
      operationId: replaceUser
      parameters:
        - $ref: "#/parameters/Authorization"
        - $ref: "#/parameters/userKey"
        - description: The new user data
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserDefinition"
      responses:
        "200":
          description: The user has been replaced.
          schema:
            $ref: "#/definitions/User"
        "400":
          description: One of the following requirements is not met:<br />The userName field is required.<br />The userName field must be non-empty.<br />The userName field cannot exceed 128 characters.<br />The locale field must be composed of 1 or 2 parts.<br />The locale language sub-field must be ISO-639.<br />The locale country sub-field must be ISO-3166.<br />The timezone field must be a valid timezone.<br />The givenName field must not exceed 60 characters.<br />The familyName field must not exceed 60 characters.
        "401":
          description: Client is not sufficiently authorized
        "403":
          description: Invalid token passed
        "404":
          description: User not found
        "409":
          description: Email address conflict
        "502":
          description: Authentication or account gateway error occurred
        "504":
          description: Authentication or account gateway timeout occurred
      summary: Replace User
      tags:
        - Users
definitions:
  AuthenticationSchemes:
    description: Specifies supported Authentication Scheme properties
    properties:
      description:
        description: The description of the Authentication Scheme
        type: string
      documentationUrl:
        description: A HTTP addressable URL pointing to the Authentication Scheme's usage documentation
        type: string
      name:
        description: The common authentication scheme name, e.g. HTTP Basic
        type: string
      specUrl:
        description: A HTTP addressable URL pointing to the Authentication Scheme's specification
        type: string
    required:
      - name
      - description
      - specUrl
      - documentationUrl
  Bulk:
    description: Specifies BULK configuration options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  ChangePassword:
    description: Specifies Change Password configuration options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  Etag:
    description: Specifies Etag configuration options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  Filter:
    description: Specifies FILTER options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  Group:
    description: Describes a group belonging to an organization
    properties:
      displayName:
        description: The group's display name
        type: string
      id:
        description: The group's unique key
        type: string
      members:
        description: An array of members
        items:
          $ref: "#/definitions/Member"
        type: array
      meta:
        $ref: "#/definitions/GroupMetadata"
        description: Group metadata
    required:
      - meta
      - id
      - displayName
  GroupCollection:
    description: Class describing a collection of groups
    properties:
      resources:
        description: An array of groups
        items:
          $ref: "#/definitions/Group"
        type: array
      totalResults:
        description: The number of groups in the collection
        format: int64
        type: integer
    required:
      - resources
      - totalResults
  GroupDefinition:
    description: Describes the group to create
    properties:
      displayName:
        description: The group's display name
        type: string
      members:
        description: An array of members
        items:
          $ref: "#/definitions/Member"
        type: array
    required:
      - displayName
  GroupMetadata:
    description: Group metadata
    properties:
      created:
        description: The date and time the group was created
        format: date-time
        type: string
      location:
        description: The URL where the group can be accessed
        type: string
    required:
      - created
      - location
  Member:
    description: A member of a group. This can be a group or an user
    properties:
      type:
        description: The type of member
        enum:
          - group
          - user
        type: string
      value:
        description: Depending on the member type this is a groupKey or an userKey
        type: string
    required:
      - type
      - value
  Patch:
    description: Specifies PATCH configuration options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  ResourceSchema:
    description: Describes the attributes and metadata constituting a resource such as a user.
    properties:
      attributes:
        description: The resource's attributes
        items:
          $ref: "#/definitions/SchemaAttribute"
        type: array
      description:
        description: The resource's description
        type: string
      endpoint:
        description: The resource's HTTP addressable endpoint relative to the base URL, e.g. /Users.
        type: string
      id:
        description: The resource's id, e.g. urn:scim:schemas:core:1.0:User
        type: string
      name:
        description: The resource's name, e.g. "User"
        type: string
      schema:
        description: The resource's associated schema, e.g. urn:scim:schemas:core:1.0
        type: string
    required:
      - id
      - name
      - description
      - schema
      - endpoint
      - attributes
  SchemaAttribute:
    description: Describes a resource attribute
    properties:
      caseExact:
        description: Indicates whether the attribute is case sensitive
        type: boolean
      description:
        description: The attribute's description
        type: string
      multiValued:
        description: Indicates whether the attribute can have multiple values
        type: boolean
      name:
        description: The attribute's name
        type: string
      readOnly:
        description: Indicates whether the attribute is mutable
        type: boolean
      required:
        description: Indicates whether the attribute is required
        type: boolean
      schema:
        description: The attribute's associated scheme, e.g. urn:scim:schemas:core:1.0
        type: string
      subAttributes:
        description: The attribute's potential sub-attributes
        items:
          $ref: "#/definitions/SchemaSubAttribute"
        type: array
      type:
        description: The attribute's data type, e.g. String
        type: string
    required:
      - name
      - type
      - multiValued
      - description
      - schema
      - readOnly
      - required
      - caseExact
  SchemaSubAttribute:
    description: Describes the sub-attribute of a resource attribute
    properties:
      caseExact:
        description: Indicates whether the attribute is case sensitive
        type: boolean
      description:
        description: The attribute's description
        type: string
      name:
        description: The attribute's name
        type: string
      readOnly:
        description: Indicates whether the attribute is mutable
        type: boolean
      required:
        description: Indicates whether the attribute is required
        type: boolean
      type:
        description: The attribute's data type, e.g. String
        type: string
    required:
      - name
      - type
      - description
      - readOnly
      - required
      - caseExact
  ServiceProviderConfigs:
    description: Represents the Service Provider's configuration
    properties:
      authenticationSchemes:
        $ref: "#/definitions/AuthenticationSchemes"
        description: Specifies whether the XML data format is supported
      bulk:
        $ref: "#/definitions/Bulk"
        description: Specifies BULK configuration options
      changePassword:
        $ref: "#/definitions/ChangePassword"
        description: Specifies Change Password configuration options
      documentationUrl:
        description: An HTTP addressable URL pointing to the Service Provider's help documentation
        type: string
      etag:
        $ref: "#/definitions/Etag"
        description: Specifies Etag configuration options
      filter:
        $ref: "#/definitions/Filter"
        description: Specifies FILTER options
      patch:
        $ref: "#/definitions/Patch"
        description: Specifies PATCH configuration options
      sort:
        $ref: "#/definitions/Sort"
        description: Specifies Sort configuration options
      xmlDataFormat:
        $ref: "#/definitions/XmlDataFormat"
        description: Specifies supported Authentication Scheme properties
    required:
      - documentationUrl
      - patch
      - bulk
      - filter
      - changePassword
      - sort
      - etag
      - authenticationSchemes
      - xmlDataFormat
  Sort:
    description: Specifies Sort configuration options
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
  User:
    description: Describes a user belonging to an organization
    properties:
      displayName:
        description: The user's display name
        type: string
      id:
        description: The user's unique key
        type: string
      locale:
        description: The user's language settings
        type: string
      meta:
        $ref: "#/definitions/UserMetadata"
        description: User metadata
      name:
        $ref: "#/definitions/UserFullName"
        description: The user's full name
      timezone:
        description: The user's time zone
        type: string
      userName:
        description: The user's username, usually their email address
        type: string
    required:
      - displayName
      - id
      - locale
      - meta
      - name
      - timezone
      - userName
  UserCollection:
    description: Class describing a collection of users
    properties:
      resources:
        description: The list of users
        items:
          $ref: "#/definitions/User"
        type: array
      totalResults:
        description: The number of users in the collection
        format: int64
        type: integer
    required:
      - resources
      - totalResults
  UserDefinition:
    description: Describes a new user
    properties:
      displayName:
        description: The user's display name
        type: string
      locale:
        description: The user's language settings
        type: string
      name:
        $ref: "#/definitions/UserFullName"
        description: The user's full name
      password:
        description: The user's password
        type: string
      timezone:
        description: The user's time zone
        type: string
      userName:
        description: The user's username, usually their email address
        type: string
  UserFullName:
    description: The full name of the user
    properties:
      familyName:
        description: The user's surname
        type: string
      givenName:
        description: The user's first name
        type: string
    required:
      - familyName
      - givenName
  UserMetadata:
    description: User metadata
    properties:
      created:
        description: The date and time the user was created
        format: date-time
        type: string
      location:
        description: The URL where the user can be accessed
        type: string
    required:
      - created
      - location
  XmlDataFormat:
    description: Specifies whether the XML data format is supported
    properties:
      supported:
        description: Specifies whether the operation is supported
        type: boolean
    required:
      - supported
