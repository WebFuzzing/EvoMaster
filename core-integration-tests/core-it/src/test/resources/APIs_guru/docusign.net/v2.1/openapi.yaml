openapi: 3.0.0
servers:
  - url: https://www.docusign.net/restapi
info:
  contact:
    email: devcenter@docusign.com
    name: DocuSign Developer Center
    url: https://developers.docusign.com/
  description: The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
  termsOfService: https://www.docusign.com/company/terms-and-conditions/web
  title: DocuSign REST API
  version: v2.1
  x-apisguru-categories:
    - ecommerce
  x-logo:
    url: https://twitter.com/DocuSign/profile_image?size=original
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/docusign/eSign-OpenAPI-Specification/master/esignature.rest.swagger-v2.1.json
      version: "3.0"
  x-providerName: docusign.net
externalDocs:
  description: See the DocuSign REST API Guide for more information.
  url: https://docs.docusign.com/esign
tags:
  - description: |-
      The AcccountBrands resource provides methods that enable you to create and manage brands for an account.

      Branding enables you to add the look and feel of your organization's brand to the sending, signing, and email processes, making it easier for recipients to identify envelopes coming from your organization.

      The DocuSign Account Custom Branding feature enables you to set the colors, logo, and text that recipients see at the account level. The settings associated with a brand are applied to all of the envelopes that use the brand. You can create multiple brand profiles for different corporate brands or internal departments.

      **Note**: To use this resource, branding for either signing or sending must be enabled for the account (either `canSelfBrandSend`, `canSelfBrandSign`, or both of these account settings must be set to **true**). 
    name: AccountBrands
  - description: |-
      The `AccountConsumerDisclosures` resource provides methods that enable you to enable, retrieve, and manage the Electronic Record and Signature Consent Disclosure (ERSD) options for your account. This is the disclosure that displays to each new recipient who is going to sign or add other information, or who is required to view the documents you send to them. The recipient must read and agree to the terms of the disclosure before they can access and take action on the documents you send. The ERSD does not apply to copy-only recipients, but does apply to recipients who must sign or view your documents.

      You can use either the default ERSD that DocuSign provides for U.S.-based transactions, or a custom ERSD. 

      ## Languages

      **Important**: The system does not translate the ERSD for you. The default ERSD is always in English. For a custom ERSD, an account administrator must create a version of the disclosure for each language that your signers use. When you create a version of your custom ERSD for a specific signer language, you must:

      1. Specify the language code (`langCode`) for the signer language.
      2. Provide the `esignAgreementText` and `esignText` in the language associated with the `langCode`.

      For more information, see [Legal Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure).
    name: AccountConsumerDisclosures
  - description: |-
      Custom fields enable you to record custom information about envelopes that you can then use for sorting, organizing, searching, and other downstream processes. 

      For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault all of their documents from the web app by setting an account custom field with a name like `eVault with eOriginal` to **true**.

      You can also use account custom fields to set the following information:

      - Tracking ID
      - Department 
      - Use case
      - Other envelope metadata

      ## Envelope Custom Field Visibility

      When you create an envelope custom field for your account, you have the following options: 

      - Make it a required field for senders at the time of sending
      - Display it as an optional field at the time of sending
      - Set a specific value for the field behind the scenes (NOT SURE IF THIS IS RIGHT; MIGHT JUST BE AN UNUSED DRAFT FIELD)

      Envelope recipients do not see the envelope custom fields.

      ## Types of Envelope Custom Fields

      There are two types of envelope custom fields:

      - `text`: Enables the sender to enter the value for the field. 
      - `list`: Enables the sender to select the value of the field from a predetermined list.
    name: AccountCustomFields
  - description: |-
      The EnvelopeCustomFields resource provides methods that allow you manage custom fields in an envelope. 

      Custom fields can be used in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.

      There are two types of envelope custom fields:

      - `text`: Enables the sender to enter the value for the field. 
      - `list`: Enables the sender to select the value of the field from a predetermined list.

      You may assign up to three envelope custom fields to an envelope. This limit does not include account (document) custom fields.
    name: EnvelopeCustomFields
  - description: |-
      The EnvelopeDocumentFields resource provides methods that allow you to manage custom fields on a document.

      You can create custom versions of standard fields that combine of field properties, such as font type or size, or a validation setting. 

      Note: Some advanced features and options are supported only in certain DocuSign plans. Your account plan might not support some options discussed in this help topic. For more information about which options are available for your account, check your account plan or contact your Account Manager.
    name: EnvelopeDocumentFields
  - description: |-
      The EnvelopeLocks resource provides methods that allow you to
      manage locks on an envelope.

      To prevent users from changing an envelope while another user is
      modifying it, you can lock the envelope and set the time until
      the lock expires.

      For example, you would use the following flow:

      1. Lock the envelope.
      2. Make changes to envelope.
      3. Delete the envelope lock and save the changes. If the envelope is based on a template that has a password, you must supply the template password to save the changes.

      **Note**: To use envelope locks, the user must have envelope locking capability enabled.
    name: EnvelopeLocks
  - description: |
      The EnvelopeRecipients resource enables you manage the recipients of an envelope. All recipient types share a set of [core parameters](#core-recipient-parameters), but some recipient types have additional parameters. You specify the recipient type using the `recipientType` parameter. The recipient types are as follows:

      <br>

      | Recipient type | Description |
      | :--- | :--- |
      | [Agent](#agent-recipient) | Agent recipients can add name and email information for recipients that appear after the agent in routing order. |
      | [Carbon Copy](#carbon-copy-recipient) | Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient's order in the process flow and when the envelope is completed. |
      | [Certified Delivery](#certified-delivery-recipient) | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date, or add information to any of the documents. |
      | [Editor](#editor-recipient) | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. |
      | [In-Person Signer](#in-person-signer-recipient) | In-person signer recipients are DocuSign users who act as signing hosts in the same physical location as the signer. |
      | [Intermediary](#intermediary-recipient) | Intermediaries are recipients who can, but are not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors, or intermediaries are added. |
      | [Seal](#seal-recipient) | Electronic seal recipients represent legal entities rather than individuals. Organizations and governments can use electronic seals to show evidence of origin and integrity of documents. |
      | [Signer](#signer-recipient) | Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope. |
      | [Witness](#witness-recipient) | Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope. |

      <br>

      Not all recipients are are available to all account types. Review your account plan to determine which recipient types are available to you. All recipient types are available in the Demo environment.


      ## Core Recipient Parameters

      All recipients, regardless of type, have the same common core parameters. The following table contains the descriptions for the core properties for all recipient types:

      <br>

      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | email | Yes | Email | Email of the recipient. Notification will be sent to this email id.<br/>Maximum Length: 100 characters. |
      | name | Yes | String | Full legal name of the recipient.<br/>Maximum Length: 100 characters.<br/><br/>**Note:** If you are creating an envelope with DocuSign EU advanced signature enabled, ensure that recipient names do not contain any of the following characters: **^ : \ @ , + <** |
      | accessCode | No | String | This optional element specifies the access code a recipient has to enter to validate the identity.<br/>Maximum Length: 50 characters. |
      | addAccessCodeToEmail | No | Boolean | This optional attribute indicates that the access code is added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient. |
      | agentCanEditEmail | No | Boolean | When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account. |
      | agentCanEditName | No | Boolean | When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |
      | clientUserId | No | String | This specifies whether the recipient is embedded or remote.<br/><br/>If the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. Maximum length: 100 characters. |
      | embeddedRecipientStartURL | No | String | This is a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would, but when the document link in the email is clicked the recipient is redirected, through DocuSign, to this URL to complete their actions. When routing to the URL, it is up to the sender's system (the server responding to the URL) to then request a recipient token to launch a signing session.<br/><br/>If the value `SIGN_AT_DOCUSIGN` is used for this node, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that would be launched by any partner.<br/><br/>It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application and DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets  the `EmbeddedRecipientStartURL` property to `SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) be used to verify the identity of the recipient.<br/><br>If the `clientUserId` property is NOT set and the `embeddedRecipientStartURL` property is set, DocuSign ignores the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the `embeddedRecipientStartURL` property using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The customFields must be part of the recipient or envelope. The merge fields are enclosed in double brackets.<br/><br/>_Example_:<br/>`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` |
      | customFields | No | customField |An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. String `customField` properties have a maximum length of 100 characters. |
      | emailNotification | No | emailNotification | An optional complex type that has information for setting the language for the recipient's email information. It is composed of three elements:<br/><br/>*emailBody*: a string with the email message sent to the recipient.<br/>Maximum Length: 10000 characters.<br/><br/>*emailSubject*: a string with the subject of the email sent to the recipient.<br/>Maximum Length: 100 characters.<br/><br/>*supportedLanguage*: The simple type enumeration (two-letter code) for the language to use for the standard email format and the signing view for the recipient. To retrieve the possible values, use the [Accounts::listSupportedLanguages method][ListLang].<br/><br/>**Note**: You can set the `emailNotification` property separately for each recipient. If you set the value only for certain recipients, the other recipients will inherit the this value from the top-level `emailSubject` and `emailBlurb`.  |
      | excludedDocuments | No | Array of Strings | Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the enforceSignerVisibility property must be set to true for the envelope to use this.<br/><br/>When the enforceSignerVisibility property is set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent. |
      | idCheckConfigurationName | No | String |Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient). This overrides any default authentication setting.<br/><br/>_Example_:<br/> Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an envelope, the `idCheckConfigurationName` property must be  set to `ID Check $`. To use SMS, it must be set to `SMS Auth $` and you must add phone number information to the `smsAuthentication` node.|
      | iDCheckInformationInput | No | IdCheckInformationInput | This complex element contains input information related to a recipient ID check. It can include the following information.<br/><br/>*addressInformationInput*: Used to set recipient address information and consists of:<br/><br/>*addressInformation*: consists of six elements, with street2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4\. The maximum number of characters in each element are: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.<br/><br/>displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*dobInformationInput*: Used to set recipient date of birth information and consists of:<br/><br/>*dateOfBirth*: Specifies the recipient's date, month and year of birth.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn4InformationInput*: Used to set the last four digits of the recipient's SSN information and consists of:<br/><br/>*ssn4*: Specifies the last four digits of the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn9InformationInput*: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:<br/><br/><br/><br/>*ssn9*: Specifies the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. |
      | inheritEmailNotificationConfiguration | No | Boolean | Optional element. If true and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. |
      | note | No | String | A note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.<br/>Maximum Length: 1000 characters. |
      | phoneAuthentication | No | RecipientPhoneAuthentication | Optional element. Contains the elements: <br/><br/> *recipMayProvideNumber*:Boolean. When set to **true** thenrecipient can use whatever phone number they choose to.<br/><br/> *senderProvidedNumbers*: ArrayOfString. A list of phone numbers the recipient can use. <br/>
      | recipientId | No | String | Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document. |
      | requireIdLookup | No | Boolean | When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. |
      | roleName | No* | String | Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients. |
      | routingOrder | Yes | String | This element specifies the routing order of the recipient in the envelope. |
      | smsAuthentication | No | senderProvidedNumbers | Optional element. Contains the element:<br/><br/>*senderProvidedNumbers*: Array that contains a list of phone numbers the recipient can use for SMS text authentication. |
      | templateAccessCodeRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true** and the `TemplateLocked` parameter is set to **true**, the sender must enter an access code. |
      | templateLocked | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**, the sender cannot change any attributes of the recipient. |
      | templateRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**,  the sender may not remove the recipient. |
      | identityVerification <a name="toto"></a> | No | identityVerification | Optional element. Specifies ID Verification applied on an envelope by workflow ID. <br/>See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. <br/>This can be used in addition to other [recipient authentication](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/auth/) methods. <br/>Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients' identity by verifying their ID while ID Check relies on data available on public records (such as current and former address). |

      <br>



      ## Agent Recipient

      An agent recipient can add name and email information for recipients that appear after the agent in routing order.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type has the following parameters:

      <br>

      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |

      <br>



      ## Carbon Copy Recipient

      Carbon copy recipients receive a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. You can place this type of recipient in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient's order in the process flow and when the envelope is completed.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type has the following parameters:

      <br>

      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |

      <br>



      ## Certified Delivery Recipient

      Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type has the following parameters:

      <br>

      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |

      <br>



      ## Editor Recipient

      Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type has the following parameters:

      <br>


      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |


      <br>


      ## In-Person Signer Recipient

      An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.

      The following restrictions apply to using electronic notary when sending documents:

      * Authentication methods are allowed for the signer but not the notary.
      * The Sign On Paper, Document Markup, Field Markup and Change Signer options cannot be used for the documents.
      * Tabs may be assigned to the signer, but cannot be assigned to the notary.

      See [eNotary Resources][enotary-resources] in the DocuSign Support Center for more information about how the eNotary feature works.

      In addition to the [core parameters](#core-recipient-parameters), this type adds the following parameters:

      <br>


      | Name 	| Required 	| Schema Type 	| Description 	|
      |-----------------------	|-----------------------------------------------------	|-------------	|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|
      | inPersonSigningType 	| No 	| String 	| Specifies whether the envelope uses the eNotary feature. The accepted values are:<ul markdown=1><li>`inPersonSigner` The envelope uses the normal in-person signing flow.</li><li>`notary`: The envelope uses the eNotary signing flow.</li></ul> 	|
      | notaryHost 	| Yes, when `inPersonSigningType` is `notary` 	| NotaryHost 	| Sets the information for the notary host for the notary in person signing flow. The following information is required: <ul markdown=1> <li>`recipientId`: A unique ID number for the notary signing host. </li> <li>`name`: Specifies the notary's full legal name.</li> <li>`email`: Specifies the notary's email address. </li> </ul> 	|
      | autoNavigation 	| No 	| Boolean 	| Specifies whether auto navigation is set for the recipient. 	|
      | defaultRecipient 	| No 	| Boolean 	| When set to **true**, this is the default recipient for the envelope. This option is used when creating an envelope from a template. 	|
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |
      | hostName 	| Yes, when `inPersonSigningType` is `inPersonSigner` 	| String 	| The name of the signing host. This is the DocuSign user that is hosting the in-person signing session. 	|
      | hostEmail 	| Yes, when `inPersonSigningType` is `inPersonSigner` 	| String 	| The email address of the signing host. This is the DocuSign user that is hosting the in-person signing session. 	|
      | signerName 	| Yes, when `inPersonSigningType` is `inPersonSigner` 	| String 	| The in-person signer's full legal name. 	|
      | Name 	| Yes, when `inPersonSigningType` is `notary` 	| String 	| The full legal name of the signer in an eNotary flow. 	|
      | email 	| Yes, when `inPersonSigningType` is `notary` 	| String 	| The signer's email address in an eNotary flow. 	|
      | recipientSuppliesTabs 	| No 	| Boolean 	| Indicates whether the recipient supplies tabs in the document. 	|
      | signatureInfo 	| No 	| String 	| Optional element only used with the recipient types In Person Signers, Signers, and Witnesses.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. 	|
      | signInEachLocation 	| No 	| Boolean 	| When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). 	|
      | tabs 	| No 	| Tab 	| Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) for more information about tabs. 	|
      |  	|  	|  	|  	|


      <br>



      ## Intermediary Recipient

      An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type has the following parameters:

      <br>


      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |

      <br>



      ## Seal Recipient

      An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.

      Electronic seal recipients rely on a subset of core properties, described as follows, plus the `recipientSignatureProviders` parameter:


      <br>


      | Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Required&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Schema Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Description&nbsp;&nbsp;&nbsp;&nbsp; |
      | :--- | :--- | :--- | :--- |
      | recipientId| Yes | String | Indicates the unique ID of the applied electronic seal.<br/>|
      | routingOrder| No (default: 1) | String | Specifies the routing order of the electronic seal in the envelope. <br />The routing order assigned to your electronic seal cannot be shared with another recipient. It is recommended that you set a routing order for your electronic seals.. |
      | recipientSignatureProviders| Yes | String | Indicates which electronic seal to apply on documents when creating an envelope. |


      <br>



      By default, Electronic Seals apply on all documents in an envelope. However, the sealDocumentsWithTabsOnly property (see recipientSignatureProvider) allows you to seal only documents that have signHere tabs set for the Electronic Seal recipients.

      <br>



      ## Signer Recipient

      A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type adds the following parameters:

      <br>


      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | autoNavigation | No | Boolean | Specifies whether auto navigation is set for the recipient.|
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the envelope. This option is used with the CreateEnvelopeFromTemplatesAndForms method. |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |
      | isBulkRecipient | No | Boolean | Indicates whether the recipient is a bulk send recipient or not. |
      | recipientSuppliesTabs | No | Boolean | Indicates whether the recipient supplies tabs in the document. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). |
      | signatureInfo | No | String | Optional element only used with recipient types In Person Signers, Signers, and Witnesses.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signerEmail | No | String | Optional element. The email address for an In-Person Signer recipient Type.<br/>Maximum Length: 100 characters. |
      | signerName | Yes | String | Required element with recipient type In Person Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of a signer for the envelope. |
      | tabs | No | Tab | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)  for more information about tabs. |

      <br>

      [enotary-resources]: https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources


      ## Witness Recipient

      A witness is a recipient whose signature affirms that the identified signers have signed the documents in the envelope.

      In addition to the [core parameters](#core-recipient-parameters), this recipient type adds the following parameters:

      <br>


      | Name | Required | Schema Type | Description |
      | :--- | :--- | :--- | :--- |
      | autoNavigation | No | Boolean |	Specifies whether auto navigation is set for the recipient. |
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the envelope. This option is used when creating an envelope from a template. |
      | documentVisibility | No | documentVisibility | A complex type that specifies which documents are visible to this recipient. |
      | isBulkRecipient | No | Boolean | Indicates whether the recipient is a bulk send recipient or not. |
      | recipientSignatureProviders | Yes | String | Indicates which electronic seal to apply on documents when creating an envelope. |
      | recipientSuppliesTabs | No | Boolean | Indicates whether the recipient supplies tabs in the document. |
      | recipientType | Yes | String | Indicates the recipient type. |
      |requireSignerCertificate | No | Boolean | Indicates whether the envelope requires a signer certificate for this recipient. |
      | requireSignOnPaper | No | Boolean | Specifies whether the signer must print, sign, and upload or fax the signed documents to DocuSign. |
      | signatureInfo | No | Boolean | Optional element only used with recipient types In Person Signers, Signers, and Witnesses. Enables the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, specifies that the signing recipient is required to sign and initial at each signature/initial tab (instead of once). |
      | signingGroupId | No | String | The id of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups). |
      | signingGroupName | No | String | The display name for the signing group. Maximum Length: 100 characters. |
      | signingGroupUsers | No | userInfo | A complex type that contains information about the users in the signing group. |
      | witnessFor | Yes | String | Indicates the person or party for whom the recipient is a witness. |
      | witnessForGuid | Yes | String | GUID identifying the person or party for whom the recipient is a witness. |


      [ListLang]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/listSupportedLanguages/
    name: EnvelopeRecipients
  - description: |
      The EnvelopeRecipientTabs resource provides methods that enable you
      to add,
      update,
      and delete tabs
      from an envelope.
      Tabs are associated with a specific recipient
      in an envelope
      and are only used by the recipient types
      In Person Signers and Signers.

      <!-- START doctoc generated TOC please keep comment here to allow auto update -->
      <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
      **On this page**

      - [Tab Types](#tab-types)
      - [View Tab](#view-tab)
      - [Requesting Payments](#requesting-payments)
      - [Using Custom Tabs in Envelopes and Templates](#using-custom-tabs-in-envelopes-and-templates)
      - [Anchoring Tabs](#anchoring-tabs)
      - [Automatically Populating Tabs](#automatically-populating-tabs)

      <!-- END doctoc generated TOC please keep comment here to allow auto update -->


      ## Tab Types

      Some tabs enable values to be entered by the signer.
      Those tabs' values can be preset either through the web browser
      or via the API. Other tab types use information that is already
      recognized by the DocuSign platform.
      These tabs cannot have their value updated on a per-tab basis
      by the API or via the browser. In some cases, the info might be
      settable using a different technique.
      For example, the Full name tab uses the signer's name,
      which is set elsewhere in the request.

      Here is the list of tabs and whether you can or cannot set their values in the tab definition:

      <br>

      | Tab Type                               | Description|
      | :------------------------------------- ||
      | Approve (`approve`)                    | Allows the recipient to approve documents without placing a signature or initials on the document. If the recipient clicks the tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document of the approval, but it is recorded as a signature in the envelope history. This value **can't** be set.                                                                                                                                                                                                                                              |
      | Checkbox (`checkbox`)                  | Allows the recipient to select a yes/no (on/off) option. This value can be set|
      | Company (`company`)                    | Displays the recipient's company name. This value **can't** be set|
      | Date Signed (`dateSigned`)             | Displays the date that the recipient signed the document. This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
      | Date (`date`)                          | Allows the recipient to enter a date. Date tabs are one-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. If you need a particular date format enforced, DocuSign recommends using a Text tab with a validation pattern and a validation message to enforce the format. This value can be set.                                                                                                                                                        |
      | Decline (`decline`)                    | Allows the recipient the option of declining an envelope. If the recipient clicks the tab during the signing process, the envelope is voided. This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                                                                            |
      | Email Address (`emailAddress`)         | Displays the recipient's email as entered in the recipient information. This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
      | Email (`email`)                        | Allows the recipient to enter an email address. This is a one-line field that checks that a valid email address is entered. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.<br><br>When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response. This value can be set.                                                                                                                                                                                        |
      | Envelope ID (`envelopeId`)             | Displays the envelope ID. Recipients cannot enter or change the information in this tab.  This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
      | First Name (`firstName`)               | Displays the recipient's first name. This tab takes the recipient's name as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name. This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                  |
      | Formula Tab (`formulaTab`)             | The value of a formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the formula tab calculates and displays the result. This value can be set.The `formula` property of the tab contains the references to the underlying tabs. See [Calculated Fields] in the DocuSign Support Center to learn more about formulas. If a formula tab contains a `paymentDetails` property, the tab is considered a payment item. See [Requesting Payments Along with Signatures] in the DocuSign Support Center to learn more about payments. |
      | Full Name (`fullName`)                 | Displays the recipient's full name. This value **can't** be set|
      | Initial Here (`initialHere`)           | Allows the recipient to initial the document. May be optional. This value **can't** be set|
      | Last Name (`lastName`)                 | Displays the recipient's last name. This tab takes the recipient's name as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name. This value **can't** be set.                                                                                                                                                                                                                                                                                                                                                                                     |
      | List (`list`)                          | This tab offers a list of options to choose from. The `listItems` property is used to specify the selectable options. This value can be set,                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
      | Notarize (`notarize`)                  | Place this tab on a page to alert Notary recipients that they must take action. Only one notarize tab can appear on a page. This value can be set.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
      | Note (`note`)                          | Displays additional information, in the form of a note, for the recipient. This value can be set|
      | Number (`number`)                      | Allows the recipient to enter numbers and decimal (.) points. This value can be set|
      | Radio Group (`radioGroup`)             | This group tab is used to place radio buttons on a document. The `radios` property is used to add and place the radio buttons associated with the group. Only one radio button can be selected in a group. This value can be set.                                                                                                                                                                                                                                                                                                                                                                                     |
      | Sign Here (`signHere`)                 | Allows the recipient to sign a document. May be optional. This value **can't** be set. <br/>**Note**: `signHere` tabs can also be used to add a visual representation for  an electronic seal in a document.                                                                                                                                                                                                                                                                                                                                                                                                          |
      | Signer Attachment (`signerAttachment`) | Allows the recipient to attach supporting documents to an envelope. This value **can't** be set|
      | SSN (`ssn`)                            | A one-line field that allows the recipient to enter a Social Security Number. The SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.  This value can be set.                                                                                                                                                                                                                                                                                                                                                        |
      | Text (`text`)                          | Allows the recipient to enter any type of text. This value can be set|
      | Title (`title`)                        | Displays the recipient's title. This value **can't** be set|
      | View (`view`)                          | The View tab is used with the Approve tab to handle supplemental documents. This value can be set|
      | Zip (`zip`)                            | Allows the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits in the ZIP+4 format. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information. This value can be set.                                                                                                                                                                                                                                                                                                               |


      [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [checkbox]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [company]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [dateSigned]:		    https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [date]:		          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [decline]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [emailAddress]:     https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [email]:		        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [envelopeId]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [firstName]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [fullName]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [initialHere]:	  	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [lastName]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [list]:	           	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [notarize]:         https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [note]:		          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [number]:		        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [radioGroup]:		    https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [signHere]:	      	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [ssn]:	          	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [text]:	          	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [title]:	        	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [view]:		          https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types
      [zip]:	          	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/#tab-types

      [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
      [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures






      ## View Tab

      The View tab is used on supplemental documents.
      To learn more about using the View tab with
      supplemental documents, see
      [Using Supplemental Documents][usingsupdocs]
      in the [Sending Documents][sendenvelopes] section of
      the [Envelope: create][envelopecreate] method.

      [sendenvelopes]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/
      [usingsupdocs]:   https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/supplemental/
      [envelopecreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/

      <br>

      | Name              | Required  | Type    | Description |
      | :----             | :----     | :----   | :----       |
      | documentId        | Yes       | String  | The document ID number that the tab is placed on. This must refer to an existing Document's ID attribute. |
      | pageNumber        | Yes       | String  | Must be set to 1. |
      | recipientId       | Yes       | String  | The recipient associated with the tab. Must refer to an existing recipient's ID attribute. |
      | required          | No        | Boolean | If **true**, the recipient is required to select the supplemental document View button during signing. |
      | tabLabel          | No        | String  | The label used for the tab.  If an empty string is provided for this, an empty sting is used. If no value is provided, the tab type is used as the value. Maximum of 500 characters. |
      | templateLocked    | No        | Boolean | Optional. Used only when working with template tabs. If **true**, the attributes of the tab cannot be changed by the sender. |
      | templateRequired  | No        | Boolean | Optional. Used only when working with template tabs. If **true**, the tab cannot be removed by the sender. |
      | xPosition         | Yes       | String  | Required, but can be 0.  |
      | yPosition         | Yes       | String  | Required, but can be 0. |


      ## Requesting Payments

      The Payments feature of the DocuSign eSignature REST API
      lets you collect payments
      along with signatures and other information.

      To send a request for payment
      and collect payments,
      you need a payment gateway account,
      which is the destination for the payments.
      Create a payment account
      with a supported payment gateway,
      and then connect the payment gateway account
      to your DocuSign account.
      To learn how to connect a payment gateway account
      to your DocuSign account
      see [Managing Payment Gateways][paymentgateways]
      in the DocuSign Support Center.
      You must connect and manage payment gateway accounts manually
      through the DocuSign Admin console
      and through your chosen payment gateway.
      There is no public API
      for connecting payment gateway accounts
      to DocuSign accounts
      or for managing payment gateway accounts.

      Currently
      [Stripe][stripe],
      [Braintree](https://www.braintreepayments.com/), and
      [Authorize.net](https://www.authorize.net/)
      are the supported payment gateways.

      ### How Payments Work

      To make a request for payment,
      use a [`formulaTab`][formulatab]
      that has a
      [`paymentDetails`][paymentdetails] object.
      This object includes
      a list of [`paymentLineItem`][paymentlineitem] objects.
      Each line item refers to a [`number`][numbertab] tab
      that contains the value of the each item.
      The purpose of the line items
      is to transmit them to the payment gateway
      as metadata, so that you can use the information
      in the payment processor.

      **Note**: If the fileExtension parameter is not added in an API call, only base64 converted pdf files will be accepted.
      Any attempt to send a non pdf file without using fileExtension results in an error.

      This is an example request for two books.
      Each book is specified in the `number` tabs
      labeled "Hamlet" and "Tempest".
      The books are referenced as line items
      by their tab labels
      within the `paymentDetails` object
      of a `formula` tab.
      The formula of the `formula` tab
      add the values of the same two `number` tabs.

      ```json
      {
        "documents": [
          {
            "documentBase64": "<base64-encoded PDF document>",
            "documentId": "1",
            "fileExtension": "pdf",
            "name": "payment.pdf"
          }
        ],
        "emailSubject": "Order Some Books",
        "recipients": {
          "signers": [
            {
              "email": "vreader@example.com",
              "name": "Voracious Reader",
              "recipientId": "1",
              "routingOrder": "1",
              "tabs": {
                . . .
                "numberTabs": [
                  {
                    "value": "10.00",
                    "width": 78,
                    "required": "true",
                    "locked": "true",
                    "tabLabel": "Hamlet",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": "323",
                    "yPosition": "134"
                  },
                  {
                    "value": "10.00",
                    "width": 78,
                    "required": "true",
                    "locked": "true",
                    "tabLabel": "Tempest",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": "323",
                    "yPosition": "154"
                  }
                ],
                "formulaTabs": [
                  {
                    "required": "true",
                    "formula": "([Hamlet] + [Tempest]) * 100",
                    "roundDecimalPlaces": "2",
                    "paymentDetails": {
                      "currencyCode": "USD",
                      "lineItems": [
                        {
                          "name": "Hamlet",
                          "description": "The Danish Play",
                          "itemCode": "SHAK1",
                          "amountReference": "Hamlet"
                        },
                        {
                          "name": "Othello",
                          "description": "The one with Caliban in it",
                          "itemCode": "SHAK2",
                          "amountReference": "Tempest"
                        }
                      ],
                      "gatewayAccountId": "e76668b4-xxxx-xxxx-xxxx-a208d659e490"
                    },
                    "tabLabel": "Payment1",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": 300,
                    "yPosition": 200
                  }
                ]
              }
            }
          ]
        },
        "status": "sent"
      }
      ```

      Use the
      [EnvelopeRecipients: list][enveloperecipientslist] method
      to check the status of a payment.
      When the payment is successful,
      the `status` property of
      the [`paymentDetails`][paymentdetails] object
      is `payment_complete`.

      ```json
      {
        "signers": [
          {
            "tabs": {
              . . .
              "numberTabs": [
                {
                  "value": "10.00",
                  "tabLabel": "Hamlet",
                  "documentId": "1",
                  "recipientId": "1",
                  "pageNumber": "1",
                  "xPosition": "323",
                  "yPosition": "134",
                },
                {
                  "value": "10.00",
                  "tabLabel": "Tempest",
                  "documentId": "1",
                  "recipientId": "1",
                  "pageNumber": "1",
                }
              ],
              "formulaTabs": [
                {
                  "formula": "([Hamlet] + [Tempest]) * 100",
                  "roundDecimalPlaces": "2",
                  "paymentDetails": {
                    "status": "payment_complete",
                    "currencyCode": "USD",
                    "lineItems": [
                      {
                        "name": "Hamlet",
                        "description": "The Danish Play",
                        "itemCode": "SHAK1",
                        "amountReference": "Hamlet"
                      },
                      {
                        "name": "Tempest",
                        "description": "The one with Caliban in it",
                        "itemCode": "SHAK2",
                        "amountReference": "Tempest"
                      }
                    ],
                    "gatewayAccountId": "e76668b4-xxxx-xxxx-xxxx-a208d659e490"
                  },
                  "value": "20",
                  "required": "true",
                  "locked": "false",
                  "tabLabel": "Payment1",
                  "documentId": "1",
                  "recipientId": "1",
                  "pageNumber": "1",
                }
              ]
            },
            "creationReason": "sender",
            "email": "vreader@example.com",
            "name": "Voracious Reader",
            "recipientId": "1",
            "requireIdLookup": "false",
            "status": "completed",
          }
        ],
        . . .
      }
      ```

      #### How to make a request for future payments

      Use the following steps to make a request to collect a signer's payment method for future use:

      1. Add a text tab with a descriptive `tabLabel` such as `FuturePayment`.
      2. In the formula tab's `paymentDetails` object, add a `lineItem` object that references the `tabLabel` from step 1.

      **Note**: Do not include this new `lineItem` in formula calculations.

      The following example builds on the previous code block to also collect a payment method for future use:

      ```
      {
        "documents": [
          {
            "documentBase64": "<base64-encoded PDF document>",
            "documentId": "1",
            "fileExtension": "pdf",
            "name": "payment.pdf"
          }
        ],
        "emailSubject": "Order Some Books",
        "recipients": {
          "signers": [
            {
              "email": "vreader@example.com",
              "name": "Voracious Reader",
              "recipientId": "1",
              "routingOrder": "1",
              "tabs": {
                "numberTabs": [
                  {
                    "value": "10.00",
                    "width": 78,
                    "required": "true",
                    "locked": "true",
                    "tabLabel": "Hamlet",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": "323",
                    "yPosition": "134"
                  },
                  {
                    "value": "10.00",
                    "width": 78,
                    "required": "true",
                    "locked": "true",
                    "tabLabel": "Tempest",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": "323",
                    "yPosition": "154"
                  }
                ],
                "textTabs": [
                  {
                    "value": "",
                    "width": 78,
                    "required": "true",
                    "locked": "true",
                    "tabLabel": "FuturePayment",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": "323",
                    "yPosition": "174"
                  }
                ],
                "formulaTabs": [
                  {
                    "required": "true",
                    "formula": "([Hamlet] + [Tempest]) * 100",
                    "roundDecimalPlaces": "2",
                    "paymentDetails": {
                      "currencyCode": "USD",
                      "paymentOption": "save_and_authorize",
                      "lineItems": [
                        {
                          "name": "Hamlet",
                          "description": "The Danish Play",
                          "itemCode": "SHAK1",
                          "amountReference": "Hamlet"
                        },
                        {
                          "name": "Othello",
                          "description": "The one with Caliban in it",
                          "itemCode": "SHAK2",
                          "amountReference": "Tempest"
                        },
                        {
                          "name": "Request books",
                          "description": "collect Payment method",
                          "itemCode": "",
                          "amountReference": "FuturePayment"
                        }
                      ],
                      "gatewayAccountId": "e76668b4-xxxx-xxxx-xxxx-a208d659e490"
                    },
                    "tabLabel": "Payment1",
                    "documentId": "1",
                    "pageNumber": "1",
                    "xPosition": 300,
                    "yPosition": 200
                  }
                ]
              }
            }
          ]
        },
        "status": "sent"
      }
      ```

      ### Some Things to Keep in Mind About Payments

      * An envelope is not completed until all payments are completed.

      * If a DocuSign account Administrator
        deletes a payment gateway account connection
        DocuSign cancels all in-process envelopes
        that reference the deleted payment gateway account.

      * If the sender voids an envelope,
        all payment authorizations are canceled.

      * If a required recipient refuses to sign,
        all authorized payments are canceled.

      * If a required recipient's payment fails authorization,
        DocuSign attempts to recover
        by sending the recipient
        notification about the failed payment authorization.
        The recipient has the opportunity
        to correct the payment method information.

      * Each recipient's payment is authorized separately.
        Accounts are charged and payment made
        after all required tabs are completed,
        and all payments in an envelope for all recipients are authorized.

      * Refunds are not supported.
        Conduct refunds or payment changes
        with the payment gateway separately from DocuSign.

      * At this time, DocuSign does not charge a per-transaction fee.


      [enveloperecipientslist]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/list/
      [formulatab]:             https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/
      [ISO4217]:                https://en.wikipedia.org/wiki/ISO_4217
      [numbertab]:              https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/
      [paymentgateways]:        https://support.docusign.com/en/guides/managing-payment-gateways
      [paymentguide]:           https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
      [paymentlineitem]:        https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/
      [paymentdetails]:         https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/
      [stripe]:                 https://stripe.com/


      ## Using Custom Tabs in Envelopes and Templates

      Custom Tabs can be added to envelopes and templates
      by setting the `customTabId` property
      when creating an envelope or template recipient
      or when adding a new tab for an existing recipient.
      The custom tab must be added as the correct tab type.
      For example if the custom tab type is text, it cannot be used as a number tab.

      When the `customTabId` property is set,
      the new tab inherits all the custom tab properties.
      Required information that is not included in the custom tab,
      such as document ID and page ID, must be included when adding the tab.
      If the custom tab does not have anchor settings, the X and Y positions must be included.

      After the tab is created,
      it is treated as any other tab for updating or deleting.

      ## Anchoring Tabs

      The tab anchoring option
      allows you to send documents for signature
      that do not have a fixed layout or format.
      In these documents you might not know
      the absolute location of the tabs
      when you design your API client application because the tabs must move with text.
      As an alternative to sending X and Y coordinates for tabs,
      the DocuSign Service can derive an anchor location for the tab
      by correlating anchor information to data within the document.

      When the DocuSign Service receives a request that contains tabs
      with anchor information,
      it searches the document for instances of the `anchorString` property.
      When found,
      it places a tab of the specified type for the designated recipient.
      Tab positions are established by setting offsets for the tab.

      When you apply tabs to the document,
      DocuSign does not remove or replace the text in the `anchorString` property. You can hide codified anchors by using the same font color as the background of the document. So the anchor can be used by DocuSign processes and it will not be visible on the document.

      To use an anchoring option:

      1. Identify the location in the document by text string. You can use a pre-existing text string or add a new one.
      For best performance DocuSign recommends using single word anchor strings when possible, especially when there are a large number of pages in the envelope.
      For example, you might want to add a Sign Here tab to the "Borrower's Signature" lines in a document, but that phrase might occur in places in the document where you don't want to tab to appear. In this case, you could add the text "BorrowerSignHere" in white font color (so that isn't visible in the document) to all the places you want Sign Here tabs to appear and use "BorrowerSignHere" as the anchor string.
      1. Reference the anchor through the `anchorString` property of the tab.
      1. Determine the offset from the anchor string location to where the tab should be placed.

      Setting a positive value in the `anchorXOffset` property moves the tab right on the page and positive values in the  `anchorYoffset` prove moves the tab down the page. The `anchorUnits` property specifies the units used for the offsets.
      For Sign Here and Initial Here tabs the bottom-left of the anchor string is equivalent to position (0,0), and the bottom-left of the tab graphic is placed relative to that.
      For all other tabs the bottom-left of the anchor string is equivalent to position (0,0), and the top-left of the tab graphic is placed relative to that.
      DocuSign does not currently provide tools to derive the offset values. Determination of the proper offset will likely require some trial-and-error.

      ### Rules for working with anchor tags

      When anchor tabs are used, all documents in the envelope are searched for the `anchorString` property.

      * You set the text of the anchor string in the `anchorString` property. DocuSign tabs are created for each instance of the `anchorString` property within the document, so special care must be taken to establish unique anchor strings that do not result in unintentional tabs.
      * You cannot use the same anchored tab for different recipients for the same document.
      * The DocuSign system cannot search for text that is embedded in an image when checking for anchor strings.
      * X or Y offsets supplied for a tab apply to all instances of the tab in the document. To use different offsets at different locations in the document for the same recipient, create multiple, unique anchor tabs.
      * If the Y offset value of an anchor string would force a tab outside of the page boundaries, the tag is placed at the page boundary. If the X offset value places a tab outside of the page boundaries, the error message `Invalid_User_Offset` is sent. The error message includes the X offset that resulted in the error.
      * The system does not support an anchor string embedded in the form of a PDF X-object in the document.
      * The system does not re-flow the text that surrounds the anchor tabs. It is the responsibility of the document author to provide sufficient white space to contain the potential width of the ultimate tab value.

      ### Tips and Tricks

      The following are tips for effective use of anchor tags:
      * In order to avoid unintentional conflicts between text contained in an `anchorString` property and the text that naturally exists in documents, establish a codified syntax for the anchor string text that is unlikely to appear elsewhere in a document.
      * Develop an extensible and consistent syntax that can be used across multiple document types.
      * Especially for documents that have variable numbers of tabs or signers, author the source document to include hidden anchor tabs for all potential signers/permutations. Then, control the tabs that are actually placed by including/excluding the anchor tabs in the request. This approach allows a single document to be used for all use cases instead of maintaining separate documents for each scenario.

      ## Automatically Populating Tabs

      If you want similar tab types
      to automatically populate with the same data,
      you must follow these guidelines:

      * Each `tabLabel` entry must have the characters
        `\\*` in front of the label.
        If you omit the `\\*` prefix,
        only the first occurrence of the tab is populated.

        When automatically populating tabs,
        the `tabLabel` must not contain any spaces.
        In the JSON example below,
        the Text tabs  properties `StudentLastName` and `StudentFirstName`
        will be auto-populated as specified ("Doe" and "John")
        each place they appear throughout the envelope.

        ```
        "tabs": {
          "textTabs": [
          {
            "tabLabel": "\\*StudentLastName",
            "value": "Doe"
          },
          {
            "tabLabel": "\\*StudentFirstName",
            "value": "John"
          }]
        }
        ```

      * Note that `\\*` matches _anything_.  If you were to add
        another tab with the `tabLabel` set to `\\*Name` to the
        example above, it would end up matching the other two
        labels as well.

      * Each occurrence of the tab must have identical properties.

        For example, suppose there are two Text tabs in a document,
        each with `tabLabel` set to `Name`.
        If one tab has the `bold` property set to **true**,
        and the other has the `bold` property set to **false**,
        only the first one will be populated.
        In order to automatically populate both occurrences
        of the `Name` Text tabs,
        the `bold` property must be set to the same value for both tabs.
    name: EnvelopeRecipientTabs
  - description: The EnvelopeDocumentTabs resource provides methods that enable you to manage tabs in envelopes. For a complete list of options, see the following Properties section.
    name: EnvelopeDocumentTabs
  - description: The EnvelopeDocumentTabs resource provides methods that enable you to manage tabs in a template.
    name: TemplateDocumentTabs
  - description: |-
      The `EnvelopeViews` resource provides methods that return URLs that you can embed into your application to provide access to the DocuSign UI.

      The following Envelope Views are available:

      -  Console View: The authentication view of the DocuSign UI.
      -  Correct View: The correction view of the DocuSign UI.
      -  Edit View: The editing view of the DocuSign UI.
         **Note**: This provides the same functionality as the sender view.
      -  Recipient View: The view the recipient sees in the DocuSign UI.
      -  Shared Recipient View: The view a user sees of a shared envelope in the DocuSign UI.
      -  Sender View: The sending view of the DocuSign UI.
    name: EnvelopeViews
  - description: ""
    name: AccountSealProviders
  - description: The Accounts resource provides methods that allow you to create, delete, and manage your accounts.
    name: Accounts
  - description: |-
      Standards-Based Signatures (SBS) is the label used to describe DocuSign's suite of signatures that comply with regional and industry regulations, such as the electronic IDentification, Authentication and trust Services (eIDAS) regulation in Europe.

      ## Feature Differences When Using Standards-Based Signatures

      Some DocuSign features are not compatible with Standards-Based Signatures, while others work somewhat differently. It's important to understand these key differences.

      ### DocuSign Features Not Compatible with SBS

      - Attachment by fax
      - Concatenation of signer attachments
      - Legacy digital signatures
      - Markup
      - Notary

      ### DocuSign Features That Change with SBS

      The following features work slightly differently with SBS:

      - **Advanced Correct**: After the first signature, adding or deleting a field is not allowed. This behavior occurs because SBS does not allow adding or removing form fields after a digital signature has already been applied to a PDF.
      - **Downloading Combined Envelopes**: A combined PDF is not digitally signed. This behavior occurs because concatenating digitally signed PDFs breaks the digital signatures on the PDFs.
      - **Freeform Signing**: After someone has signed, allows only signature and initials on free-form. This behavior occurs because if another signer has already signed the document, adding fields other than signature fields will break the existing digital signatures on the document.
      - **Watermarks**: All watermarks are added as PDF annotations. This behavior occurs because burning the watermark into the PDF will break the digital signatures on the document.
      - **Wet Signing**: Wet-signed documents are added as new documents to envelopes. This behavior results in the uploaded or faxed, physically signed document being added as a new document to the envelope. This new document gets only a platform seal.

      For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
    name: AccountSignatureProviders
  - description: The Billing resource provides methods that allow you to manage the billing plans,associated with an account.
    name: BillingPlans
  - description: The Invoices resource provides methods that allow you to manage the invoices for an account.
    name: Invoices
  - description: |-
      The Payments resource provides methods that allow you to manage payments for an account.

      These calls can only be used by users with account administrator privileges.
    name: Payments
  - description: The CloudStorage resource provides methods that allow you to list files stored on your cloud storage provider.
    name: CloudStorage
  - description: |-
      The following providers are supported:

      * Google Drive
      * Dropbox
      * Box
      * Evernote
      * OneDrive

      To use cloud storage files, you must first give DocuSign access to your cloud storage provider. You can disconnect authorized a cloud storage provider at any time.
    name: CloudStorageProviders
  - description: |-
      The `ConnectConfigurations` resource enables you to configure the DocuSign Connect service for your account.

      You can use this resource to configure account-level webhooks that send notifications about every envelope sent from your account. You can set account-level webhooks to listen for events for envelopes sent by a specific user on your account, by multiple specific users, or from any of the users on your account. These events will be tracked, and can be delivered to a listening application.

      **Note**: To use DocuSign Connect, it must be enabled in your DocuSign account. It is not enabled by default.

      ## Aggregated Messages

      To avoid duplicate simultaneous events, you can configure Connect to aggregate similar events into a single delivery. By default, aggregation is enabled on all Connect configurations. Similar or simultaneous events will be aggregated so your listener doesn't receive extraneous messages. 

      For example, when the final recipient signs an envelope,  the system delivers a single, aggregated Connect event, rather than separate Recipient: complete and Envelope: complete messages. This aggregation process ensures that you only receive the minimal viable number of messages about an envelope's life cycle. 

      ## Send Individual Messages

      When you enable Send Individual Messages (SIM) mode on a Connect configuration, DocuSign will deliver notifications for all envelope events individually. In contrast with aggregated messages, when a final recipient completes an envelope, your listener will receive a single Recipient: complete event followed by a single Envelope: complete event for the final participating party on the agreement.  If you need more granular control over event notifications, you can enable SIM mode in the Admin area of the RADmin console. For more information about SIM mode, see [Using Connect's New Send Individual Messages Feature](https://www.docusign.com/blog/dsdev-connect-send-individual-messages/).

      **Note**: To create an envelope-level webhook instead of using account-level webhooks, use the Envelopes::Create method and add an `eventNotification` object to an envelope object.
    name: ConnectConfigurations
  - description: The ConnectEvents resource provides methods that allow you to read, delete, and republish the connect logs associated with an envelope.
    name: ConnectEvents
  - description: |-
      The CustomTabs resource provides methods that allow you create and manage custom tabs based on the existing DocuSign tabs.

      You can create a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.

      Custom tabs can be created based on the  approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
    name: CustomTabs
  - description: |-
      The RequestLogs resource provide methods that allow you to retrieve and delete the API request log files.

      The log files contain the API requests associated with your integration. They can aid you in troubleshooting specific issues within an integration, or if DocuSign Support requests an API trace log. 
    name: RequestLogs
  - description: The Resources resource provides a method which retrieves the base resources that are available.
    name: Resources
  - description: The Services resource provides a method that allow you to retrieve the available service versions.
    name: Services
  - description: |-
      The `EnvelopeConsumerDisclosures` resource provides methods that enable you to retrieve the Electronic Record and Signature Disclosure (ERSD) for an envelope recipient. This is the disclosure that displays to each new recipient who is going to sign or add other information, or who is required to view the documents you send to them. The recipient must read and agree to the terms of the disclosure before they can access and take action on the documents you send. The ERSD does not apply to copy-only recipients, but does apply to recipients who must sign or view your documents.

      You can retrieve either the default ERSD that DocuSign provides for U.S.-based transactions, or a custom ERSD.

      ## Languages

      You specify the language of the disclosure version that you want to retrieve by using the `langCode` parameter.

      **Important**: The system does not translate the ERSD for you. An account administrator must create a version of the account-level disclosure for each language that your signers use. 

      For more information, see [Legal Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure).
    name: EnvelopeConsumerDisclosures
  - description: |+
      <!-- resources aren't rendered the same way
           as other pages. This is a little hack to
           make the headings work better -->
      <style>
      h1, h2, h3 {
        margin-top: 1em;
      }
      </style>

      The EnvelopeDocuments resource provides methods
      that manage documents in an envelope.
      You can:
      * add one or more documents to the envelope
      * retrieve one or more documents from the envelope
      * delete documents from the envelope

      All of the methods in this resource
      operate on on an existing envelope.
      Before you can add documents
      to an envelope,
      you must first create it
      with the [Envelopes: create][envelopescreate] method.


      [envelopescreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/

    name: EnvelopeDocuments
  - description: |-
      The EnvelopeEmailSettings provide methods that allow you to manage the email override settings for an envelope.

      Email override settings change the reply to email address, name, or the BCC for email archive information, for the envelope. Note that changing email settings will only affect email communications that occur after the addition was made.

      The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options. To send a copy of the envelope to a recipient who does not need to sign, use a Carbon Copies or Certified Deliveries Recipient Type.
    name: EnvelopeEmailSettings
  - description: |-
      The Envelope resource provides methods that allow you to manipulate and monitor envelopes. 

      Once you have authenticated the user you can use the Envelopes: createEnvelope method to create an envelope. You can call the EnvelopeDocuments: update or EnvelopeDocuments: updateList method to add additional documents.

      Setting the `status` property on the envelope to `sent` allows you to send it or `created` to save it as a draft.

      You can receive envelope event notifications by setting the `eventNotification` properties. When the envelope or recipient status changes to one of the specified status codes, a notification is sent to a URL that you specify.

      If you have an envelope that you have previously saved, you can modify the subject and message, send it, void it, or place it in the purge queue using the Envelope: update method.

      In addition to receiving notifications you can monitor the status of the envelopes using the following methods:
      * Envelope: getEnvelope - To get the status of a envelope. 
      * Envelope: listStatus - To get the envelope status for a set of envelopes.
      * Envelope: listStatusChanges - To get status changes information for one or more envelopes. 

      If you need to delete a page from a document in an envelope, use the Envelope: deleteDocumentPage method.

      The resource also includes a number of methods that allow you to retrieve and set the initials and signature for certain types of recipients on the document.
    name: Envelopes
  - description: The EnvelopeTemplates resource provides methods that allow you to add and delete templates on envelopes and documents.
    name: EnvelopeTemplates
  - description: The Folders resource provides methods that allow you to view contents of folders on the account and move envelopes between folders.
    name: Folders
  - description: For the custom groups you define for your account, you can assign brands to specify the ones that group members can use. Group members can use the available brands when they send envelopes or create templates. For more information, see [Assign Brands to Groups](https://support.docusign.com/en/guides/ndse-admin-guide-assign-brands-to-groups).
    name: GroupBrands
  - description: |-
      The Groups resource provides methods that allow you to manage groups for the account.

      Groups can be used to help manage users by associating users with a group. A group can be associated with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but this makes it easier to manage user permissions for a large number of users. Groups can also be used with template sharing to limit user access to templates.
    name: Groups
  - description: The GroupUsers resource provides methods that allow you to manage the users in a group.
    name: GroupUsers
  - description: |-
      The SigningGroups resource provides methods that allow you manage signing groups.

      Signing Groups allow you to create a group of people to which an envelope is sent. Any member of that group can open an envelope and sign the documents in the envelope with their own signature, even though a signature field was not directly assigned to them. When the Signing Group option is used, group members that open and sign the envelope are tracked in the envelope history and certificate.

      When one group member opens the envelope, it is temporarily locked and if other members try to open the envelope they will see a message saying the envelope is currently opened. If the group member exits the envelope without finishing the lock expires, allowing other group members to open and complete the envelope.

      When the envelope is complete, all members of the group will receive a completed notification and can access the completed envelope. 
      The envelope history and Certificate of Completion will show that the envelope was sent to a signing group and record which members viewed and signed the envelope.

      An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.

      The Signing Groups feature is only supported in certain DocuSign Enterprise and System Automated Premium plans. Your account might not support this option. To access this functionality, contact your Account Manager or DocuSign Support (support@docusign.com) for assistance.

      For more information, see [Signing Groups](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
    name: SigningGroups
  - description: The SigningGroupUsers resource provides methods that allow you to manage users in Signing Groups.
    name: SigningGroupUsers
  - description: |
      The TemplateRecipients resource allows you manage the recipients of an template.

      The exact parameters associated with a recipient depend on the recipient type. There are seven recipient types: Agents, Carbon Copies, Certified Deliveries, Editors, In Person Signers, Intermediaries, and Signers.

      Not all recipients are are available to all account types, review you account plan to determine which recipient types are available to you. If you are working in the Demo environment, all recipient types are available.

      Each recipient type is described below:

      [Agents](#agents): This recipient can add name and email information for recipients that appear after the recipient in routing order.

      [Carbon Copies](#carboncopies): Use this action if the recipient should get a copy of the template, but the recipient does not need to sign, initial, date or add information to any of the documents. This type of recipient can be placed in any order in the recipient list. The recipient receives a copy of the template when the template reaches the recipient's order in the process flow and when the template is completed.

      [Certified Deliveries](#certifiedDeliveries): Use this action if the recipient must receive the completed documents for the template to be completed, but the recipient does not need to sign, initial, date or add information to any of the documents.

      [Editors](#editors): This recipient has the same management and access rights for the template as the sender and can make changes to the template as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor.

      [In Person Signers](#inPerson): Use this action if the signer is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.

      [Intermediaries](#intermediaries): This recipient can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).

      [Signers](#signers): Use this action if your recipient must sign, initial, date or add data to form fields on the documents in the template.

      ### Core JSON Layout

      The following shows the core JSON layout for a recipient.

      ```
      "email": "email.name@company.com",
        "name": "recipient name",
        "accessCode": "",
        "addAccessCodeToEmail": false,
        "clientUserIs": null,
        "embeddedRecipientStartURL": "string",
        "customFields": {
          "sample string 1",
          "sample string 2"
        },
        "emailNotification"{
          "emailBody":"email text",
          "emailSubject":"Subject text",
          "supportedLanguage":"en",
        },
        "excludedDocuments": ["2", "4"],
        "idCheckConfigurationName": null,
        "idCheckInformationInput": {
          "addressInformationInput": {
            "addressInformation": {
              "street1": "sample string 1",
              "street2": "sample string 2",
              "city": "sample string 3",
              "state": "sample string 4",
              "zip": "sample string 5",
              "zipPlus4": "sample string 6"
            },
            "displayLevelCode": "sample string 1",
            "receiveInResponse": "sample string 2"
          },
          "dobInformationInput": {
            "dateOfBirth": "sample string 1",
            "displayLevelCode": "sample string 2",
            "receiveInResponse": "sample string 3"
          },
          "ssn4InformationInput": {
            "ssn4": "sample string 1",
            "displayLevelCode": "sample string 2",
            "receiveInResponse": "sample string 3"
          },
          "ssn9InformationInput": {
            "ssn9": "sample string 1",
            "displayLevelCode": "sample string 2"
          }
        },
        "inheritEmailNotificationConfiguration": false,
        "note": "",
        "phoneAuthentication": {
          "recipMayProvideNumber": "sample string 1",
          "validateRecipProvidedNumber": "sample string 2",
          "recordVoicePrint": "sample string 3",
          "senderProvidedNumbers": [
            "sample string 1",
            "sample string 2"
          ]
        },
        "recipientAttachment": null,
        "recipientCaptiveInfo": null,
        "recipientId": "1",
        "requireIdLookup": false,
        "roleName": "",
        "routingOrder": 1,
        "samlAuthentication": {
          "samlAssertionAttributes": [
            {
              "name": "string",
              "value": "string"
            },
            {
              "name": "string",
              "value": "string"
            }
          ]
        },
        "smsAuthentication": {
          "senderProvidedNumbers":[
            "sample string 1",
            "sample string 2"
          ]
        },
        "socialAuthentications": null,
        "templateAccessCodeRequired": false,
        "templateLocked": false,
        "templateRequired": false,
      ...
      ```

      ### Core Recipient Parameters

      The following table contains the descriptions for the core properties for a recipient.

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | email | Yes | Email | Email of the recipient. Notification will be sent to this email id.<br/>Maximum Length: 100 characters. |
      | name | Yes | String | Full legal name of the recipient.<br/>Maximum Length: 100 characters. |
      | accessCode | No | String | This optional element specifies the access code a recipient has to enter to validate the identity.<br/>Maximum Length: 50 characters. |
      | addAccessCodeToEmail | No | Boolean | This optional attribute indicates that the access code is added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient. |
      | clientUserId | No | String | This specifies whether the recipient is embedded or remote.<br/><br/>If the `clientUserId` property is not null then the recipient is embedded. Note that if the `ClientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. |
      | embeddedRecipientStartURL | No | String | This is a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would, but when the document link in the email is clicked the recipient is redirected, through DocuSign, to this URL to complete their actions. When routing to the URL, it is up to the sender's system (the server responding to the URL) to then request a recipient token to launch a signing session.<br/><br/>If the value `SIGN_AT_DOCUSIGN` is used for this node, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that would be launched by any partner.<br/><br/>It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application and DocuSign expects that senders will follow their own process for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets  the `EmbeddedRecipientStartURL` property to `SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) be used to verify the identity of the recipient.<br/><br>If the `clientUserId` property is NOT set and the `embeddedRecipientStartURL` property is set, DocuSign ignores the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the `embeddedRecipientStartURL` property using merge fields. The available merge fields items are: templateId, recipientId, recipientName, recipientEmail, and customFields. The customFields must be part of the recipient or template. The merge fields are enclosed in double brackets.<br/><br/>_Example_:<br/>`http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` |
      | customFields | No | customField |An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the template status but otherwise not used by DocuSign. String `customField` properties have a maximum length of 100 characters. |
      | emailNotification | No | emailNotification | An optional complex type that has information for setting the language for the recipient's email information. It is composed of three elements:<br/><br/>*emailBody*: a string with the email message sent to the recipient.<br/>Maximum Length: 10000 characters.<br/><br/>*emailSubject*: a string with the subject of the email sent to the recipient.<br/>Maximum Length: 100 characters.<br/><br/>*supportedLanguage*: The simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).<br/><br/>**IMPORTANT**: If this is enabled for one recipient, it overrides the Template Subject and `EmailBlurb` property settings. Also, you must set the  `emailNotification` property for all recipients. |
      | excludedDocuments | No | Array of Strings | Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the enforceSignerVisibility property must be set to true for the template to use this.<br/><br/>When the enforceSignerVisibility property is set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an template, unless they are specifically excluded using this setting when an template is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an template is sent. |
      | idCheckConfigurationName | No | String |Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient). This overrides any default authentication setting.<br/><br/>_Example_:<br/> Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as 'ID Check $' and 'SMS Auth $'. To use ID check in an template, the `idCheckConfigurationName` property must be  set to `ID Check $`. To use SMS, it must be set to `SMS Auth $` and you must add phone number information to the `smsAuthentication` node.|
      | iDCheckInformationInput | No | IdCheckInformationInput | This complex element contains input information related to a recipient ID check. It can include the following information.<br/><br/>*addressInformationInput*: Used to set recipient address information and consists of:<br/><br/>*addressInformation*: consists of six elements, with street2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4\. The maximum number of characters in each element are: street1/street2 = 150 characters, city = 50 characters, state = 2 characters, and zip/zipPlus4 = 20 characters.<br/><br/>displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*dobInformationInput*: Used to set recipient date of birth information and consists of:<br/><br/>*dateOfBirth*: Specifies the recipient's date, month and year of birth.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn4InformationInput*: Used to set the last four digits of the recipient's SSN information and consists of:<br/><br/>*ssn4*: Specifies the last four digits of the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.<br/><br/>*receiveInResponse*: A Boolean element that specifies if the information needs to be returned in the response.<br/><br/>*ssn9InformationInput*: Used to set the recipient's SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:<br/><br/><br/><br/>*ssn9*: Specifies the recipient's SSN.<br/><br/>*displayLevelCode*: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. |
      | inheritEmailNotificationConfiguration | No | Boolean | Optional element. If true and the template recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. |
      | note | No | String | A note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.<br/>Maximum Length: 1000 characters. |
      | phoneAuthentication | No | RecipientPhoneAuthentication | Optional element. Contains the elements: <br/><br/> *recipMayProvideNumber*:Boolean. When set to **true** thenrecipient can use whatever phone number they choose to.<br/><br/> *senderProvidedNumbers*: ArrayOfString. A list of phone numbers the recipient can use. <br/><br/>*recordVoicePrint* - Reserved <br/><br/>*validateRecipProvidedNumber* - Reserved| |
      | recipientAttachment | No | Attachment | Reserved |
      | recipientId | No | String | Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document. |
      | requireIdLookup | No | Boolean | When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. |
      | roleName | No* | String | Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients. |
      | routingOrder | Yes | String | This element specifies the routing order of the recipient in the template. |
      | samlAuthentication | No | samlAssertionAttributes | Optional element, account must be set up to use SSO to use this. Contains the name/value pair information for the SAML assertion attributes:<br/><br/>*name*: The name of the SAML assertion attribute.<br/><br/>*value*: The value associated with the named SAML assertion attribute. |
      | smsAuthentication | No | senderProvidedNumbers | Optional element. Contains the element:<br/><br/>*senderProvidedNumbers*: Array that contains a list of phone numbers the recipient can use for SMS text authentication. |
      | socialAuthentications | No | Boolean | Lists the social ID type that can be used for recipient authentication. |
      | templateAccessCodeRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true** and the `TemplateLocked` parameter is set to **true**, the sender must enter an access code. |
      | templateLocked | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**, the sender cannot change any attributes of the recipient. |
      | templateRequired | No | Boolean | Optional element. Used only when working with template recipients. When set to **true**,  the sender may not remove the recipient. |

      ## <a name="agents"></a> Agents Recipient

      This recipient can add name and email information for recipients that appear after the recipient in routing order.

      #### Example Agents layout

      ```
      "agents": [{
       <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The additional parameters for Agents recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="carbonCopies"></a>Carbon Copies Recipient

      Use this type if the recipient should get a copy of the template, but the recipient does not need to sign, initial, date, or add information to any of the documents. This type of recipient can be placed in any order in the recipient list. The recipient receives a copy of the template when the template reaches the recipient's order in the process flow and when the template is completed.

      #### Example Carbon Copies layout

      ```
      "carbonCopies": [{
       <core parameters>
      ```

      The Carbon Copies recipient uses only the core parameters.

      ## <a name="certifiedDeliveries"></a>Certified Deliveries Recipient

      Use this action if the recipient must receive the completed documents for the template to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.

      #### Example Certified Deliveries layout

      ```
      "certifiedDeliveries": [{
      <core parameters>
      }],
      ```
      The Certified Deliveries recipient uses only the core parameters.

      ## <a name="editors"></a>Editors Recipient

      This recipient has the same management and access rights for the template as the sender and can make changes to the template as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor.

      #### Example Editors layout

      ```
      "editors": [{
       <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The additional parameters for Editors recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Editors Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Editors Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="inPerson"></a>In Person Signers Recipient

      Use this type if the signer is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.

      #### Example In Person Signers layout

      ```
      "inPersonSigners": [{
        "hostEmail": "signing.host@company.com",
        "hostName": "Mike Host",
       <core parameters>
        "autoNavigation": false,
        "defaultRecipient": false,
        "signInEachLocation": false,
        "signatureInfo": null,
        "signerEmail": "signer.name@company.com",
        "signerName": "MC Clap Your Hands",
        "tabs": {
          "approveTabs": null,
          "checkboxTabs": null,
          "companyTabs": null,
          "dateSignedTabs": null,
          "dateTabs": null,
          "declineTabs": null,
          "emailTabs": null,
          "templateIdTabs": null,
          "fullNameTabs": null,
          "initialHereTabs": null,
          "listTabs": null,
          "noteTabs": null,
          "numberTabs": null,
          "radioGroupTabs": null,
          "signHereTabs": [{
          "signerAttachmentTabs": null,
          "ssnTabs": null,
          "textTabs": null,
          "titleTabs": null,
          "zipTabs": null
        }
      }],
      ```

      The additional and changed parameters for In Person Signers recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | hostEmail | Yes | Email | Required element for In Person Signers recipient Type.<br/>Maximum Length: 100 characters.<br/><br/>Specifies the email for the signing host. |
      | hostName | Yes | String | Required element for In Person Signers recipient Type.<br/>Maximum Length: 100 characters.<br/><br/>Specifies the email for the signing host.|
      | autoNavigation | No | Boolean | Specifies whether auto navigation is set for the recipient.|
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the template. This option is used with the CreateTemplateFromTemplatesAndForms method. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). |
      | signatureInfo | No | String | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signerEmail | No | String | Optional element. The email address for an InPersonSigner recipient Type.<br/>Maximum Length: 100 characters. |
      | signerName | Yes | String | Required element with recipient type In Person Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of a signer for the template. |
      | tabs | No | Tab | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the See the the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)  for more information about tabs. for more information about tabs. |

      ## <a name="intermediaries"></a>Intermediaries Recipient

      This recipient can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).

      #### Example Intermediaries layout

      ```
      "intermediaries": [{
      <core parameters>
        "canEditRecipientEmails": false,
        "canEditRecipientNames": false
      }],
      ```

      The parameters for Intermediaries recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | canEditRecipientEmails | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this Recipient can change the Recipient's pre-populated Email address. This element is only active if enabled for the account. |
      | canEditRecipientNames | No | Boolean | Optional element. When set to **true**, the Agents Recipient associated with this recipient can change the recipient's pre-populated name (`UserName`). This element is only active if enabled for the account. |

      ## <a name="signers"></a>Signers Recipient

      Use this action if your recipient must sign, initial, date, or add data to form fields on the documents in the template.

      #### Example Signers layout

      ```
      "Signers": [{
      <core paramters>
        "autoNavigation": false,
        "defaultRecipient": false,
        "signInEachLocation": false,
        "signatureInfo": null,
        "tabs": {
          "approveTabs": null,
          "checkboxTabs": null,
          "companyTabs": null,
          "dateSignedTabs": null,
          "dateTabs": null,
          "declineTabs": null,
          "emailTabs": null,
          "templateIdTabs": null,
          "fullNameTabs": null,
          "initialHereTabs": null,
          "listTabs": null,
          "noteTabs": null,
          "numberTabs": null,
          "radioGroupTabs": null,
          "signHereTabs": [{
          "signerAttachmentTabs": null,
          "ssnTabs": null,
          "textTabs": null,
          "titleTabs": null,
          "zipTabs": null
        }
        "deliveryMethod":"",
        "deliveredDateTime":"String Content",
        "signedDateTime":"String Content",
        "offlineAttributes":{
          "deviceName":"String Content",
          "deviceModel":"String Content",
          "gpsLatitude":"String Content",
          "gpsLongitude":"String Content",
          "accountEsignId":"String Content"
        }
      }],
      ```

      The additional parameters for Signers recipient are shown below:

      | Name | Required? | Schema Type | Description |
      | --- | --- | --- | --- |
      | autoNavigation | No | Boolean | Specifies whether auto navigation is set for the recipient.|
      | defaultRecipient | No | Boolean | When set to **true**, this is the default recipient for the template. This option is used with the CreateTemplateFromTemplatesAndForms method. |
      | signInEachLocation | No | Boolean | When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once). |
      | signatureInfo | No | String | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Allows the sender to pre-specify the signature name, signature initials, and signature font used in the signature stamp for the recipient. |
      | signerEmail | No | String | Optional element. The email address for an InPersonSigner recipient Type.<br/>Maximum Length: 100 characters. |
      | signerName | Yes | String | Required element with recipient type In Person Signers.<br/>Maximum Length: 100 characters.<br/><br/>The full legal name of a signer for the template. |
      | tabs | No | Tab | Optional element only used with recipient types In Person Signers and Signers.<br/><br/>Specifies the Tabs associated with the recipient. See the See the [EnvelopeRecipientTabs resource](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/)  for more information about tabs. section for more information about tabs. |
      | deliveryMethod | No | String | Reserved: For DocuSign use only.|
      | deliveredDateTime | No | DateTime | Reserved: For DocuSign use only. |
      | signedDateTime | No | DateTime | Reserved: For DocuSign use only. |
      | offlineAttributes | No | &nbsp; | Reserved: For DocuSign use only.|
    name: TemplateRecipients
  - description: |-
      The TemplateBulkRecipients resource provide methods that allow you manage the bulk recipient file for an template.

      The bulk recipient CSV (Comma Separated Value) file contains the list of recipient names and email addresses that you can add to an template to send the same document to a large number of recipients.
       
      The required and optional information that can be included the file is described in the BulkEnvelope: updateRecipients method
    name: TemplateBulkRecipients
  - description: |-
      The TemplateCustomFields resource provides methods that allow you manage custom fields in an template. 

      Custom fields can be used in the templates for your account to record information about the template, help search for templates and track information. The template custom fields are shown in the Template Settings section when a user is creating an template in the DocuSign member console. The template custom fields are not seen by the template recipients.

      There are two types of custom fields:

      - `text`: Enables the sender to enter the value for the field. 
      - `list`: Enables the sender to select the value of the field from a predetermined list.
    name: TemplateCustomFields
  - description: |-
      The TemplateDocumentFields resource provides methods that allow you to manage custom fields on a document.

      You can create custom versions of standard fields that combine of field properties, such as font type or size, or a validation setting. 

      Note: Some advanced features and options are supported only in certain DocuSign plans. Your account plan might not support some options discussed in this help topic. For more information about which options are available for your account, check your account plan or contact your Account Manager.
    name: TemplateDocumentFields
  - description: |
      <!-- resources aren't rendered the same way
           as other pages. This is a little hack to
           make the headings work better -->
      <style>
      h1, h2, h3 {
        margin-top: 1em;
      }
      </style>

      The TemplateDocuments resource provides methods
      that manage documents in a template.
      You can:
      * Add one or more documents to the template
      * Retrieve one or more documents from the template
      * Delete documents from the template

      All of the methods associated with this resource
      operate on an existing template.
      Before you can add documents
      to a template,
      you must first create it
      with the [Templates:: Create][templatescreate] method.

      [templatescreate]: https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create/
    name: TemplateDocuments
  - description: |-
      The TemplateLocks resource provides methods that allow you to
      manage locks on a template.

      To prevent users from changing a template while another user is
      modifying it, you can lock the template and set the time until
      the lock expires.

      For example, you would use the following flow:

      1. Lock the template.
      2. Make changes to template.
      3. Delete the template lock and save the changes. If the template has a password, you must supply the template password to save the changes.

      **Note**: To use template locks, the user must have envelope locking capability enabled.
    name: TemplateLocks
  - description: |-
      The Template resource provides methods that allow you to manipulate and monitor templates. 

      Once you have authenticated the user you can use the Templates: createTemplate method to create a template. You can call the TemplateDocuments: update or TemplateDocuments: updateList method to add more documents.

      If you have a template that you have previously saved, you can modify the subject and message, send it, void it, or purge it from the DocuSign system using the Template: update method.

      In addition to receiving notifications, you can monitor the status of the templates using the following methods:

      * Template: getTemplate - Gets the status of a template. 
      * Template: listStatus - Gets the status for a set of templates.
      * Template: listStatusChanges - Gets status change information for one or more templates. 

      If you need to delete a page from a document in a template, use the Template: deleteDocumentPage method.

      The resource also includes a number of methods that allow you to retrieve and set the initials and signature for certain types of recipients on the document.
    name: Templates
  - description: |
      <!-- resources aren't rendered the same way
           as other pages. This is a little hack to
           make the headings work better -->
      <style>
      h1, h2, h3 {
        margin-top: 1em;
      }
      </style>

      The TemplateRecipientTabs resource provides methods that let you
      add,
      update,
      and delete tabs
      from an envelope.
      Tabs are associated with a specific recipient
      in an envelope
      and are only used by the recipient types
      In Person Signers and Signers. 


      ## Tab Types

      This table lists the available tab types.

      <br>


      | Tab Type              | Description |
      | :-------              | :---------- |
      | Approve Tab           | Place this tab on the document if you want the recipient to approve documents in an envelope without placing a signature or initials on the document. If the recipient clicks the Approve tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document for the approval, but it is recorded as a signature in the envelope history. |
      | Checkbox Tab          | Place this tab on the document in a location where the recipient can select a yes/no (on/off) type option. |
      | Company Tab           | Place this tab on the document where you want the recipient's company name to appear. |
      | Date Signed Tab       | Place this tab on the document where you want the date the recipient signed the document to appear. |
      | Date Tab              | Place this tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format. |
      | Decline Tab           | Place this tab on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tab during the signing process, the envelope is voided. |
      | Email Address Tab     | Place this tab on a document where you want the recipient's email, as entered in the recipient information, to appear. |
      | Email Tab             | This is a single-line field that accepts all characters. |
      | Envelope ID Tab       | Place this tab on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab. It is for informational purposes only. |
      | First Name Tab        | Place this tab on a document where you want the recipient's first name to appear. This tab splits the recipient's name (as entered in the recipient information) into sections based on spaces and uses the first section as the first name. |
      | Formula Tab           | This tab is used to add a calculated field to a document. Envelope recipients cannot directly enter information into the tab. The formula tab calculates and displays a new value when changes are made to the reference tab values. The reference tab information and calculation operations are entered in the "formula" element. See the Using the Calculated Fields Feature quick start guide or DocuSign Service User Guide for more information about formulas.  |
      | Full Name Tab         | Place this tab on the document where you want the recipient's full name to appear. |
      | Initial Here Tab      | Place this tab where the recipient must initial the document. This tab can be set to be optional.  |
      | Last Name Tab         | Place this tab on a document where you want the recipient's last name to appear. This tab splits the recipient's name (as entered in the recipient information) into sections based on spaces and uses the last section as the last name. |
      | List Tab              | This tab has a list of options that a recipient can select. The `listItems` parameter is used to set the options that can be selected.  |
      | Note Tab              | Place this tab on the document where you want to add a note for the recipient on a document. |
      | Number Tab            | This tab is a field where the recipient can enter numbers and decimal (.) points.  |
      | Radio Group Tab       | This group tab is used to place radio buttons on a document. The `radios` parameter is used to add and place the radio buttons associated with the group. Only one radio button can be selected in a group.  |
      | Sign Here Tab         | Place this tab where the recipient must sign the document. This tab can be set to be optional.  |
      | Signer Attachment Tab | The signer attachment is where the recipient initiates the process of adding supporting documents to an envelope. |
      | SSN Tab               | This tab is a single-line field where the recipient can enter numbers. A Social Security Number can be typed with or without dashes. |
      | Text Tab              | This tab is a field where the recipient can enter any type of characters.  |
      | Title Tab             | Place this tab on the document where you want the recipient's title to appear. |
      | Zip Tab               | This tab is a single-line field where the recipient can enter numbers. |


      ## Using Custom Tabs in Envelopes and Templates 

      Custom Tabs can be added to envelopes and templates
      by setting the `customTabId` property
      when creating an envelope or template recipient
      or when adding a new tab for an existing recipient.
      The custom tab must be added as the correct tab type.
      For example if the custom tab type is text, it cannot be used as a number tab.

      When the `customTabId` property is set,
      the new tab inherits all the custom tab properties.
      Required information that is not included in the custom tab,
      such as document ID and page ID, must be included when adding the tab.
      If the custom tab does not have anchor settings, the X and Y positions must be included.

      After the tab is created,
      it is treated as any other tab for updating or deleting. 

      ## Anchoring Tabs

      The tab anchoring option
      allows you to send documents for signature
      that do not have a fixed layout or format.
      In these documents you might not know
      the absolute location of the tabs
      when you design your API client application because the tabs must move with text.
      As an alternative to sending X and Y coordinates for tabs,
      the DocuSign Service can derive an anchor location for the tab
      by correlating anchor information to data within the document.

      When the DocuSign Service receives a request that contains tabs
      with anchor information,
      it searches the document for instances of the `anchorString` property.
      When found,
      it places a tab of the specified type for the designated recipient.
      Tab positions are established by setting offsets for the tab.

      When you apply tabs to the document,
      DocuSign does not remove or replace the text in the `anchorString` property. You can hide codified anchors by using the same font color as the background of the document. So the anchor can be used by DocuSign processes and it will not be visible on the document.

      To use an anchoring option:

      1. Identify the location in the document by text string. You can use a pre-existing text string or add a new one.
      For best performance DocuSign recommends using single word anchor strings when possible, especially when there are a large number of pages in the envelope. 
      For example, you might want to add a Sign Here tab to the "Borrower's Signature" lines in a document, but that phrase might occur in places in the document where you don't want to tab to appear. In this case, you could add the text "BorrowerSignHere" in white font color (so that isn't visible in the document) to all the places you want Sign Here tabs to appear and use "BorrowerSignHere" as the anchor string. 
      1. Reference the anchor through the `anchorString` property of the tab.
      1. Determine the offset from the anchor string location to where the tab should be placed. 

      Setting a positive value in the `anchorXOffset` property moves the tab right on the page and positive values in the  `anchorYoffset` prove moves the tab down the page. The `anchorUnits` property specifies the units used for the offsets.
      For Sign Here and Initial Here tabs the bottom-left of the anchor string is equivalent to position (0,0), and the bottom-left of the tab graphic is placed relative to that.
      For all other tabs the bottom-left of the anchor string is equivalent to position (0,0), and the top-left of the tab graphic is placed relative to that.
      DocuSign does not currently provide tools to derive the offset values. Determination of the proper offset will likely require some trial-and-error.

      ### Rules for working with anchor tags

      When anchor tabs are used, all documents in the envelope are searched for the `anchorString` property.

      * You set the text of the anchor string in the `anchorString` property. DocuSign tabs are created for each instance of the `anchorString` property within the document, so special care must be taken to establish unique anchor strings that do not result in unintentional tabs.
      * You cannot use the same anchored tab for different recipients for the same document.
      * The DocuSign system cannot search for text that is embedded in an image when checking for anchor strings.
      * X or Y offsets supplied for a tab apply to all instances of the tab in the document. To use different offsets at different locations in the document for the same recipient, create multiple, unique anchor tabs.
      * If the Y offset value of an anchor string would force a tab outside of the page boundaries, the tag is placed at the page boundary. If the X offset value places a tab outside of the page boundaries, the error message `Invalid_User_Offset` is sent. The error message includes the X offset that resulted in the error.
      * The system does not support an anchor string embedded in the form of a PDF X-object in the document.
      * The system does not re-flow the text that surrounds the anchor tabs. It is the responsibility of the document author to provide sufficient white space to contain the potential width of the ultimate tab value.

      ### Tips and Tricks

      The following are tips for effective use of anchor tags:
      * In order to avoid unintentional conflicts between text contained in an `anchorString` property and the text that naturally exists in documents, establish a codified syntax for the anchor string text that is unlikely to appear elsewhere in a document.
      * Develop an extensible and consistent syntax that can be used across multiple document types.
      * Especially for documents that have variable numbers of tabs or signers, author the source document to include hidden anchor tabs for all potential signers/permutations. Then, control the tabs that are actually placed by including/excluding the anchor tabs in the request. This approach allows a single document to be used for all use cases instead of maintaining separate documents for each scenario.

      ## Automatically Populating Tabs

      If you want similar tab types
      to automatically populate with the same data,
      you must follow these guidelines:

      * Each `tabLabel` entry must have the characters
        `\\*` in front of the label.
        If you omit the `\\*` prefix,
        only the first occurrence of the tab is populated.

        When automatically populating tabs,
        the `tabLabel` must not contain any spaces.
        In the JSON example below,
        the Text tabs  properties `StudentLastName` and `StudentFirstName`
        will be auto-populated as specified ("Doe" and "John")
        each place they appear throughout the envelope.

        ```
        "tabs": {
          "textTabs": [
          {
            "tabLabel": "\\*StudentLastName",
            "value": "Doe"
          },
          {
            "tabLabel": "\\*StudentFirstName",
            "value": "John"
          }]
        }
        ```

      * Each occurrence of the tab must have identical properties.

        For example, suppose there are two Text tabs in a document,
        each with `tabLabel` set to `Name`.
        If one tab has the `bold` property set to **true**,
        and the other has the `bold` property set to **false**,
        only the first one will be populated.
        In order to automatically populate both occurrences
        of the `Name` Text tabs,
        the `bold` property must be set to the same value for both tabs.
    name: TemplateRecipientTabs
  - description: |
      The TemplateViews resource
      provides a method that returns a URL
      that you can embed in your application
      to generate a template view that uses the DocuSign UI.

      One template view is available:

      * Edit View: The DocuSign UI for editing a template.

      This resource is related to the [EnvelopeViews][envelopeviews] resource.
      Both resources enable you to embed the DocuSign UI into your application.


      [envelopeviews]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeViews/
    name: TemplateViews
  - description: |-
      The UserCustomSettings resource provides methods that allow you to manage the custom settings for a user.

      Custom settings are a flexible way to store and retrieve custom user information that can be used in your own system.

      There is a limit on the size for all the custom user settings for a single user. All the custom user settings for a single user is limited to 4,000 characters, which includes the xml and json structure for the settings.
    name: UserCustomSettings
  - description: The UserProfiles resource provides methods that allow you to manage a user's profile.
    name: UserProfiles
  - description: |-
      The Users resource provides methods that enable you to manage users for an account.

      The following User methods do not use the `title` property in the Users object:

      - create
      - delete
      - deleteProfileImage
      - get
      - getProfileImage
      - getSettings
      - list
      - update
      - updateList
      - updateProfileImag
      - updateSettings

      Instead, you can retrieve and set the user's job title by using the UserProfiles:Get and UserProfiles:Update methods. For more information, see [UserProfiles](https://developers.docusign.com/docs/esign-rest-api/reference/Users/UserProfiles).
    name: Users
  - description: The UserSignatures resource provides methods that allow you manage the  intials and signature images for a user.
    name: UserSignatures
  - description: |+
      DocuSign eSignature includes a contacts list (also referred to as an address book) to help make sending envelopes even easier. When you send an envelope, the recipients' names and email addresses are automatically added to your contacts list. You can use the contacts list to quickly add recipients to the envelopes you send. The `Contacts` resource provides methods that enable you to manage your contacts.

    name: Contacts
  - description: |
      The EnvelopeAttachments resource provides methods that allow you to manage attachments.
    name: EnvelopeAttachments
  - description: |
      An account permission profile is assigned to a group of users, enabling you to set permissions for all of the users in the group at the same time. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. 

      DocuSign offers the following account permission profiles:

      - DocuSign Viewer
      - DocuSign Sender
      - Account Administrator

      You can also create your own custom account permission profiles.
    name: AccountPermissionProfiles
  - description: |
      PowerForms enable you to create self-service documents for signature. A PowerForm is an envelope initiated from a URL that you make available for signers to complete. You can either add a PowerForm to your website or email the URL to recipients. DocuSign saves the data that recipients enter so  you can easily integrate it with your other applications.

      For more information, see [Using PowerForms](https://support.docusign.com/en/guides/ndse-user-guide-using-powerforms).

      **Note**: PowerForms are available only for DocuSign Enterprise accounts.


      ### Errors

      PowerForm methods return the following 404 errors:

      - `PowerForms_Recipient_Denied_Documents`: The recipient is denied access to the documents.
      - `PowerForms_DigitalCerts_Shared_Tabs_Not_Allowed`: Shared tags are not allowed because a digital certificate is required
      for a signer.
      - `PowerForms_DigitalCerts_Free_Form_Tabs_Not_Allowed`: Signers that are required to use a digital certificate must have at
      least one required, non-conditional signature or initials tab.
      - `PowerForms_DigitalCerts_Multiple_Recipients_Routing_Order`: Signers that are required to use a digital certificate must be the
      only recipient in a routing order. Edit the routing order or remove the digital certificate requirement.
      - `PowerForms_DigitalCerts_Markup_Not_Allowed`: Document markup is not allowed because a digital certificate is
      required for a signer.
      - `PowerForms_Incomplete_Recipient`: The recipient's username, email, or role is not set.
      - `PowerForms_PowerFormId_Required`: A `powerFormId` is required.
      - `PowerForms_PowerFormId_Mismatch`: A `powerFormId` mismatch has occurred.
    name: PowerForms
  - description: |
      The PowerFormData resource provides a method for accessing PowerForm data.
    name: PowerFormData
  - description: |
      The AccountTabSettings resource provides methods that allow you to manage
      tab settings for an account.
    name: AccountTabSettings
  - description: |
      The ENoteConfigurations resource provides methods that allow you to manage
      information for the eNote eOriginal integration.
    name: ENoteConfigurations
  - description: |
      The WorkspaceItems resource provides methods that enable you to manage
      workspace items.
    name: WorkspaceItems
  - description: |-
      A workspace is a collaborative space for sharing documents and managing workflows. A workspace has a single owner who must be a DocuSign user. The owner can invite others to the workspace as collaborators. Individuals who are not DocuSign users must create a DocuSign account to join a workspace as a collaborator.
       
      You can create an envelope directly from a workspace.

      Workspaces store the following information:

      - **Files**: Files uploaded to a workspace for storage or reuse.
      - **Documents**: A document is a component of a transaction, template, or workspace. When a file is added to a transaction, template, or workspace, it is copied as a document. Each document in a workspace has a single owner.
      - **Templates**: A set of documents that you can use to create a transaction or a workspace.
      - **Transactions**: A transaction is a series of workflow events related to one or more documents. These events route the documents to one or more individuals for the purposes of doing business. Each transaction has a single owner (the sender).

      **Note**: Documents in a template are not individually listed as files.
    name: Workspaces
  - description: |
      A chunked upload is a temporary file that you upload in parts and stage at DocuSign, then refer to as the content for other API calls. For example, you might use it for document content when assembling an envelope or template. 

      A chunked upload is linked to the DocuSign account member who initiated the API call. This user is the only user who is able to reference the chunked upload.

      A ChunkedUpload is intended to be an area for briefly staging data for use with other DocuSign API calls. The ChunkedUpload API endpoints do not provide an action to download the ChunkedUpload's content.

      The typical flow for using a chunked upload involves the following steps:

      1) Initiate the chunked upload with content representing part 0.

      2) Add more parts to the chunked upload until you have transmitted the entirety of the content.

      3) Commit the chunked upload, preparing it for use with other API calls.

      4) Assemble a DocuSign envelope with a document that includes a reference to the chunked upload as the content.

      5) Continue with envelope-related processes.

      **Note**: You must fully upload and use a chunked upload within 20 minutes of initializing it.

      After the chunked upload has been correctly referenced within another API call, it becomes unavailable for any further use and is promptly removed from the system.

      Chunked uploads have the following limits, which are configured per DocuSign environment, account, or integrator:

      - The maximum number of all of a member's unexpired, unconsumed ChunkedUploads. The default value is 10. 
      - The maximum total size of all of a member's unexpired, unconsumed  ChunkedUploads. The default value is 1 GB. 
      - The amount of time that a chunked upload is active after you initialize it. The default value is 20 minutes.
    name: ChunkedUploads
  - description: The EnvelopeFormData resource provides a method for downloading the data that users have entered into a form associated with an envelope.
    name: EnvelopeFormData
  - description: |
      The Envelope Document Visibility resource provides methods for managing document visibility by recipient.
    name: EnvelopeDocumentVisibility
  - description: |
      The Template Document Visibility resource provides methods for managing template document visibility by recipient.
    name: TemplateDocumentVisibility
  - description: The AccountPasswordRules resource provides methods that allow you to obtain and update account password rules, as well as membership and account rules.
    name: AccountPasswordRules
  - description: The AccountWatermarks resource provides methods that allow you to obtain, preview and update watermark information.
    name: AccountWatermarks
  - description: ""
    name: PaymentGatewayAccounts
  - description: ""
    name: NotaryJournals
  - description: |-
      The DocuSign Identity Verification process requires a signer to submit an image of their valid government ID and wait for the image to be uploaded and verified before they can access a document. 

      Identity Verification supports government photo IDs and European eIDs, analyzing the document security features and matching the name on the agreement against the name on the ID. After a successful verification, the signer can view the agreement and sign as usual.

      To use Identity Verification, the [DocuSign Identity Verification](https://www.docusign.com/products/identify) product must be enabled for your account.

      For more information, see [Can I see (a photo of) your ID? Digital verification of real-world IDs](https://www.docusign.com/blog/can-i-see-a-photo-of-your-id-digital-verification-of-real-world-ids/).
    name: IdentityVerifications
  - description: ""
    name: EnvelopeDocumentHtmlDefinitions
  - description: |-
      **Note**: Responsive Signing is disabled by default. To use this functionality, an account administrator must switch the account setting `enableResponsiveSigning` to **true**. 
      Also note that Smart Sections (creating a signable HTML document that uses collapsible sections and rotating tables) are premium features. To request them, contact your DocuSign account manager.
    name: DocumentResponsiveHtmlPreview
  - description: ""
    name: EnvelopeHtmlDefinitions
  - description: |-
      **Note**: Responsive Signing is disabled by default. To use this functionality, an account administrator must switch the account setting `enableResponsiveSigning` to **true**. 
      Also note that Smart Sections (creating a signable HTML document that uses collapsible sections and rotating tables) are premium features. To request them, contact your DocuSign account manager.
    name: ResponsiveHtmlPreview
  - description: |-
      **Note**: Responsive Signing is disabled by default. To use this functionality, an account administrator must switch the account setting `enableResponsiveSigning` to **true**. 
      Also note that Smart Sections (creating a signable HTML document that uses collapsible sections and rotating tables) are premium features. To request them, contact your DocuSign account manager.
    name: TemplateDocumentResponsiveHtmlPreview
  - description: |-
      **Note**: Responsive Signing is disabled by default. To use this functionality, an account administrator must switch the account setting `enableResponsiveSigning` to **true**. 
      Also note that Smart Sections (creating a signable HTML document that uses collapsible sections and rotating tables) are premium features. To request them, contact your DocuSign account manager.
    name: TemplateResponsiveHtmlPreview
  - description: ""
    name: TemplateDocumentHtmlDefinitions
  - description: ""
    name: TemplateHtmlDefinitions
  - description: |-
      Envelope transfer rules enable administrators to transfer envelopes and templates from user to another. For example, you might do this when an employee leaves the company. To transfer ownership of envelopes and templates, the **Transfer Custody** feature must be enabled for your account.

      For more information about this functionality, see [Transfer Envelopes and Templates](https://support.docusign.com/en/guides/ndse-admin-guide-transfer-envelopes-templates).
    name: EnvelopeTransferRules
  - description: DocuSign eSignature provides email notifications to senders and recipients for many different scenarios. By default, all notification options are turned on. Notification preferences give you control over the communications that you receive. For more information, see [Manage Notifications](https://support.docusign.com/en/guides/ndse-user-guide-manage-notifications).
    name: NotificationDefaults
  - description: |
      You can use bulk send lists for anything that you need to send to a large number of recipients on a
      recurring basis, such as:

      - Compliance letters (privacy, security, and ethics consent forms)
      - New hire onboarding documents (benefits, transit, and parking information and payroll forms)
      - Other Human Resources documents
      - Event-related forms

      The API creates a separate copy of the envelope for each recipient that you specify. Each instance of the envelope is called a
      `BulkCopy`. You can use a bulk send list to send up to 1,000 copies per call.

      After you create a bulk send list, it persists and can be reused and edited any number of times.

      ## Customizing Bulk Send Lists

      You can customize individual copies of the envelope. For example, you can customize the email notification and
      language and add personalized notes.

      For example, if one recipient prefers to access their DocuSign envelopes behind an access code, and another prefers her
      email in French, you can implement those customizations.

      ## Using Bulk Send

      The bulk send feature uses the following flow:

      1. Create a draft envelope by calling the [Envelopes::createEnvelope][createEnvelope] method. Add placeholders for bulk send information to the envelope, including:
          - Email address placeholders.
          - Tab placeholders. Assign `tabLabels` to these placeholders that will make sense for matching the tabs to values in the bulk send list. For example, if you're sending a field trip permission slip to parents, you might create a placeholder text tab called `StudentName` that will you will then populate with the names of individual students in the bulk send list. You can use the following types of text tabs, radio group tabs, and list tabs to match bulk send recipients to an envelope.
          - Any envelope custom fields. These fields must match the envelope custom fields in envelope copies in the bulk send list.
      2. Create a bulk send list by using the [BulkSend::createBulkSendList][create_list] method.
      3. (Optional) Test compatibility. Use the [BulkSend::createBulkSendTestRequest][create_test] method to test your bulk
         send list for compatibility with the envelope or template that you want to send. For example, a template that has
         three roles is not compatible with a bulk send list that has only two recipients. For this reason, you might want to
         test compatibility first. A successful test result returns the Boolean value `true`. An unsuccessful test returns a
         JSON response that contains information about the errors that occurred.
      4. Send your envelope to the list by using the [BulkSend::createBulkSendRequest][create_request] method. The response
         returns a `batchId` that you can use for tracking and other purposes.

      The API creates and queues your envelopes asynchronously behind the scenes. You can get the status of the batch by
      using the [BulkEnvelopes_GetBulkEnvelopesBatchId][getbulkenv] method, passing in the `batchId`.

      To get the envelopes generated for the `batchId`, use the [Envelopes:listStatusChanges][GetEnvelopes] method, passing in
      a `custom_field` named `BulkBatchId` where the value is the `batchId` that was returned in step 4.

      Example:

      `custom_field=BulkBatchId={{batchId}}`

      **Bulk Send Requirements and Limitations**

      * Bulk send must be enabled for your account (in the `accountSettingsInformation` object, `enableBulkRecipient` must be set to **true**) and for the user sending the envelopes (the `allowBulkRecipients` property in `userSettings` must be set to **true**).
      * You can include up to 1,000 bulk recipients in each request.
      * When you send an envelope with bulk recipients, envelopes are added to a bulk recipient queue and sent in a metered fashion. An account can have a total of 2,000 total envelopes in the queue at a time.  If this limit is reached, an error message displays to the sender. If you receive this error, wait and resend the envelope at a later time.

      If you frequently run into queue limits, contact your account manager to discuss modifying the queue limits for your account.

      [create_list]:    https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendList/
      [create_test]:    https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendTestRequest/
      [create_request]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest/
      [getbulkenv]:     https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/getBulkSendLists/
      [GetEnvelopes]:   https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges/

      [createEnvelope]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeCustomFields/create/


      For more information about using bulk send, see [Bulk Sending Envelopes](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/bulk-send/).
    name: BulkSend
  - description: |-
      You can configure automatic archiving of emails sent from all of your DocuSign accounts.

      For more information, see [Email Archive Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-email-archive-configuration).

      **Note**: This feature is only available for certain account plans and must be enabled by DocuSign.
    name: BCCEmailArchive
  - description: ""
    name: TabsBlob
  - description: |-
      The comments resource provides a method that enables you to download a PDF file containing all of the comments that recipients and the sender have added to the documents in an envelope.

      Comments are disabled by default. To use the comments feature, an account administrator must enable comments on the account (in the `accountSettingsInformation` object, set the `enableSigningExtensionComments` property to **true**). 

      For more information, see [Comments Settings](https://support.docusign.com/en/guides/ndse-admin-guide-comments-settings).
    name: Comments
  - description: ""
    name: FavoriteTemplates
  - description: |+
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.
      Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
      to see which jurisdictions are supported.

    name: Notary
  - description: Creating, updating, and deleting notary jurisdiction objects.
    name: NotaryJurisdiction
  - description: ""
    name: EnvelopeWorkflowDefinition
  - description: ""
    name: Reports
  - description: ""
    name: AccountSignatures
  - description: ""
    name: ApplianceInfo
  - description: ""
    name: ConnectSecret
paths:
  /service_information:
    get:
      deprecated: false
      description: |-
        Retrieves the available REST API versions.

        DocuSign Production system: https://www.docusign.net/restapi/service_information
        DocuSign Demo system: https://demo.docusign.net/restapi/service_information

        You do not need an integrator key to view the REST API versions and resources.
      operationId: ServiceInformation_GetServiceInformation
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/serviceInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the available REST API versions.
      tags:
        - Services
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getService
      x-ds-service: Diagnostics
    parameters: []
  /v2.1:
    get:
      deprecated: false
      description: |-
        Retrieves the base resources available for the DocuSign REST APIs.

        You do not need an integrator key to view the REST API versions and resources.

        Example: https://demo.docusign.net/restapi/v2 lists all of the base resources available in version 2 of the REST API on the DocuSign Demo system.

        To view descriptions and samples of the service operations for all versions, remove the version number and add /help to the URL.

        Example: https://demo.docusign.net/restapi/help lists the REST API operations on the DocuSign Demo system with XML and JSON request and response samples.
      operationId: ServiceInformation_GetResourceInformation
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/resourceInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Lists resources for REST version specified
      tags:
        - Resources
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getResources
      x-ds-service: Diagnostics
    parameters: []
  /v2.1/accounts:
    parameters: []
    post:
      deprecated: false
      description: |
        Creates new DocuSign accounts.
        You can use this method to create
        a single account
        or up to 100 accounts at a time.

        **Note**:  This method is restricted to partner integrations. You must work with DocuSign Professional Services or DocuSign Business Development, who will provide you with the Distributor Code and Distributor Password that you need to include in the request body.

        You must include the `X-DocuSign-Authentication`  header.

        Example:

        `<DocuSignCredentials><IntegratorKey>{{integratorKey}}</IntegratorKey></DocuSignCredentials>`

        When creating a single account,
        the body of the request is a
        [`newAccountRequest`][newAccountRequest]
        object.

        Example:

        ```
        {
        	"newAccountRequest": [
        		{
        			"accountName":"Test Account",
        			"distributorCode":"MY_DIST_CODE",
        			"distributorPassword":"MY_DIST_PWD",
        			"initialUser":{
        				"email":"user@emaildomain.com",
        				"firstName":"John",
        				"middleName": "Harry",
        				"lastName":"Doe",
        				"suffixName": "",
        				"userName": "John Doe",
        				"jobTitle": "Engineer",
        				"company": "Test Company"
        			},
        			"addressInformation":{
        				"address1": "1234 Main Street",
        				"address2": "Suite 100",
        				"city": "Seattle",
        				"state": "WA",
        				"postalCode": "98101",
        				"country": "US",
        				"phone": "1234567890",
        				"fax": "1234567891"
        			},
        			"planInformation":{
        				"planId":"37085696-xxxx-xxxx-xxxx-7ea067752959"
        			},
        			"referralInformation":{
        				"includedSeats": "1",
        				"referralCode": "code",
        				"referrerName": "name"
        			}
        		}
        	]
        }

        ```
        If the request succeeds,
        it returns a
        201 (Created) HTTP response code.
        The response returns the new account ID, password, and the default user
        information for each newly created account.


        When creating multiple accounts,
        the body of the request is a
        `newAccountRequests`
        object,
        which contains one or more 
        [`newAccountDefinition`][newAccountDefinition]
        objects.
        You can create up to 100 new accounts
        at a time this way.

        The body for a multi-account
        creation request
        looks like this in JSON:

        ```
        {
          "newAccountRequests": [
            {
              "accountName": "accountone",
              . . .
            },
            {
              "accountName": "accounttwo",
              . . .
            }
          ]
        }
        ```

        A multi-account request
        looks like this in XML:

        ```
        <newAccountsDefinition xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.docusign.com/restapi">
          <newAccountRequests>
            <newAccountDefinition>
              . . .
            </newAccountDefinition>
            <newAccountDefinition>
              . . .
            </newAccountDefinition>
          </newAccountRequests>
        </newAccountsDefinition>
        ```

        A multi-account creation request
        may succeed (report a 201 code)
        even if some accounts could not be created.
        In this case, the `errorDetails` property
        in the response contains specific information
        about the failure.



        [newAccountDefinition]: #/definitions/newAccountDefinition
        [nameValue]: #/definitions/nameValue
        [newAccountRequest]: #/definitions/newAccountRequest
      operationId: Accounts_PostAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newAccountDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/newAccountSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates new accounts.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: create
      x-ds-service: Accounts
  /v2.1/accounts/provisioning:
    get:
      deprecated: false
      description: Retrieves the account provisioning information for the account.
      operationId: Accounts_GetProvisioning
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/provisioningInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the account provisioning information for the account.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: getProvisioning
      x-ds-methodname: getProvisioning
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}":
    delete:
      deprecated: false
      description: This closes the specified account. You must be an account admin to close your account. Once closed, an account must be reopened by DocuSign.
      operationId: Accounts_DeleteAccount
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the specified account.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: delete
      x-ds-service: Accounts
    get:
      deprecated: false
      description: |-
        Retrieves the account information for the specified account.

        **Response**
        The `canUpgrade` property contains is a Boolean that indicates whether the account can be upgraded through the API. 
      operationId: Accounts_GetAccount
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            When set to **true**, includes account settings
            in the response. If you omit this parameter, the default behavior is **false**.
          in: query
          name: include_account_settings
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the account information for the specified account.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: GetAccountInformation
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/billing_charges":
    get:
      deprecated: false
      description: |-
        Retrieves the list of recurring and usage charges for the account. This can be used to determine the charge structure and usage of charge plan items. 

        Privileges required: account administrator 
      operationId: BillingCharges_GetAccountBillingCharges
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            Specifies which billing charges to return.
            Valid values are:

            * envelopes
            * seats
          in: query
          name: include_charges
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingChargeResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets list of recurring and usage charges for the account.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: getBillingCharges
      x-ds-methodname: getBillingCharges
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/billing_invoices":
    get:
      deprecated: false
      description: |-
        Retrieves a list of invoices for the account. If the from date or to date queries are not specified, the response returns invoices for the last 365 days.

        Privileges required: account administrator 
      operationId: BillingInvoices_GetBillingInvoices
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: Specifies the date/time of the earliest invoice in the account to retrieve.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: Specifies the date/time of the latest invoice in the account to retrieve.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingInvoicesResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get a List of Billing Invoices
      tags:
        - Invoices
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listInvoices
      x-ds-service: Billing
    parameters: []
  "/v2.1/accounts/{accountId}/billing_invoices/{invoiceId}":
    get:
      deprecated: false
      description: |-
        Retrieves the specified invoice.

        **Note**: If the `pdfAvailable` property in the response is set to *true*, you can download a PDF version of the invoice. To download the PDF, make the call again and change the value of the `Accept` property in the header to `Accept: application/pdf`.

        Privileges required: account administrator

        The response returns a list of charges and information about the charges. Quantities are usually shown as 'unlimited' or an integer. Amounts are shown in the currency set for the account.

        **Response**
        The following table provides a description of the different `chargeName` property values. The information will grow as more chargeable items are added to the system.

        | chargeName | Description |
        | --- | --- |
        | id_check | ID Check Charge |
        | in_person_signing | In Person Signing charge |
        | envelopes Included | Sent Envelopes for the account |
        | age_verify | Age verification check |
        | ofac | OFAC Check |
        | id_confirm | ID confirmation check |
        | student_authentication | STAN PIN authentication check |
        | wet_sign_fax | Pages for returning signed documents by fax |
        | attachment_fax | Pages for returning attachments by fax |
        | phone_authentication | Phone authentication charge |
        | powerforms | PowerForm envelopes sent |
        | signer_payments | Payment processing charge |
        | outbound_fax | Send by fax charge |
        | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
        | sms_authentications | SMS authentication charge |
        | saml_authentications | SAML authentication charge |
        | express_signer_certificate | DocuSign Express Certificate charge |
        | personal_signer_certificate | Personal Signer Certificate charge |
        | safe_certificate | SAFE BioPharma Signer Certificate charge |
        | seats | Included active seats charge |
        | open_trust_certificate | OpenTrust Signer Certificate charge |
      operationId: BillingInvoices_GetBillingInvoice
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: path
          name: invoiceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingInvoice"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves a billing invoice.
      tags:
        - Invoices
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getInvoice
      x-ds-service: Billing
    parameters: []
  "/v2.1/accounts/{accountId}/billing_invoices_past_due":
    get:
      deprecated: false
      description: |-
        Returns a list past due invoices for the account and notes if payment can be made through the REST API. 

        Privileges Required: account administrator
      operationId: BillingInvoices_GetBillingInvoicesPastDue
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingInvoicesSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get a list of past due invoices.
      tags:
        - Invoices
      x-ds-in-sdk: true
      x-ds-method: listPastDue
      x-ds-methodname: listInvoicesPastDue
      x-ds-service: Billing
    parameters: []
  "/v2.1/accounts/{accountId}/billing_payments":
    get:
      deprecated: false
      description: |-
        Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days. 

        Privileges required: account administrator 
      operationId: BillingPayments_GetPaymentList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: Specifies the date/time of the earliest payment in the account to retrieve.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: Specifies the date/time of the latest payment in the account to retrieve.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPaymentsResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets payment information for one or more payments.
      tags:
        - Payments
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listPayments
      x-ds-service: Billing
    parameters: []
    post:
      deprecated: false
      description: |
        Posts a payment to a past due invoice.

        This method can only be used if the `paymentAllowed` value for a past due invoice is true. This can be determined calling [Billing::listInvoicesPastDue](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/Invoices/listPastDue).

        The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the `nextUri` and `previousUri` properties are not returned.

        Privileges required: account administrator
      operationId: BillingPayments_PostPayment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/billingPaymentRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPaymentResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Posts a payment to a past due invoice.
      tags:
        - Payments
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: makePayment
      x-ds-service: Billing
  "/v2.1/accounts/{accountId}/billing_payments/{paymentId}":
    get:
      deprecated: false
      description: |-
        Retrieves the information for a specified payment. 

        Privileges required: account administrator 
      operationId: BillingPayments_GetPayment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: path
          name: paymentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPaymentItem"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets billing payment information for a specific payment.
      tags:
        - Payments
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getPayment
      x-ds-service: Billing
    parameters: []
  "/v2.1/accounts/{accountId}/billing_plan":
    get:
      deprecated: false
      description: |
        Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.

        By default the successor plan and credit card information is included in the response. You can exclude this information from the response by adding the appropriate optional query string and setting it to **false**.

        Response

        The response returns the billing plan information, including the currency code, for the plan. The `billingPlan` and `succesorPlans` property values are the same as those shown in the [Billing::getBillingPlan](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/BillingPlans/get) reference. the `billingAddress` and `creditCardInformation` property values are the same as those shown in the [Billing::updatePlan](https://developers.docusign.com/docs/esign-rest-api/reference/Billing/BillingPlans/update) reference.

        **Note**: When credit card number information displays, a mask is applied to the response so that only the last 4 digits of the card number are visible.
      operationId: BillingPlan_GetBillingPlan
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: When set to **true**, payment information including credit card information will show in the return.
          in: query
          name: include_credit_card_information
          required: false
          schema:
            type: string
        - description: "When set to **true**, the `canUpgrade` and `renewalStatus` properities are included the response and an array of `supportedCountries` is added to the `billingAddress` information. "
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
        - description: When set to **true**, excludes successor information from the response.
          in: query
          name: include_successor_plans
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountBillingPlanResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get Account Billing Plan
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: getAccountPlan
      x-ds-methodname: getPlan
      x-ds-service: Billing
    parameters: []
    put:
      deprecated: false
      description: Updates the billing plan information, billing address, and credit card information for the specified account.
      operationId: BillingPlan_PutBillingPlan
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: When set to **true**, updates the account using a preview billing plan.
          in: query
          name: preview_billing_plan
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/billingPlanInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPlanUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an account billing plan.
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updatePlan
      x-ds-service: Billing
  "/v2.1/accounts/{accountId}/billing_plan/credit_card":
    get:
      deprecated: false
      description: This method returns information about a credit card associated with an account.
      operationId: BillingPlan_GetCreditCardInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/creditCardInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get credit card information
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: getCreditCard
      x-ds-methodname: getCreditCardInfo
      x-ds-service: Billing
    parameters: []
  "/v2.1/accounts/{accountId}/billing_plan/downgrade":
    get:
      deprecated: false
      description: ""
      operationId: BillingPlan_GetDowngradeRequestBillingInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/downgradRequestBillingInfoResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns downgrade plan information for the specified account.
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: getDowngradeRequestBillingInfo
      x-ds-methodname: getDowngradeRequestBillingInfo
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: BillingPlan_PutDowngradeAccountBillingPlan
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/downgradeBillingPlanInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/downgradePlanUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Queues downgrade billing plan request for an account.
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: updateDowngradeAccountBillingPlan
      x-ds-methodname: updateDowngradeAccountBillingPlan
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/billing_plan/purchased_envelopes":
    parameters: []
    put:
      deprecated: false
      description: "Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor."
      operationId: PurchasedEnvelopes_PutPurchasedEnvelopes
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchasedEnvelopesInformation"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Reserverd: Purchase additional envelopes."
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: purchaseEnvelopes
      x-ds-methodname: purchaseEnvelopes
      x-ds-service: Billing
  "/v2.1/accounts/{accountId}/brands":
    delete:
      deprecated: false
      description: |-
        This method deletes one or more brand profiles from an account, based on the brand ids that you include in the `brandsRequest`.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brands_DeleteBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/brandsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes one or more brand profiles.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteBrands
      x-ds-service: Accounts
    get:
      deprecated: false
      description: |-
        This method returns details about all of the brands associated with an account, including the default brand profiles. 

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brands_GetBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: When **true**, excludes distributor brand information from the response set.
          in: query
          name: exclude_distributor_brand
          required: false
          schema:
            type: string
        - description: When set to **true**, returns the logos associated with the brand.
          in: query
          name: include_logos
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of brands.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listBrands
      x-ds-service: Accounts
    parameters: []
    post:
      deprecated: false
      description: |-
        This method creates one or more brand profile files for an account.

        If the `brandId` property for a brand profile is already set for the account, an error is returned. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.

        When you upload brand profile files, you must combine them into a single zip file and set the `Content-Type` to `application/zip`.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brands_PostBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/brand"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates one or more brand profiles for an account.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createBrand
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/brands/{brandId}":
    delete:
      deprecated: false
      description: |-
        This method deletes a brand from an account.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brand_DeleteBrand
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a brand.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteBrand
      x-ds-service: Accounts
    get:
      deprecated: false
      description: |-
        This method returns details about an account brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brand_GetBrand
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: When **true**, the landing pages and links associated with the brand are included in the response.
          in: query
          name: include_external_references
          required: false
          schema:
            type: string
        - description: When **true**, the URIs for the logos associated with the brand are included in the response.
          in: query
          name: include_logos
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/brand"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets information about a brand.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getBrand
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates an account brand. 

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: Brand_PutBrand
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/brand"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/brand"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an existing brand.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateBrand
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/brands/{brandId}/file":
    get:
      deprecated: false
      description: |-
        This method exports information about a brand to an XML file.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandExport_GetBrandExportFile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Exports a brand.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: getExportFile
      x-ds-methodname: getBrandExportFile
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}":
    delete:
      deprecated: false
      description: |-
        This method deletes a single logo from an account brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_DeleteBrandLogo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: |-
            The type of logo. Valid values are:

            - `primary` 
            - `secondary` 
            - `email`
          in: path
          name: logoType
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a brand logo.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: deleteLogo
      x-ds-methodname: deleteBrandLogoByType
      x-ds-service: Accounts
    get:
      deprecated: false
      description: |-
        This method returns a specific logo that is used in a brand.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_GetBrandLogo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: |-
            The type of logo. Valid values are:

            - `primary` 
            - `secondary` 
            - `email`
          in: path
          name: logoType
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a brand logo.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: getLogo
      x-ds-methodname: getBrandLogoByType
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates a single brand logo.

        You pass in the new version of the resource in the `Content-Disposition` header. Example:

        `Content-Disposition: form-data; name="file"; filename="logo.jpg"`

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandLogo_PutBrandLogo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: |-
            The type of logo. Valid values are:

            - `primary` 
            - `secondary` 
            - `email`
          in: path
          name: logoType
          required: true
          schema:
            type: string
      requestBody:
        content:
          image/png:
            schema:
              format: binary
              type: string
        description: "Brand logo binary Stream. Supported formats: JPG, GIF, PNG. Maximum file size: 300 KB. Recommended dimensions: 296 x 76 pixels (larger images will be resized). Changes may take up to one hour to display in all places"
        required: true
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a brand logo.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: updateLogo
      x-ds-methodname: updateBrandLogoByType
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/brands/{brandId}/resources":
    get:
      deprecated: false
      description: |-
        This method returns metadata about the branding resources that are associated with an account.

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandResources_GetBrandResourcesList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/brandResourcesList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns metadata about the branding resources for an account.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: listResources
      x-ds-methodname: getBrandResources
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}":
    get:
      deprecated: false
      description: |-
        This method returns a specific branding resource file.

        A brand uses a set of brand resource files to control the sending, signing, email message, and captive (embedded) signing experiences.  You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.

        **Important**: When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file. 

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).
      operationId: BrandResources_GetBrandResources
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: |-
            The type of brand resource file to return. Valid values are:

            - `sending`
            - `signing`
            - `email`
            - `signing_captive`
          in: path
          name: resourceContentType
          required: true
          schema:
            type: string
        - description: The ISO 3166-1 alpha-2 codes for the languages that the brand supports.
          in: query
          name: langcode
          required: false
          schema:
            type: string
        - description: Specifies which resource file data to return. When **true**, only the master resource file is returned. When **false**, only the elements that you modified are returned.
          in: query
          name: return_master
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a branding resource file.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: getResource
      x-ds-methodname: getBrandResourcesByContentType
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates a branding resource file.

        You pass in the new version of the resource file in the `Content-Disposition` header. Example:

        `Content-Disposition: form-data; name="file"; filename="DocuSign_SigningResource_4328673.xml"`

        **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

        **Important**: Customizing resource files is an advanced branding configuration option which can significantly impact your account, and should be done only by someone with expertise in XML and HTML. The master resource files are subject to change without notice. If you customize your resource files, after each release, DocuSign recommends you review any changes and update your custom files as needed.

        When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.
      operationId: BrandResources_PutBrandResources
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the brand.
          in: path
          name: brandId
          required: true
          schema:
            type: string
        - description: |-
            The type of brand resource file that you are updating. Valid values are:

            - `sending`
            - `signing`
            - `email`
            - `signing_captive`
          in: path
          name: resourceContentType
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file.xml:
                  description: Brand resource XML file.
                  format: binary
                  type: string
              required:
                - file.xml
              type: object
        required: true
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/brandResources"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a branding resource file.
      tags:
        - AccountBrands
      x-ds-in-sdk: true
      x-ds-method: updateResource
      x-ds-methodname: updateBrandResourcesByContentType
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/bulk_send_batch":
    get:
      deprecated: false
      description: |-
        Returns a summary of bulk send batches.

        Use the `batch_ids` query parameter to narrow the list of batches.
      operationId: BulkSendV2Batch_GetBulkSendBatches
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A comma-separated list of batch IDs to query.
          in: query
          name: batch_ids
          required: false
          schema:
            type: string
        - description: |-
            The number of results to report. Must be a value from 1 to 1000.

            Default: 100
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: The start position for results. Essentially the number of results to skip before collecting them. Must be a value greater than 0.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: |-
            The kind of results to collect. Must be one of:

            - all
            - failed
            - sent
            - queued
          in: query
          name: status
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendBatchSummaries"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Returns a list of bulk send batch summaries. "
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: getBulkSendBatches
      x-ds-methodname: getBulkSendBatches
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/bulk_send_batch/{bulkSendBatchId}":
    get:
      deprecated: false
      description: |-
        Gets the general status of a specific bulk send batch such as:

        - number of successes
        - number pending
        - number of errors

        The `bulkErrors` property of the response object contains more information about the errors.
      operationId: BulkSendV2Batch_GetBulkSendBatchStatus
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The batch ID.
          in: path
          name: bulkSendBatchId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendBatchStatus"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the status of a specific bulk send batch.
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: getBulkSendBatchStatus
      x-ds-methodname: getBulkSendBatchStatus
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: BulkSendV2Batch_PutBulkSendBatchStatus
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: path
          name: bulkSendBatchId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bulkSendBatchRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendBatchStatus"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a specific bulk send batch status.
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: updateBulkSendBatchStatus
      x-ds-methodname: updateBulkSendBatchStatus
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/bulk_send_lists":
    get:
      deprecated: false
      description: This method returns a list of bulk send lists belonging to the current user, as well as basic information about each list.
      operationId: BulkSendV2CRUD_GetBulkSendLists
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendingListSummaries"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets bulk send lists
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: getBulkSendLists
      x-ds-methodname: getBulkSendLists
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: |-
        This method creates a bulk send list that you can use to send an envelope to up to 1,000 recipients at once.

        It returns the following errors:

        | Error code                                              | Description                                                                                                                                                                                                                                                                              |
        | :------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | BULK_SEND_MAX_COPIES_EXCEEDED                           | A bulk sending list cannot specify more than XXX copies in the mailing list. Call the settings API endpoint to find the maximum number of copies in a batch allowed for your account. In almost all cases, the default limit is 1000.                                                    |
        | BULK_SEND_RECIPIENT_IDS_MUST_BE_UNIQUE                  | No two recipientIds can be same within a bulkCopy. Same restriction as a regular envelope applies. Specify unique recipient IDs for each recipient within a bulkCopy (model for envelope in mailing list).                                                                               |
        | BULK_SEND_RECIPIENT_ID_REQUIRED                         | If no RoleName is present, recipientID is required in mailing list's bulkCopy. Add a roleName (that coalesces with template/envelope) or a recipientID.                                                                                                                                  |
        | BULK_SEND_RECIPIENT_NAME_REQUIRED                       | Recipient {0} has no name. Specify a name for the recipient.                                                                                                                                                                                                                             |
        | BULK_SEND_EMAIL_ADDRESS_REQUIRED_FOR_EMAIL_RECIPIENT    | Recipient {0} is an email recipient with no email address. Specify an email for the email recipient.                                                                                                                                                                                     |
        | BULK_SEND_FAX_NUMBER_REQUIRED_FOR_FAX_RECIPIENT         | Recipient {0} is a fax recipient with no fax number. Specify a fax number for the fax recipient.                                                                                                                                                                                         |
        | BULK_SEND_FAX_NUMBER_NOT_VALID                          | Recipient {0} specifies fax number {1}, which is not valid. Specify a valid fax number for the fax recipient.                                                                                                                                                                            |
        | BULK_SEND_EMAIL_ADDRESS_NOT_VALID                       | Recipient {0} specifies email address {1}, which is not a valid email address.  Specify a valid email address for the recipient.                                                                                                                                                         |
        | BULK_SEND_PHONE_NUMBER_REQURED_FOR_SMS_AUTH             | Recipient {0} specifies SMS auth, but no number was provided. Specify a phone number for the SMS auth recipient.                                                                                                                                                                         |
        | BULK_SEND_PHONE_NUMBER_INVALID_FOR_SMS_AUTH             | Recipient {0} specifies phone number {1} for SMS auth, which is not valid. Specify a valid phone number for the SMS auth recipient.                                                                                                                                                      |
        | BULK_SEND_ROLE_NAMES_MUST_BE_UNIQUE                     | Recipient role names cannot be duplicated; role {duplicateRecipientRole} appears multiple times. Use unique roleNames for recipients.                                                                                                                                                    |
        | BULK_SEND_CANNOT_USE_BOTH_ROLE_AND_ID_ON_SAME_RECIPIENT | Recipients cannot have both ID and Role; {0} has both. Specify a roleName or recipientId, but not both for the same recipient.                                                                                                                                                           |
        | BULK_SEND_CANNOT_USE_BOTH_ROLE_AND_ID_IN_SAME_LIST      | Cannot use both recipient role and ID in the same list. Specify a roleName or recipientId, but not both in the same list.                                                                                                                                                                |
        | BULK_SEND_INVALID_ID_CHECK_CONFIGURATION                | Recipient {0} specified SMS authentication, but no SMS auth settings were provided. Provide an SMS auth setting (proper ID configuration) if SMS auth is specified.                                                                                                                      |
        | BULK_SEND_INVALID_SBS_INPUT_CONFIGURATION               | Recipient {0} has more than one signature provider specified. Or signingProviderName is not specified. Or Signature provider : {0} is either unknown or not an available pen for this account. One or more SBS configuration is missing or invalid. The error details provide specifics. |
        | BULK_SEND_TAB_LABELS_MUST_BE_UNIQUE                     | Tab label {0} is duplicated. Needs to be unique. Use a unique tab label.                                                                                                                                                                                                                 |
        | BULK_SEND_TAB_LABEL_REQUIRED                            | Tab label is required. Specify a tab label.                                                                                                                                                                                                                                              |
        | BULK_SEND_TAB_VALUE_REQUIRED                            | Tab Label value is required. Specify a value for the tab label.                                                                                                                                                                                                                          |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_MUST_BE_UNIQUE     | Custom fields must have distinct names. The field {0} appears more than once in a copy. Use unique names for custom fields.                                                                                                                                                              |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_REQUIRED           | All custom fields must have names. Specify a name for the custom field.                                                                                                                                                                                                                  |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_VALUE_REQUIRED          | Custom field {0} has no value. A custom field can have an empty value, but it cannot have a null value. Specify a value for the custom field.                                                                                                                                            |
      operationId: BulkSendV2CRUD_PostBulkSendList
      parameters:
        - description: The id of the account.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/bulkSendingList"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendingList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a bulk send list
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: createBulkSendList
      x-ds-methodname: createBulkSendList
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}":
    delete:
      deprecated: false
      description: This method deletes a bulk send list.
      operationId: BulkSendV2CRUD_DeleteBulkSendList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          in: path
          name: bulkSendListId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendingListSummaries"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a bulk send list
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: deleteBulkSendList
      x-ds-methodname: deleteBulkSendList
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: This method returns all of the details associated with a specific bulk send list that belongs to the current user.
      operationId: BulkSendV2CRUD_GetBulkSendList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          in: path
          name: bulkSendListId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendingList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a specific bulk send list
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: getBulkSendList
      x-ds-methodname: getBulkSendList
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: This method replaces the definition of an existing bulk send list.
      operationId: BulkSendV2CRUD_PutBulkSendList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          in: path
          name: bulkSendListId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/bulkSendingList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendingList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a bulk send list
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: updateBulkSendList
      x-ds-methodname: updateBulkSendList
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/send":
    parameters: []
    post:
      deprecated: false
      description: |+
        This method initiates the bulk send process. It generates a bulk send request based on an [existing bulk send list][create_list] and an envelope or template.

        Consider using the [BulkSend::createBulkSendTestRequest][create_test] method to test your bulk send list for compatibility with the envelope or template that you want to send first. To learn about the complete bulk send flow, see the [Bulk Send overview][BulkSendOverview].

        If the envelopes were successfully queued for asynchronous processing, the response contains a `batchId` that you can use to get the status of the batch. If a failure occurs, the API returns an error message.

        **Note**: Partial success or failure generally does not occur. Only the entire batch is queued for asynchronous processing.

        This method returns the following errors:

        | Error code                                                 | Description                                                                                                                                                                                                                                                                                            |
        | :--------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | BULK_SEND_ENVELOPE_NOT_IN_SENDABLE_STATE                   | Envelope {0} is not in a sendable state. The envelope is not complete. Make sure it has a sendable status, such as `created`.                                                                                                                                                                          |
        | BULK_SEND_ENVELOPE_LIST_CONTAINS_NO_COPIES                 | Cannot send an envelope with a bulk sending list which contains no copies.  The list you're trying to bulk send is empty. Make sure the bulk sending list you're using contains recipients.                                                                                                            |
        | BULK_SEND_ENVELOPE_LIST_CONTAINS_TOO_MANY_COPIES           | Bulk sending list contains more than {0} copies. The list you're trying to bulk send will cause your account to exceed the 1,000-copy limit imposed for all accounts. Try sending two or more separate lists.                                                                                          |
        | BULK_SEND_ENVELOPE_CANNOT_BE_NULL                          | Cannot send a bulk list without an envelope. Specify the envelope ID or template ID for the envelope you want to bulk send.                                                                                                                                                                            |
        | BULK_SEND_BLOB_STORE_ERROR                                 | Could not save copy of bulk sending list. An error writing to the database occurred. Try again. If the error persists, contact DocuSign Support.                                                                                                                                                       |
        | BULK_SEND_ACCOUNT_HAS_TOO_MANY_QUEUED_ENVELOPES            | Cannot send this bulk sending list because doing so would exceed the maximum of {maxCopies} in-flight envelopes. This account currently has {unprocessedEnvelopes} envelopes waiting to be processed. Please try again later." .Try again later, or contact DocuSign Support to request a higher tier. |
        | BULK_SEND_ENVELOPE_NOT_FOUND                               | Envelope {envelopeOrTemplateId} does not exist or you do not have permission to access it. The envelopeId or templateId specified could not be found. Specify a valid value.                                                                                                                           |
        | BULK_SEND_LIST_NOT_FOUND                                   | Bulk Sending list {listId} does not exist or you do not have permission to access it. The mailingListId specified could not be found. Specify a valid value.                                                                                                                                           |
        | BULK_SEND_ENVELOPE_HAS_NO_RECIPIENTS                       | Bulk sending copy contains recipients, but the specified envelope does not. The recipients on the envelope and the bulk send list do not match. Make sure the envelope and list are compatible for sending.                                                                                            |
        | BULK_SEND_RECIPIENT_ID_DOES_NOT_EXIST_IN_ENVELOPE          | Recipient {0} does not exist in the envelope. Add the missing recipient to the envelope.                                                                                                                                                                                                               |
        | BULK_SEND_RECIPIENT_ID_DOES_NOT_MATCH                      | Recipient ID {envelopeMember.ID} does not match. Make sure the recipient information in the list and the envelope match up.                                                                                                                                                                            |
        | BULK_SEND_ENVELOPE_HAS_BULK_RECIPIENT                      | Recipient {0} is a bulk recipient.  This is not supported. No legacy 'bulk recipient' allowed. In v2.1 of the eSignature API, you must use a bulk send list instead of a bulk recipient. See the API documentation for details.                                                                        |
        | BULK_SEND_RECIPIENT_ROLE_DOES_NOT_MATCH                    | Recipient Role {envelopeMember.RoleName} does not match. Make sure the recipient information in the list and the envelope is compatible.                                                                                                                                                               |
        | BULK_SEND_DUPLICATE_RECIPIENT_DETECTED                     | Duplicate recipients ({0}) not allowed, unless recipients have unique routing order specified on envelope.                                                                                                                                                                                             |
        | BULK_SEND_ENVELOPE_HAS_NO_TABS                             | Bulk sending copy contains tabs, but the specified envelope does not. List and envelope tabs cannot be coalesced. Make sure they are compatible for sending.                                                                                                                                           |
        | BULK_SEND_TAB_LABEL_DOES_NOT_EXIST_IN_ENVELOPE             | Tab with label {0} does not exist in envelope. Add the tab label to the envelope, remove the label from the list, or make sure you're specifying the correct list and envelope.                                                                                                                        |
        | BULK_SEND_TAB_DOES_NOT_MATCH                               | Tab {0} does not match {0} in envelope. A tab exists on the list that does not match or is missing on the envelope. Make sure the tabs on the list and the envelope match.                                                                                                                             |
        | BULK_SEND_ENVELOPE_HAS_NO_ENVELOPE_CUSTOM_FIELDS           | Bulk sending copy contains custom fields, but the specified envelope does not. There are custom fields on the list that the envelope does not have. Make sure that any custom fields on the list and the envelope match.                                                                               |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_DOES_NOT_EXIST_IN_ENVELOPE | Custom field {0} does not exist in the envelope. Either add the custom field on the list to the envelope, remove the custom field from the list, or make sure you're specifying the correct list and envelope.                                                                                         |
        | BULK_SEND_ENVELOPE_CUSTOM_FIELD_NAME_DOES_NOT_MATCH        | Custom field names must match. {0} and {1} do not match. The custom field names on the list and the envelope do not match. Use identical names for both.                                                                                                                                               |

        [create_list]:      https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendList
        [create_test]:      https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendTestRequest
        [BulkSendOverview]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend

      operationId: BulkSendV2Send_PostBulkSendRequest
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          in: path
          name: bulkSendListId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/bulkSendRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a bulk send request
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: createBulkSendRequest
      x-ds-methodname: createBulkSendRequest
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/bulk_send_lists/{bulkSendListId}/test":
    parameters: []
    post:
      deprecated: false
      description: |+
        This method tests a bulk send list for compatibility with the envelope or template that you want to send. For example, a template that has three roles is not compatible with a bulk send list that has only two recipients. For this reason, you might want to test compatibility first.

        A successful test result returns `true` for the `canBeSent` property. An unsuccessful test returns a JSON response that contains information about the errors that occurred.

        If the test is successful, you can then send the envelope or template by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.

        ## Envelope Compatibility Checks

        This section describes the envelope compatibility checks that the system performs.

        **Top-Level Issues**

        - Envelopes must be in a sendable state.
        - The bulk send list must contain at least one copy (instance of an envelope), and no more than the maximum number of copies allowed for the account.
        - The envelope must not be null and must be visible to the current user.
        - The account cannot have more queued envelopes than the maximum number configured for the account.
        - The bulk send list must exist.

        **Recipients**

        - The envelope must have recipients.
        - If you are using an envelope, all of the recipients defined in the bulk send list must have corresponding recipient IDs in the envelope definition. If you are using a template, you must either match the recipient IDs or role IDs.
        - The envelope cannot contain a bulk recipient (an artifact of the legacy version of DocuSign's bulk send
          functionality).

        **Recipient Tabs**

        - Every `recipient ID, tab label` pair in the bulk send list must correspond to a tab in the envelope.

        **Custom Fields**

        - Each envelope-level custom field in the bulk send list must correspond to the name of a `customField` in the
          envelope definition. You do not have to match the recipient-level custom fields.

        [BulkSendRequest]:  https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest


      operationId: BulkSendV2Test_PostBulkSendTestRequest
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          in: path
          name: bulkSendListId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/bulkSendRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkSendTestResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a bulk send test
      tags:
        - BulkSend
      x-ds-in-sdk: true
      x-ds-method: createBulkSendTestRequest
      x-ds-methodname: createBulkSendTestRequest
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/captive_recipients/{recipientPart}":
    delete:
      deprecated: false
      description: This method deletes the signature for one or more captive recipient records. It is primarily used for testing. This functionality provides a way to reset the signature associated with a client user ID so that a new signature can be created the next time the client user ID is used.
      operationId: CaptiveRecipients_DeleteCaptiveRecipientsPart
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "Signature is the only supported value. "
          in: path
          name: recipientPart
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/captiveRecipientInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/captiveRecipientInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the signature for one or more captive recipient records.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: deleteCaptiveRecipient
      x-ds-methodname: deleteCaptiveRecipient
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/chunked_uploads":
    parameters: []
    post:
      deprecated: false
      description: This method initiates a new chunked upload with the first part of the content.
      operationId: ChunkedUploads_PostChunkedUploads
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/chunkedUploadRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/chunkedUploadResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Initiate a new chunked upload.
      tags:
        - ChunkedUploads
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createChunkedUpload
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}":
    delete:
      deprecated: false
      description: |-
        Deletes a chunked upload that has been committed but not yet consumed.

        This method cannot be used to delete the following types of chunked uploads, which the system deletes automatically:


        - Chunked uploads that have been consumed by use in another API call.
        - Expired chunked uploads.

        **Note**: If you are aware of a chunked upload that can be discarded, the best practice is to explicitly delete it. If you wait for the system to automatically delete it after it expires, the chunked upload will continue to count against your quota.
      operationId: ChunkedUploads_DeleteChunkedUpload
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "The id of the chunked upload. "
          in: path
          name: chunkedUploadId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/chunkedUploadResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a chunked upload.
      tags:
        - ChunkedUploads
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteChunkedUpload
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: |-
        Returns the details (but not the content) about a chunked upload.

        **Note**: You cannot obtain details about a chunked upload that has expired, been deleted, or consumed by other actions.
      operationId: ChunkedUploads_GetChunkedUpload
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "The id of the chunked upload. "
          in: path
          name: chunkedUploadId
          required: true
          schema:
            type: string
        - description: (Optional) This parameter enables you to include additional attribute data in the response. The valid value for this method is `checksum`, which returns an SHA256 checksum of the content of the chunked upload in the response. You can use compare this checksum against your own checksum of the original content to verify that there are no missing parts before you attempt to commit the chunked upload.
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/chunkedUploadResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves metadata about a chunked upload.
      tags:
        - ChunkedUploads
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getChunkedUpload
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        This method checks the integrity of a chunked upload and then commits it. When this request is successful, the chunked upload is then ready to be referenced in other API calls.

        If the request is unsuccessful, ensure that you have uploaded all of the parts by using the Update method.

        **Note**: After you commit a chunked upload, it no longer accepts additional parts.
      operationId: ChunkedUploads_PutChunkedUploads
      parameters:
        - description: (Required) The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: (Required) The id of the chunked upload to commit.
          in: path
          name: chunkedUploadId
          required: true
          schema:
            type: string
        - description: (Required) You must use this query parameter with the value `commit`, which affirms the request to validate and prepare the chunked upload for use with other API calls.
          in: query
          name: action
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/chunkedUploadResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Commit a chunked upload.
      tags:
        - ChunkedUploads
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: commit
      x-ds-methodname: updateChunkedUpload
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/{chunkedUploadPartSeq}":
    parameters: []
    put:
      deprecated: false
      description: |-
        Adds a chunk or part to an existing chunked upload. After you use the Create method to initiate a new chunked upload and upload the first part, 
        use this method to upload subsequent parts.

        For simplicity, we recommend that you upload the parts in their sequential order ( 1,2, 3, 4, etc.). The Create method adds the first part and assigns it the `sequence` value `0`. As a result, we recommend that you start with a `sequence` value of `1` when you use this method, and continue uploading parts contiguously until you have uploaded the entirety of the original content to DocuSign.

        Example:


        ```
        PUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/1
        PUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/2
        PUT /v2.1/accounts/{accountId}/chunked_uploads/{chunkedUploadId}/3
        ```

        **Note**: You cannot replace a part that DocuSign has already received, or add parts to a chunked upload that is already successfully committed.
      operationId: ChunkedUploads_PutChunkedUploadPart
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "The id of the chunked upload. "
          in: path
          name: chunkedUploadId
          required: true
          schema:
            type: string
        - description: |-
            The sequence or order of the part in the chunked upload. By default, the sequence of the first part that is uploaded as part of the Create request is `0`.

            **Note**: You can add parts out of order. However, the chunked upload must consist of a contiguous series of one or more parts before you can successfully commit it.
          in: path
          name: chunkedUploadPartSeq
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/chunkedUploadRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/chunkedUploadResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Add a chunk to an existing chunked upload.
      tags:
        - ChunkedUploads
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateChunkedUploadPart
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/connect":
    get:
      deprecated: false
      description: |-
        Retrieves all the DocuSign Custom Connect definitions for the specified account.

        **Note**: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
      operationId: Connect_GetConnectConfigs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectConfigResults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get Connect Configuration Information
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listConfigurations
      x-ds-service: Connect
    parameters: []
    post:
      deprecated: false
      description: |
        Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect).

        **Note**: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
      operationId: Connect_PostConnectConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/connectCustomConfiguration"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectCustomConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a connect configuration for the specified account.
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createConfiguration
      x-ds-service: Connect
    put:
      deprecated: false
      description: |-
        Updates the specified DocuSign Connect configuration in your account.

        **Note**: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
      operationId: Connect_PutConnectConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/connectCustomConfiguration"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectCustomConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a specified Connect configuration.
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateConfiguration
      x-ds-service: Connect
  "/v2.1/accounts/{accountId}/connect/envelopes/retry_queue":
    parameters: []
    put:
      deprecated: false
      description: |
        Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [Connect::listEventLogs](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/list) retrieve the failure log.
      operationId: ConnectPublish_PutConnectRetry
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connectFailureFilter"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectFailureResults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Republishes Connect information for multiple envelopes.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: retryForEnvelopes
      x-ds-methodname: retryEventForEnvelopes
      x-ds-service: Connect
  "/v2.1/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue":
    parameters: []
    put:
      deprecated: false
      description: Republishes Connect information for the specified envelope.
      operationId: ConnectPublish_PutConnectRetryByEnvelope
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectFailureResults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Republishes Connect information for the specified envelope.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: retryForEnvelope
      x-ds-methodname: retryEventForEnvelope
      x-ds-service: Connect
  "/v2.1/accounts/{accountId}/connect/failures":
    get:
      deprecated: false
      description: Retrieves the Connect failure log information. You can use this log to determine which envelopes failed to post, in order to create a republish request.
      operationId: ConnectFailures_GetConnectLogs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectLogs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Connect failure log information.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: listFailures
      x-ds-methodname: listEventFailureLogs
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/connect/failures/{failureId}":
    delete:
      deprecated: false
      description: Deletes the Connect failure log information for the specified entry.
      operationId: ConnectFailures_DeleteConnectFailureLog
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the Connect post failure.
          in: path
          name: failureId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a Connect failure log entry.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: deleteFailure
      x-ds-methodname: deleteEventFailureLog
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/connect/logs":
    delete:
      deprecated: false
      description: Deletes a list of Connect log entries for your account.
      operationId: ConnectLog_DeleteConnectLogs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a list of Connect log entries.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteEventLogs
      x-ds-service: Connect
    get:
      deprecated: false
      description: |-
        Retrieves a list of connect log entries for your account.

        **Note**: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
      operationId: ConnectLog_GetConnectLogs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectLogs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Connect log.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listEventLogs
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/connect/logs/{logId}":
    delete:
      deprecated: false
      description: |
        Deletes a specified entry from the Connect Log.
      operationId: ConnectLog_DeleteConnectLog
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the Connect log entry.
          in: path
          name: logId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a specified Connect log entry.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteEventLog
      x-ds-service: Connect
    get:
      deprecated: false
      description: |-
        Retrieves the specified Connect log entry for your account.

        **Note**: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded.
      operationId: ConnectLog_GetConnectLog
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the Connect log entry.
          in: path
          name: logId
          required: true
          schema:
            type: string
        - description: When set to **true**, the response includes the `connectDebugLog` information.
          in: query
          name: additional_info
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectLog"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a Connect log entry.
      tags:
        - ConnectEvents
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getEventLog
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/connect/secret/{keyId}":
    delete:
      deprecated: false
      description: ""
      operationId: ConnectHMAC_DeleteConnectSecret
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: path
          name: keyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the connect HMAC Secret for specified account.
      tags:
        - ConnectSecret
      x-ds-in-sdk: true
      x-ds-method: deleteConnectSecret
      x-ds-methodname: deleteConnectSecret
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/connect/{connectId}":
    delete:
      deprecated: false
      description: |+
        Deletes the specified DocuSign Connect configuration.

        **Note**: Connect must be enabled for your account to use this function.


      operationId: Connect_DeleteConnectConfig
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the custom Connect configuration being accessed.
          in: path
          name: connectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the specified connect configuration.
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteConfiguration
      x-ds-service: Connect
    get:
      deprecated: false
      description: |
        Retrieves the information for the specified DocuSign Connect configuration.

        **Note**: Connect must be enabled for your account to use this function.
      operationId: Connect_GetConnectConfig
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the custom Connect configuration being accessed.
          in: path
          name: connectId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/connectConfigResults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the details about a Connect configuration.
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getConfiguration
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/connect/{connectId}/users":
    get:
      deprecated: false
      description: Returns users from the configured Connect service.
      operationId: Connect_GetConnectUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the custom Connect configuration being accessed.
          in: path
          name: connectId
          required: true
          schema:
            type: string
        - description: |
            Optional. Number of items to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: Filters returned user records by full email address or a substring of email address.
          in: query
          name: email_substring
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: list_included_users
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: |
            Filters the results by user status.
            You can specify a comma-separated
            list of the following statuses:

            * ActivationRequired 
            * ActivationSent 
            * Active
            * Closed 
            * Disabled
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: |-
            Filters results based on a full or partial user name.

            **Note**: When you enter a partial user name, you do not use a wildcard character.
          in: query
          name: user_name_substring
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/integratedUserInfoList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns users from the configured Connect service.
      tags:
        - ConnectConfigurations
      x-ds-in-sdk: true
      x-ds-method: listUsers
      x-ds-methodname: connectUsers
      x-ds-service: Connect
    parameters: []
  "/v2.1/accounts/{accountId}/consumer_disclosure":
    get:
      deprecated: false
      description: |-
        Retrieves the default, HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account. 

        This is the default ERSD disclosure that DocuSign provides for the convenience of U.S.-based customers only. This default disclosure is only valid for transactions between U.S.-based parties.

        To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.
      operationId: ConsumerDisclosure_GetConsumerDisclosure
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: query
          name: langCode
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountConsumerDisclosures"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the default Electronic Record and Signature Disclosure for an account.
      tags:
        - AccountConsumerDisclosures
      x-ds-in-sdk: true
      x-ds-method: getDefault
      x-ds-methodname: getConsumerDisclosureDefault
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/consumer_disclosure/{langCode}":
    get:
      deprecated: false
      description: |-
        Retrieves the HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account. 

        To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.

        **Note**: The text of the default disclosure is always in English, but if you are using a custom disclosure and have created versions of it in different signer languages, you can use the `langCode` parameter to specify the signer language version that you want to retrieve.  
      operationId: ConsumerDisclosure_GetConsumerDisclosureLangCode
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: path
          name: langCode
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountConsumerDisclosures"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Electronic Record and Signature Disclosure for an account.
      tags:
        - AccountConsumerDisclosures
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getConsumerDisclosure
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |+
        Account administrators can use this method to perform the following tasks:

        - Customize values in the default disclosure.
        - Switch to a custom disclosure that uses your own text and HTML formatting.
        - Change values in your existing consumer disclosure. 

        To specify the signer language version of the disclosure that you are updating, use the optional `langCode` query parameter.

        **Note**: Only account administrators can use this method. Each time you change the disclosure content, all unsigned recipients of outstanding documents will be required to accept a new version. 

        ## Updating the default disclosure

        When you update the default disclosure, you can edit all properties except for the following ones:

        - `accountEsignId`: This property is read only.
        - `custom`: The default value is **false**. Editing this property causes the default disclosure to switch to a custom disclosure.
        - `esignAgreement`: This property is read only.
        - `esignText`: You cannot edit this property when `custom` is set to **false**. The API returns a 200 OK HTTP response, but does not update the `esignText`.
        - Metadata properties: These properties are read only.

        **Note**: The text of the default disclosure is always in English.

        ## Switching to a custom disclosure

        To switch to a custom disclosure, set the `custom` property to **true** and customize the value for the `eSignText` property. 

        You can also edit all of the other properties except for the following ones:

        - `accountEsignId`: This property is read only.
        - `esignAgreement`: This property is read only.
        - Metadata properties: These properties are read only.

        **Note**: When you use a custom disclosure, you can create versions of it in different signer languages and se the `langCode` parameter to specify the signer language version that you are updating.

        **Important**:  When you switch from a default to a custom disclosure, note the following information:

        - You will not be able to return to using the default disclosure.
        - Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.

        ## Updating a custom disclosure

        When you update a custom disclosure, you can update all of the properties except for the following ones:

        - `accountEsignId`: This property is read only. 
        - `esignAgreement`: This property is read only.
        - Metadata properties: These properties are read only.

        **Important**: Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.

      operationId: ConsumerDisclosure_PutConsumerDisclosure
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to update. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: path
          name: langCode
          required: true
          schema:
            type: string
        - description: (Optional) When set to true, the response includes metadata indicating which properties are editable.
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/consumerDisclosure"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/consumerDisclosure"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the Electronic Record and Signature Disclosure for an account.
      tags:
        - AccountConsumerDisclosures
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateConsumerDisclosure
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/contacts":
    delete:
      deprecated: false
      description: This method deletes multiple contacts associated with an account.
      operationId: Contacts_DeleteContacts
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/contactModRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/contactUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes multiple contacts from an account.
      tags:
        - Contacts
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteContacts
      x-ds-service: Users
    parameters: []
    post:
      deprecated: false
      description: |-
        This method imports multiple new contacts into a contact list from a CSV, JSON, or XML file.

        To use this method, you must provide a request body in one of the supported formats and include a `content-type` header with the appropriate value.
      operationId: Contacts_PostContacts
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/contactModRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/contactUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Imports new contacts into a contacts list.
      tags:
        - Contacts
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: postContacts
      x-ds-service: Users
    put:
      deprecated: false
      description: This method updates one or more contacts associated with an account.
      operationId: Contacts_PutContacts
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/contactModRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/contactUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates one or more contacts.
      tags:
        - Contacts
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: putContacts
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/contacts/{contactId}":
    delete:
      deprecated: false
      description: This method deletes a contact associated with an account.
      operationId: Contacts_DeleteContactWithId
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of a contact person in the account's address book.
          in: path
          name: contactId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/contactUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a contact.
      tags:
        - Contacts
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteContactWithId
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        This method returns one or more contacts
        associated with a DocuSign account. You can also
        retrieve contacts from connected [cloud storage][CloudStorage] providers by using the
        `cloud_provider` query parameter. By default,
        contacts are retrieved from the DocuSign account's
        default address book.

        To return a specific contact, use the `contactId`
        query parameter. To return all contacts associated
        with an account, omit this parameter.

        [CloudStorage]: https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage
      operationId: Contacts_GetContactById
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of a contact person in the account's address book.
          in: path
          name: contactId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The cloud provider from which to retrieve the contacts. Valid values are:

            - `rooms`
            - `docusignCore` (default)
          in: query
          name: cloud_provider
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/contactGetResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets one or more contacts.
      tags:
        - Contacts
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getContactById
      x-ds-service: Users
    parameters: []
  "/v2.1/accounts/{accountId}/custom_fields":
    get:
      deprecated: false
      description: This method returns a list of the envelope and document custom fields associated with an account.
      operationId: AccountCustomFields_GetAccountCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of custom fields.
      tags:
        - AccountCustomFields
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listCustomFields
      x-ds-service: Accounts
    parameters: []
    post:
      deprecated: false
      description: This method creates a custom field and makes it available for all new envelopes associated with an account.
      operationId: AccountCustomFields_PostAccountCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: (Optional) When set to **true**, the new custom field is applied to all of the templates on the account.
          in: query
          name: apply_to_templates
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/customField"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates an account custom field.
      tags:
        - AccountCustomFields
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createCustomField
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/custom_fields/{customFieldId}":
    delete:
      deprecated: false
      description: This method deletes an existing account custom field.
      operationId: AccountCustomFields_DeleteAccountCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the custom field.
          in: path
          name: customFieldId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: apply_to_templates
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes an account custom field.
      tags:
        - AccountCustomFields
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteCustomField
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: This method updates an existing account custom field.
      operationId: AccountCustomFields_PutAccountCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the custom field.
          in: path
          name: customFieldId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: apply_to_templates
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/customField"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an account custom field.
      tags:
        - AccountCustomFields
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateCustomField
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/display_appliance_info/dynamicsystemsettings":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetDynamicSystemSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns document pages for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getDynamicSystemSettings
      x-ds-methodname: getDynamicSystemSettings
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/display_appliance_info/templateInfo":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetTemplateInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns whether a template was encrypted by Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getTemplateInfo
      x-ds-methodname: getTemplateInfo
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes":
    get:
      deprecated: false
      description: |
        Retrieves a list of envelopes that match your request. 
        A large set of optional filters let you filter
        by date,
        by envelope ID,
        or by status codes.

        Your request must include one or more of the following parameters:

        * `from_date`
        * `envelope_ids`
        * `transaction_ids`


        Getting envelope status using `transaction_ids` is useful
        for offline signing situations where it can be used
        determine if an envelope was created or not. It can be used
        for the cases where a network connection was lost, before
        the envelope status could be returned.

        To avoid unnecessary database queries, the DocuSign
        signature platform first checks requests to ensure that the
        filter set supplied does not result in a zero-size response
        before querying the database. 

        For example, for a request with a `from_to_status` of
        `delivered` and a current `status` of `created,sent`,
        DocuSign will always return an empty list. 
        This is because the request translates to: find the
        envelopes that were delivered between the `from_date` and
        `to_date` dates that have a current status of `created` or
        `sent`. Since an envelope that has been delivered can
        never have a status of `created` or `sent`, a zero-size
        response would be generated. 
        In this case, DocuSign does not query the database
        and returns an empty list immediately.


        The following table shows the valid current envelope
        statuses (`status` parameter) for the different status
        qualifiers (`from_to_status` parameter) in the request. If
        the status and status qualifiers in the API request do not
        contain any of the values shown in the Valid Current
        Statuses column, then an empty list is returned.

        Client applications should check that the statuses (`status`
        parameter) they are requesting make sense for a given
        `from_to_status` parameter value.

        | Status Qualifier<br>(`from_to_status`) | Effective Status Qualifier | Valid Current Statuses                                                      |  
        | :------------------------------------- | :------------------------- | :-------------------------------------------------------------------------- |  
        | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |  
        | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |  
        | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |  
        | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |  
        | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |  
        | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |  
        | declined                               | StatusChanged              | any, declined, voided, deleted                                              |  
        | timedout<br>always return zero results | StatusChanged              | any, voided, deleted                                                        |  
        | voided                                 | Voided                     | any, voided, deleted                                                        |  
        | deleted                                | StatusChanged              | any, deleted                                                                |  

        ## Extraneous results

        In some cases, a request for a specific envelope status will
        include envelopes with additional statuses. For example, in
        a request with a `from_date` of 2017-01-01, a `to_date` of
        2017-01-07 and the status qualifier (`from_to_status`) set
        to `delivered`, the response set might contain envelopes
        that were created during that time period, but not delivered
        during the time period. As a workaround, check the envelope
        status values in the result set as needed. 
      operationId: Envelopes_GetEnvelopes
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed."
          in: query
          name: ac_status
          required: false
          schema:
            type: string
        - description: |
            Reserved for DocuSign.
          in: query
          name: block
          required: false
          schema:
            type: string
        - description: |
            Reserved for DocuSign.
          in: query
          name: cdse_mode
          required: false
          schema:
            type: string
        - description: A token returned in the response to a previous API call that is used to resume a search query from a specific point.
          in: query
          name: continuation_token
          required: false
          schema:
            type: string
        - description: |
            Optional. Number of items to return. Currently there is no implicit maximum limit of the number of items that can be returned.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: |+
            Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: `custom_envelope_field_name=desired_value`

            Example: If you have an envelope custom field named "Region" and you want to search for all envelopes where the value is "West" you would use set this parameter to `Region=West`. 
             
          in: query
          name: custom_field
          required: false
          schema:
            type: string
        - description: |
            Limit results to envelopes
            sent by the account user
            with this email address.

            `user_name` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          in: query
          name: email
          required: false
          schema:
            type: string
        - description: Comma separated list of `envelopeId` values.
          in: query
          name: envelope_ids
          required: false
          schema:
            type: string
        - description: |-
            Excludes information from the response. Enter  as a comma-separated list (e.g., `folders,powerforms`). Valid values are:

            - `recipients`
            - `powerforms`
            - `folders`
          in: query
          name: exclude
          required: false
          schema:
            type: string
        - description: |-
            Returns the envelopes from specific folders. Enter as a comma-separated list of either valid folder Guids or the following values: 

            - `awaiting_my_signature`
            - `completed`
            - `draft`
            - `drafts`
            - `expiring_soon`
            - `inbox`
            - `out_for_signature`
            - `recyclebin`
            - `sentitems`
            - `waiting_for_others`
          in: query
          name: folder_ids
          required: false
          schema:
            type: string
        - description: |-
            A comma-separated list of folder types you want to retrieve envelopes from. Valid values are: 

            - `normal`
            - `inbox`
            - `sentitems`
            - `draft`
            - `templates`
          in: query
          name: folder_types
          required: false
          schema:
            type: string
        - description: |-
            Specifies the date and time
            to start looking for status changes.
            This parameter is required
            unless `envelopeIds` or `transactionIds`
            are set.


            Although you can use any date format
            supported by the .NET system library's
            [`DateTime.Parse()`][msoft] function,
            DocuSign recommends
            using [ISO 8601][] format dates
            with an explicit time zone offset
            If you do not provide
            a time zone offset,
            the method uses the server's time zone.

            For example, the following dates and times refer to the same instant:

            * `2017-05-02T01:44Z`
            * `2017-05-01T21:44-04:00`
            * `2017-05-01T18:44-07:00`


            [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
            [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |-
            This is the status type checked for in the `from_date`/`to_date` period. If `changed` is specified, then envelopes that changed status during the period are found. If for example, `created` is specified, then envelopes created during the period are found. Default is `changed`. 

            Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
          in: query
          name: from_to_status
          required: false
          schema:
            type: string
        - description: |
            Specifies additional information to return  about the envelopes. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:

            - `custom_fields`: The custom fields associated with the envelope.
            - `documents`: The documents associated with the envelope.
            - `attachments`: The attachments associated with the envelope.
            - `extensions`: Information about the email settings associated with the envelope.
            - `folders`: The folders where the envelope exists.
            - `recipients`: The recipients associated with the envelope.
            - `powerform`: The PowerForms associated with the envelope.
            - `payment_tabs`: The payment tabs associated with the envelope.
          in: query
          name: include
          required: false
          schema:
            type: string
        - description: When set to **true**, information about envelopes that have been deleted is included in the response.
          in: query
          name: include_purge_information
          required: false
          schema:
            type: string
        - description: |-
            A comma-separated list of folders that you want want to get envelopes from. Valid values are: 

            - `normal`
            - `inbox`
            - `sentitems`
            - `draft`
            - `templates`
          in: query
          name: intersecting_folder_ids
          required: false
          schema:
            type: string
        - description: |-
            Returns envelopes that were modified prior to the specified date and time. 

            Example: `2020-05-09T21:56:12.2500000Z`
          in: query
          name: last_queried_date
          required: false
          schema:
            type: string
        - description: Returns envelopes in either ascending (`asc`) or descending (`desc`) order.
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: |-
            Sorts results according to a specific property. Valid values are:

            - `last_modified`
            - `action_required`
            - `created`
            - `completed`
            - `envelope_name`
            - `expire`
            - `sent`
            - `signer_list`
            - `status`
            - `subject`
            - `user_name`
            - `status_changed`
            - `last_modified`
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: A comma-separated list of `PowerFormId` values.
          in: query
          name: powerformids
          required: false
          schema:
            type: string
        - description: The time in seconds that the query should run before returning data.
          in: query
          name: query_budget
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: requester_date_format
          required: false
          schema:
            type: string
        - description: Free text search criteria that you can use to filter the list of envelopes that is returned.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: |
            This value is supported and currently has no implicit maximum items.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: |
            A comma-separated list of current envelope statuses to included in the response. Possible values are:

            * `completed`
            * `created`
            * `declined`
            * `deleted`
            * `delivered`
            * `processing`
            * `sent`
            * `signed`
            * `timedout`
            * `voided`

            The `any` value is equivalent to any status.
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: |
            Specifies the date and time
            to stop looking for status changes.
            The default is the current date and time.

            Although you can use any date format
            supported by the .NET system library's
            [`DateTime.Parse()`][msoft] function,
            DocuSign recommends
            using [ISO 8601][] format dates
            with an explicit time zone offset
            If you do not provide
            a time zone offset,
            the method uses the server's time zone.

            For example, the following dates and times refer to the same instant:

            * `2017-05-02T01:44Z`
            * `2017-05-01T21:44-04:00`
            * `2017-05-01T18:44-07:00`


            [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse
            [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601
          in: query
          name: to_date
          required: false
          schema:
            type: string
        - description: |
            If included in the query string, this is a comma separated list of envelope `transactionId`s. 

            If included in the `request_body`, this is a list of envelope `transactionId`s. 

            ###### Note: `transactionId`s are only valid in the DocuSign system for seven days.
          in: query
          name: transaction_ids
          required: false
          schema:
            type: string
        - description: |-
            Returns envelopes where the current user is the recipient, the sender, or the recipient only. (For example, `user_filter=sender`.) Valid values are:

            - `sender`
            - `recipient`
            - `recipient_only`
          in: query
          name: user_filter
          required: false
          schema:
            type: string
        - description: The ID of the user who created the envelopes to be retrieved. Note that an account can have multiple users, and any user with account access can retrieve envelopes by user_id from the account.
          in: query
          name: user_id
          required: false
          schema:
            type: string
        - description: |
            Limit results to envelopes
            sent by the account user
            with this user name.

            `email` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          in: query
          name: user_name
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets status changes for one or more envelopes.
      tags:
        - Envelopes
      x-ds-examples:
        - description: |
            This example shows a how to get information about
            envelopes created since January 1, 2016 and before October 6, 2016.
            You can leave off the `to_date` parameter to get envelopes created from the `from_date` to today.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes?from_date=2016-01-01&to_date=2016-10-06
            ```
          direction: response
          format: json
          response:
            endPosition: "1"
            envelopes:
              - certificateUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/certificate
                customFieldsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/custom_fields
                documentsCombinedUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/combined
                documentsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents
                envelopeId: 379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                envelopeUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                notificationUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/notification
                recipientsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/recipients
                status: completed
                statusChangedDateTime: 2016-10-04T15:26:28.2830000Z
                templatesUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/templates
              - certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
                customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
                documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
                documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
                envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
                recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
                status: sent
                statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
                templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
            nextUri: ""
            previousUri: ""
            resultSetSize: "2"
            startPosition: "0"
            totalSetSize: "2"
          style: custom
          title: Get Status About Envelopes Since a Specified Date
      x-ds-in-sdk: true
      x-ds-method: listStatusChanges
      x-ds-methodname: listStatusChanges
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: |
        Creates and sends an envelope or creates a draft envelope.
        Envelopes are fundamental resources in the DocuSign platform.

        With this method you can:

        * Create and send an envelope
          with [documents][], [recipients][], and [tabs][].
        * [Create and send an envelope from a template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/).
        * [Create and send an envelope from
          a combination of documents and templates](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/).
        * Create a draft envelope.


        When you use this method
        to create and send an envelope
        in a single request,
        the following parameters in the request body (an [`envelopeDefinition`][envelopeDefinition]) are required:

        | Parameter      | Description |
        | :--------      | :---------- |
        | `status`       | Set to `sent` to send the envelope to recipients.<br>Set to `created` (or don't set at all) to save the envelope as a draft. |
        | `emailSubject` | The subject of the email used to send the envelope. |
        | `documents`    | The [documents][] to be signed. |
        | `recipients`   | The email addresses of the envelope [recipients][]. |


        **Note**: If the envelope has a workflow definition
        and the `workflowStatus` is `paused`,
        the envelope will not be sent immediately,
        even if the envelope's `status` is `sent`.

        There are many ways to use envelopes.
        You can create and send an envelope
        with a single API request,
        or you can use several API requests
        to create, populate, and send envelopes.


        | See:                  | To learn about:                                                                                                                    |
        | :----------------------- | :--------------------------------------------------------------------------------------------------------------------------------- |
        | [Envelopes][envelopes]   | Envelopes, [adding documents][addingdocs], [tracking][], [locking][], [deleting][], [templates][]                                  |
        | [Documents][documents]   | Documents, [attachments][], [supplemental documents][supdocs], [authoritative copies][authcopies], [purging][]                     |
        | [Recipients][recipients] | Recipients, [recipient types][reciptypes], [recipient status][recipstatus]                                                         |
        | [Tabs][tabs]             | Tabs, [anchoring tabs][tabanchor],   [custom tabs][tabcustom], [payments][] |


        [addingdocs]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [attachments]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [authcopies]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [conoverview]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/overview
        [deleting]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [documents]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents
        [envelopeDefinition]:   https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/
        [envelopes]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes
        [locking]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [payments]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/payment/
        [purging]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [recipients]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients
        [recipstatus]:          https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/
        [reciptypes]:           https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/recipients/
        [supdocs]:              https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/documents/
        [tabanchor]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place/
        [tabcustom]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/custom-tabs/
        [tabs]:                 https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs
        [tabtypes]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/
        [templates]:            https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/
        [tracking]:             https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/

        **Note**: When you create an envelope by using a [composite template](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/templates/composite/), you should specify the envelope custom fields in the inline template. Any custom fields that you specify at the root level are ignored.
      operationId: Envelopes_PostEnvelopes
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            Reserved for DocuSign.
          in: query
          name: cdse_mode
          required: false
          schema:
            type: string
        - description: When true, users can define the routing order of recipients while sending documents for signature.
          in: query
          name: change_routing_order
          required: false
          schema:
            type: string
        - description: |
            Reserved for DocuSign.
          in: query
          name: completed_documents_only
          required: false
          schema:
            type: string
        - description: |-
            When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)

            **Note**: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.
          in: query
          name: merge_roles_on_draft
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates an envelope.
      tags:
        - Envelopes
      x-ds-examples:
        - description: |
            This example shows a request/response that includes:

            * A single PDF document to be signed
            * One tab positioned using anchor text
            * One recipient

            See [Requesting a Signature via Email](/esign-rest-api/code-examples/request-a-signature-via-email)
            for a full walkthrough of this example.
          direction: both
          format: json
          request:
            documents:
              - documentBase64: "[Document content (PDF File)]"
                documentId: "1"
                fileExtension: pdf
                name: NDA.pdf
            emailSubject: Please sign the NDA
            recipients:
              signers:
                - email: the_nda_signer@example.com
                  name: Darlene Petersen
                  recipientId: "1"
                  routingOrder: "1"
                  tabs:
                    dateSignedTabs:
                      - anchorString: signer1date
                        anchorYOffset: "-6"
                        fontSize: Size12
                        name: Date Signed
                        recipientId: "1"
                        tabLabel: date_signed
                    fullNameTabs:
                      - anchorString: signer1name
                        anchorYOffset: "-6"
                        fontSize: Size12
                        name: Full Name
                        recipientId: "1"
                        tabLabel: Full Name
                    signHereTabs:
                      - anchorString: signer1sig
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: "0"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: signer1sig
            status: sent
          response:
            envelopeId: 63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
            status: sent
            statusDateTime: 2016-05-29T17:11:56.1800000Z
            uri: /envelopes/63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
          style: custom
          title: Request Signature on Single Document by Email
        - description: |
            This example shows a request/response that includes:

            * Multiple documents, both pdf and Word docx files.
            * Multiple tabs including signing, fullName, dateSigned, and text tabs.
            * Tabs positioned using anchor text.
            * Two recipients, a signer and a cc recipient.

            For more information, and to try this request live, see the [API Recipe](https://www.docusign.com/developer-center/recipes/send-multiple-docs)
          direction: both
          format: json
          request:
            documents:
              - documentBase64: "[Document 1 content (PDF File)]"
                documentId: "1"
                fileExtension: pdf
                name: NDA.pdf
              - documentBase64: "[Document 2 content (PDF File)]"
                documentId: "2"
                fileExtension: pdf
                name: House.pdf
              - documentBase64: "[Document 3 content (Word file)]"
                documentId: "3"
                fileExtension: docx
                name: contractor_agreement.docx
            emailSubject: Please sign the house documentation package
            recipients:
              carbonCopies:
                - email: cody_vigil@worldwidecorp.example.com
                  name: Cody Vigil
                  recipientId: "2"
                  routingOrder: "2"
              signers:
                - email: darlene_petersen@newco.example.com
                  name: Darlene Petersen
                  recipientId: "1"
                  routingOrder: "1"
                  tabs:
                    dateSignedTabs:
                      - anchorString: signer1date
                        anchorYOffset: "-6"
                        fontSize: Size12
                        name: Date Signed
                        recipientId: "1"
                        tabLabel: date_signed
                      - documentId: "2"
                        fontSize: Size12
                        name: Date Signed
                        pageNumber: "1"
                        recipientId: "1"
                        tabLabel: doc3_date_signed
                        xPosition: "89"
                        yPosition: "100"
                    fullNameTabs:
                      - anchorString: signer1name
                        anchorYOffset: "-6"
                        fontSize: Size12
                        name: Full Name
                        recipientId: "1"
                        tabLabel: Full Name
                    signHereTabs:
                      - anchorString: signer1sig
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: "0"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: signer1sig
                      - documentId: "2"
                        name: Please sign here
                        optional: "false"
                        pageNumber: "1"
                        recipientId: "2"
                        scaleValue: 1
                        tabLabel: signer1_doc2
                        xPosition: "89"
                        yPosition: "40"
                      - anchorString: Client Signature
                        anchorUnits: mms
                        anchorXOffset: "0"
                        anchorYOffset: "-4"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        scaleValue: 1
                        tabLabel: doc3_client_sig
                    textTabs:
                      - anchorString: signer1company
                        anchorYOffset: "-8"
                        fontSize: Size12
                        name: Company
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                      - anchorString: Client Name
                        anchorYOffset: "-38"
                        fontSize: Size12
                        name: Company
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                      - documentId: "3"
                        fontSize: Size10
                        name: Company
                        pageNumber: "1"
                        recipientId: "1"
                        required: "true"
                        tabLabel: Company
                        xPosition: "145"
                        yPosition: "195"
            status: sent
          response:
            envelopeId: 63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
            status: sent
            statusDateTime: 2016-05-29T17:11:56.1800000Z
            uri: /envelopes/63e05468-xxxx-xxxx-xxxx-8b48f7dbeb80
          style: custom
          title: Multiple Documents and Tabs, Signer and CC Recipients
        - description: |-
            For some documents, one or more signatures must be witnessed by an appointed [notary public](https://en.wikipedia.org/wiki/Notary_public).

            DocuSign supports eNotary services for many jurisdictions. This example demonstrates how to send an envelope to be signed by Susan Signer with her signature witnessed by Nancy Notary. You must know the name and email address of the signer and the notary public for a signature to be notarized.

            Note that the full legal name of the signer must be used. It will be checked against the signer's government-issued proof of identity by the notary public.

            Please see the [DocuSign eNotary resource page](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources) for further information. It lists the jurisdictions participating in the DocuSign eNotary program and additional reference information.

            Note that eNotary services are not included with all account types and are **not** included by default with demo/developer sandbox accounts. To enable eNotary service for your sandbox account, contact your DocuSign technical support person or DocuSign customer service.

            The example includes event notification via the Connect service.
          direction: both
          format: json
          request:
            documents:
              - documentBase64: "[Contents elided]"
                documentId: "1"
                fileExtension: docx
                name: important document.docx
            emailSubject: Important agreement for notarized signature
            eventNotification:
              envelopeEvents:
                - envelopeEventStatusCode: Completed
                - envelopeEventStatusCode: Declined
                - envelopeEventStatusCode: Voided
              includeDocumentFields: "false"
              includeDocuments: "false"
              includeSenderAccountAsCustomField: "true"
              loggingEnabled: "true"
              requireAcknowledgment: "true"
              signMessageWithX509Cert: "true"
              url: https://listener.example.com/docusign_notifications
            recipients:
              inPersonSigners:
                - email: susan_signer@gmail.com
                  inPersonSigningType: notary
                  name: Susan Anne Signer
                  notaryHost:
                    email: nancy@notary-svc.com
                    name: Nancy Notary
                    recipientId: 2
                  recipientId: 1
                  routingOrder: 1
                  tabs:
                    signHereTabs:
                      - documentId: "1"
                        name: Please sign here
                        optional: "false"
                        pageNumber: "1"
                        recipientId: "1"
                        tabLabel: signer1sig
                        xPosition: "100"
                        yPosition: "100"
            status: sent
          response:
            envelopeId: aaaaaaaa-xxxx-xxxx-xxxx-52a86fb94be8
            status: sent
            statusDateTime: 2017-06-15T11:02:39.3996430Z
            uri: /envelopes/aaaaaaaa-xxxx-xxxx-xxxx-52a86fb94be8
          style: custom
          title: Create a Notarized Signing Recipient
        - description: |
            DocuSign enables document signers use
            [electronic](https://www.docusign.com/products/electronic-signature) or
            [digital](https://www.docusign.com/how-it-works/electronic-signature/digital-signature) signatures.

            DocuSign has tightly integrated standard digital signatures into the DocuSign Signature platform. This enables a single envelope to include:

            * electronic signatures,
            * AES digital signatures using certificates from DocuSign or from your organization,
            * QES digital signatures from government certified Trust Service Providers (TSPs).

            This example enables the signer to create an eIDAS compliant AES signature with embedded signing. InPerson signers can also use SBS digital signatures.

            [More information on creating SBS digital signature requests.](/esign-rest-api/guides/standards-based-signatures)

            The `clientId` in the example tells DocuSign that the Signing Ceremony will be embedded.
            The example also includes an `eventNotification` object for receiving envelope status updates from DocuSign.

            ## Embedding the signing ceremony
            1. Send the `Envelopes: create` call as shown below in the Request/Response section.
            2. The response will include the `envelopeId`
            3. Use the [EnvelopeViews: createRecipient](../../EnvelopeViews/createRecipient) request to obtain the redirectURL as follows:

            `POST /v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient`

            ````
            {
                "clientUserId": "1000",
                "email": "Sam@spade.com",
                "userName": "Sam Spade",
                "returnUrl": "https://your_app.example.com",
                "AuthenticationMethod": "Password"
            }
            ````
            The response will include the `url`. Redirect the user's browser to the url to start the signing ceremony.

            **Note**: You must **immediately** redirect the user to the url you receive from DocuSign. The url is only valid for 5 minutes. Don't request a recipient view url until you are ready to redirect the user's browser.
          direction: both
          format: json
          request:
            documents:
              - documentBase64: "[Contents elided]"
                documentId: "1"
                fileExtension: html
                name: " Agreement"
            emailSubject: NewCo agreement for signature
            eventNotification:
              envelopeEvents:
                - envelopeEventStatusCode: Completed
                - envelopeEventStatusCode: Declined
                - envelopeEventStatusCode: Voided
              includeDocumentFields: "false"
              includeDocuments: "false"
              includeSenderAccountAsCustomField: "true"
              loggingEnabled: "true"
              requireAcknowledgment: "true"
              signMessageWithX509Cert: "true"
              url: https://your_app.example.com/listener
            recipients:
              signers:
                - clientUserId: "1000"
                  email: Sam@spade.com
                  name: Sam Spade
                  recipientId: "1"
                  recipientSignatureProviders:
                    - signatureProviderName: UniversalSignaturePen_OpenTrust_Hash_TSP
                      signatureProviderOptions:
                        SMS: "+33134567899"
                  routingOrder: "1"
                  tabs:
                    signHereTabs:
                      - anchorString: signer1sig
                        documentId: "1"
                        name: Please sign here
                        optional: "false"
                        recipientId: "1"
                        tabLabel: signer1sig
            status: sent
          response:
            envelopeId: caaaaaaa-xxxx-xxxx-xxxx-c171528e99c8
            status: sent
            statusDateTime: 2017-06-22T06:44:49.1642220Z
            uri: /envelopes/caaaaaaa-xxxx-xxxx-xxxx-c171528e99c8
          style: custom
          title: Request an SBS digital signature, with an embedded signing ceremony
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createEnvelope
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/status":
    parameters: []
    put:
      deprecated: false
      description: |-
        Retrieves envelope statuses for a set of envelopes.

        You must specify _one_ of the following query parameters:

        | Parameter         | Description                                                                      |
        | :---------------- | :------------------------------------------------------------------------------- |
        | `from_date`       | a valid UTC DateTime:  `2016-01-01`                                              |
        | `envelope_ids`    | A comma-separated list of envelope IDs<br>or the special value `request_body`    |
        | `transaction_ids` | A comma-separated list of transaction IDs<br>or the special value `request_body` |

        When you use the special value `request_body`, the request body looks like this:

        ```
        {
          "envelopeIds": [
            "44c5ad6c-xxxx-xxxx-xxxx-ebda5e2dfe15",
            "8e26040d-xxxx-xxxx-xxxx-1e29b924d237",
            "c8b40a2d-xxxx-xxxx-xxxx-4fe56fe10f95"
          ]
        }
        ```

        **Note**: It is an error omit the request body altogether.
        The request body must be at least `{}`.

        ### You can find an example of using this API endpoint in the following how-to:

        * [How to list envelope status changes](https://developers.docusign.com/docs/esign-rest-api/how-to/list-envelope-status-changes/)
      operationId: Envelopes_PutStatus
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specifies the Authoritative Copy Status for the envelopes. The possible values are: 

            - `Unknown`
            - `Original`
            - `Transferred`
            - `AuthoritativeCopy`
            - `AuthoritativeCopyExportPending`
            - `AuthoritativeCopyExported`
            - `DepositPending`
            - `Deposited`
            - `DepositedEO`
            - `DepositFailed`
          in: query
          name: ac_status
          required: false
          schema:
            type: string
        - description: If set to **true**, removes any results that match one of the provided `transaction_ids`.
          in: query
          name: block
          required: false
          schema:
            type: string
        - description: The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: The email address of the sender.
          in: query
          name: email
          required: false
          schema:
            type: string
        - description: |-
            The envelope IDs to include in the results.

            The value of this property can be:
            - A comma-separated list of envelope IDs
            - The special value `request_body`. In this case, the method uses the envelope IDs in the request body.
          in: query
          name: envelope_ids
          required: false
          schema:
            type: string
        - description: |-
            The date/time setting that specifies when the request begins checking for status changes for envelopes in the account. This is required unless parameters `envelope_ids` and/or `transaction_Ids` are provided. 

            ****Note****: This parameter must be set to a valid  `DateTime`, or  `envelope_ids` and/or `transaction_ids` must be specified.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |
            The envelope status that you are checking for. Possible values are:


            - `Changed` (default)
            - `Completed`
            - `Created`
            - `Declined`
            - `Deleted`
            - `Delivered`
            - `Processing`
            - `Sent`
            - `Signed`
            - `TimedOut`
            - `Voided`

            For example, if you specify `Changed`, this method
            returns a list of envelopes that changed status
            during the `from_date` to `to_date` time period. 
          in: query
          name: from_to_status
          required: false
          schema:
            type: string
        - description: The starting index position for search.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: |
            A comma-separated list of envelope status to search for. Possible values are:

            - `completed`
            - `created`
            - `declined`
            - `deleted`
            - `delivered`
            - `processing`
            - `sent`
            - `signed`
            - `template`
            - `voided`
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: |
            Optional date/time setting
            that specifies the last date/time 
            or envelope status changes in the result set. 

            The default value is the time that you call the method. 
          in: query
          name: to_date
          required: false
          schema:
            type: string
        - description: |-
            The transaction IDs to include in the results. Note that transaction IDs are valid for seven days.

            The value of this property can be:
            - A list of comma-separated transaction IDs
            - The special value `request_body`. In this case, this method uses the transaction IDs in the request body.
          in: query
          name: transaction_ids
          required: false
          schema:
            type: string
        - description: |
            Limits results to envelopes
            sent by the account user
            with this user name.

            `email` must be given as well,
            and both `email` and `user_name`
            must refer to an existing account user.
          in: query
          name: user_name
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopeIdsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets envelope statuses for a set of envelopes.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: listStatus
      x-ds-methodname: listStatus
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/transfer_rules":
    get:
      deprecated: false
      description: |-
        This method retrieves a list of envelope transfer rules associated with an account.

        **Note**: Only Administrators can create and use envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_GetEnvelopeTransferRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: (Optional) The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: (Optional) The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTransferRuleInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets envelope transfer rules.
      tags:
        - EnvelopeTransferRules
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: get
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: |-
        This method creates an envelope transfer rule.

        When you create an envelope transfer rule, you specify the following properties: 

        - `eventType`
        - `fromGroups`
        - `toUser`
        - `toFolder`
        - `carbonCopyOriginalOwner`
        - `enabled`

        **Note**: Only Administrators can create envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_PostEnvelopeTransferRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopeTransferRuleRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTransferRuleInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates an envelope transfer rule.
      tags:
        - EnvelopeTransferRules
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: create
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: |-
        This method changes the status for one or more envelope transfer rules based on the `envelopeTransferRuleId`s in the request body. You use this method to change whether or not the rules are enabled.

        **Note**: You cannot change any other information about the envelope transfer rule. Only Administrators can update envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_PutEnvelopeTransferRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopeTransferRuleInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTransferRuleInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Changes the status of multiple envelope transfer rules.
      tags:
        - EnvelopeTransferRules
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: update
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/transfer_rules/{envelopeTransferRuleId}":
    delete:
      deprecated: false
      description: |-
        This method deletes an envelope transfer rule.

        **Note**: Only Administrators can delete envelope transfer rules. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_DeleteEnvelopeTransferRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the envelope transfer rule. The system generates this id when the rule is first created.
          in: path
          name: envelopeTransferRuleId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes an envelope transfer rule.
      tags:
        - EnvelopeTransferRules
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: delete
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: |-
        This method changes the status of an envelope transfer rule. You use this method to change whether or not the rule is enabled.

        You must include the `envelopeTransferRuleId` both as a query parameter, and in the request body.

        **Note**: You cannot change any other information about the envelope transfer rule. Only Administrators can update an envelope transfer rule. In addition, to use envelope transfer rules, the **Transfer Custody** feature must be enabled for your account.
      operationId: EnvelopeTransferRules_PutEnvelopeTransferRule
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the envelope transfer rule. The system generates this id when the rule is first created.
          in: path
          name: envelopeTransferRuleId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopeTransferRule"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTransferRule"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Changes the status of an envelope transfer rule.
      tags:
        - EnvelopeTransferRules
      x-ds-in-sdk: true
      x-ds-method: updateEnvelopeTransferRule
      x-ds-methodname: updateEnvelopeTransferRule
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}":
    get:
      deprecated: false
      description: |-
        Retrieves the overall status for the specified envelope.
        To get the status of a list of envelopes, use
        [Envelope: listStatusChanges ](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges/).
      operationId: Envelopes_GetEnvelope
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When **true**, envelope information can be added or modified.
          in: query
          name: advanced_update
          required: false
          schema:
            type: string
        - description: |
            Specifies additional information about the envelope to return. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:

            - `custom_fields`: The custom fields associated with the envelope.
            - `documents`: The documents associated with the envelope.
            - `attachments`: The attachments associated with the envelope.
            - `extensions`: Information about the email settings associated with the envelope.
            - `folders`: The folder where the envelope exists.
            - `recipients`: The recipients associated with the envelope.
            - `powerform`: The PowerForms associated with the envelope.
            - `tabs`: The tabs associated with the envelope.
            - `payment_tabs`: The payment tabs associated with the envelope.
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelope"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the status of a single envelope.
      tags:
        - Envelopes
      x-ds-examples:
        - description: |
            This example shows a how to get information about
            an envelope with a given envelope id.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            ```
          direction: response
          format: json
          response:
            allowMarkup: "false"
            autoNavigation: "true"
            brandId: 56502fe1-xxxx-xxxx-xxxx-97cb5c43176a
            certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
            createdDateTime: 2016-10-05T01:04:58.1830000Z
            customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
            documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
            documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
            emailSubject: Please sign the NDA
            enableWetSign: "true"
            envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            envelopeIdStamping: "true"
            envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
            initialSentDateTime: 2016-10-05T01:04:58.7770000Z
            is21CFRPart11: "false"
            isSignatureProviderEnvelope: "false"
            lastModifiedDateTime: 2016-10-05T01:04:58.1830000Z
            notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
            purgeState: unpurged
            recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
            sentDateTime: 2016-10-05T01:04:58.7770000Z
            status: sent
            statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
            templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
          style: custom
          title: Get Status About a Specific Envelope
        - description: |
            This example shows a how to get information about
            envelopes created since January 1, 2016 and before October 6, 2016.
            You can leave off the `to_date` parameter to get envelopes created from the `from_date` to today.

            The request for this endpoint has no payload.

            ### Request
            ```
            GET /restapi/v2.1/accounts/1703061/envelopes?from_date=2016-01-01&to_date=2016-10-06
            ```
          direction: response
          format: json
          response:
            endPosition: "1"
            envelopes:
              - certificateUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/certificate
                customFieldsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/custom_fields
                documentsCombinedUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents/combined
                documentsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/documents
                envelopeId: 379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                envelopeUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0
                notificationUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/notification
                recipientsUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/recipients
                status: completed
                statusChangedDateTime: 2016-10-04T15:26:28.2830000Z
                templatesUri: /envelopes/379497bb-xxxx-xxxx-xxxx-a8e397f538d0/templates
              - certificateUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/certificate
                customFieldsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/custom_fields
                documentsCombinedUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents/combined
                documentsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/documents
                envelopeId: 4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                envelopeUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6
                notificationUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/notification
                recipientsUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/recipients
                status: sent
                statusChangedDateTime: 2016-10-05T01:04:58.7770000Z
                templatesUri: /envelopes/4b728be4-xxxx-xxxx-xxxx-d63e23f822b6/templates
            nextUri: ""
            previousUri: ""
            resultSetSize: "2"
            startPosition: "0"
            totalSetSize: "2"
          style: custom
          title: Get Status About Envelopes Since a Specified Date
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getEnvelope
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        This method enables you to make changes to an envelope.
        You can use it to:

        * Send a draft envelope
        * Void an in-process envelope
        * Modify a draft envelope
        * Purge documents and envelope metadata from the DocuSign platform


        <div class="highlight highlight-info">
        <p markdown="1">

        Although the request body for this method
        is a complete envelope definition,
        you only need to provide
        the properties that
        you're updating.

        </p>
        </div>


        ## Sending a Draft Envelope

        To send a draft envelope, include the following code in the request body:

        ```json
        {
          "status": "sent"
        }
        ```

        You can attach a workflow before sending the envelope:

        ```json
        {
          "status": "sent",
          "workflow": {
            "workflowSteps": [
              {
                "action": "pause_before",
                "description": "pause_before routing order 2",
                "itemId": 2,
                "triggerOnItem": "routing_order"
              }
            ]
          }
        }
        ```

        ## Working with Workflows

        To unpause a workflow, the request body should include this:

        ```json
        {
          "workflow": {
            "workflowStatus": "in_progress"
          }
        }
        ```

        ## Voiding an In-Process Envelope

        To void an in-process envelope, include the following code in the request body:

        ```json
        {
          "status": "voided",
          "voidedReason": "The reason for voiding the envelope"
        }
        ```

        ## Modifying Envelope Email Information

        To change the email subject and message of a draft envelope,
        include the following code in the request body:

        ```json
        {
          "emailSubject": "new email subject",
          "emailBlurb": "new email message"
        }
        ```

        ## Purging Documents from DocuSign


        To place only the documents
        in the purge queue,
        leaving any
        corresponding attachments
        and tabs in the DocuSign platform,
        set the `purgeState` property
        to `documents_queued`.


        ```json
        {
          "purgeState": "documents_queued"
        }
        ```

        To place documents,
        attachments,
        and tabs
        in the purge queue,
        set the `purgeState` property
        to `documents_and_metadata_queued`.

        ```json
        {
          "purgeState": "documents_and_metadata_queued"
        }
        ```


        You can purge documents
        only from completed envelopes
        that are not marked as the authoritative copy.
        The user requesting the purge
        must have permission to purge documents
        and
        must be the sender or be acting on behalf of the sender.



        When the purge request is initiated
        the items to be purged
        are placed in the purge queue
        for deletion in 14 days.
        The sender
        and
        all recipients with DocuSign accounts
        associated with the envelope
        get an email notification
        the the documents will be deleted in 14 days.
        The notification contains a link
        to the documents.
        A second email notification
        is sent 7 days later.
        At the end of the 14-day period
        the documents are deleted from the system.
        Recipients without DocuSign accounts
        do not receive email notifications.


        If your account has a Document Retention policy,
        envelope documents
        are automatically placed
        in the purge queue,
        and notification emails are sent
        at the end of the retention period.
        Setting a Document Retention policy is the same as setting a
        schedule for purging documents.

        ## Removing Documents from the Purge Queue

        To remove documents from the purge queue, include the following code in the request body:

        ```
        {
          "purgeState": "documents_dequeued"
        }
        ```
      operationId: Envelopes_PutEnvelope
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes.
          in: query
          name: advanced_update
          required: false
          schema:
            type: string
        - description: When set to **true**, sends the specified envelope again.
          in: query
          name: resend_envelope
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelope"
        description: A container used to send documents to recipients. The envelope carries information about the sender and timestamps to indicate the progress of the delivery procedure. It can contain collections of Documents, Tabs and Recipients.
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeUpdateSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Send, void, or modify a draft envelope. Purge documents from a completed envelope.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: update
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments":
    delete:
      deprecated: false
      description: ""
      operationId: Attachments_DeleteAttachments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeAttachmentsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeAttachmentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Delete one or more attachments from a DRAFT envelope.
      tags:
        - EnvelopeAttachments
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteAttachments
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: ""
      operationId: Attachments_GetAttachments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeAttachmentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a list of attachments associated with the specified envelope
      tags:
        - EnvelopeAttachments
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getAttachments
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: "Supported attachment formats include: .asp, .bmp, .csv, .doc, .docm, .docx, .dot, .dotm, .dotx, .gif, .htm, .html, .jpeg, .jpg, .msg, .pdf, .png, .pot, .potx, .pps, .ppt, .pptm, .pptx, .ps, .rtf, .tif, .tiff, .txt, .wpd, .xls, .xlsm, .xlsx, .xml, and .xps. For more information about supported file formats, see [Supported File Formats](https://support.docusign.com/guides/ndse-user-guide-supported-file-formats)."
      operationId: Attachments_PutAttachments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeAttachmentsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeAttachmentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Add one or more attachments to a draft or in-process envelope.
      tags:
        - EnvelopeAttachments
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: putAttachments
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}":
    get:
      deprecated: false
      description: ""
      operationId: Attachments_GetAttachment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The unique identifier for the attachment.
          in: path
          name: attachmentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves an attachment from the envelope.
      tags:
        - EnvelopeAttachments
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getAttachment
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: Attachments_PutAttachment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The unique identifier for the attachment.
          in: path
          name: attachmentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/attachment"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeAttachmentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Add an attachment to a DRAFT or IN-PROCESS envelope.
      tags:
        - EnvelopeAttachments
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: putAttachment
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/audit_events":
    get:
      deprecated: false
      description: Gets the envelope audit events for the specified envelope.
      operationId: AuditEvents_GetAuditEvents
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeAuditEventResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the envelope audit events for an envelope.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: listAuditEvents
      x-ds-methodname: listAuditEvents
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/comments/transcript":
    get:
      deprecated: false
      description: |-
        Retrieves a PDF file containing all of the comments that senders and recipients have added to the documents in an envelope.

        **Note**: Comments are disabled by default. To use the comments feature, an account administrator must enable comments on the account (in the `accountSettingsInformation` object, set the `enableSigningExtensionComments` property to **true**). 
      operationId: Comments_GetCommentsTranscript
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: (Optional) The encoding to use for the file.
          in: query
          name: encoding
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            application/pdf:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a PDF transcript of all of the comments in an envelope.
      tags:
        - Comments
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getCommentsTranscript
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/custom_fields":
    delete:
      deprecated: false
      description: Deletes envelope custom fields for draft and in-process envelopes.
      operationId: CustomFields_DeleteCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeCustomFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes envelope custom fields for draft and in-process envelopes.
      tags:
        - EnvelopeCustomFields
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteCustomFields
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: |-
        Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.

        There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
      operationId: CustomFields_GetCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customFieldsEnvelope"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the custom field information for the specified envelope.
      tags:
        - EnvelopeCustomFields
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listCustomFields
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: |
        Updates the envelope custom fields for draft and in-process envelopes.

        You may assign up to three envelope custom fields to an envelope. This limit does not include account (document) custom fields. Each custom field used in an envelope must have a unique name.
      operationId: CustomFields_PostCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeCustomFields"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates envelope custom fields for an envelope.
      tags:
        - EnvelopeCustomFields
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createCustomFields
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: |
        Updates the envelope custom fields in draft and in-process envelopes.

        Each custom field used in an envelope must have a unique name.
      operationId: CustomFields_PutCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeCustomFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeCustomFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates envelope custom fields in an envelope.
      tags:
        - EnvelopeCustomFields
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateCustomFields
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetApplianceInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns envelope and recipient information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getApplianceInfo
      x-ds-methodname: getApplianceInfo
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/account_info":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetAccount
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceAccount"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns envelope account information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getAccount
      x-ds-methodname: getAccount
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/custom_fields":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Return custom fields information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getCustomFields
      x-ds-methodname: getCustomFields
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/custom_fields/delete":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_DeleteCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes custom fields information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: deleteCustomFields
      x-ds-methodname: deleteCustomFields
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/date_signed":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetDateSigned
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets date signed information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getDateSigned
      x-ds-methodname: getDateSigned
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/document/{documentId}":
    delete:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_DeleteDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes document information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: deleteDocument
      x-ds-methodname: deleteDocument
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PutDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates document information for Display Applianc.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: updateDocument
      x-ds-methodname: updateDocument
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/document_page_list":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetDocumentPages
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Return document pages for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getDocumentPages
      x-ds-methodname: getDocumentPages
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/image":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns images for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getImage
      x-ds-methodname: getImage
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/localepolicy/{userId}":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetLocalePolicy
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns locale policy information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getLocalePolicy
      x-ds-methodname: getLocalePolicy
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/page_info":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PostPageInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates page information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: createPageInfo
      x-ds-methodname: createPageInfo
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PutPageInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates page information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: updatePageInfo
      x-ds-methodname: updatePageInfo
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/page_info/delete":
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_DeletePageInfo
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes page information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: deletePageInfo
      x-ds-methodname: deletePageInfo
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf":
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PutPdf
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayAppliancePdf"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets latest PDF for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: updatePdf
      x-ds-methodname: updatePdf
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf/{pdfId}":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetPdf
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: |-
            **Deprecated**. 

            The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
          in: path
          name: pdfId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayAppliancePdf"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Return PDF for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getPdf
      x-ds-methodname: getPdf
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/pdf_blobs":
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetPdfBlob
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayAppliancePdf"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns PDF blobs for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getPdfBlob
      x-ds-methodname: getPdfBlob
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PostPdfBlob
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayAppliancePdf"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds PDF blobs for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: createPdfBlob
      x-ds-methodname: createPdfBlob
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PutPdfBlob
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates PDF blobs for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: updatePdfBlob
      x-ds-methodname: updatePdfBlob
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/recipient_denied_copy":
    delete:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_DeleteRecipientDeniedDocumentCopy
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes RecipientDeniedDocumentCopy for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: deleteRecipientDeniedDocumentCopy
      x-ds-methodname: deleteRecipientDeniedDocumentCopy
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PutRecipientDeniedDocumentCopy
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates RecipientDeniedDocumentCopy for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: updateRecipientDeniedDocumentCopy
      x-ds-methodname: updateRecipientDeniedDocumentCopy
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/display_appliance_info/signer_attachment_info":
    delete:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_DeleteSignerAttachment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes signer attachment information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: deleteSignerAttachment
      x-ds-methodname: deleteSignerAttachment
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_GetSignerAttachment
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceSignerAttachment"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns signer attachment information for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: getSignerAttachment
      x-ds-methodname: getSignerAttachment
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents":
    delete:
      deprecated: false
      description: |+
        Deletes one or more documents from an existing envelope that has not yet been completed.

        To delete a document, use only the relevant parts of the [`envelopeDefinition`](#envelopeDefinition).
        For example, this request body specifies that you want to delete the document whose `documentId` is "1".


        ```text
        {
          "documents": [
            {
              "documentId": "1"
            }
          ]
        }
        ```

        The envelope status must be one of:

        - `created`
        - `sent`
        - `delivered`


      operationId: Documents_DeleteDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes documents from a draft envelope.
      tags:
        - EnvelopeDocuments
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocuments
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: Retrieves a list of documents associated with the specified envelope.
      operationId: Documents_GetDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **true**, allows recipients to get documents by their user id. For example, if a user is included in two different routing orders with different visibilities, using this parameter returns all of the documents from both routing orders.
          in: query
          name: documents_by_userid
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: include_document_size
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes metadata that indicates which properties the sender can edit.
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
        - description: When set to **true**, information about the tabs associated with the documents are included in the response.
          in: query
          name: include_tabs
          required: false
          schema:
            type: string
        - description: Allows the sender to retrieve the documents as one of the recipients that they control. The `documents_by_userid` parameter must be set to **false** for this to work.
          in: query
          name: recipient_id
          required: false
          schema:
            type: string
        - description: The ID of a shared user that you want to impersonate in order to retrieve their view of the list of documents. This parameter is used in the context of a shared inbox (i.e., when you share envelopes from one user to another through the RADmin console).
          in: query
          name: shared_user_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of envelope documents.
      tags:
        - EnvelopeDocuments
      x-ds-examples:
        - description: |
            This example shows how
            to get a list
            of all the documents in an envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents
            ```
          direction: response
          format: json
          response:
            envelopeDocuments:
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "1"
                includeInDownload: "true"
                name: NDA.pdf
                order: "1"
                pages: "3"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/1
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "2"
                includeInDownload: "true"
                name: House.pdf
                order: "2"
                pages: "1"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/2
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "3"
                includeInDownload: "true"
                name: contractor_agreement.docx
                order: "3"
                pages: "2"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: certificate
                includeInDownload: "true"
                name: Summary
                order: "999"
                pages: "4"
                signerMustAcknowledge: no_interaction
                type: summary
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/certificate
            envelopeId: 44efc9e6-xxxx-xxxx-xxxx-801410d6922d
          style: custom
          title: List All Documents in an Envelope
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listDocuments
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        Adds one or more documents to an existing envelope document.
        <p>**Note**: When adding or modifying documents for an in-process envelope, DocuSign recommends locking the envelope prior to making any changes.

        If the file name of a document contains unicode characters, you need to include a `Content-Disposition` header. Example:


        **Header**: `Content-Disposition`


        **Value**: `file; filename=\"name\";fileExtension=ext;documentId=1`
      operationId: Documents_PutDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds one or more documents to an existing envelope document.
      tags:
        - EnvelopeDocuments
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateDocuments
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}":
    get:
      deprecated: false
      description: Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.
      operationId: Documents_GetDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            This parameter takes the following special keywords:

            - `combined`: Retrieves a PDF file that contains the combined content of all of the documents. If the account option **Attach certification of completion to envelope** is on, then the Certificate of Completion is also included in the PDF file. You set this account option in the Admin tool on the **Signing Settings** screen, or by setting the `attachCompletedEnvelope` property in the `accountSettings` object to **true**.
            - `archive`: Retrieves a ZIP archive that contains all of the PDF documents and the Certificate of Completion.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **false**, the envelope signing certificate is removed from the download.
          in: query
          name: certificate
          required: false
          schema:
            type: string
        - description: When set to **true**, allows recipients to get documents by their user id. For example, if a user is included in two different routing orders with different visibilities, using this parameter returns all of the documents from both routing orders.
          in: query
          name: documents_by_userid
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: encoding
          required: false
          schema:
            type: string
        - description: When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign.
          in: query
          name: encrypt
          required: false
          schema:
            type: string
        - description: "Specifies the language for the Certificate of Completion in the response. The supported languages are: Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es). "
          in: query
          name: language
          required: false
          schema:
            type: string
        - description: Allows the sender to retrieve the documents as one of the recipients that they control. The `documents_by_userid` parameter must be set to **false** for this functionality to work.
          in: query
          name: recipient_id
          required: false
          schema:
            type: string
        - description: The ID of a shared user that you want to impersonate in order to retrieve their view of the list of documents. This parameter is used in the context of a shared inbox (i.e., when you share envelopes from one user to another through the RADmin console).
          in: query
          name: shared_user_id
          required: false
          schema:
            type: string
        - description: "When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red. "
          in: query
          name: show_changes
          required: false
          schema:
            type: string
        - description: "When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, then the watermark for the account is added to the PDF documents. This option can remove the watermark. "
          in: query
          name: watermark
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            application/pdf:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a document from an envelope.
      tags:
        - EnvelopeDocuments
      x-ds-examples:
        - description: |+
            This example shows how to retrieve
            a single document from an envelope
            as a PDF file.


            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
            ```

          direction: response
          format: json
          response: PDF File
          style: custom
          title: Get a Single Document as a PDF File
        - description: |+
            If you use `combined` instead of a document id
            the response is a PDF file that contains
            all of the documents in the specified envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/combined
            ```

          direction: response
          format: json
          response: PDF File
          style: custom
          title: Get All Documents as a Single PDF File
        - description: |
            This example shows how
            to get a list
            of all the documents in an envelope.

            The request for this endpoint has no payload.

            ### Request

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents
            ```
          direction: response
          format: json
          response:
            envelopeDocuments:
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "1"
                includeInDownload: "true"
                name: NDA.pdf
                order: "1"
                pages: "3"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/1
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "2"
                includeInDownload: "true"
                name: House.pdf
                order: "2"
                pages: "1"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/2
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: "3"
                includeInDownload: "true"
                name: contractor_agreement.docx
                order: "3"
                pages: "2"
                signerMustAcknowledge: no_interaction
                type: content
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/3
              - availableDocumentTypes:
                  - isDefault: "true"
                    type: electronic
                display: inline
                documentId: certificate
                includeInDownload: "true"
                name: Summary
                order: "999"
                pages: "4"
                signerMustAcknowledge: no_interaction
                type: summary
                uri: /envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/documents/certificate
            envelopeId: 44efc9e6-xxxx-xxxx-xxxx-801410d6922d
          style: custom
          title: List All Documents in an Envelope
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getDocument
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |
        Adds a document to an existing draft envelope. The bytes of the document make up the body of the request. 



        **Note**: When adding or modifying documents for an in-process envelope, DocuSign recommends locking the envelope prior to making any changes.




        If the file name of the document contains unicode characters, you need to include a `Content-Disposition` header. Example:


        **Header**: `Content-Disposition`


        **Value**: `file; filename=\"name\";fileExtension=ext;documentId=1`
      operationId: Documents_PutDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeDocument"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds a document to an existing draft envelope.
      tags:
        - EnvelopeDocuments
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateDocument
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields":
    delete:
      deprecated: false
      description: Deletes custom document fields from an existing envelope document.
      operationId: DocumentFields_DeleteDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeDocumentFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes custom document fields from an existing envelope document.
      tags:
        - EnvelopeDocumentFields
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocumentFields
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: Retrieves the custom document field information from an existing envelope document.
      operationId: DocumentFields_GetDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the custom document fields from an  existing envelope document.
      tags:
        - EnvelopeDocumentFields
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listDocumentFields
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: Creates custom document fields in an existing envelope document.
      operationId: DocumentFields_PostDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeDocumentFields"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates custom document fields in an existing envelope document.
      tags:
        - EnvelopeDocumentFields
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createDocumentFields
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: Updates existing custom document fields in an existing envelope document.
      operationId: DocumentFields_PutDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeDocumentFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates existing custom document fields in an existing envelope document.
      tags:
        - EnvelopeDocumentFields
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateDocumentFields
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/html_definitions":
    get:
      deprecated: false
      description: ""
      operationId: ResponsiveHtml_GetEnvelopeDocumentHtmlDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitionOriginals"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |-
        Gets the Original HTML Definition used to
        generate the Responsive HTML for a given document.
      tags:
        - EnvelopeDocumentHtmlDefinitions
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getEnvelopeDocumentHtmlDefinitions
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages":
    get:
      deprecated: false
      description: Returns images of the pages in a document for display based on the parameters that you specify.
      operationId: Pages_GetPageImages
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94.
          in: query
          name: dpi
          required: false
          schema:
            type: string
        - description: Sets the maximum height of the returned images in pixels.
          in: query
          name: max_height
          required: false
          schema:
            type: string
        - description: Sets the maximum width of the returned images in pixels.
          in: query
          name: max_width
          required: false
          schema:
            type: string
        - description: "If **true**, using cache is disabled and image information is retrieved from a database. **True** is the default value. "
          in: query
          name: nocache
          required: false
          schema:
            type: string
        - description: If **true**, changes display in the user interface.
          in: query
          name: show_changes
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/pageImages"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns document page image(s) based on input.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getPageImages
      x-ds-methodname: getDocumentPageImages
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}":
    delete:
      deprecated: false
      description: Deletes a page from a document in an envelope based on the page number.
      operationId: Pages_DeletePage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a page from a document in an envelope.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: deleteDocumentPage
      x-ds-methodname: deleteDocumentPage
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image":
    get:
      deprecated: false
      description: Returns an image of a page in a document for display.
      operationId: Pages_GetPageImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
        - description: Sets the dots per inch (DPI) for the returned image.
          in: query
          name: dpi
          required: false
          schema:
            type: string
        - description: Sets the maximum height for the page image in pixels. The DPI is recalculated based on this setting.
          in: query
          name: max_height
          required: false
          schema:
            type: string
        - description: Sets the maximum width for the page image in pixels. The DPI is recalculated based on this setting.
          in: query
          name: max_width
          required: false
          schema:
            type: string
        - description: When **true**, changes display in the user interface.
          in: query
          name: show_changes
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a page image from an envelope for display.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getPageImage
      x-ds-methodname: getDocumentPageImage
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: Rotates page image from an envelope for display. The page image can be rotated to the left or right.
      operationId: Pages_PutPageImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/pageRequest"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Rotates page image from an envelope for display.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: rotateDocumentPage
      x-ds-methodname: rotateDocumentPage
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/tabs":
    get:
      deprecated: false
      description: ""
      operationId: Tabs_GetPageTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns tabs on the specified page.
      tags:
        - EnvelopeDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: getByPage
      x-ds-methodname: getPageTabs
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/responsive_html_preview":
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/)
        HTML version of a specific document.
        This method enables you to preview a PDF document
        conversion to responsive HTML across device types prior to sending.

        The request body is a `documentHtmlDefinition` object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
      operationId: ResponsiveHtml_PostDocumentResponsiveHtmlPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentHtmlDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitions"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a preview of the responsive version of a document.
      tags:
        - DocumentResponsiveHtmlPreview
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createDocumentResponsiveHtmlPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/tabs":
    delete:
      deprecated: false
      description: ""
      operationId: Tabs_DeleteDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/tabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes tabs from an envelope document.
      tags:
        - EnvelopeDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocumentTabs
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: This method returns the tabs associated with a document.
      operationId: Tabs_GetDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **true**, the response includes metadata indicating which properties are editable.
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
        - description: |-
            Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page GUIDs.

            Example: `page_numbers=2,6`

            Note: You can only enter individual page numbers, and not a page range.
          in: query
          name: page_numbers
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeDocumentTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the tabs on a document.
      tags:
        - EnvelopeDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getDocumentTabs
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: Tabs_PostDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/tabs"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds the tabs to an envelope document.
      tags:
        - EnvelopeDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createDocumentTabs
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: ""
      operationId: Tabs_PutDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/tabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the tabs for an envelope document.
      tags:
        - EnvelopeDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateDocumentTabs
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates":
    get:
      deprecated: false
      description: Retrieves the templates associated with a document in the specified envelope.
      operationId: Templates_GetDocumentTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: |
            A comma-separated list that limits the results.
            Valid values are:

            * `applied`
            * `matched`
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the templates associated with a document in an existing envelope.
      tags:
        - EnvelopeTemplates
      x-ds-in-sdk: true
      x-ds-method: listByDocument
      x-ds-methodname: listTemplatesForDocument
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: Adds templates to a document in the specified envelope.
      operationId: Templates_PostDocumentTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: preserve_template_recipient
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentTemplateList"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentTemplateList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds templates to a document in an  envelope.
      tags:
        - EnvelopeTemplates
      x-ds-in-sdk: true
      x-ds-method: applyToDocument
      x-ds-methodname: applyTemplateToDocument
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/templates/{templateId}":
    delete:
      deprecated: false
      description: Deletes the specified template from a document in an existing envelope.
      operationId: Templates_DeleteDocumentTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a template from a document in an existing envelope.
      tags:
        - EnvelopeTemplates
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteTemplatesFromDocument
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/email_settings":
    delete:
      deprecated: false
      description: Deletes all existing email override settings for the envelope. If you want to delete an individual email override setting, use the PUT and set the value to an empty string. Note that deleting email settings will only affect email communications that occur after the deletion and the normal account email settings are used for future email communications.
      operationId: EmailSettings_DeleteEmailSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/emailSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the email setting overrides for an envelope.
      tags:
        - EnvelopeEmailSettings
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteEmailSettings
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: Retrieves the email override settings for the specified envelope.
      operationId: EmailSettings_GetEmailSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/emailSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the email setting overrides for an envelope.
      tags:
        - EnvelopeEmailSettings
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getEmailSettings
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: |-
        Adds email override settings, changing the email address to reply to an email address, name, or the BCC for email archive information, for the envelope. Note that adding email settings will only affect email communications that occur after the addition was made.

        ### Important: The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options. To send a copy of the envelope to a recipient who does not need to sign, use a Carbon Copy or Certified Delivery recipient type.
      operationId: EmailSettings_PostEmailSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/emailSettings"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/emailSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds email setting overrides to an envelope.
      tags:
        - EnvelopeEmailSettings
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createEmailSettings
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: |-
        Updates the existing email override settings for the specified envelope. Note that modifying email settings will only affect email communications that occur after the modification was made.

        This can also be used to delete an individual email override setting by using an empty string for the value to be deleted.
      operationId: EmailSettings_PutEmailSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/emailSettings"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/emailSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the email setting overrides for an envelope.
      tags:
        - EnvelopeEmailSettings
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateEmailSettings
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/form_data":
    get:
      deprecated: false
      description: |-
        This method downloads the envelope and field data from any in-process, completed, or canceled envelope that you sent or that is shared with you. Recipients who are also full administrators on an account can view form data for any envelopes that another user on the account has sent to them.

        **Note**: To use this feature, the Sending Setting "Allow sender to download form data" must be enabled for the account.
      operationId: FormData_GetFormData
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeFormData"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns envelope form data for an existing envelope.
      tags:
        - EnvelopeFormData
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getFormData
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/html_definitions":
    get:
      deprecated: false
      description: ""
      operationId: ResponsiveHtml_GetEnvelopeHtmlDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitionOriginals"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Original HTML Definition used to generate the Responsive HTML for the envelope.
      tags:
        - EnvelopeHtmlDefinitions
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getEnvelopeHtmlDefinitions
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/lock":
    delete:
      deprecated: false
      description: |-
        Deletes the lock from the specified envelope.
        The user deleting the lock must be the same user
        who locked the envelope.

        You must include the `X-DocuSign-Edit` header
        as described in
        [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/).

        This method takes an optional query paramter
        that lets you specify whether
        changes made while the envelope was locked
        are kept or discarded.


        | Query Parameter | Description                                                                                                                                                                         |
        | :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | `save_changes`  | (Optional) When set to **true** (the default), any changes made while the lock was active are saved. When set to **false**, any changes made while the envelope was locked are discarded. |
      operationId: Lock_DeleteEnvelopeLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeLocks"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes an envelope lock.
      tags:
        - EnvelopeLocks
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteLock
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: |
        Retrieves general information about an envelope lock.

        The user requesting the information must be the same user
        who locked the envelope.

        You can use this method to recover the lock information,
        including the `lockToken`,
        for a locked envelope.
        The `X-DocuSign-Edit` header is included in the response.

        See [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/)
        for a description of the `X-DocuSign-Edit` header.
      operationId: Lock_GetEnvelopeLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeLocks"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets envelope lock information.
      tags:
        - EnvelopeLocks
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getLock
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: |+
        This method locks the specified envelope and sets the time until
        the lock expires to prevent other users or recipients from
        changing the envelope.

        **Note**: To use this method, the envelope locking
        capability must be enabled for the user; that is, the user setting
        `canLockEnvelopes` must be set to **true**.

        The response to this request includes a `lockToken` parameter
        that you must use in the `X-DocuSign-Edit` header for
        every PUT method (typically a method that updates an envelope)
        while the envelope is locked.


        If you do not provide the `lockToken` when accessing
        a locked envelope, you will get the following
        error:

        ```
        {
           "errorCode": "EDIT_LOCK_NOT_LOCK_OWNER",
           "message": "The user is not the owner of the lock. The template is locked by another user or in another application"
        }
        ```


        ### The X-DocuSign-Edit header

        The `X-DocuSign-Edit` header looks like this
        and can be specified in either JSON or XML.

        **JSON**
        ```
        {
          "LockToken": "token-from-response",
          "LockDurationInSeconds": "600"
        }
        ```

        **XML**
        ```
        <DocuSignEdit>
          <LockToken>token-from-response</LockToken>
          <LockDurationInSeconds>600</LockDurationInSeconds>
        </DocuSignEdit>
        ```

        In the actual HTTP header, you would remove the linebreaks:

        ```
        X-DocuSign-Edit: {"LockToken": "token-from-response", "LockDurationInSeconds": "600" }
            or
        X-DocuSign-Edit:<DocuSignEdit><LockToken>token-from-response</LockToken><LockDurationInSeconds>600</LockDurationInSeconds></DocuSignEdit>
        ```


      operationId: Lock_PostEnvelopeLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/lockRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeLocks"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Locks an envelope.
      tags:
        - EnvelopeLocks
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createLock
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: |+
        Updates the lock information for a locked envelope.

        You must include the `X-DocuSign-Edit` header
        as described in
        [EnvelopeLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopelocks/create/).


        Use this method to change the duration
        of the lock (`lockDurationInSeconds`)
        or the `lockedByApp` string.

        The request body is a full `lockRequest` object,
        but you only need to specify the
        properties that you are updating. For example:

        ```
        {
          "lockDurationInSeconds": "3600",
          "lockedByApp": "My Application"
        }
        ```

      operationId: Lock_PutEnvelopeLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/lockRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeLocks"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an envelope lock.
      tags:
        - EnvelopeLocks
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateLock
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification":
    get:
      deprecated: false
      description: Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
      operationId: Notification_GetEnvelopesEnvelopeIdNotification
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notification"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets envelope notification information.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getNotificationSettings
      x-ds-methodname: getNotificationSettings
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        This method sets the notifications (reminders and expirations) for an existing envelope. The request body sends a structure containing reminders and expirations settings. It also specifies whether to use the settings specified in the request, or the account default notification settings for the envelope.

        Note that this request only specifies when notifications are sent; it does not initiate sending of email messages.
      operationId: Notification_PutEnvelopesEnvelopeIdNotification
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopeNotificationRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notification"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets envelope notifications for an existing envelope.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: updateNotificationSettings
      x-ds-methodname: updateNotificationSettings
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients":
    delete:
      deprecated: false
      description: |-
        Deletes one or more recipients from a draft or sent envelope. List the recipients that you want to delete in the body of the request. This method uses the `recipientId` as the key for deleting recipients.

        If the envelope is `In Process`, meaning that it has been sent and has not been completed or voided, recipients that have completed their actions cannot be deleted.
      operationId: Recipients_DeleteRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipients"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes recipients from an envelope.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteRecipients
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: |-
        Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list. This method can also be used to retrieve the tab values.

        The `currentRoutingOrder` property of the response contains the `routingOrder` value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
      operationId: Recipients_GetRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: " When set to **true** and `include_tabs` value is set to **true**, all tabs with anchor tab properties are included in the response. "
          in: query
          name: include_anchor_tab_locations
          required: false
          schema:
            type: string
        - description: " When set to **true**, the extended properties are included in the response. "
          in: query
          name: include_extended
          required: false
          schema:
            type: string
        - description: Boolean value that specifies whether to include metadata associated with the recipients (for envelopes only, not templates).
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
        - description: When set to **true**, the tab information associated with the recipient is included in the response.
          in: query
          name: include_tabs
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the status of recipients for an envelope.
      tags:
        - EnvelopeRecipients
      x-ds-examples:
        - description: |+
            This example shows the result of an envelope
            with one signer and a CC'ed recipient.


            ### Request
            The request for this endpoint has no payload.

            ```
            GET /restapi/v2.1/accounts/1703061/envelopes/44efc9e6-xxxx-xxxx-xxxx-801410d6922d/recipients
            ```


          direction: response
          format: json
          response:
            agents: []
            carbonCopies:
              - email: aoneil@example.com
                name: Ariana O'Neill
                recipientId: "2"
                recipientIdGuid: 72edf9b6-xxxx-xxxx-xxxx-86bc5d598bb8
                requireIdLookup: "false"
                routingOrder: "2"
                status: completed
                userId: b72bd827-xxxx-xxxx-xxxx-64ab32f0a0eb
            certifiedDeliveries: []
            currentRoutingOrder: "1"
            editors: []
            inPersonSigners: []
            intermediaries: []
            recipientCount: "2"
            signers:
              - deliveredDateTime: 2016-10-05T21:18:12.3330000Z
                email: jallard@example.com
                isBulkRecipient: "false"
                name: Jennie Allard
                recipientId: "1"
                recipientIdGuid: 4575d5e9-xxxx-xxxx-xxxx-6c59ca7c43f8
                requireIdLookup: "false"
                routingOrder: "1"
                signedDateTime: 2016-10-05T21:18:41.6930000Z
                status: completed
                userId: ca45284a-xxxx-xxxx-xxxx-76035bd795b2
          style: custom
          title: List Recipients and CC-ed Recipients
        - description: |
            This example shows the method's response after the envelope was signed.

            The signer recipient successfully authenticated using:
            * An access code (a pre-shared secret between the sender and the signer)
            * Authentication via Facebook. The Facebook email address is recorded in the Certificate of Completion
          direction: response
          format: json
          response:
            agents: []
            carbonCopies: []
            certifiedDeliveries: []
            currentRoutingOrder: "1"
            editors: []
            inPersonSigners: []
            intermediaries: []
            recipientCount: "1"
            signers:
              - accessCode: "1234"
                deliveredDateTime: 2016-07-11T06:19:36.4200000Z
                email: larry@example.com
                idCheckConfigurationName: Facebook
                isBulkRecipient: "false"
                name: Larry Smithers
                recipientAuthenticationStatus:
                  accessCodeResult:
                    eventTimestamp: 2016-07-11T06:18:55.7170000Z
                    status: Passed
                  facebookResult:
                    eventTimestamp: 2016-07-11T06:19:28.3170000Z
                    status: Passed
                recipientId: "1"
                recipientIdGuid: 9670e679-xxxx-xxxx-xxxx-02b43027cb0a
                requireIdLookup: "true"
                routingOrder: "1"
                signInEachLocation: "false"
                signedDateTime: 2016-07-11T06:19:44.7470000Z
                status: completed
                userId: 57a7b68f-xxxx-xxxx-xxxx-381042d14ca5
          style: custom
          title: List Recipients Who Used Facebook and Access Code Authentication
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listRecipients
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: |-
        Adds one or more recipients to an envelope.

        For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient's routing order is before or the same as the envelope's next recipient, an email is only sent if the optional `resend_envelope` query string is set to **true**.
      operationId: Recipients_PostRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
          in: query
          name: resend_envelope
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipients"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds one or more recipients to an envelope.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createRecipient
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: |-
        Updates the recipients of a draft envelope or corrects recipient information for an in-process envelope. 

        If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the EnvelopeRecipients::Create method).

        You can also use this method to resend an envelope to a recipient by using the `resend_envelope` option.

        **Updating Sent Envelopes**

        After an envelope has been sent, you can edit only the following properties: 

        - `accessCode`
        - `agentCanEditName`
        - `agentCanEditEmail`
        - `customFields`
        - `deliveryMethod`
        - `documentVisibility`
        - `email`
        - `emailNotification`
        - `idCheckConfigurationName`
        - `name`
        - `note`
        - `phoneAuthentication`
        - `recipientType` (For this to work, you must also change the recipient object to match the recipient type.)
        - `requireIdLookup`
        - `routingOrder`
        - `routingOrder`
        - `signingGroupId` (You can change this id to switch to a different signing group and its corresponding set of recipients.)
        - `smsAuthentication`
        - `suppressEmails`
        - `userName`
      operationId: Recipients_PutRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: When set to **true**, recipients are combined or merged with matching recipients. Recipient matching occurs as part of [template matching](https://docs.docusign.com/DocuSignHelp/Content/automatic-template-matching.htm), and is based on Recipient Role and Routing Order.
          in: query
          name: combine_same_order_recipients
          required: false
          schema:
            type: string
        - description: "Indicates if offline signing is enabled for the recipient when a network connection is unavailable. "
          in: query
          name: offline_signing
          required: false
          schema:
            type: string
        - description: When set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
          in: query
          name: resend_envelope
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipients"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipientsUpdateSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates recipients in a draft envelope or corrects recipient information for an in-process envelope.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateRecipients
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/document_visibility":
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates document visibility for one or more recipients based on the `recipientId` and `visible` values that you include in the request body.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutRecipientsDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentVisibilityList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates document visibility for recipients
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: updateRecipientsDocumentVisibility
      x-ds-methodname: updateRecipientsDocumentVisibility
      x-ds-service: EnvelopeDocumentVisibility
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}":
    delete:
      deprecated: false
      description: |-
        Deletes a recipient from a `draft` or `sent` envelope.

        If the envelope is "In Process" (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
      operationId: Recipients_DeleteRecipient
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a recipient from an envelope.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteRecipient
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure":
    get:
      deprecated: false
      description: |-
        Retrieves the default, HTML-formatted Electronic Record and Signature Disclosure (ERSD) for the envelope that you specify. 

        This is the default ERSD disclosure that DocuSign provides for the convenience of U.S.-based customers only. This default disclosure is only valid for transactions between U.S.-based parties.

        To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.
      operationId: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientId
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: query
          name: langCode
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/consumerDisclosure"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the default Electronic Record and Signature Disclosure for an envelope.
      tags:
        - EnvelopeConsumerDisclosures
      x-ds-in-sdk: true
      x-ds-method: getDefault
      x-ds-methodname: getConsumerDisclosureDefault
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure/{langCode}":
    get:
      deprecated: false
      description: |-
        Retrieves the HTML-formatted Electronic Record and Signature Disclosure (ERSD) for the envelope recipient that you specify. This disclosure might differ from the account-level disclosure, based on the signing brand applied to the envelope and the recipient's language settings.

        To set the language of the disclosure that you want to retrieve, specify the `langCode` as either a path or query parameter.
      operationId: ConsumerDisclosure_GetConsumerDisclosureEnvelopeIdRecipientIdLangCode
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to retrieve, as a path parameter. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: path
          name: langCode
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The code for the signer language version of the disclosure that you want to retrieve, as a query parameter. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          in: query
          name: langCode
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/consumerDisclosure"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Electronic Record and Signature Disclosure for a specific envelope recipient.
      tags:
        - EnvelopeConsumerDisclosures
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getConsumerDisclosure
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/document_visibility":
    get:
      deprecated: false
      description: This method returns information about document visibility for a recipient.
      operationId: Recipients_GetRecipientDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns document visibility for a recipient
      tags:
        - EnvelopeDocumentVisibility
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getRecipientDocumentVisibility
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates document visibility for a recipient.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutRecipientDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentVisibilityList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates document visibility for a recipient
      tags:
        - EnvelopeDocumentVisibility
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateRecipientDocumentVisibility
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/identity_proof_token":
    parameters: []
    post:
      deprecated: false
      description: Creates a resource token for a sender. This token allows a sender to return identification data for a recipient using the [ID Evidence API](https://developers.docusign.com/docs/idevidence-api/).
      operationId: Recipients_PostRecipientProofFileResourceToken
      parameters:
        - description: The account ID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The `recipientIdGuid`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/proofServiceResourceToken"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Creates a resource token for a sender to request ID Evidence data. "
      tags:
        - EnvelopeRecipients
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: createRecipientProofFileResourceToken
      x-ds-methodname: createRecipientProofFileResourceToken
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image":
    get:
      deprecated: false
      description: |-
        Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.

        The userId specified in the endpoint must match the authenticated user's user id and the user must be a member of the account.

        The `signatureIdOrName` paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint. 

        For example: "Bob Smith" to "Bob%20Smith"

        Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
      operationId: Recipients_GetRecipientInitialsImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: "The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image."
          in: query
          name: include_chrome
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/gif:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/gif:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the initials image for a user.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getRecipientInitialsImage
      x-ds-methodname: getRecipientInitialsImage
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.

        For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
      operationId: Recipients_PutRecipientInitialsImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets the initials image for an accountless signer.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: updateRecipientInitialsImage
      x-ds-methodname: updateRecipientInitialsImage
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature":
    get:
      deprecated: false
      description: Retrieves signature information for a signer or sign-in-person recipient.
      operationId: Recipients_GetRecipientSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets signature information for a signer or sign-in-person recipient.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getRecipientSignature
      x-ds-methodname: getRecipientSignature
      x-ds-service: Envelopes
    parameters: []
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image":
    get:
      deprecated: false
      description: |-
        Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.

        The userId specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureIdOrName` parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that don't properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint. 

        For example: "Bob Smith" to "Bob%20Smith"

        Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
      operationId: Recipients_GetRecipientSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: When set to **true**, the response includes the chromed version of the signature image.
          in: query
          name: include_chrome
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/gif:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/gif:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieve signature image information for a signer/sign-in-person recipient.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: getRecipientSignatureImage
      x-ds-methodname: getRecipientSignatureImage
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.

        For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.
      operationId: Recipients_PutRecipientSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets the signature image for an accountless signer.
      tags:
        - Envelopes
      x-ds-in-sdk: true
      x-ds-method: updateRecipientSignatureImage
      x-ds-methodname: updateRecipientSignatureImage
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/tabs":
    delete:
      deprecated: false
      description: Deletes one or more tabs associated with a recipient in a draft envelope.
      operationId: Recipients_DeleteRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipientTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipientTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the tabs associated with a recipient.
      tags:
        - EnvelopeRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteTabs
      x-ds-service: Envelopes
    get:
      deprecated: false
      description: |-
        Retrieves information about the tabs associated
        with a recipient. You can make a single API call
        to get all the tab values and information from a
        given, completed envelope in addition to draft
        ones.  Tab values can be retrieved by using the
        [EnvelopeRecipients:list method](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/list/)
        with query parameter `include_tabs` set to **true**.
      operationId: Recipients_GetRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: When set to **true**, all tabs with anchor tab properties are included in the response. The default value is **false**.
          in: query
          name: include_anchor_tab_locations
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes metadata indicating which properties are editable.
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipientTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the tabs information for a signer or sign-in-person recipient in an envelope.
      tags:
        - EnvelopeRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listTabs
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: Adds one or more tabs for a recipient.
      operationId: Recipients_PostRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipientTabs"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipientTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds tabs for a recipient.
      tags:
        - EnvelopeRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createTabs
      x-ds-service: Envelopes
    put:
      deprecated: false
      description: |-
        Updates one or more tabs for a recipient in a draft envelope. 
        **Note**: The Update method can be used if the envelope is not yet complete. To update an existing tab, the request body must include the `tabId`.
      operationId: Recipients_PutRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EnvelopeRecipientTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeRecipientTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |+
        Updates the tabs for a recipient.

      tags:
        - EnvelopeRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateTabs
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/views/identity_manual_review":
    parameters: []
    post:
      deprecated: false
      description: "This method returns the URL of the page that allows a sender to [manually review](https://support.docusign.com/en/guides/ndse-user-guide-send-documents-with-id-verification) the ID of a recipient. "
      operationId: Views_PostRecipientManualReviewView
      parameters:
        - description: A value that identifies your account. This value is automatically generated by DocuSign for any account you create. Copy the value from the API Account ID field in the [AppsI and Keys](https://support.docusign.com/en/guides/ndse-admin-guide-api-and-keys) page.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: |-
            A GUID value that DocuSign assigns to identify each recipient in an envelope. This value is globally unique for all recipients, not just those in your account.

            The specified recipient must belong to a workflow that allows the [manual review](https://support.docusign.com/en/guides/Identity-Verification-DocuSign-eSignature-Admin-Guide) of IDs. In addition, the status of the automatic verification for this recipient must return `Failed` and the value of the `vendorFailureStatusCode` field must be `MANUAL_REVIEW_STARTED` as shown in the following extract of a response to the [GET ENVELOPE](https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/envelopes/get/) method:
            <p>

            ```
            "recipientAuthenticationStatus": {
                   "identityVerificationResult": { 
                         "status": "Failed",
                         "eventTimestamp": "2020-09-04T16:59:42.8045667Z",
                         "vendorFailureStatusCode": "MANUAL_REVIEW_STARTED"
                    }
              }
            ```
          in: path
          name: recipientId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/viewUrl"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Create the link to the page for manually reviewing IDs.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: createRecipientManualReviewView
      x-ds-methodname: createRecipientManualReviewView
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/responsive_html_preview":
    parameters: []
    post:
      deprecated: false
      description: |
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML versions of all of the documents in an
        envelope. This method enables you to preview the
        PDF document conversions to responsive HTML across
        device types prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the documents.
      operationId: ResponsiveHtml_PostResponsiveHtmlPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentHtmlDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitions"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a preview of the responsive versions of all of the documents in an envelope.
      tags:
        - ResponsiveHtmlPreview
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createResponsiveHtmlPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/tabs_blob":
    get:
      deprecated: false
      description: ""
      operationId: TabsBlob_GetTabsBlob
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets encrypted tabs for envelope.
      tags:
        - TabsBlob
      x-ds-in-sdk: true
      x-ds-method: getTabsBlob
      x-ds-methodname: getTabsBlob
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: TabsBlob_PutTabsBlob
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates encrypted tabs for envelope.
      tags:
        - TabsBlob
      x-ds-in-sdk: true
      x-ds-method: putTabsBlob
      x-ds-methodname: putTabsBlob
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/templates":
    get:
      deprecated: false
      description: |
        This returns a list of the server-side templates, their name and ID, used in an envelope.
      operationId: Templates_GetEnvelopeTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: The possible value is `matching_applied`, which returns template matching information for the template.
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get List of Templates used in an Envelope
      tags:
        - EnvelopeTemplates
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listTemplates
      x-ds-service: Envelopes
    parameters: []
    post:
      deprecated: false
      description: Adds templates to the specified envelope.
      operationId: Templates_PostEnvelopeTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: preserve_template_recipient
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentTemplateList"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentTemplateList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds templates to an envelope.
      tags:
        - EnvelopeTemplates
      x-ds-in-sdk: true
      x-ds-method: apply
      x-ds-methodname: applyTemplate
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/correct":
    delete:
      deprecated: false
      description: ""
      operationId: Views_DeleteEnvelopeCorrectView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/correctViewRequest"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Revokes the correction view URL to the Envelope UI.
      tags:
        - EnvelopeViews
      x-ds-in-sdk: true
      x-ds-method: deleteEnvelopeCorrectView
      x-ds-methodname: deleteEnvelopeCorrectView
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: |-
        Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.

        **Important**: Due to screen space issues, iFrames should not be used for embedded operations on mobile devices. For iOS devices, DocuSign recommends using a WebView. 

        **Note**: You can revoke this URL by making the DELETE call to the same URL with no request body. 

        <blockquote>
        <p><b>Information Security notice</b>: This method provides full access to the sending account. When you use this view, the current user has full access to the account. If the account has administrative privileges, then this method also provides administrator access.</p>

        <p>If your use case needs to enable a sender to update a draft envelope before it is sent or make other changes, take one of the following steps:</p>

        <ul>
        <li>Configure each sender to have their own individual user account to use this API method.</li>
        <li>Enhance your API integration so that this method is not needed. Your integration can create the tabs, recipients, and other envelope settings as needed.</li>
        </ul>
        </blockquote>
      operationId: Views_PostEnvelopeCorrectView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/correctViewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeViews"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the envelope correction UI.
      tags:
        - EnvelopeViews
      x-ds-in-sdk: true
      x-ds-method: createCorrect
      x-ds-methodname: createCorrectView
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/edit":
    parameters: []
    post:
      deprecated: false
      description: |-
        Returns a URL that enables you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view. 

        Upon sending completion, the user is returned to the return URL provided by the API application.

        **Important**: Due to screen space issues, iFrames should not be used for embedded operations on mobile devices. For iOS devices, DocuSign recommends using a WebView. 

        **Note**: You can revoke this URL by making the DELETE call to the same URL with no request body. 

        <blockquote>
        <p><b>Information Security notice</b>: This method provides full access to the sending account. When you use this view, the current user has full access to the account. If the account has administrative privileges, then this method also provides administrator access.</p>

        <p>If your use case needs to enable a sender to update a draft envelope before it is sent or make other changes, take one of the following steps:</p>

        <ul>
        <li>Configure each sender to have their own individual user account to use this API method.</li>
        <li>Enhance your API integration so that this method is not needed. Your integration can create the tabs, recipients, and other envelope settings as needed.</li>
        </ul>
        </blockquote>
      operationId: Views_PostEnvelopeEditView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/returnUrlRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeViews"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the edit view UI.
      tags:
        - EnvelopeViews
      x-ds-examples:
        - description: |+
            The response contains the URL
            of the embeddable edit view
            for a specified envelope.

            The request body contains
            a `returnUrl`.
            This is the URL
            that the DocuSign platform
            will redirect the user to
            when the view is closed.

          direction: both
          format: json
          request:
            returnUrl: https://dsapp.example.com/return/from/edit/view
          response:
            url: https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=c8dc7c1e-xxxx-xxxx-xxxx-405ba1f7d38b&DocuEnvelope=4b728be4-xxxx-xxxx-xxxx-d63e23f822b6&send=1
          style: custom
          title: Getting an Edit View URL and Setting a Return URL
      x-ds-in-sdk: true
      x-ds-method: createEdit
      x-ds-methodname: createEditView
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient":
    parameters: []
    post:
      deprecated: false
      description: |-
        Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.

        **Note**: Please redirect the client to the URL. iFrames should not be used, especially if the recipient is using a mobile or tablet. 

        This method is only used with envelopes in the `sent` status.

        Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters `assertionId`, `authenticationInstant`, `authenticationMethod`, `clientUserId`, and `securityDomain` to record information on how the recipient was authenticated. At a minimum, `authenticationMethod` and `clientUserId` are required. The information that you provide is included in the envelope's certificate of completion.

        ## Redirects
        After the signer completes or ends the signing ceremony, DocuSign will redirect the user's browser back to your app via the `returnUrl` that you supply. (The user is redirected through a different subdomain, depending on the region of the account sending the envelope. Please [verify your domain whitelist](https://www.docusign.com/trust/security/whitelists).) 

        ### The event status parameter
        DocuSign appends an `event` query parameter to the URL with the outcome of the signing ceremony. Your app can use this event parameter to determine the next step for the envelope. Do not fetch the envelope status by using Envelopes::get or a similar method because doing so could break the DocuSign rule against polling.

        **Note**: Because a user can cancel redirection, close their browser after signing, or spoof the landing URL. Hitting the `ReturnUrl` should not be the single source of truth for envelope status for your integration.

        ## The URL is time-limited
        The URL returned by this method is valid for one use, and you must use or display it within a couple of minutes after it is generated. AFter the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.

        Because the URL is time-limited, it should not be stored or sent through email. After you receive it, immediately redirect the user's browser to the URL.

        If you want to invite someone to an embedded signing session via email, the email invitation's URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.

        ## Maintaining State
        After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the `returnUrl` field. Eg, `https://myapp.eg.com/docusign_return?myState=12345` When the user is redirected to your app, the `event` query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.

        **Note**: You can revoke the URL by making the DELETE call to the same URL with no request body. 
      operationId: Views_PostEnvelopeRecipientView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/recipientViewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeViews"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the recipient view UI.
      tags:
        - EnvelopeViews
      x-ds-in-sdk: true
      x-ds-method: createRecipient
      x-ds-methodname: createRecipientView
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/recipient_preview":
    parameters: []
    post:
      deprecated: false
      description: |-
        This method returns a URL for an envelope recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.

        For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
      operationId: Views_PostEnvelopeRecipientPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/recipientPreviewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/viewUrl"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates an envelope recipient preview.
      tags:
        - EnvelopeRecipients
      x-ds-in-sdk: true
      x-ds-method: createEnvelopeRecipientPreview
      x-ds-methodname: createEnvelopeRecipientPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/sender":
    parameters: []
    post:
      deprecated: false
      description: |-
        Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.

        The returned URL can only be redirected to immediately after it is generated. It can only be used once.
        Therefore, request the URL immediately before you redirect your user to it.

        For the best user experience, don't use an iFrame. For iOS devices DocuSign recommends using a WebView.

        Multiple solutions are available for maintaining your
        client state. See the **Maintaining State** section of the [Embedded Signing introduction.](https://developers.docusign.com/esign-rest-api/guides/embedded-signing)

        After the user has completed the sending view, the browser is redirected to the `returnUrl` supplied.

        By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL. 

        To start with the envelope's recipients and documents view instead, examine the URL in the method's response. 
        Then change the query parameter from `send=1` to `send=0` to start with the recipients/documents view.

        **Note**: You can revoke the URL by making the DELETE call to the same URL with no request body. 

        <blockquote>
        <p><b>Information Security notice</b>: This method provides full access to the sending account. When you use this view, the current user has full access to the account. If the account has administrative privileges, then this method also provides administrator access.</p>

        <p>If your use case needs to enable a sender to update a draft envelope before it is sent or make other changes, take one of the following steps:</p>

        <ul>
        <li>Configure each sender to have their own individual user account to use this API method.</li>
        <li>Enhance your API integration so that this method is not needed. Your integration can create the tabs, recipients, and other envelope settings as needed.</li>
        </ul>
        </blockquote>
      operationId: Views_PostEnvelopeSenderView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/returnUrlRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeViews"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the sender view UI.
      tags:
        - EnvelopeViews
      x-ds-in-sdk: true
      x-ds-method: createSender
      x-ds-methodname: createSenderView
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/views/shared":
    parameters: []
    post:
      deprecated: false
      description: |
        Returns a URL that enables you to embed the DocuSign UI recipient view of a [shared envelope](https://support.docusign.com/en/guides/ndse-admin-guide-share-envelopes) in your applications. This is the view that a user sees of an envelope that a recipient on the same account has shared with them.

        **Important**: Due to screen space issues, iFrames should not be used for embedded operations on mobile devices. For iOS devices, DocuSign recommends using a WebView.

        **Note**: You can revoke this URL by making the DELETE call to the same URL with no request body. 
      operationId: Views_PostEnvelopeRecipientSharedView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/recipientViewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/viewUrl"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the shared recipient view UI for an envelope.
      tags:
        - EnvelopeViews
      x-ds-in-sdk: true
      x-ds-method: createSharedRecipient
      x-ds-methodname: createEnvelopeRecipientSharedView
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/workflow":
    delete:
      deprecated: false
      description: |
        Deletes the specified envelope's workflow definition if it has one.
      operationId: EnvelopeWorkflowDefinition_DeleteEnvelopeWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes an envelope's workflow definition.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: deleteEnvelopeWorkflowDefinition
      x-ds-methodname: deleteEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: Returns an envelope's workflow definition if the envelope specified by `envelopeId` has one.
      operationId: EnvelopeWorkflowDefinition_GetEnvelopeWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workflow"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets an envelope's workflow definition.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: getEnvelopeWorkflowDefinition
      x-ds-methodname: getEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: Updates the specified envelope's workflow definition if  it has one.
      operationId: EnvelopeWorkflowDefinition_PutEnvelopeWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The envelope's GUID. 

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          in: path
          name: envelopeId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/workflow"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workflow"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an envelope's workflow definition.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: updateEnvelopeWorkflowDefinition
      x-ds-methodname: updateEnvelopeWorkflowDefinition
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/favorite_templates":
    delete:
      deprecated: false
      description: ""
      operationId: FavoriteTemplates_UnFavoriteTemplate
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/favoriteTemplatesInfo"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/favoriteTemplatesInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Unfavorites a template.
      tags:
        - FavoriteTemplates
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: unFavoriteTemplate
      x-ds-methodname: unFavoriteTemplate
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: FavoriteTemplates_GetFavoriteTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/favoriteTemplatesInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the list of favorited templates for this caller.
      tags:
        - FavoriteTemplates
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: getFavoriteTemplates
      x-ds-methodname: getFavoriteTemplates
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: FavoriteTemplates_PutFavoriteTemplate
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/favoriteTemplatesInfo"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/favoriteTemplatesInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |
        Sets a template as a favorite.
      tags:
        - FavoriteTemplates
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: updateFavoriteTemplate
      x-ds-methodname: updateFavoriteTemplate
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/folders":
    get:
      deprecated: false
      description: Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the `template` query string parameter.
      operationId: Folders_GetFolders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            A comma-separated list of folder types to include in the response.
            Valid values are:

            - `envelope_folders`: Returns a list of envelope folders. (Default)
            - `template_folders`: Returns a list of template folders. 
            - `shared_template_folders`: Returns a list of shared template folders.
          in: query
          name: include
          required: false
          schema:
            type: string
        - description: Indicates whether folder items are included in the response. If this parameter is omitted, the default is false.
          in: query
          name: include_items
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: This parameter is deprecated as of version 2.1. Use `include` instead.
          in: query
          name: template
          required: false
          schema:
            type: string
        - description: |
            Narrows down the resulting folder list by the following values:

            - `all`: Returns all templates owned or shared with the user. (default)
            - `owned_by_me`: Returns only  templates the user owns.
            - `shared_with_me`: Returns only templates that are shared with the user.
          in: query
          name: user_filter
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/foldersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of the folders for the account.
      tags:
        - Folders
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: Folders
    parameters: []
  "/v2.1/accounts/{accountId}/folders/{folderId}":
    get:
      deprecated: false
      description: Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
      operationId: Folders_GetFolderItems
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: Indicates whether folder items are included in the response. If this parameter is omitted, the default is false.
          in: query
          name: include_items
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: owner_email
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: owner_name
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/folderItemsResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of the envelopes in the specified folder.
      tags:
        - Folders
      x-ds-in-sdk: true
      x-ds-method: listItems
      x-ds-methodname: listItems
      x-ds-service: Folders
    parameters: []
    put:
      deprecated: false
      description: |-
        Moves an envelope from its current folder to the specified folder.

        You can use this method to delete envelopes by specifying `recyclebin` in the `folderId` parameter.
        Placing an in-process envelope (envelope status of `sent` or `delivered`) in the recycle bin voids the envelope.

        You can also use this method to delete templates by specifying a template ID instead of an envelope ID in the `envelopeIds` property and specifying `recyclebin` in the `folderId` parameter. 
      operationId: Folders_PutFolderById
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/foldersRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/foldersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Moves an envelope from its current folder to the specified folder.
      tags:
        - Folders
      x-ds-in-sdk: true
      x-ds-method: moveEnvelopes
      x-ds-methodname: moveEnvelopes
      x-ds-service: Folders
  "/v2.1/accounts/{accountId}/groups":
    delete:
      deprecated: false
      description: |
        Deletes an existing user group.

        When you delete a group, you include only the `groupId` in the request body.

        Example:

        ```
        {
          "groups": [
            {
              "groupId": "12345"
            }
        }
        ```
      operationId: Groups_DeleteGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/groupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes an existing user group.
      tags:
        - Groups
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteGroups
      x-ds-service: Groups
    get:
      deprecated: false
      description: Retrieves information about groups associated with the account.
      operationId: Groups_GetGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: Number of records to return. The number must be greater than 1 and less than or equal to 100.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: group_type
          required: false
          schema:
            type: string
        - description: When set to **true**, every group returned in the response includes a `userCount` property that contains the total number of users in the group. The default is **true**.
          in: query
          name: include_usercount
          required: false
          schema:
            type: string
        - description: Filters the results of a GET request based on the text that you specify.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: The starting value for the list.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets information about groups associated with the account.
      tags:
        - Groups
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listGroups
      x-ds-service: Groups
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates one or more groups for the account.

        Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
      operationId: Groups_PostGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/groupInformation"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates one or more groups for the account.
      tags:
        - Groups
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createGroups
      x-ds-service: Groups
    put:
      deprecated: false
      description: Updates the group name and modifies, or sets, the permission profile for the group.
      operationId: Groups_PutGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/groupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the group information for a group.
      tags:
        - Groups
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateGroups
      x-ds-service: Groups
  "/v2.1/accounts/{accountId}/groups/{groupId}/brands":
    delete:
      deprecated: false
      description: This method deletes one or more brands from a group.
      operationId: Brands_DeleteGroupBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the group.
          in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/brandsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes brand information from a group.
      tags:
        - GroupBrands
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteBrands
      x-ds-service: Groups
    get:
      deprecated: false
      description: This method returns information about the brands associated with a group.
      operationId: Brands_GetGroupBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the group.
          in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the brand information for a group.
      tags:
        - GroupBrands
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getBrands
      x-ds-service: Groups
    parameters: []
    put:
      deprecated: false
      description: This method adds one or more existing brands to a group based on the `groupId`.
      operationId: Brands_PutGroupBrands
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the group being accessed.
          in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/brandsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupBrands"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds an existing brand to a group.
      tags:
        - GroupBrands
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateBrands
      x-ds-service: Groups
  "/v2.1/accounts/{accountId}/groups/{groupId}/users":
    delete:
      deprecated: false
      description: |
        Deletes one or more users from a group. This request takes a `userInfoList` that contains the users that you want to delete.
      operationId: Groups_DeleteGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the group being accessed.
          in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/userInfoList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/usersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes one or more users from a group
      tags:
        - GroupUsers
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteGroupUsers
      x-ds-service: Groups
    get:
      deprecated: false
      description: Retrieves a list of users in a group.
      operationId: Groups_GetGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the group being accessed.
          in: path
          name: groupId
          required: true
          schema:
            type: string
        - description: "Number of records to return. The number must be greater than 1 and less than or equal to 100. "
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: Starting value for the list.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/usersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of users in a group.
      tags:
        - GroupUsers
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listGroupUsers
      x-ds-service: Groups
    parameters: []
    put:
      deprecated: false
      description: Adds one or more existing DocuSign users to an existing group.
      operationId: Groups_PutGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the group being accessed.
          in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/userInfoList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/usersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds one or more users to an existing group.
      tags:
        - GroupUsers
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateGroupUsers
      x-ds-service: Groups
  "/v2.1/accounts/{accountId}/identity_verification":
    get:
      deprecated: false
      description: |-
        This method returns a list of Identity Verification workflows that are available to an account.

        **Note**: To use this method, you must either be an account administrator or a sender.
      operationId: AccountIdentityVerification_GetAccountIdentityVerification
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountIdentityVerificationResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the Identity Verification workflows available to an account.
      tags:
        - IdentityVerifications
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getAccountIdentityVerification
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/payment_gateway_accounts":
    get:
      deprecated: false
      description: This method returns a list of payment gateway accounts and basic information about them.
      operationId: PaymentGatewayAccounts_GetAllPaymentGatewayAccounts
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/paymentGatewayAccountsInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: List payment gateway accounts
      tags:
        - PaymentGatewayAccounts
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getAllPaymentGatewayAccounts
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/permission_profiles":
    get:
      deprecated: false
      description: This method returns a list of permission profiles that are associated with an account.
      operationId: PermissionProfiles_GetPermissionProfiles
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            A comma-separated list of additional properties to return in the response. Valid values are:

            - `user_count`: The total number of users associated with the permission profile.
            - `closed_users`: Includes closed users in the `user_count`.
            - `account_management`: The account management settings.
            - `metadata`: Metadata indicating whether the properties associated with the account permission profile are editable.

            Example: `user_count,closed_users`
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/permissionProfileInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of permission profiles.
      tags:
        - AccountPermissionProfiles
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listPermissions
      x-ds-service: Accounts
    parameters: []
    post:
      deprecated: false
      description: This method creates a new permission profile for an account.
      operationId: PermissionProfiles_PostPermissionProfiles
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable.
          in: query
          name: include
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/permissionProfile"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/permissionProfile"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a new permission profile for an account.
      tags:
        - AccountPermissionProfiles
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createPermissionProfile
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/permission_profiles/{permissionProfileId}":
    delete:
      deprecated: false
      description: |-
        This method deletes a permission profile from an account.

        To delete a permission profile, it must not have any users associated with it. When you use this method to delete a permission profile, you can reassign the users associated with it to a new permission profile at the same time by using the `move_users_to` query parameter.
      operationId: PermissionProfiles_DeletePermissionProfiles
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          in: path
          name: permissionProfileId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: move_users_to
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a permission profile from an account.
      tags:
        - AccountPermissionProfiles
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deletePermissionProfile
      x-ds-service: Accounts
    get:
      deprecated: false
      description: This method returns information about a specific permission profile that is associated with an account.
      operationId: PermissionProfiles_GetPermissionProfile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          in: path
          name: permissionProfileId
          required: true
          schema:
            type: string
        - description: A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable.
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/permissionProfile"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a permission profile for an account.
      tags:
        - AccountPermissionProfiles
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getPermissionProfile
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: This method updates an account permission profile.
      operationId: PermissionProfiles_PutPermissionProfiles
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          in: path
          name: permissionProfileId
          required: true
          schema:
            type: string
        - description: A comma-separated list of additional properties to return in the response. The only valid value for this request is `metadata`, which returns metadata indicating whether the properties associated with the account permission profile are editable.
          in: query
          name: include
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/permissionProfile"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/permissionProfile"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a permission profile.
      tags:
        - AccountPermissionProfiles
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updatePermissionProfile
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/powerforms":
    delete:
      deprecated: false
      description: This method deletes one or more PowerForms. The request body takes an array of PowerForm objects that are deleted based on the `powerFormId`.
      operationId: PowerForms_DeletePowerFormsList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/powerFormsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerFormsResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes one or more PowerForms.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deletePowerForms
      x-ds-service: PowerForms
    get:
      deprecated: false
      description: This method returns a list of PowerForms that are available to the user.
      operationId: PowerForms_GetPowerFormsList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            (Optional) The start date for a date range.

            **Note**: If no value is provided, no date filtering is applied.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The file attribute to use to sort the results.

            Valid values are: 

            * `modified`
            * `name`
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The end date for a date range.

            **Note**: If no value is provided, this property defaults to the current date.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerFormsResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a list of PowerForms.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listPowerForms
      x-ds-service: PowerForms
    parameters: []
    post:
      deprecated: false
      description: |+
        This method creates a new PowerForm.

        You create a PowerForm from an existing DocuSign [template](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/), based on the `templateId` in the request body.

         PowerForms that you create from a template are referred to as *web PowerForms*.

        **Note**: The RADmin console also supports creating a PowerForm by uploading a PDF file that has active form fields (referred to as a *PDF PowerForm*). However, PDF PowerForms are deprecated and are not supported in the API.

        **Note**: A PowerForm can have only one sender. (Because PowerForms are not necessarily sent by email, this user is also referred to as the PowerForm *initiator*.) If you need to associate multiple senders with a PowerForm, create multiple copies of the PowerForm by using the same template (one copy for each sender). By default, the sender is the PowerForm Administrator who creates the PowerForm.


        ### Signing modes

        You can use one of the following signing modes for a PowerForm:

        **`email`**

        This mode verifies the recipient's identity by using email authentication before the recipient can sign a document. The recipient enters their email address on the landing page and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code to the recipient. If the recipient does not provide a valid email address, they do not receive the email message containing the access code and are not able to open and sign the document.

        Alternatively, you can make the process easier for signers by using email authentication only and omitting the access code. To do this, you append the `activateonly` flag to the PowerForm URL and set it to true by passing in the value `1`.  When the flag is active, the first recipient receives an email with a link that initiates the signing session without having to enter access code.

        Example: `activateonly=1`

        **`direct`**

        This mode does not require any verification. After a recipient enters their email address on the landing page and clicks **Begin Signing**, a new browser tab opens and the recipient can immediately begin the signing process.

        Because the `direct` signing mode does not verify the recipient's identity by using email authentication, we strongly recommend that you use this mode only when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).

        **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.

        ### Redirect URLs

        You can control the URL to which signers are redirected after signing your PowerForm. However, the URL is specified elsewhere, outside of the PowerForm creation process. For details, see [How do I specify a URL to redirect to when a PowerForm is completed?](https://support.docusign.com/en/articles/How-do-I-specify-a-URL-to-redirect-to-when-a-Powerform-is-completed).

        ### More information

        For more information about creating PowerForms, see [Create a PowerForm](https://support.docusign.com/en/guides/ndse-user-guide-create-a-powerform).

      operationId: PowerForms_PostPowerForm
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/powerForm"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerForm"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a new PowerForm
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createPowerForm
      x-ds-service: PowerForms
  "/v2.1/accounts/{accountId}/powerforms/senders":
    get:
      deprecated: false
      description: This method returns a list of users who have sent PowerForms.
      operationId: PowerForms_GetPowerFormsSenders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerFormSendersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets PowerForm senders.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: listSenders
      x-ds-methodname: listPowerFormSenders
      x-ds-service: PowerForms
    parameters: []
  "/v2.1/accounts/{accountId}/powerforms/{powerFormId}":
    delete:
      deprecated: false
      description: This method deletes a PowerForm.
      operationId: PowerForms_DeletePowerForm
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the PowerForm.
          in: path
          name: powerFormId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a PowerForm.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deletePowerForm
      x-ds-service: PowerForms
    get:
      deprecated: false
      description: This method returns detailed information about a specific PowerForm.
      operationId: PowerForms_GetPowerForm
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the PowerForm.
          in: path
          name: powerFormId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerForm"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a single PowerForm.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getPowerForm
      x-ds-service: PowerForms
    parameters: []
    put:
      deprecated: false
      description: This method updates an existing PowerForm.
      operationId: PowerForms_PutPowerForm
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the PowerForm.
          in: path
          name: powerFormId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/powerForm"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerForm"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an existing PowerForm.
      tags:
        - PowerForms
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updatePowerForm
      x-ds-service: PowerForms
  "/v2.1/accounts/{accountId}/powerforms/{powerFormId}/form_data":
    get:
      deprecated: false
      description: |-
        This method enables Powerform Administrators or the sender of a PowerForm to download the data that recipients have entered into a PowerForm.

        You specify the format in which you want to retrieve the data in the `Accept` header. This header accepts the following values:


        - `application/json`: JSON format
        - `application/xml`: XML format
        - `text/csv`: Comma-separated value (CSV) format

        **Note**: Only PowerForm Administrators or the PowerForm Sender can download the data associated with a PowerForm.
      operationId: PowerForms_GetPowerFormFormData
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the PowerForm.
          in: path
          name: powerFormId
          required: true
          schema:
            type: string
        - description: |-
            The layout in which to return the PowerForm data. Valid values are:

            - `Native`
            - `Csv_Classic`
            - `Csv_One_Envelope_Per_Line`
            - `Xml_Classic`
          in: query
          name: data_layout
          required: false
          schema:
            type: string
        - description: |-
            The start date for a date range in UTC DateTime format.

            **Note**: If this property is null, no date filtering is applied.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: The end date of a date range in UTC DateTime format. The default value is `UtcNow`.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/powerFormsFormDataResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the data that users entered in a PowerForm.
      tags:
        - PowerFormData
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getPowerFormData
      x-ds-service: PowerForms
    parameters: []
  "/v2.1/accounts/{accountId}/recipient_names":
    get:
      deprecated: false
      description: Retrieves a list of all of the names associated with the email address that you pass in. This list can include variants of a single recipient's name that are used for signing, as well as the names of multiple different recipients.
      operationId: RecipientNames_GetRecipientNames
      parameters:
        - description: (Required) The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The email address for which you want to retrieve recipient names.
          in: query
          name: email
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipientNamesResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the recipient names associated with an email address.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: listRecipientNamesByEmail
      x-ds-methodname: listRecipientNamesByEmail
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/reports":
    get:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_GetReportInProductList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |-
        Gets the descriptors for all of
        an account's active reports (for listings).
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: getReportInProductList
      x-ds-methodname: getReportInProductList
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_PostReportInProductCreate
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/reportInProductRunRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductSaveResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a customized report.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: createReportInProductCreate
      x-ds-methodname: createReportInProductCreate
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/reports/report_results":
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_PutReportInProductRunResults
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/reportInProductRunRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductRunResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the result set from running the specified report.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: updateReportInProductRunResults
      x-ds-methodname: updateReportInProductRunResults
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/reports/report_results_csv":
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_PutReportResultsCsv
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reportInProductCsvRunRequest"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the specified report as a CSV string.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: updateReportResultsCsv
      x-ds-methodname: updateReportResultsCsv
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/reports/{id}":
    delete:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_DeleteReportInProduct
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A unique ID for the Salesforce object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductSaveResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Removes a customized report.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: deleteReportInProduct
      x-ds-methodname: deleteReportInProduct
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_GetReportInProduct
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A unique ID for the Salesforce object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductGet"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the specified report.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: getReportInProduct
      x-ds-methodname: getReportInProduct
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: ReportsInProduct_PutReportInProductSave
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A unique ID for the Salesforce object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/reportInProductRunRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/reportInProductSaveResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Saves a customized report.
      tags:
        - Reports
      x-ds-in-sdk: true
      x-ds-method: updateReportInProductSave
      x-ds-methodname: updateReportInProductSave
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/seals":
    get:
      deprecated: false
      description: ""
      operationId: AccountSignatureProviders_GetSealProviders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/AccountSealProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns available seals for specified account.
      tags:
        - AccountSealProviders
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getSealProviders
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/search_folders/{searchFolderId}":
    get:
      deprecated: false
      description: |-
        **This method is deprecated in API v2.1.**

        Use  [Envelopes::listStatusChanges](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges) instead.

        Retrieves a list of items that match the criteria specified in the query.

        If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
      operationId: SearchFolders_GetSearchFolderContents
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature."
          in: path
          name: searchFolderId
          required: true
          schema:
            type: string
        - description: Specifies that all envelopes that match the criteria are returned.
          in: query
          name: all
          required: false
          schema:
            type: string
        - description: Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: When set to **true**, the recipient information is returned in the response.
          in: query
          name: include_recipients
          required: false
          schema:
            type: string
        - description: "Specifies the order in which the list is returned. Valid values are: `asc` for ascending order, and `desc` for descending order."
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: "Specifies the property used to sort the list. Valid values are: `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`, or `subject`."
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: Specifies the the starting location in the result set of the items that are returned.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: Specifies the end of the date range to return.
          in: query
          name: to_date
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/folderItemResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of envelopes in folders matching the specified criteria.
      tags:
        - Folders
      x-ds-in-sdk: true
      x-ds-method: search
      x-ds-methodname: search
      x-ds-service: Folders
    parameters: []
  "/v2.1/accounts/{accountId}/settings":
    get:
      deprecated: false
      description: Retrieves the account settings information for the specified account.
      operationId: Settings_GetSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets account settings information.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: listSettings
      x-ds-methodname: listSettings
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: Updates the account settings for the specified account.
      operationId: Settings_PutSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountSettingsInformation"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the account settings for an account.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: updateSettings
      x-ds-methodname: updateSettings
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/settings/bcc_email_archives":
    get:
      deprecated: false
      description: This method retrieves all of the BCC email archive configurations associated with an account.
      operationId: BCCEmailArchive_GetBCCEmailArchiveList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: (Optional) The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: (Optional) The index position within the total result set from which to start returning values. The default value is `0`.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bccEmailArchiveList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the BCC email archive configurations for an account.
      tags:
        - BCCEmailArchive
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: |
        This method creates a BCC email archive configuration for an account (adds a BCC email address to the account for archiving the emails that DocuSign generates).

        The only property that you must set in the request body is the BCC email address that you want to use.

        **Note**: An account can have up to five active and pending email archive addresses combined, but you must use this method to add them to the account one at a time. Each email address is considered a separate BCC email archive configuration.
      operationId: BCCEmailArchive_PostBCCEmailArchive
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bccEmailArchive"
        description: Boolean that specifies whether BCC for Email Archive is enabled for the account. BCC for Email Archive allows you to set up an archive email address so that a BCC copy of an envelope is sent only to that address.
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bccEmailArchive"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a BCC email archive configuration.
      tags:
        - BCCEmailArchive
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: create
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/settings/bcc_email_archives/{bccEmailArchiveId}":
    delete:
      deprecated: false
      description: |
        This method deletes a BCC email archive configuration from an account.

        When you use this method, the status of the BCC email archive configuration switches to `closed` and the BCC email address is no longer used to archive DocuSign-generated email messages.
      operationId: BCCEmailArchive_DeleteBCCEmailArchive
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the BCC email archive configuration.
          in: path
          name: bccEmailArchiveId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a BCC email archive configuration.
      tags:
        - BCCEmailArchive
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: delete
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: This method returns a specific BCC email archive configuration for an account, as well as the history of changes to the email address.
      operationId: BCCEmailArchive_GetBCCEmailArchiveHistoryList
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the BCC email archive configuration.
          in: path
          name: bccEmailArchiveId
          required: true
          schema:
            type: string
        - description: (Optional) The maximum number of results (changes) to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: (Optional) The index position within the total result set from which to start returning values. The default value is `0`.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bccEmailArchiveHistoryList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a BCC email archive configuration and its history.
      tags:
        - BCCEmailArchive
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: get
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/settings/enote_configuration":
    delete:
      deprecated: false
      description: ""
      operationId: ENoteConfiguration_DeleteENoteConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes configuration information for the eNote eOriginal integration.
      tags:
        - ENoteConfigurations
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteENoteConfiguration
      x-ds-service: Accounts
    get:
      deprecated: false
      description: ""
      operationId: ENoteConfiguration_GetENoteConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/eNoteConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the configuration information for the eNote eOriginal integration.
      tags:
        - ENoteConfigurations
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getENoteConfiguration
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: ENoteConfiguration_PutENoteConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eNoteConfiguration"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/eNoteConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates configuration information for the eNote eOriginal integration.
      tags:
        - ENoteConfigurations
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateENoteConfiguration
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/settings/envelope_purge_configuration":
    get:
      deprecated: false
      description: |-
        An envelope purge configuration enables account administrators to permanently remove documents and their field data from completed and voided envelopes after a specified retention period (`retentionDays`). This method retrieves the current envelope purge configuration for your account.

        **Note**: To use this method, you must be an account administrator.
      operationId: EnvelopePurgeConfiguration_GetEnvelopePurgeConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopePurgeConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the envelope purge configuration for an account.
      tags:
        - Accounts
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: getEnvelopePurgeConfiguration
      x-ds-methodname: getEnvelopePurgeConfiguration
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: |-
        An envelope purge configuration enables account administrators to permanently remove documents and their field data from completed and voided envelopes after a specified retention period (`retentionDays`). This method sets the envelope purge configuration for your account.

        **Note**: To use this method, you must be an account administrator.

        For more information, see [Purge Envelopes](https://support.docusign.com/en/guides/ndse-user-guide-purge-envelopes).
      operationId: EnvelopePurgeConfiguration_PutEnvelopePurgeConfiguration
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/envelopePurgeConfiguration"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopePurgeConfiguration"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets the envelope purge configuration for an account.
      tags:
        - Accounts
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: updateEnvelopePurgeConfiguration
      x-ds-methodname: updateEnvelopePurgeConfiguration
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/settings/notification_defaults":
    get:
      deprecated: false
      description: This method returns the default settings for the email notifications that signers and senders receive about envelopes.
      operationId: NotificationDefaults_GetNotificationDefaults
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notificationDefaults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets envelope notification defaults.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: getNotificationDefaults
      x-ds-methodname: getNotificationDefaults
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: This method changes the default settings for the email notifications that signers and senders receive about envelopes.
      operationId: NotificationDefaults_PutNotificationDefaults
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notificationDefaults"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notificationDefaults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates envelope notification default settings.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: updateNotificationDefaults
      x-ds-methodname: updateNotificationDefaults
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/settings/password_rules":
    get:
      deprecated: false
      description: This method retrieves the password rules for an account.
      operationId: AccountPasswordRules_GetAccountPasswordRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountPasswordRules"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the password rules for an account.
      tags:
        - AccountPasswordRules
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getAccountPasswordRules
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates the password rules for an account.

        **Note**: To update the password rules for an account, you must be an account administrator.
      operationId: AccountPasswordRules_PutAccountPasswordRules
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountPasswordRules"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountPasswordRules"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the password rules for an account.
      tags:
        - AccountPasswordRules
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateAccountPasswordRules
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/settings/tabs":
    get:
      deprecated: false
      description: This method returns information about the tab types and tab functionality that is currently enabled for an account.
      operationId: TabSettings_GetTabSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabAccountSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns tab settings list for specified account
      tags:
        - AccountTabSettings
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getAccountTabSettings
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: This method modifies the tab types and tab functionality that is enabled for an account.
      operationId: TabSettings_PutSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tabAccountSettings"
        description: Account-wide tab settings.
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabAccountSettings"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Modifies tab settings for specified account
      tags:
        - AccountTabSettings
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateAccountTabSettings
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/shared_access":
    get:
      deprecated: false
      description: |-
        Retrieves shared item status for one or more users and types of items.

        Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves, and the returned information is limited to retrieving the status of the members of the account that are sharing their folders to the user. This is equivalent to setting the `shared` parameter to `shared_from`.
      operationId: SharedAccess_GetSharedAccess
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: Specifies the maximum number of results included in the response. If no value is specified, this defaults to 1000.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: |-
            This query parameter works in conjunction with `user_ids`. When you specify one of the following user statuses, the query limits the results to only users that match the specified status:
            - `ActivationRequired`: Membership Activation required
            - `ActivationSent`: Membership activation sent to user
            - `Active`: User Membership is active
            - `Closed`: User Membership is closed
            - `Disabled`: User Membership is disabled
          in: query
          name: envelopes_not_shared_user_status
          required: false
          schema:
            type: string
        - description: A comma-separated list of folder IDs for which to return shared item information. If `item_type` is set to `folders`, at least one folder ID is required.
          in: query
          name: folder_ids
          required: false
          schema:
            type: string
        - description: |
            Specifies the type of shared item being requested. The possible values are:

            - `envelopes`: Get information about envelope sharing between users.
            - `templates`: Get information about template sharing among users and groups.
            - `folders`: Get information about folder sharing among users and groups.
          in: query
          name: item_type
          required: false
          schema:
            type: string
        - description: Filter user names based on the specified string. The wild-card '*' (asterisk) can be used in the string.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: |-
            A comma-separated list of sharing filters that specifies which users appear in the response. 

            - `not_shared`: The response lists users who do not share items of `item_type` with the current user.

            - `shared_to`: The response lists users in `user_list` who are sharing items to current user.

            - `shared_from`: The response lists users in `user_list` who are sharing items from the current user.

            - `shared_to_and_from`: The response lists users in `user_list` who are sharing items to and from the current user.

            If the current user does not have administrative privileges, only the `shared_to` option is valid.
          in: query
          name: shared
          required: false
          schema:
            type: string
        - description: If the number of responses is greater than `count`, this specifies the number of responses to skip. Typically this value is a multiple of `count`. The default is 0.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: A comma-separated list of user IDs for whom the shared item information is being requested.
          in: query
          name: user_ids
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSharedAccess"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Reserved: Gets the shared item status for one or more users."
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: listSharedAccess
      x-ds-methodname: listSharedAccess
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: |+
        This sets the shared access status for one or more users or templates.

        When setting user shared access, only users with account administration privileges can set shared access status for envelopes.

        When setting template shared access, only users who own a template and have sharing permission or with account administration privileges can set shared access for templates.

        Changes to the shared items status are not additive. The change always replaces the current status.

        To change template shared access, add the query parameter `item_type` = `templates` to the request. When this is set, the user and envelopes properties are not required.

        **Note**: This functionality is a newer version of the [Update Group Share](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/updateGroupShare) functionality.

      operationId: SharedAccess_PutSharedAccess
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            Specifies the type of shared item being set:
            - `envelopes`: Set envelope sharing between users.
            - `templates`: Set information about template sharing among users and groups.
            - `folders`: Get information about folder sharing among users and groups.
          in: query
          name: item_type
          required: false
          schema:
            type: string
        - description: When **true**, preserve the existing shared access settings.
          in: query
          name: preserve_existing_shared_access
          required: false
          schema:
            type: string
        - description: A comma-separated list of IDs for users whose shared item access is being set.
          in: query
          name: user_ids
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountSharedAccess"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSharedAccess"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Reserved: Sets the shared access information for users."
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: updateSharedAccess
      x-ds-methodname: updateSharedAccess
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/signatureProviders":
    get:
      deprecated: false
      description: Returns a list of signature providers that the specified account can use.
      operationId: AccountSignatureProviders_GetSignatureProviders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignatureProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the available signature providers for an account.
      tags:
        - AccountSignatureProviders
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listSignatureProviders
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/signatures":
    get:
      deprecated: false
      description: ""
      operationId: AccountSignatures_GetAccountSignatures
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: stamp_format
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: stamp_name
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: stamp_type
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns the managed signature definitions for the account
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: getAccountSignatures
      x-ds-methodname: getAccountSignatures
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: AccountSignatures_PostAccountSignatures
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: decode_only
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/accountSignaturesInformation"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |-
        Adds or updates one or more account signatures.
        This request may include images in multi-part format.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: createAccountSignatures
      x-ds-methodname: createAccountSignatures
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: ""
      operationId: AccountSignatures_PutAccountSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/accountSignaturesInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |
        Updates an account signature.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: updateAccountSignature
      x-ds-methodname: updateAccountSignature
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/signatures/{signatureId}":
    delete:
      deprecated: false
      description: ""
      operationId: AccountSignatures_DeleteAccountSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Close the specified signature by ID.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: deleteAccountSignature
      x-ds-methodname: deleteAccountSignature
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: AccountSignatures_GetAccountSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns information about the specified signature.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: getAccountSignature
      x-ds-methodname: getAccountSignature
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: AccountSignatures_PutAccountSignatureById
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: When set to **true**, closes the current signature.
          in: query
          name: close_existing_signature
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountSignatureDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an account signature.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: updateAccountSignatureById
      x-ds-methodname: updateAccountSignatureById
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/signatures/{signatureId}/{imageType}":
    delete:
      deprecated: false
      description: ""
      operationId: AccountSignatures_DeleteAccountSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a signature image, initials, or stamp.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: deleteAccountSignatureImage
      x-ds-methodname: deleteAccountSignatureImage
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: AccountSignatures_GetAccountSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: When **true**, the chrome (or frame containing the added line and identifier) is included with the signature image.
          in: query
          name: include_chrome
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/gif:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/gif:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a signature image, initials, or stamp.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: getAccountSignatureImage
      x-ds-methodname: getAccountSignatureImage
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: AccountSignatures_PutAccountSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: transparent_png
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/accountSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Sets a signature image, initials, or stamp.
      tags:
        - AccountSignatures
      x-ds-in-sdk: true
      x-ds-method: updateAccountSignatureImage
      x-ds-methodname: updateAccountSignatureImage
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/signing_groups":
    delete:
      deprecated: false
      description: Deletes one or more signing groups in the specified account.
      operationId: SigningGroups_DeleteSigningGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/signingGroupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes one or more signing groups.
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteList
      x-ds-service: SigningGroups
    get:
      deprecated: false
      description: Retrieves a list of all signing groups in the specified account.
      operationId: SigningGroups_GetSigningGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: group_type
          required: false
          schema:
            type: string
        - description: "When set to **true**, the response includes the signing group members. "
          in: query
          name: include_users
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of the Signing Groups in an account.
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: SigningGroups
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates one or more signing groups. 

        Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups. 

        An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.
         
        Signing groups can be used by any account user.
      operationId: SigningGroups_PostSigningGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/signingGroupInformation"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Creates a signing group. "
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createList
      x-ds-service: SigningGroups
    put:
      deprecated: false
      description: "Updates the name of one or more existing signing groups. "
      operationId: SigningGroups_PutSigningGroups
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/signingGroupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates signing group names.
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateList
      x-ds-service: SigningGroups
  "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}":
    get:
      deprecated: false
      description: "Retrieves information, including group member information, for the specified signing group. "
      operationId: SigningGroups_GetSigningGroup
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          in: path
          name: signingGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroup"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Gets information about a signing group. "
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: get
      x-ds-service: SigningGroups
    parameters: []
    put:
      deprecated: false
      description: "Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. "
      operationId: SigningGroups_PutSigningGroup
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          in: path
          name: signingGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/signingGroup"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroup"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Updates a signing group. "
      tags:
        - SigningGroups
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: update
      x-ds-service: SigningGroups
  "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}/users":
    delete:
      deprecated: false
      description: "Deletes  one or more members from the specified signing group. "
      operationId: SigningGroups_DeleteSigningGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          in: path
          name: signingGroupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/signingGroupUsers"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupUsers"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes  one or more members from a signing group.
      tags:
        - SigningGroupUsers
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteUsers
      x-ds-service: SigningGroups
    get:
      deprecated: false
      description: Retrieves the list of members in the specified Signing Group.
      operationId: SigningGroups_GetSigningGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          in: path
          name: signingGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupUsers"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of members in a Signing Group.
      tags:
        - SigningGroupUsers
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listUsers
      x-ds-service: SigningGroups
    parameters: []
    put:
      deprecated: false
      description: "Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. "
      operationId: SigningGroups_PutSigningGroupUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          in: path
          name: signingGroupId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/signingGroupUsers"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/signingGroupUsers"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: "Adds members to a signing group. "
      tags:
        - SigningGroupUsers
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateUsers
      x-ds-service: SigningGroups
  "/v2.1/accounts/{accountId}/supported_languages":
    get:
      deprecated: false
      description: |-
        Retrieves a list of supported languages that you can set for an individual recipient when creating an envelope, as well as their simple type enumeration values. These are the languages that you can set for the standard email format and signing view for each recipient.

        For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

        **Note**: Setting a language for a recipient affects only the DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

        For more information, see [Set Recipient Language and Specify Custom Email Messages](https://support.docusign.com/en/guides/ndse-user-guide-recipient-language).
      operationId: SupportedLanguages_GetSupportedLanguages
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/supportedLanguages"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the supported languages for envelope recipients.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: listSupportedLanguages
      x-ds-methodname: getSupportedLanguages
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/tab_definitions":
    get:
      deprecated: false
      description: Retrieves a list of all tabs associated with the account.
      operationId: Tabs_GetTabDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "When set to **true**, only custom tabs are returned in the response. "
          in: query
          name: custom_tab_only
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabMetadataList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of all account tabs.
      tags:
        - CustomTabs
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: CustomTabs
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.

        Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
      operationId: Tabs_PostTabDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/tabMetadata"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabMetadata"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a custom tab.
      tags:
        - CustomTabs
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: create
      x-ds-service: CustomTabs
  "/v2.1/accounts/{accountId}/tab_definitions/{customTabId}":
    delete:
      deprecated: false
      description: Deletes the custom from the specified account.
      operationId: Tab_DeleteCustomTab
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          in: path
          name: customTabId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes custom tab information.
      tags:
        - CustomTabs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: delete
      x-ds-service: CustomTabs
    get:
      deprecated: false
      description: Retrieves information about the requested custom tab on the specified account.
      operationId: Tab_GetCustomTab
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          in: path
          name: customTabId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabMetadata"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets custom tab information.
      tags:
        - CustomTabs
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: get
      x-ds-service: CustomTabs
    parameters: []
    put:
      deprecated: false
      description: Updates the information in a custom tab for the specified account.
      operationId: Tab_PutCustomTab
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          in: path
          name: customTabId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/tabMetadata"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabMetadata"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: |+
        Updates custom tab information.

      tags:
        - CustomTabs
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: update
      x-ds-service: CustomTabs
  "/v2.1/accounts/{accountId}/templates":
    get:
      deprecated: false
      description: Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
      operationId: Templates_GetTemplates
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The number of records to return in the cache.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: Lists templates created on or after this date.
          in: query
          name: created_from_date
          required: false
          schema:
            type: string
        - description: Lists templates modified before this date.
          in: query
          name: created_to_date
          required: false
          schema:
            type: string
        - description: A comma-separated list of folder id GUIDs.
          in: query
          name: folder_ids
          required: false
          schema:
            type: string
        - description: |
            The type of folder to return templates for. Possible values are:

            - `templates`: Templates in the **My Templates** folder.
              Templates in the **Shared Templates**  and **All Template** folders (if the request id from and Admin) are excluded.
            - `templates_root`: Templates in the root level of the **My Templates** folder, but not in an actual folder. Note that the **My Templates** folder is not a real folder.
            - `recylebin`: Templates that have been deleted.
          in: query
          name: folder_types
          required: false
          schema:
            type: string
        - description: Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
          in: query
          name: from_date
          required: false
          schema:
            type: string
        - description: |-
            A comma-separated list
            of additional template attributes
            to include in the response.
            Valid values are:

            - `powerforms`: Includes details about the PowerForms associated with the templates.
            - `documents`: Includes information about template documents.
            - `folders`: Includes information about the folder that holds the template.
            - `favorite_template_status`: Includes the template `favoritedByMe` property. **Note**: You can mark a template as a favorite only in eSignature v2.1.
            - `advanced_templates`: Includes information about advanced templates.
            - `recipients`: Includes information about template recipients.
            - `custom_fields`: Includes information about template custom fields.
            - `notifications`: Includes information about the notification settings for templates.
          in: query
          name: include
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: is_deleted_template_only
          required: false
          schema:
            type: string
        - description: |-
            When set to **true**, downloads the templates listed in `template_ids` as a collection of JSON definitions in a single zip file.

            The `Content-Disposition` header is set in the response. The value of the header provides the filename of the file.

            The default is **false**.

            **Note**: This parameter only works when you specify a list of templates in the `template_ids` parameter.
          in: query
          name: is_download
          required: false
          schema:
            type: string
        - description: Lists templates modified on or after this date.
          in: query
          name: modified_from_date
          required: false
          schema:
            type: string
        - description: Lists templates modified before this date.
          in: query
          name: modified_to_date
          required: false
          schema:
            type: string
        - description: |-
            Specifies the sort order of the search results.
            Valid values are:

            - `asc`: Ascending (A to Z)
            - `desc`: Descending (Z to A)
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: |-
            Specifies how the search results are listed.
            Valid values are:

            - `name`: template name
            - `modified`: date/time template was last modified
            - `used`: date/time the template was last used.
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: |
            A comma-separated list of additional template properties to search.


            - `sender`: Include sender name and email in the search.
            - `recipients`: Include recipient names and emails in the search.
            - `envelope`: Not used in template searches.
          in: query
          name: search_fields
          required: false
          schema:
            type: string
        - description: The search text to use to search the names of templates.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: If **true**, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected.
          in: query
          name: shared_by_me
          required: false
          schema:
            type: string
        - description: The starting zero-based index position for the first template to show in the response. This value must be greater than or equal to `0` (zero).
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: A comma-separated list of template ids to download. This value is valid only when `is_download` is **true**.
          in: query
          name: template_ids
          required: false
          schema:
            type: string
        - description: |-
            The end of a search date range in UTC DateTime format. When you use this parameter, only templates created up to this date and time are returned.

            **Note**: If this property is null, the value defaults to the current date.
          in: query
          name: to_date
          required: false
          schema:
            type: string
        - description: Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used.
          in: query
          name: used_from_date
          required: false
          schema:
            type: string
        - description: End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date.
          in: query
          name: used_to_date
          required: false
          schema:
            type: string
        - description: |-
            Filters the templates in the response. Valid values are: 

            - `owned_by_me`: Results include only templates owned by the user.
            - `shared_with_me`: Results include only templates owned by the user.  
            - `all`:  Results include all templates owned or shared with the user.
          in: query
          name: user_filter
          required: false
          schema:
            type: string
        - description: The id of the user.
          in: query
          name: user_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTemplateResults"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets template definitions.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: ListTemplates
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates one or more template definitions, using a multipart request for each template.

        Templates help streamline the sending process when you frequently send the same or similar documents, or send different documents to the same group of people.

        When you create a template, you define placeholder roles. Rather than specifying a person, you specify a role that regularly participates in a transaction that uses the template. Then, when you create or send an envelope based on the template, you assign actual recipients to the template roles. The recipients automatically inherit all of the workflow that is defined for that role in the template, such as the tabs and routing information.

        For code examples and more information, see [REST API Templates](https://developers.docusign.com/esign-rest-api/guides/features/templates#sending-from-a-template).

        ## Template Email Subject Merge Fields

        Placeholder roles have associated merge fields that personalize the email notification that DocuSign sends. For example, the template automatically personalizes the email message by adding placeholders for the recipient's name and email address within the email subject line, based on the recipient's role. When the sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.

        Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to find out who the recipient is.

        **Warning: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where you expect the recipient name or email to be long, you should consider placing the merge field at the start of the email subject.**

        To insert a recipient's name into the subject line, add the following text in the `emailSubject` property when you create the template:

        `[[<roleName>_UserName]]`

        Example:

        `"emailSubject":"[[Signer 1_UserName]], Please sign this NDA",`

        To add a recipient's email address in the subject line, add the following text in the `emailSubject` property when you create the template or send an envelope from the template:

        `[[<roleName>_Email]]`

        Example:

        `"emailSubject":"[[Signer 1_Email]], Please sign this NDA",`

        In these examples, the role name specified in the template  is “Signer 1”.  When the envelope is sent, the placeholder will be dynamically substituted with the recipient's name or email.

        ## Creating multiple templates

        To create multiple templates, you provide a zip file of JSON files. You can also use the Templates::ListTemplates method with the `is_download` query parameter to download a zip file containing your existing templates and use that as a guide. The API supports both .zip and .gzip file formats as input.

        You also need to set the following headers:

        - `Content-Length`
        - `Content-Type`
        - `Content-Disposition`

        Example: 

        `Content-Length: 71068`

        `Content-Type: application/zip`

        `Content-Disposition: file; filename="DocuSignTemplates_Nov_25_2019_20_40_21.zip"; fileExtension=.zip`
      operationId: Templates_PostTemplates
      parameters:
        - description: (Required) The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeTemplate"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates one or more templates.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createTemplate
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}":
    get:
      deprecated: false
      description: Retrieves the definition of the specified template.
      operationId: Templates_GetTemplate
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: |-
            A comma-separated list
            of additional template attributes
            to include in the response.
            Valid values are:

            - `powerforms`: Includes information about PowerForms.
            - `tabs`: Includes information about tabs.
            - `documents`: Includes information about documents.
            - `favorite_template_status`: : Includes the template `favoritedByMe` property in the response. **Note**: You can mark a template as a favorite only in eSignature v2.1.
          in: query
          name: include
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeTemplate"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a specific template associated with a specified account.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: get
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: Updates an existing template.
      operationId: Templates_PutTemplate
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeTemplate"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateUpdateSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates an existing template.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: update
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields":
    delete:
      deprecated: false
      description: Deletes envelope custom fields in a template.
      operationId: CustomFields_DeleteTemplateCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateCustomFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes envelope custom fields in a template.
      tags:
        - TemplateCustomFields
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteCustomFields
      x-ds-service: Templates
    get:
      deprecated: false
      description: Retrieves the custom document field information from an existing template.
      operationId: CustomFields_GetTemplateCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the custom document fields from a template.
      tags:
        - TemplateCustomFields
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listCustomFields
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: Creates custom document fields in an existing template document.
      operationId: CustomFields_PostTemplateCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateCustomFields"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates custom document fields in an existing template document.
      tags:
        - TemplateCustomFields
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createCustomFields
      x-ds-service: Templates
    put:
      deprecated: false
      description: |-
        Updates the custom fields in a template.

        Each custom field used in a template must have a unique name.
      operationId: CustomFields_PutTemplateCustomFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateCustomFields"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customFields"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates envelope custom fields in a template.
      tags:
        - TemplateCustomFields
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateCustomFields
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents":
    delete:
      deprecated: false
      description: |-
        This method deletes one or more documents from an existing template.

        To delete a document, use only the relevant parts of the [`envelopeDefinition`](#envelopeDefinition).
        For example, this request body specifies that you want to delete the document whose `documentId` is "1".


        ```text
        {
          "documents": [
            {
              "documentId": "1"
            }
          ]
        }
        ```
      operationId: Documents_DeleteTemplateDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes documents from a template.
      tags:
        - TemplateDocuments
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocuments
      x-ds-service: Templates
    get:
      deprecated: false
      description: Retrieves a list of documents associated with the specified template.
      operationId: Documents_GetTemplateDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: include_tabs
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of documents associated with a template.
      tags:
        - TemplateDocuments
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listDocuments
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: Adds one or more documents to an existing template document.
      operationId: Documents_PutTemplateDocuments
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateDocumentsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds documents to a template document.
      tags:
        - TemplateDocuments
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateDocuments
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}":
    get:
      deprecated: false
      description: |-
        This method retrieves one or more PDF documents from the template that you specify.

        You can specify the ID of the document to retrieve, or pass in the value `combined` to retrieve all documents in the template as a single PDF file.
      operationId: Documents_GetTemplateDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign.
          in: query
          name: encrypt
          required: false
          schema:
            type: string
        - description: When set to **true**, any document fields that a recipient changed are highlighted in yellow in the returned PDF document, and optional signatures or initials are outlined in red.
          in: query
          name: show_changes
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            application/pdf:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets PDF documents from a template.
      tags:
        - TemplateDocuments
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getDocument
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: This methods updates an existing template document.
      operationId: Documents_PutTemplateDocument
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: is_envelope_definition
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/envelopeDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/envelopeDocument"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a template document.
      tags:
        - TemplateDocuments
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateDocument
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields":
    delete:
      deprecated: false
      description: Deletes custom document fields from an existing template document.
      operationId: DocumentFields_DeleteTemplateDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentFieldsInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentFieldsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes custom document fields from an existing template document.
      tags:
        - TemplateDocumentFields
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocumentFields
      x-ds-service: Templates
    get:
      deprecated: false
      description: This method retrieves the custom document fields for an existing template document.
      operationId: DocumentFields_GetTemplateDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentFieldsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the custom document fields for a an existing template document.
      tags:
        - TemplateDocumentFields
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listDocumentFields
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: Creates custom document fields in an existing template document.
      operationId: DocumentFields_PostTemplateDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentFieldsInformation"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentFieldsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates custom document fields in an existing template document.
      tags:
        - TemplateDocumentFields
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createDocumentFields
      x-ds-service: Templates
    put:
      deprecated: false
      description: Updates existing custom document fields in an existing template document.
      operationId: DocumentFields_PutTemplateDocumentFields
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentFieldsInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentFieldsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates existing custom document fields in an existing template document.
      tags:
        - TemplateDocumentFields
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateDocumentFields
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/html_definitions":
    get:
      deprecated: false
      description: ""
      operationId: ResponsiveHtml_GetTemplateDocumentHtmlDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitionOriginals"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
      tags:
        - TemplateDocumentHtmlDefinitions
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getTemplateDocumentHtmlDefinitions
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages":
    get:
      deprecated: false
      description: Returns images of the pages in a template document for display based on the parameters that you specify.
      operationId: Pages_GetTemplatePageImages
      parameters:
        - description: (Required) The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: (Required) The ID of the document.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: (Required) The ID of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94.
          in: query
          name: dpi
          required: false
          schema:
            type: string
        - description: Sets the maximum height of the returned images in pixels.
          in: query
          name: max_height
          required: false
          schema:
            type: string
        - description: Sets the maximum width of the returned images in pixels.
          in: query
          name: max_width
          required: false
          schema:
            type: string
        - description: "If **true**, using cache is disabled and image information is retrieved from a database. **True** is the default value. "
          in: query
          name: nocache
          required: false
          schema:
            type: string
        - description: If **true**, changes display in the user interface.
          in: query
          name: show_changes
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/pageImages"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns document page image(s) based on input.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: getPageImages
      x-ds-methodname: getDocumentPageImages
      x-ds-service: Templates
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}":
    delete:
      deprecated: false
      description: Deletes a page from a document in a template based on the page number.
      operationId: Pages_DeleteTemplatePage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/pageRequest"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a page from a document in an template.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: deleteDocumentPage
      x-ds-methodname: deleteDocumentPage
      x-ds-service: Templates
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image":
    get:
      deprecated: false
      description: Retrieves a page image for display from the specified template.
      operationId: Pages_GetTemplatePageImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94.
          in: query
          name: dpi
          required: false
          schema:
            type: string
        - description: Sets the maximum height of the returned images in pixels.
          in: query
          name: max_height
          required: false
          schema:
            type: string
        - description: Sets the maximum width of the returned images in pixels.
          in: query
          name: max_width
          required: false
          schema:
            type: string
        - description: ""
          in: query
          name: show_changes
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a page image from a template for display.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: getDocumentPageImage
      x-ds-methodname: getDocumentPageImage
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: Rotates page image from a template for display. The page image can be rotated to the left or right.
      operationId: Pages_PutTemplatePageImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/pageRequest"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Rotates page image from a template for display.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: rotateDocumentPage
      x-ds-methodname: rotateDocumentPage
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs":
    get:
      deprecated: false
      description: ""
      operationId: Tabs_GetTemplatePageTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The page number being accessed.
          in: path
          name: pageNumber
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TemplateDocumentTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns tabs on the specified page.
      tags:
        - TemplateDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: getByPage
      x-ds-methodname: getPageTabs
      x-ds-service: Templates
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/responsive_html_preview":
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML version of a specific template document. This
        method enables you to preview a PDF document
        conversion to responsive HTML across device types
        prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the signing document.
      operationId: ResponsiveHtml_PostTemplateDocumentResponsiveHtmlPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentHtmlDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitions"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a preview of the responsive version of a template document.
      tags:
        - TemplateDocumentResponsiveHtmlPreview
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createTemplateDocumentResponsiveHtmlPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs":
    delete:
      deprecated: false
      description: ""
      operationId: Tabs_DeleteTemplateDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes tabs from an envelope document.
      tags:
        - TemplateDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteDocumentTabs
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: ""
      operationId: Tabs_GetTemplateDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: |-
            Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page Guids.

            Example: `page_numbers=2,6`
          in: query
          name: page_numbers
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TemplateDocumentTabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns tabs on the document.
      tags:
        - TemplateDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getDocumentTabs
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: This method creates Template Document Tabs.
      operationId: Tabs_PostTemplateDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Create Template Document Tabs
      tags:
        - TemplateDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: postDocumentTabs
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: ""
      operationId: Tabs_PutTemplateDocumentTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the tabs for a template.
      tags:
        - TemplateDocumentTabs
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: putDocumentTabs
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/templates/{templateId}/html_definitions":
    get:
      deprecated: false
      description: ""
      operationId: ResponsiveHtml_GetTemplateHtmlDefinitions
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitionOriginals"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the Original HTML Definition used to generate the Responsive HTML for the template.
      tags:
        - TemplateHtmlDefinitions
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: getTemplateHtmlDefinitions
      x-ds-service: Uncategorized
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/lock":
    delete:
      deprecated: false
      description: |
        Deletes the lock from the specified template.
        The user deleting the lock must be the same user
        who locked the template.

        You must include the `X-DocuSign-Edit` header
        as described in
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/).

        This method takes an optional query paramter
        that lets you specify whether
        changes made while the template was locked
        are kept or discarded.


        | Query Parameter | Description                                                                                                                                                                         |
        | :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | `save_changes`  | (Optional) When set to **true** (the default), any changes made while the lock was active are saved. When set to **false**, any changes made while the template was locked are discarded. |
      operationId: Lock_DeleteTemplateLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/lockRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/lockInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a template lock.
      tags:
        - TemplateLocks
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteLock
      x-ds-service: Templates
    get:
      deprecated: false
      description: |
        Retrieves general information about a template lock.

        The user requesting the information must be the same user
        who locked the template.

        You can use this method to recover the lock information,
        including the `lockToken`,
        for a locked template.
        The `X-DocuSign-Edit` header is included in the response.

        See
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/)
        for a description of the `X-DocuSign-Edit` header.
      operationId: Lock_GetTemplateLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/lockInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets template lock information.
      tags:
        - TemplateLocks
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getLock
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: |+
        This method locks the specified template and sets the time until
        the lock expires to prevent other users or recipients from
        changing the template.

        **Note**: To use this method, the envelope locking
        capability must be enabled for the user; that is, the user setting
        `canLockEnvelopes` must be set to **true**.

        The response to this request includes a `lockToken` parameter
        that you must use in the `X-DocuSign-Edit` header for
        every PUT method (typically a method that updates a template)
        while the template is locked.


        If you do not provide the `lockToken` when accessing
        a locked template, you will get the following
        error:

        ```
        {
           "errorCode": "EDIT_LOCK_NOT_LOCK_OWNER",
           "message": "The user is not the owner of the lock. The template is locked by another user or in another application"
        }
        ```


        ### The X-DocuSign-Edit header

        The `X-DocuSign-Edit` header looks like this
        and can be specified in either JSON or XML.

        **JSON**
        ```
        {
          "LockToken": "token-from-response",
          "LockDurationInSeconds": "600"
        }
        ```

        **XML**
        ```
        <DocuSignEdit>
          <LockToken>token-from-response</LockToken>
          <LockDurationInSeconds>600</LockDurationInSeconds>
        </DocuSignEdit>
        ```

        In the actual HTTP header, you would remove the linebreaks:

        ```
        X-DocuSign-Edit: {"LockToken": "token-from-response", "LockDurationInSeconds": "600" }
            or
        X-DocuSign-Edit:<DocuSignEdit><LockToken>token-from-response</LockToken><LockDurationInSeconds>600</LockDurationInSeconds></DocuSignEdit>
        ```


      operationId: Lock_PostTemplateLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/lockRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/lockInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Locks a template.
      tags:
        - TemplateLocks
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createLock
      x-ds-service: Templates
    put:
      deprecated: false
      description: |+
        Updates the lock information for a locked template.

        You must include the `X-DocuSign-Edit` header
        as described in
        [TemplateLocks: create](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templatelocks/create/).


        Use this method to change the duration
        of the lock (`lockDurationInSeconds`)
        or the `lockedByApp` string.

        The request body is a full `lockRequest` object,
        but you only need to specify the
        properties that you are updating. For example:

        ```
        {
          "lockDurationInSeconds": "3600",
          "lockedByApp": "My Application"
        }
        ```

      operationId: Lock_PutTemplateLock
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/lockRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/lockInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates a template lock.
      tags:
        - TemplateLocks
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateLock
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/notification":
    get:
      deprecated: false
      description: Retrieves the envelope notification, reminders and expirations, information for an existing template.
      operationId: Notification_GetTemplatesTemplateIdNotification
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notification"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets template notification information.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: getNotificationSettings
      x-ds-methodname: getNotificationSettings
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
      operationId: Notification_PutTemplatesTemplateIdNotification
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/templateNotificationRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notification"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the notification  structure for an existing template.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: updateNotificationSettings
      x-ds-methodname: updateNotificationSettings
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients":
    delete:
      deprecated: false
      description: Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.
      operationId: Recipients_DeleteTemplateRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateRecipients"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes recipients from a template.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteRecipients
      x-ds-service: Templates
    get:
      deprecated: false
      description: Retrieves the information for all recipients in the specified template.
      operationId: Recipients_GetTemplateRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: " When set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response. "
          in: query
          name: include_anchor_tab_locations
          required: false
          schema:
            type: string
        - description: " When set to **true**, the extended properties are included in the response. "
          in: query
          name: include_extended
          required: false
          schema:
            type: string
        - description: When set to **true**, the tab information associated with the recipient is included in the response.
          in: query
          name: include_tabs
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets recipient information from a template.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listRecipients
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: Adds one or more recipients to a template.
      operationId: Recipients_PostTemplateRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: |-
            When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.

            **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
          in: query
          name: resend_envelope
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateRecipients"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds tabs for a recipient.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createRecipients
      x-ds-service: Templates
    put:
      deprecated: false
      description: |-
        Updates recipients in a template. 

        You can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.
      operationId: Recipients_PutTemplateRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: |-
            When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.

            **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here.
          in: query
          name: resend_envelope
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateRecipients"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipientsUpdateSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates recipients in a template.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateRecipients
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/document_visibility":
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates document visibility for one or more template recipients based on the `recipientId` and `visible` values that you include in the request body.


        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutTemplateRecipientsDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateDocumentVisibilityList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateDocumentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates document visibility for template recipients
      tags:
        - TemplateDocumentVisibility
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateTemplateRecipientsDocumentVisibility
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}":
    delete:
      deprecated: false
      description: Deletes the specified recipient file from the specified template.
      operationId: Recipients_DeleteTemplateRecipient
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateRecipients"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/recipients"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the specified recipient file from a template.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteRecipient
      x-ds-service: Templates
    parameters: []
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/bulk_recipients":
    delete:
      deprecated: false
      description: Deletes the bulk recipient list on a template.
      operationId: Recipients_DeleteTemplateBulkRecipientsFile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkRecipientsUpdateResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the bulk recipient list on a template.
      tags:
        - TemplateBulkRecipients
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteBulkRecipients
      x-ds-service: Templates
    get:
      deprecated: false
      description: Retrieves the bulk recipient file information from a template that has a bulk recipient.
      operationId: Recipients_GetTemplateBulkRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: When set to **true**, the tab information associated with the recipient is included in the response. If you do not specify this parameter, the effect is the default behavior (**false**).
          in: query
          name: include_tabs
          required: false
          schema:
            type: string
        - description: The starting position of the results set.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkRecipientsResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the bulk recipient file from a template.
      tags:
        - TemplateBulkRecipients
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listBulkRecipients
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: |-
        Updates the bulk recipients in a template using a file upload. The Content-Type supported for uploading a bulk recipient file is CSV (text/csv).

        The REST API does not support modifying individual rows or values in the bulk recipients file. It only allows the entire file to be added or replaced with a new file.
      operationId: Recipients_PutTemplateBulkRecipients
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bulkRecipientsRequest"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/bulkRecipientsSummaryResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds or replaces the bulk recipients list in a template.
      tags:
        - TemplateBulkRecipients
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateBulkRecipients
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/document_visibility":
    get:
      deprecated: false
      description: This method returns information about document visibility for a template recipient.
      operationId: Recipients_GetTemplateRecipientDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns document visibility for a template recipient
      tags:
        - TemplateDocumentVisibility
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getTemplateRecipientDocumentVisibility
      x-ds-service: Envelopes
    parameters: []
    put:
      deprecated: false
      description: |-
        This method updates the document visibility for a template recipient.

        **Note**: A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all documents.
      operationId: Recipients_PutTemplateRecipientDocumentVisibility
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateDocumentVisibilityList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/templateDocumentVisibilityList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates document visibility for a template recipient
      tags:
        - TemplateDocumentVisibility
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateTemplateRecipientDocumentVisibility
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs":
    delete:
      deprecated: false
      description: Deletes one or more tabs associated with a recipient in a template.
      operationId: Recipients_DeleteTemplateRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the tabs associated with a recipient in a template.
      tags:
        - TemplateRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteTabs
      x-ds-service: Templates
    get:
      deprecated: false
      description: Gets the tabs information for a signer or sign-in-person recipient in a template.
      operationId: Recipients_GetTemplateRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: When set to **true**, all tabs with anchor tab properties are included in the response. The default value is **false**.
          in: query
          name: include_anchor_tab_locations
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes metadata indicating which properties are editable.
          in: query
          name: include_metadata
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the tabs information for a signer or sign-in-person recipient in a template.
      tags:
        - TemplateRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listTabs
      x-ds-service: Templates
    parameters: []
    post:
      deprecated: false
      description: Adds one or more tabs for a recipient.
      operationId: Recipients_PostTemplateRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds tabs for a recipient.
      tags:
        - TemplateRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createTabs
      x-ds-service: Templates
    put:
      deprecated: false
      description: Updates one or more tabs for a recipient in a template.
      operationId: Recipients_PutTemplateRecipientTabs
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          in: path
          name: recipientId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/templateTabs"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/tabs"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the tabs for a recipient.
      tags:
        - TemplateRecipientTabs
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateTabs
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/responsive_html_preview":
    parameters: []
    post:
      deprecated: false
      description: |-
        Creates a preview of the
        [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/),
        HTML versions of all of the documents associated
        with a template. This method enables you to
        preview the PDF document conversions to responsive
        HTML across device types prior to sending.

        The request body is a `documentHtmlDefinition`
        object, which holds the responsive signing
        parameters that define how to generate the HTML
        version of the documents.
      operationId: ResponsiveHtml_PostTemplateResponsiveHtmlPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/documentHtmlDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/documentHtmlDefinitions"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a preview of the responsive versions of all of the documents associated with a template.
      tags:
        - TemplateResponsiveHtmlPreview
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createTemplateResponsiveHtmlPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/templates/{templateId}/views/edit":
    parameters: []
    post:
      deprecated: false
      description: This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
      operationId: Views_PostTemplateEditView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/returnUrlRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/viewUrl"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a URL for a template edit view.
      tags:
        - TemplateViews
      x-ds-in-sdk: true
      x-ds-method: createEdit
      x-ds-methodname: createEditView
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview":
    parameters: []
    post:
      deprecated: false
      description: |-
        This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.

        For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
      operationId: Views_PostTemplateRecipientPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/recipientPreviewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/viewUrl"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a template recipient preview.
      tags:
        - TemplateRecipients
      x-ds-in-sdk: true
      x-ds-method: createTemplateRecipientPreview
      x-ds-methodname: createTemplateRecipientPreview
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/templates/{templateId}/workflow":
    delete:
      deprecated: false
      description: Deletes the specified template's workflow definition if it has one.
      operationId: EnvelopeWorkflowDefinition_DeleteTemplateWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes a template's workflow definition.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: deleteTemplateWorkflowDefinition
      x-ds-methodname: deleteTemplateWorkflowDefinition
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: Returns template's workflow definition if the template specified by `templateId` has one.
      operationId: EnvelopeWorkflowDefinition_GetTemplateWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workflow"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets template's workflow definition.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: getTemplateWorkflowDefinition
      x-ds-methodname: getTemplateWorkflowDefinition
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: Updates the specified template's workflow definition if  it has one.
      operationId: EnvelopeWorkflowDefinition_PutTemplateWorkflowDefinition
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/workflow"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workflow"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Update a template's workflow definiton.
      tags:
        - EnvelopeWorkflowDefinition
      x-ds-in-sdk: true
      x-ds-method: updateTemplateWorkflowDefinition
      x-ds-methodname: updateTemplateWorkflowDefinition
      x-ds-service: Uncategorized
  "/v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}":
    delete:
      deprecated: false
      description: Removes a member group's sharing permissions for a specified template.
      operationId: Templates_DeleteTemplatePart
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: Currently, the only defined part is **groups**.
          in: path
          name: templatePart
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/groupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Removes a member group's sharing permissions for a template.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: deleteGroupShare
      x-ds-methodname: deleteGroupShare
      x-ds-service: Templates
    parameters: []
    put:
      deprecated: false
      description: |-
        Shares a template with the specified members group.

        **Note**: For a newer version of this functionality, see [Accounts::Update Shared Access](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/updateSharedAccess).
      operationId: Templates_PutTemplatePart
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the template.
          in: path
          name: templateId
          required: true
          schema:
            type: string
        - description: Currently, the only defined part is **groups**.
          in: path
          name: templatePart
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/groupInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/groupInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Shares a template with a group.
      tags:
        - Templates
      x-ds-in-sdk: true
      x-ds-method: updateGroupShare
      x-ds-methodname: updateGroupShare
      x-ds-service: Templates
  "/v2.1/accounts/{accountId}/unsupported_file_types":
    get:
      deprecated: false
      description: Retrieves a list of file types (mime-types and file-extensions) that are not supported for upload through the DocuSign system.
      operationId: UnsupportedFileTypes_GetUnsupportedFileTypes
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/fileTypeList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of unsupported file types.
      tags:
        - Accounts
      x-ds-in-sdk: true
      x-ds-method: listUnsupportedFileTypes
      x-ds-methodname: listUnsupportedFileTypes
      x-ds-service: Accounts
    parameters: []
  "/v2.1/accounts/{accountId}/users":
    delete:
      deprecated: false
      description: |-
        Closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.

        The response specifies whether the API execution succeeded (200 - OK) or failed (400 - Error). The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an `errorDetails` property with `errorCode` and `message` properties.
      operationId: Users_DeleteUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: "ID of the user to delete. This parameter takes a comma-separated list of values in the format: `Groups,PermissionSet,SigningGroupsEmail`."
          in: query
          name: delete
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/userInfoList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/usersResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Removes users account privileges.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: delete
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        Retrieves the list of users for the specified account.

        The response returns the list of users for the account, with information about the result set. If the `additional_info` query is added to the endpoint and set to **true**, full user information is returned for each user.
      operationId: Users_GetUsers
      parameters:
        - description: (Required) The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: When set to **true**, the custom settings information is returned for each user in the account. If this parameter is omitted, the default behavior is **false**.
          in: query
          name: additional_info
          required: false
          schema:
            type: string
        - description: "The number of records to return. This number must be greater than `0` and less than or equal to `100`. "
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: |-
            Filters results based on the email address associated with the user that you want to return.

            **Note**: You can use either this parameter or the `email_substring` parameter, but not both. For older accounts, this parameter might return multiple users who are associated with a single email address. 
          in: query
          name: email
          required: false
          schema:
            type: string
        - description: |-
            Filters results based on a fragment of an email address. For example, you could enter `gmail` to return all users who have Gmail addresses.

            **Note**: You do not use a wildcard character with this parameter. You can use either this parameter or the `email` parameter, but not both. 
          in: query
          name: email_substring
          required: false
          schema:
            type: string
        - description: Filters results based on one or more group IDs.
          in: query
          name: group_id
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes the `userSettings` object data in CSV format.
          in: query
          name: include_usersettings_for_csv
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes the login status of each user.
          in: query
          name: login_status
          required: false
          schema:
            type: string
        - description: Return user records excluding the specified group IDs.
          in: query
          name: not_group_id
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: |
            Filters results by user account status. Possible values are:

            * `ActivationRequired`
            * `ActivationSent`
            * `Active`
            * `Closed`
            * `Disabled`
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: |-
            Filters results based on a full or partial user name.

            **Note**: When you enter a partial user name, you do not use a wildcard character.
          in: query
          name: user_name_substring
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userInformationList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the list of users for the specified account.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: Users
    parameters: []
    post:
      deprecated: false
      description: |
        Adds new users to an account.

        The body of this request is an array of `newUsers` objects. For each new user, you must provide at least the `userName` and `email` properties.

        The `userSettings` property specifies the actions users can perform. In the example below, Tal Mason will be able to send envelopes, and the activation email will be in French because the `locale` is set to `fr`.


        ```
        POST /restapi/v2.1/accounts/{accountId}/users
        Content-Type: application/json
        ```
        ```
        {
          "newUsers": [
            {
              "userName": "Claire Horace",
              "email": "claire@example.com"
            },
            {
              "userName": "Tal Mason",
              "email": "talmason@example.com",
              "company": "TeleSel",
              "userSettings": {
                "locale": "fr",
                "canSendEnvelope": true
              }
            }
          ]
        }
        ```

        A successful response is a `newUsers` array with information about the newly created users. If there was a problem in creating a user, that user entry will contain an `errorDetails` property that describes what went wrong.

        ```json
        {
          "newUsers": [
            {
              "userId": "18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade",
              "uri": "/users/18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade",
              "email": "claire@example.com",
              "userName": "Claire Horace",
              "createdDateTime": "0001-01-01T08:00:00.0000000Z",
              "errorDetails": {
                "errorCode": "USER_ALREADY_EXISTS_IN_ACCOUNT",
                "message": "Username and email combination already exists for this account."
              }
            },
            {
              "userId": "be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33",
              "uri": "/users/be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33",
              "email": "talmason@example.com",
              "userName": "Tal Mason",
              "userStatus": "ActivationSent",
              "createdDateTime": "2020-05-26T23:25:30.7330000Z"
            }
          ]
        }
        ```
      operationId: Users_PostUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newUsersDefinition"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/newUsersSummary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds new users to the specified account.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: create
      x-ds-service: Users
    put:
      deprecated: false
      description: This method updates the information about one or more account users.
      operationId: Users_PutUsers
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInformationList"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userInformationList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Changes one or more users in the specified account.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateUsers
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}":
    get:
      deprecated: false
      description: |-
        Retrieves the user information for the specified user. 

        To return additional user information that details the last login date, login status, and the user's password expiration date, set the optional `additional_info` query string parameter to **true**.
      operationId: User_GetUser
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: Setting this parameter has no effect in this operation.
          in: query
          name: additional_info
          required: false
          schema:
            type: string
        - description: Setting this parameter has no effect in this operation.
          in: query
          name: email
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the user information for a specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getInformation
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: To update user information for a specific user, submit a [Users](#Users) object with updated field values in the request body of this operation.
      operationId: User_PutUser
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates user information for the specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateUser
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage":
    delete:
      deprecated: false
      description: Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
      operationId: CloudStorage_DeleteCloudStorageProviders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/cloudStorageProviders"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/cloudStorageProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the user authentication information for one or more cloud storage providers.
      tags:
        - CloudStorageProviders
      x-ds-in-sdk: true
      x-ds-method: deleteList
      x-ds-methodname: deleteProviders
      x-ds-service: CloudStorage
    get:
      deprecated: false
      description: |
        Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
      operationId: CloudStorage_GetCloudStorageProviders
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: " The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.


            The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.

            \ "
          in: query
          name: redirectUrl
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/cloudStorageProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get the Cloud Storage Provider configuration for the specified user.
      tags:
        - CloudStorageProviders
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listProviders
      x-ds-service: CloudStorage
    parameters: []
    post:
      deprecated: false
      description: Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
      operationId: CloudStorage_PostCloudStorage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/cloudStorageProviders"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/cloudStorageProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Configures the redirect URL information  for one or more cloud storage providers for the specified user.
      tags:
        - CloudStorageProviders
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createProvider
      x-ds-service: CloudStorage
  "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}":
    delete:
      deprecated: false
      description: Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
      operationId: CloudStorage_DeleteCloudStorage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the service to access. 

            Valid values are the service name ("Box") or the numerical serviceId ("4136").
          in: path
          name: serviceId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/cloudStorageProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the user authentication information for the specified cloud storage provider.
      tags:
        - CloudStorageProviders
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteProvider
      x-ds-service: CloudStorage
    get:
      deprecated: false
      description: Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
      operationId: CloudStorage_GetCloudStorage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the service to access. 

            Valid values are the service name ("Box") or the numerical serviceId ("4136").
          in: path
          name: serviceId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: " The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.


            The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.

            \ "
          in: query
          name: redirectUrl
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/cloudStorageProviders"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the specified Cloud Storage Provider configuration for the User.
      tags:
        - CloudStorageProviders
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getProvider
      x-ds-service: CloudStorage
    parameters: []
  "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders":
    get:
      deprecated: false
      description: "Retrieves a list of all the items in a specified folder from the specified cloud storage provider. "
      operationId: CloudStorageFolder_GetCloudStorageFolderAll
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the service to access. 

            Valid values are the service name ("Box") or the numerical serviceId ("4136").
          in: path
          name: serviceId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: "A comma separated list of folder IDs included in the request. "
          in: query
          name: cloud_storage_folder_path
          required: false
          schema:
            type: string
        - description: |-
            An optional value that sets how many items are included in the response. 

            The default setting for this is 25. 
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The file attribute to use to sort the results.

            Valid values are: 

            * `modified`
            * `name`
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: Use this parameter to search for specific text.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: "Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.  "
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/externalFolder"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
      tags:
        - CloudStorage
      x-ds-in-sdk: true
      x-ds-method: listFolders
      x-ds-methodname: listFolders
      x-ds-service: CloudStorage
    parameters: []
  "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}":
    get:
      deprecated: false
      description: |-
        Retrieves a list of the user's items from the specified cloud storage provider. 

        To limit the scope of the items returned, provide a comma-separated list of folder ids in the request.
      operationId: CloudStorageFolder_GetCloudStorageFolder
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: |-
            The ID of the service to access. 

            Valid values are the service name ("Box") or the numerical serviceId ("4136").
          in: path
          name: serviceId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The file path to a cloud storage folder.
          in: query
          name: cloud_storage_folder_path
          required: false
          schema:
            type: string
        - description: A plain-text folder id that you can use as an alternative to the existing folder id. This property is mainly used for rooms. Enter multiple folder ids as a comma-separated list.
          in: query
          name: cloud_storage_folderid_plain
          required: false
          schema:
            type: string
        - description: |-
            An optional value that sets how many items are included in the response. 

            The default setting for this is 25. 
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          in: query
          name: order
          required: false
          schema:
            type: string
        - description: |-
            (Optional) The file attribute to use to sort the results.

            Valid values are: 

            * `modified`
            * `name`
          in: query
          name: order_by
          required: false
          schema:
            type: string
        - description: Use this parameter to search for specific text.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: The starting index position in the result set from which to start returning values. The default setting is `0`.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/externalFolder"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of items from a cloud storage provider.
      tags:
        - CloudStorage
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: list
      x-ds-service: CloudStorage
    parameters: []
  "/v2.1/accounts/{accountId}/users/{userId}/custom_settings":
    delete:
      deprecated: false
      description: |-
        Deletes the specified custom user settings for a single user.

        ###Deleting Grouped Custom User Settings###

        If the custom user settings you want to delete are grouped, you must include the following information in the header, after Content-Type, in the request:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings.

        If the extra header information is not included, only the custom user settings that were added without a group are deleted.
      operationId: UserCustomSettings_DeleteCustomSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/customSettingsInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes custom user settings for a specified user.
      tags:
        - UserCustomSettings
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteCustomSettings
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        Retrieves a list of custom user settings for a single user.

        Custom settings provide a flexible way to store and retrieve custom user information that can be used in your own system.

        **Note**: Custom user settings are not the same as user account settings.

        ###Getting Grouped Custom User Settings###

        If the custom user settings you want to retrieve are grouped, you must include the following information in the header, after Content-Type, in the request:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings.

        If the extra header information is not included, only the custom user settings that were added without a group are retrieved.
      operationId: UserCustomSettings_GetCustomSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the custom user settings for a specified user.
      tags:
        - UserCustomSettings
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listCustomSettings
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: |-
        Adds or updates custom user settings for the specified user.

        ***Note**: Custom user settings are not the same as user account settings.

        Custom settings provide a flexible way to store and retrieve custom user information that you can use in your own system.

        **Important**: There is a limit on the size for all the custom user settings for a single user. The limit is 4,000 characters, which includes the XML and JSON structure for the settings.

        ### Grouping Custom User Settings ###

        You can group custom user settings when adding them. Grouping allows you to retrieve settings that are in a specific group, instead of retrieving all the user custom settings.

        To group custom user settings, add the following information in the header, after Content-Type:

        `X-DocuSign-User-Settings-Key:group_name`

        Where the `group_name` is your designated name for the group of customer user settings. Grouping is shown in the Example Request Body below.

        When getting or deleting grouped custom user settings, you must include the extra header information.

        Grouping custom user settings is not required and if the extra header information is not included, the custom user settings are added normally and can be retrieved or deleted without including the additional header.
      operationId: UserCustomSettings_PutCustomSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/customSettingsInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/customSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds or updates custom user settings for the specified user.
      tags:
        - UserCustomSettings
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateCustomSettings
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/profile":
    get:
      deprecated: false
      description: |-
        Retrieves the user profile information, the privacy settings and personal information (address, phone number, etc.) for the specified user.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
      operationId: UserProfile_GetProfile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userProfile"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the user profile for a specified user.
      tags:
        - UserProfiles
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getProfile
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: |-
        Updates the user's detail information, profile information, privacy settings, and personal information in the user ID card.

        You can also change a user's name by changing the information in the `userDetails` property. When changing a user's name, you can either change the information in the `userName` property OR change the information in `firstName`, `middleName`, `lastName, suffixName`, and `title` properties. Changes to `firstName`, `middleName`, `lastName`, `suffixName`, and `title` properties take precedence over changes to the `userName` property.
      operationId: UserProfile_PutProfile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userProfile"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the user profile information for the specified user.
      tags:
        - UserProfiles
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateProfile
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/profile/image":
    delete:
      deprecated: false
      description: |-
        Deletes the user profile image from the  specified user's profile.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.
      operationId: UserProfileImage_DeleteUserProfileImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the user profile image for the specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: deleteProfileImage
      x-ds-methodname: deleteProfileImage
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the specified account.

        If successful, the response returns a 200 - OK and the user profile image.
      operationId: UserProfileImage_GetUserProfileImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: Reserved for DocuSign.
          in: query
          name: encoding
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/gif:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/gif:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the user profile image for the specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: getProfileImage
      x-ds-methodname: getProfileImage
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: |-
        Updates the user profile image by uploading an image to the user profile.

        The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
      operationId: UserProfileImage_PutUserProfileImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the user profile image for a specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: updateProfileImage
      x-ds-methodname: updateProfileImage
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/settings":
    get:
      deprecated: false
      description: |+
        Retrieves a list of the account settings and email
        notification information for the specified user.

        The response returns the account setting
        name/value information and the email notification
        settings for the specified user. For more
        information, see
        [Users:create](https://developers.docusign.com/docs/esign-rest-api/reference/Users/Users/create/).


      operationId: UserSettings_GetUserSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the user account settings for a specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: getSettings
      x-ds-methodname: getSettings
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: Updates the account settings list and email notification types for the specified user.
      operationId: UserSettings_PutUserSettings
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSettingsInformation"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the user account settings for a specified user.
      tags:
        - Users
      x-ds-in-sdk: true
      x-ds-method: updateSettings
      x-ds-methodname: updateSettings
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/signatures":
    get:
      deprecated: false
      description: |-
        This method retrieves the signature definitions for the user that you specify.

        The `userId` parameter specified in the endpoint must match the authenticated user's user ID, and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 

        For example, encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_GetUserSignatures
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: |-
            The type of stamps to return. Valid values are:

            - `signature`: Returns information about signature images only. This is the default value.
            - `stamp`: Returns information about eHanko and custom stamps only.
            - null
          in: query
          name: stamp_type
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves a list of signature definitions for a user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listSignatures
      x-ds-service: Users
    parameters: []
    post:
      deprecated: false
      description: |-
        Adds a user signature image and/or user initials image to the specified user. 

        The userId property specified in the endpoint must match the authenticated user's `userId` and the user must be a member of the account.

        The rules and processes associated with this are:

        * If `Content-Type` is set to `application/json`, then the default behavior for creating a default signature image, based on the name and a DocuSign font, is used.
        * If `Content-Type` is set to `multipart/form-data`, then the request must contain a first part with the user signature information, followed by parts that contain the images.

        For each Image part, the Content-Disposition header has a "filename" value that is used to map to the `signatureName` and/or `signatureInitials` properties in the JSON to the image. 

        For example: 
        `Content-Disposition: file; filename="Ron Test20121127083900"`

        If no matching image (by filename value) is found, then the image is not set. One, both, or neither of the signature and initials images can be set with this call.

        The Content-Transfer-Encoding: base64 header, set in the header for the part containing the image, can be set to indicate that the images are formatted as base64 instead of as binary.

        If successful, 200-OK is returned, and a JSON structure containing the signature information is provided, note that the signatureId can change with each API POST, PUT, or DELETE since the changes to the signature structure cause the current signature to be closed, and a new signature record to be created.
      operationId: UserSignatures_PostUserSignatures
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/userSignaturesInformation"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds user Signature and initials images to a Signature.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createSignatures
      x-ds-service: Users
    put:
      deprecated: false
      description: ""
      operationId: UserSignatures_PutUserSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/userSignaturesInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignaturesInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Adds/updates a user signature.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: updateList
      x-ds-methodname: updateSignatures
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/signatures/{signatureId}":
    delete:
      deprecated: false
      description: |-
        Removes the signature information for the user.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_DeleteUserSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Removes removes signature information for the specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteSignature
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        Retrieves the structure of a single signature with a known signature name.

        The userId specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_GetUserSignature
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the user signature information for the specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getSignature
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: |-
        Creates, or updates, the signature font and initials for the specified user. When creating a signature, you use this resource to create the signature name and then add the signature and initials images into the signature.

        **Note**: This will also create a default signature for the user when one does not exist.

        The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint.

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_PutUserSignatureById
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: When set to **true**, closes the current signature.
          in: query
          name: close_existing_signature
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSignatureDefinition"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the user signature for a specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateSignature
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/users/{userId}/signatures/{signatureId}/{imageType}":
    delete:
      deprecated: false
      description: |-
        Deletes the specified initials image or signature image for the specified user.

        The function deletes one or the other of the image types, to delete both the initials image and signature image you must call the endpoint twice.

        The userId parameter specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_DeleteUserSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the user initials image or the  user signature image for the specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: deleteImage
      x-ds-methodname: deleteSignatureImage
      x-ds-service: Users
    get:
      deprecated: false
      description: |-
        Retrieves the specified initials image or signature image for the specified user. The image is returned in the same format in which it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.

        The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint.

        For example encode "Bob Smith" as "Bob%20Smith".

        **Note**: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
      operationId: UserSignatures_GetUserSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: When **true**, the chrome (or frame containing the added line and identifier) is included with the signature image.
          in: query
          name: include_chrome
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            image/gif:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            image/gif:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves the user initials image or the  user signature image for the specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: getImage
      x-ds-methodname: getSignatureImage
      x-ds-service: Users
    parameters: []
    put:
      deprecated: false
      description: |
        Updates the user signature image or user initials image for the specified user. The supported image formats for this file are: gif, png, jpeg, and bmp. The file must be less than 200K.

        The userId property specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.

        The `signatureId` parameter accepts a signature ID or a signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly encode into a URL. If you use the user name, it is likely that the name includes spaces. In that case, URL encode the name before using it in the endpoint. 

        For example encode "Bob Smith" as "Bob%20Smith".
      operationId: UserSignatures_PutUserSignatureImage
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          in: path
          name: imageType
          required: true
          schema:
            type: string
        - description: The ID of the signature being accessed.
          in: path
          name: signatureId
          required: true
          schema:
            type: string
        - description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: ""
          in: query
          name: transparent_png
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userSignature"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the user signature image or user initials image for the specified user.
      tags:
        - UserSignatures
      x-ds-in-sdk: true
      x-ds-method: updateImage
      x-ds-methodname: updateSignatureImage
      x-ds-service: Users
  "/v2.1/accounts/{accountId}/views/console":
    parameters: []
    post:
      deprecated: false
      description: |-
        Returns a URL that enables you to embed the authentication view of the DocuSign UI in your applications.

        **Note**: You can revoke this URL by making the DELETE call to the same URL with no request body. 

        <blockquote>
        <p><b>Information Security notice</b>: This method provides full administrator access to the account.</p>
      operationId: Views_PostAccountConsoleView
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/consoleViewRequest"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/EnvelopeViews"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a URL to the authentication view UI.
      tags:
        - EnvelopeViews
      x-ds-examples:
        - description: |+
            The response contains the URL
            of the the account's cosole.

            The request body contains
            a `returnUrl`.
            This is the URL
            that the DocuSign platform
            will redirect the user to
            when the view is closed.

          direction: both
          format: json
          request:
            returnUrl: https://dsapp.example.com/return/from/console/view
          response:
            url: https://demo.docusign.net/Member/StartInSession.aspx?StartConsole=1&t=644ea697-xxxx-xxxx-xxxx-d95a5c23340b&accountid=624e3e00-xxxx-xxxx-xxxx-43918c520dab
          style: custom
          title: Getting a Console View URL and Setting a Return URL
      x-ds-in-sdk: true
      x-ds-method: createConsole
      x-ds-methodname: createConsoleView
      x-ds-service: Envelopes
  "/v2.1/accounts/{accountId}/watermark":
    get:
      deprecated: false
      description: ""
      operationId: Watermark_GetWatermark
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/watermark"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get watermark information.
      tags:
        - AccountWatermarks
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getWatermark
      x-ds-service: Accounts
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: Watermark_PutWatermark
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/watermark"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/watermark"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Update watermark information.
      tags:
        - AccountWatermarks
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateWatermark
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/watermark/preview":
    parameters: []
    put:
      deprecated: false
      description: ""
      operationId: WatermarkPreview_PutWatermarkPreview
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/watermark"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/watermark"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get watermark preview.
      tags:
        - AccountWatermarks
      x-ds-in-sdk: true
      x-ds-method: preview
      x-ds-methodname: getWatermarkPreview
      x-ds-service: Accounts
  "/v2.1/accounts/{accountId}/workspaces":
    get:
      deprecated: false
      description: Gets information about the Workspaces that have been created.
      operationId: Workspace_GetWorkspaces
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspaceList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: List Workspaces
      tags:
        - Workspaces
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listWorkspaces
      x-ds-service: Workspaces
    parameters: []
    post:
      deprecated: false
      description: This method creates a new workspace.
      operationId: Workspace_PostWorkspace
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/workspace"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspace"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Create a Workspace
      tags:
        - Workspaces
      x-ds-in-sdk: true
      x-ds-method: create
      x-ds-methodname: createWorkspace
      x-ds-service: Workspaces
  "/v2.1/accounts/{accountId}/workspaces/{workspaceId}":
    delete:
      deprecated: false
      description: Deletes an existing workspace (logically).
      operationId: Workspace_DeleteWorkspace
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspace"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Delete Workspace
      tags:
        - Workspaces
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteWorkspace
      x-ds-service: Workspaces
    get:
      deprecated: false
      description: "Retrives properties about a workspace given a unique workspaceId. "
      operationId: Workspace_GetWorkspace
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspace"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Get Workspace
      tags:
        - Workspaces
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getWorkspace
      x-ds-service: Workspaces
    parameters: []
    put:
      deprecated: false
      description: Updates information about a specific workspace.
      operationId: Workspace_PutWorkspace
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/workspace"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspace"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Update Workspace
      tags:
        - Workspaces
      x-ds-in-sdk: true
      x-ds-method: update
      x-ds-methodname: updateWorkspace
      x-ds-service: Workspaces
  "/v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}":
    delete:
      deprecated: false
      description: |-
        This method deletes one or more files or sub-folders from a workspace folder or root.

        Note: To delete items from a workspace, the `status` of the workspace must be `active`.
      operationId: WorkspaceFolder_DeleteWorkspaceItems
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/workspaceItemList"
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes files or sub-folders from a workspace.
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: deleteFolderItems
      x-ds-methodname: deleteWorkspaceFolderItems
      x-ds-service: Workspaces
    get:
      deprecated: false
      description: This method returns the contents of a workspace folder, which can include sub-folders and files.
      operationId: WorkspaceFolder_GetWorkspaceFolder
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
        - description: The maximum number of results to be returned by this request.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes file information (in addition to folder information). The default is **false**.
          in: query
          name: include_files
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes information about the sub-folders of the current folder. The default is **false**.
          in: query
          name: include_sub_folders
          required: false
          schema:
            type: string
        - description: When set to **true**, the response returns thumbnails.  The default is **false**.
          in: query
          name: include_thumbnails
          required: false
          schema:
            type: string
        - description: When set to **true**, the response includes extended details about the user. The default is **false**.
          in: query
          name: include_user_detail
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values.
          in: query
          name: start_position
          required: false
          schema:
            type: string
        - description: If set, the response only includes results associated with the `userId` that you specify.
          in: query
          name: workspace_user_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspaceFolderContents"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: List workspace folder contents
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: listFolderItems
      x-ds-methodname: listWorkspaceFolderItems
      x-ds-service: Workspaces
    parameters: []
  "/v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files":
    parameters: []
    post:
      deprecated: false
      description: This method adds a file to a workspace.
      operationId: WorkspaceFile_PostWorkspaceFiles
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspaceItem"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a workspace file.
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: createFIle
      x-ds-methodname: createWorkspaceFile
      x-ds-service: Workspaces
  "/v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}":
    get:
      deprecated: false
      description: This method returns a binary version of a file in a workspace.
      operationId: WorkspaceFile_GetWorkspaceFile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the file.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
        - description: When set to **true**, the `Content-Disposition` header is set in the response. The value of the header provides the filename of the file. The default is **false**.
          in: query
          name: is_download
          required: false
          schema:
            type: string
        - description: When set to **true** the file is returned in PDF format.
          in: query
          name: pdf_version
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a workspace file
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: getFile
      x-ds-methodname: getWorkspaceFile
      x-ds-service: Workspaces
    parameters: []
    put:
      deprecated: false
      description: This method updates the metadata for one or more specific files or folders in a workspace.
      operationId: WorkspaceFile_PutWorkspaceFile
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the file.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/workspaceItem"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Update workspace file or folder metadata
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: updateFile
      x-ds-methodname: updateWorkspaceFile
      x-ds-service: Workspaces
  "/v2.1/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}/pages":
    get:
      deprecated: false
      description: This method returns a workspace file as rasterized pages.
      operationId: WorkspaceFilePages_GetWorkspaceFilePages
      parameters:
        - description: The external account number (int) or account ID GUID.
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: The id of the file.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: The id of the folder.
          in: path
          name: folderId
          required: true
          schema:
            type: string
        - description: The id of the workspace.
          in: path
          name: workspaceId
          required: true
          schema:
            type: string
        - description: The maximum number of results to be returned by this request.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94.
          in: query
          name: dpi
          required: false
          schema:
            type: string
        - description: Sets the maximum height of the returned images in pixels.
          in: query
          name: max_height
          required: false
          schema:
            type: string
        - description: Sets the maximum width of the returned images in pixels.
          in: query
          name: max_width
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/pageImages"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: List File Pages
      tags:
        - WorkspaceItems
      x-ds-in-sdk: true
      x-ds-method: listFilePages
      x-ds-methodname: listWorkspaceFilePages
      x-ds-service: Workspaces
    parameters: []
  /v2.1/billing_plans:
    get:
      deprecated: false
      description: Retrieves a list of the billing plans associated with a distributor.
      operationId: BillingPlans_GetBillingPlans
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPlansResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a list of available billing plans.
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listBillingPlans
      x-ds-service: Billing
    parameters: []
  "/v2.1/billing_plans/{billingPlanId}":
    get:
      deprecated: false
      description: Retrieves the billing plan details for the specified billing plan ID.
      operationId: BillingPlans_GetBillingPlan
      parameters:
        - description: The ID of the billing plan being accessed.
          in: path
          name: billingPlanId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/billingPlanResponse"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets billing plan details.
      tags:
        - BillingPlans
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getBillingPlan
      x-ds-service: Billing
    parameters: []
  /v2.1/current_user/notary:
    get:
      deprecated: false
      description: |-
        Gets settings for a notary user.
        The current user must be a notary.
      operationId: Notary_GetNotary
      parameters:
        - description: If **true**, the response will include a `jurisdiction` property that contains an array of all supported jurisdictions for the current user.
          in: query
          name: include_jurisdictions
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets settings for a  notary user.
      tags:
        - Notary
      x-ds-in-sdk: true
      x-ds-method: getNotary
      x-ds-methodname: getNotary
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: Registers the current user as a notary.
      operationId: Notary_PostNotary
      requestBody:
        $ref: "#/components/requestBodies/notary"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Registers the current user as a notary.
      tags:
        - Notary
      x-ds-in-sdk: true
      x-ds-method: createNotary
      x-ds-methodname: createNotary
      x-ds-service: Uncategorized
    put:
      deprecated: false
      description: Updates notary information for the current user.
      operationId: Notary_PutNotary
      requestBody:
        $ref: "#/components/requestBodies/notary"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notary"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates notary information for the current user.
      tags:
        - Notary
      x-ds-in-sdk: true
      x-ds-method: updateNotary
      x-ds-methodname: updateNotary
      x-ds-service: Uncategorized
  /v2.1/current_user/notary/journals:
    get:
      deprecated: false
      description: ""
      operationId: NotaryJournals_GetNotaryJournals
      parameters:
        - description: The maximum number of results to return.
          in: query
          name: count
          required: false
          schema:
            type: string
        - description: Use this parameter to search for specific text.
          in: query
          name: search_text
          required: false
          schema:
            type: string
        - description: The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
          in: query
          name: start_position
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryJournalList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets notary jurisdictions for a user.
      tags:
        - NotaryJournals
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listNotaryJournals
      x-ds-service: Notary
    parameters: []
  /v2.1/current_user/notary/jurisdictions:
    get:
      deprecated: false
      description: |-
        Returns a list of jurisdictions that the notary is registered in.
        The current user must be a notary.
      operationId: NotaryJurisdictions_GetNotaryJurisdictions
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryJurisdictionList"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns a list of jurisdictions that the notary is registered in.
      tags:
        - NotaryJurisdiction
      x-ds-in-sdk: true
      x-ds-method: getNotaryJurisdictions
      x-ds-methodname: getNotaryJurisdictions
      x-ds-service: Uncategorized
    parameters: []
    post:
      deprecated: false
      description: Creates a jurisdiction object.
      operationId: NotaryJurisdictions_PostNotaryJurisdictions
      requestBody:
        $ref: "#/components/requestBodies/notaryJurisdiction"
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryJurisdiction"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Creates a jurisdiction object.
      tags:
        - NotaryJurisdiction
      x-ds-in-sdk: true
      x-ds-method: createNotaryJurisdictions
      x-ds-methodname: createNotaryJurisdictions
      x-ds-service: Uncategorized
  "/v2.1/current_user/notary/jurisdictions/{jurisdictionId}":
    delete:
      deprecated: false
      description: Deletes the specified jurisdiction.
      operationId: NotaryJurisdictions_DeleteNotaryJurisdiction
      parameters:
        - description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          in: path
          name: jurisdictionId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the specified jurisdiction.
      tags:
        - NotaryJurisdiction
      x-ds-in-sdk: true
      x-ds-method: deleteNotaryJurisdiction
      x-ds-methodname: deleteNotaryJurisdiction
      x-ds-service: Uncategorized
    get:
      deprecated: false
      description: |
        Gets a jurisdiction object for the current user.  The following restrictions apply:

        - The current user must be a notary.
        - The `jurisdictionId` must be a jurisdiction that the notary is registered for.
      operationId: NotaryJurisdictions_GetNotaryJurisdiction
      parameters:
        - description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          in: path
          name: jurisdictionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryJurisdiction"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a jurisdiction object for the current user. The user must be a notary.
      tags:
        - NotaryJurisdiction
      x-ds-in-sdk: true
      x-ds-method: getNotaryJurisdiction
      x-ds-methodname: getNotaryJurisdiction
      x-ds-service: Uncategorized
    parameters: []
    put:
      deprecated: false
      description: |
        Updates the jurisdiction information about a notary.

        The following restrictions apply:

        - The current user must be a notary.
        - The `jurisdictionId` path parameter must be a jurisdiction that the notary is registered for.
        - The `jurisdictionId` path parameter must match the request body's `jurisdiction.jurisdictionId`.

        The request body must have a full `jurisdiction` object for the jurisdiction property.
        The best way to do this is to use `getNotaryJurisdiction` to obtain the current values and update the properties you want to change.

        For example, assume `getNotaryJurisdiction` returns this:

        ```
        {
            "jurisdiction": {
                "jurisdictionId": "15",
                "name": "Iowa",
                "county": "",
                "enabled": "true",
                "countyInSeal": "false",
                "commissionIdInSeal": "true",
                "stateNameInSeal": "true",
                "notaryPublicInSeal": "true",
                "allowSystemCreatedSeal": "true",
                "allowUserUploadedSeal": "false"
            },
            "commissionId": "123456",
            "commissionExpiration": "2020-08-31T07:00:00.0000000Z",
            "registeredName": "Bob Notary",
            "county": "Adams",
            "sealType": "system_created"
        }
        ```

        If you want to change the name of the notary from "Bob Notary" to "Robert Notary", your request body would be:

        ```
        {
            "jurisdiction": {
                "jurisdictionId": "15",
                "name": "Iowa",
                "county": "",
                "enabled": "true",
                "countyInSeal": "false",
                "commissionIdInSeal": "true",
                "stateNameInSeal": "true",
                "notaryPublicInSeal": "true",
                "allowSystemCreatedSeal": "true",
                "allowUserUploadedSeal": "false"
            },
            "commissionId": "123456",
            "commissionExpiration": "2020-08-31T07:00:00.0000000Z",
            "registeredName": "Robert Notary",
            "county": "Adams",
            "sealType": "system_created"
        }
        ```
      operationId: NotaryJurisdictions_PutNotaryJurisdiction
      parameters:
        - description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          in: path
          name: jurisdictionId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/notaryJurisdiction"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/notaryJurisdiction"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Updates the jurisdiction information about a notary.
      tags:
        - NotaryJurisdiction
      x-ds-in-sdk: true
      x-ds-method: updateNotaryJurisdiction
      x-ds-methodname: updateNotaryJurisdiction
      x-ds-service: Uncategorized
  /v2.1/current_user/password_rules:
    get:
      deprecated: false
      description: ""
      operationId: PasswordRules_GetPasswordRules
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/userPasswordRules"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets membership account password rules.
      tags:
        - AccountPasswordRules
      x-ds-in-sdk: true
      x-ds-method: getForUser
      x-ds-methodname: getPasswordRules
      x-ds-service: Accounts
    parameters: []
  /v2.1/diagnostics/request_logs:
    delete:
      deprecated: false
      description: Deletes the request log files.
      operationId: APIRequestLog_DeleteRequestLogs
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Deletes the request log files.
      tags:
        - RequestLogs
      x-ds-in-sdk: true
      x-ds-method: delete
      x-ds-methodname: deleteRequestLogs
      x-ds-service: Diagnostics
    get:
      deprecated: false
      description: |-
        Retrieves a list of log entries as a JSON or xml object or as a zip file containing the entries.

        If the Accept header is set to application/zip, the response is a zip file containing individual text files, each representing an API request.

        If the Accept header is set to `application/json` or `application/xml`, the response returns list of log entries in either JSON or XML. An example JSON response body is shown below. 
      operationId: APIRequestLog_GetRequestLogs
      parameters:
        - description: Reserved for DocuSign.
          in: query
          name: encoding
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/apiRequestLogsResult"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the API request logging log files.
      tags:
        - RequestLogs
      x-ds-in-sdk: true
      x-ds-method: list
      x-ds-methodname: listRequestLogs
      x-ds-service: Diagnostics
    parameters: []
  "/v2.1/diagnostics/request_logs/{requestLogId}":
    get:
      deprecated: false
      description: |-
        Retrieves information for a single log entry.

        **Request**
        The `requestLogfId` property can be retrieved by getting the list of log entries. The Content-Transfer-Encoding header can be set to base64 to retrieve the API request/response as base 64 string. Otherwise the bytes of the request/response are returned.

        **Response**
        If the Content-Transfer-Encoding header was set to base64, the log is returned as a base64 string.
      operationId: APIRequestLog_GetRequestLog
      parameters:
        - description: ""
          in: path
          name: requestLogId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
          description: Successful response.
        "400":
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets a request logging log file.
      tags:
        - RequestLogs
      x-ds-in-sdk: true
      x-ds-method: get
      x-ds-methodname: getRequestLog
      x-ds-service: Diagnostics
    parameters: []
  /v2.1/diagnostics/settings:
    get:
      deprecated: false
      description: |-
        Retrieves the current API request logging setting for the user and remaining log entries.

        **Response**
        The response includes the current API request logging setting for the user, along with the maximum log entries and remaining log entries.
      operationId: APIRequestLog_GetRequestLogSettings
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/diagnosticsSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Gets the API request logging settings.
      tags:
        - RequestLogs
      x-ds-in-sdk: true
      x-ds-method: getSettings
      x-ds-methodname: getRequestLogSettings
      x-ds-service: Diagnostics
    parameters: []
    put:
      deprecated: false
      description: |
        Enables or disables API request logging for troubleshooting.

        When enabled (`apiRequestLogging` is **true**), REST API requests and responses for the user are added to a log. A log can have up to 50 requests/responses and the current number of log entries can be determined by getting the settings. Logging is automatically disabled when the log limit of 50 is reached.

        You can call [Diagnostics::getRequestLog
        ](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/get) or [Diagnostics::listRequestLogs](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/list) to download the log files (individually or as a zip file). Call [Diagnostics::deleteRequestLogs
        ](https://developers.docusign.com/esign-rest-api/reference/Diagnostics/RequestLogs/delete) to clear the log by deleting current entries.

        Private information, such as passwords and integrator key information, which is normally located in the call header is omitted from the request/response log.

        API request logging only captures requests from the authenticated user. Any call that does not authenticate the user and resolve a userId is not logged.
      operationId: APIRequestLog_PutRequestLogSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/diagnosticsSettingsInformation"
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/diagnosticsSettingsInformation"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Enables or disables API request logging for troubleshooting.
      tags:
        - RequestLogs
      x-ds-in-sdk: true
      x-ds-method: updateSettings
      x-ds-methodname: updateRequestLogSettings
      x-ds-service: Diagnostics
  /v2.1/display_appliance_info/error:
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PostError
      responses:
        "201":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Uploads Kazmon error for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: createError
      x-ds-methodname: createError
      x-ds-service: Uncategorized
  /v2.1/display_appliance_info/redeem:
    parameters: []
    post:
      deprecated: false
      description: ""
      operationId: EnvelopeApplianceInfo_PostRedeem
      responses:
        "201":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/displayApplianceInfo"
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Returns signing URL for Display Appliance.
      tags:
        - ApplianceInfo
      x-ds-in-sdk: true
      x-ds-method: createRedeem
      x-ds-methodname: createRedeem
      x-ds-service: Uncategorized
  "/v2.1/organization_exports/{organizationId}/account_settings/{resultId}":
    get:
      deprecated: false
      description: ""
      operationId: OrganizationExports_GetAccountSettingsExport
      parameters:
        - description: ""
          in: path
          name: organizationId
          required: true
          schema:
            type: string
        - description: ""
          in: path
          name: resultId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
        "400":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/errorDetails"
          description: Error encountered.
      summary: Retrieves an account settings comparison.
      tags:
        - Accounts
      x-ds-api-status: beta
      x-ds-in-sdk: true
      x-ds-method: getAccountSettingsExport
      x-ds-methodname: getAccountSettingsExport
      x-ds-service: Uncategorized
    parameters: []
components:
  requestBodies:
    EnvelopeCustomFields:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvelopeCustomFields"
    EnvelopeDocumentFields:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvelopeDocumentFields"
    EnvelopeRecipientTabs:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvelopeRecipientTabs"
    EnvelopeRecipients:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvelopeRecipients"
    accountSignaturesInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/accountSignaturesInformation"
    brand:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/brand"
    brandsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/brandsRequest"
    bulkSendRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/bulkSendRequest"
    bulkSendingList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/bulkSendingList"
    chunkedUploadRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/chunkedUploadRequest"
    cloudStorageProviders:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/cloudStorageProviders"
    connectCustomConfiguration:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/connectCustomConfiguration"
    contactModRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/contactModRequest"
    correctViewRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/correctViewRequest"
    customField:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customField"
    customSettingsInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customSettingsInformation"
    documentFieldsInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/documentFieldsInformation"
    documentHtmlDefinition:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/documentHtmlDefinition"
    documentTemplateList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/documentTemplateList"
    documentVisibilityList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/documentVisibilityList"
    emailSettings:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/emailSettings"
      description: A complex type that contains email settings.
    envelopeAttachmentsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/envelopeAttachmentsRequest"
    envelopeDefinition:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/envelopeDefinition"
    envelopeTemplate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/envelopeTemplate"
    favoriteTemplatesInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/favoriteTemplatesInfo"
    groupInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groupInformation"
    lockRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/lockRequest"
    notary:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/notary"
    notaryJurisdiction:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/notaryJurisdiction"
    pageRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/pageRequest"
    permissionProfile:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/permissionProfile"
    powerForm:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/powerForm"
      description: Information about any PowerForms that are included in the envelope.
    recipientPreviewRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/recipientPreviewRequest"
    recipientViewRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/recipientViewRequest"
    reportInProductRunRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/reportInProductRunRequest"
    returnUrlRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/returnUrlRequest"
    signingGroupInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/signingGroupInformation"
    signingGroupUsers:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/signingGroupUsers"
      description: A complex type that contains information about users in the signing group.
    tabMetadata:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/tabMetadata"
    tabs:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/tabs"
      description: A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.
    templateCustomFields:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/templateCustomFields"
    templateDocumentVisibilityList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/templateDocumentVisibilityList"
    templateRecipients:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/templateRecipients"
    templateTabs:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/templateTabs"
    userInfoList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/userInfoList"
    userSignaturesInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/userSignaturesInformation"
    watermark:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/watermark"
      description: "When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, then the watermark for the account is added to the PDF documents. This option can remove the watermark. "
    workflow:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/workflow"
    workspace:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/workspace"
  schemas:
    AccountBrands:
      description: The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
      properties:
        brands:
          description: A list of brands.
          items:
            $ref: "#/components/schemas/brand"
          type: array
        recipientBrandIdDefault:
          description: The brand that envelope recipients see when a brand is not explicitly set.
          type: string
        senderBrandIdDefault:
          description: The brand that envelope senders see when a brand is not explicitly set.
          type: string
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: brandsResponse
      x-ds-order: "10"
      x-ms-summary: The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
    AccountConsumerDisclosures:
      description: Details about account consumer disclosures.
      properties:
        accountEsignId:
          description: The GUID of the account associated with the consumer disclosure.
          type: string
        allowCDWithdraw:
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
          type: string
        allowCDWithdrawMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        changeEmail:
          description: |-
            If the customer needs to change their email address, this is the email address to which they should the change request.

            Maximum length: 100 characters.
          type: string
        changeEmailOther:
          description: |-
            Other information about the requirements for the user to change their email address.

            Maximum length: 255 characters.

            Example: 

            `We do not require any other information from you to change your email address.`
          type: string
        companyName:
          description: |-
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
          type: string
        companyPhone:
          description: The phone number of the company associated with the consumer disclosure, as a free-formatted string.
          type: string
        copyCostPerPage:
          description: |-
            The cost per page if the customer requests paper copies.

            Example: 

            `0.0000`
          type: string
        copyFeeCollectionMethod:
          description: |-
            Specifies the fee collection method for cases in which the customer requires paper copies of the document.

            Maximum length: 255 characters.

            Example: 

            `We will bill you for any fees at that time, if any.`
          type: string
        copyRequestEmail:
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
          type: string
        custom:
          description: When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
          type: string
        enableEsign:
          description: When set to **true** (default), indicates that eSign is enabled.
          type: string
        esignAgreement:
          description: The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics. It also includes the HTML tags used for formatting.
          type: string
        esignText:
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
          type: string
        languageCode:
          description: |-
            The code for the language version of the disclosure. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          type: string
        mustAgreeToEsign:
          description: When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting `consumerDisclosureFrequency` and the user's actions.
          type: string
        pdfId:
          description: |-
            **Deprecated**. 

            The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
          type: string
        useBrand:
          description: |-
            When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a signing brand with a specified company name, that value is used in email notifications and in the signing experience.  

            When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. 
          type: string
        useConsumerDisclosureWithinAccount:
          description: When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
          type: string
        useConsumerDisclosureWithinAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        withdrawAddressLine1:
          description: |-
            Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawAddressLine2:
          description: |-
            Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawByEmail:
          description: When set to **true** (default), indicates that the customer can withdraw consent by email.
          type: string
        withdrawByMail:
          description: When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
          type: string
        withdrawByPhone:
          description: When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
          type: string
        withdrawCity:
          description: |-
            Contains the city of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 50 characters. 
          type: string
        withdrawConsequences:
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
          type: string
        withdrawEmail:
          description: |-
            Contains the email address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawOther:
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
          type: string
        withdrawPhone:
          description: |-
            Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.

            Maximum length: 20 characters. 
          type: string
        withdrawPostalCode:
          description: |-
            Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 20 characters. 
          type: string
        withdrawState:
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
          type: string
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: consumerDisclosure
      x-ds-order: "20"
      x-ms-summary: Details about account consumer disclosures.
    AccountCustomFields:
      description: "An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group and manage envelopes. "
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: customFields
      x-ds-order: "30"
      x-ms-summary: "An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group and manage envelopes. "
    AccountPasswordRules:
      description: Contains details about the password rules for an account.
      properties:
        expirePassword:
          description: When set to **true**, passwords expire. The default value is `false`.
          type: string
        expirePasswordDays:
          description: The number of days before passwords expire. To use this property, the `expirePassword` property must be set to **true**.
          type: string
        expirePasswordDaysMetadata:
          $ref: "#/components/schemas/accountPasswordExpirePasswordDays"
        lockoutDurationMinutes:
          description: The number of minutes a user is locked out of the system after three (?) failed login attempts. The default value is `2`.
          type: string
        lockoutDurationMinutesMetadata:
          $ref: "#/components/schemas/accountPasswordLockoutDurationMinutes"
        lockoutDurationType:
          description: |-
            The interval associated with the user lockout after a failed login attempt.

            Possible values are: (?????)

            - `minutes` (default)
            - `hours`
            - `days`
          type: string
        lockoutDurationTypeMetadata:
          $ref: "#/components/schemas/accountPasswordLockoutDurationType"
        minimumPasswordAgeDays:
          description: The minimum number of days after a password is set before it can be changed. This value can be `0` or more days. The default value is `0`.
          type: string
        minimumPasswordAgeDaysMetadata:
          $ref: "#/components/schemas/accountPasswordMinimumPasswordAgeDays"
        minimumPasswordLength:
          description: The minimum number of characters in the password. This value must be a number between `6` and `15`. The default value is `6`.
          type: string
        minimumPasswordLengthMetadata:
          $ref: "#/components/schemas/accountMinimumPasswordLength"
        passwordIncludeDigit:
          description: When set to **true**, passwords must include a digit. The default value is `false`.
          type: string
        passwordIncludeDigitOrSpecialCharacter:
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeLowerCase:
          description: When set to **true**, passwords must include a lowercase letter. The default value is `false`.
          type: string
        passwordIncludeSpecialCharacter:
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeUpperCase:
          description: When set to **true**, passwords must include an uppercase letter. The default value is `false`.
          type: string
        passwordStrengthType:
          description: |-
            The type of password strength. Possible values are:

            - `basic`: The minimum password length is 6 characters with no other password requirements.
            - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
            - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
            - `custom`: This option enables you to customize password requirements, including the following properties:

               - `minimumPasswordLength`
               - `minimumPasswordAgeDays`
               - `passwordIncludeDigit`
               - `passwordIncludeDigitOrSpecialCharacter`
               - `passwordIncludeLowerCase`
               - `passwordIncludeSpecialCharacter`
               - `passwordIncludeUpperCase`
               - `questionsRequired`
          type: string
        passwordStrengthTypeMetadata:
          $ref: "#/components/schemas/accountPasswordStrengthType"
        questionsRequired:
          description: The number of security questions required to confirm the user’s identity before the user can reset their password. The default value is `0`.
          type: string
        questionsRequiredMetadata:
          $ref: "#/components/schemas/accountPasswordQuestionsRequired"
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountPasswordRules
      x-ds-order: "190"
      x-ms-summary: Contains details about the password rules for an account.
    AccountPermissionProfiles:
      description: The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
      properties:
        modifiedByUsername:
          description: The username of the user who last modified the permission profile.
          type: string
        modifiedDateTime:
          description: The date and time when the permission profile was last modified.
          type: string
        permissionProfileId:
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          type: string
        permissionProfileName:
          description: |-
            The name of the account permission profile. 

            Example: `Account Administrator`
          type: string
        settings:
          $ref: "#/components/schemas/accountRoleSettings"
        userCount:
          description: The total number of users in the group associated with the account permission profile.
          type: string
        users:
          description: A list of user objects containing information about the users who are associated with the account permission profile.
          items:
            $ref: "#/components/schemas/userInformation"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: permissionProfile
      x-ds-order: "70"
      x-ms-summary: The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
    AccountSealProviders:
      description: ""
      properties:
        seals:
          description: A list of electronic seals to apply to documents.
          items:
            $ref: "#/components/schemas/sealIdentifier"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountSeals
      x-ds-order: "10"
      x-ms-summary: ""
    AccountSignatureProviders:
      description: |
        This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
      properties:
        signatureProviders:
          description: Names of electronic or digital signature providers that can be used.
          items:
            $ref: "#/components/schemas/accountSignatureProvider"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountSignatureProviders
      x-ds-order: "30"
      x-ms-summary: |
        This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
    AccountSignatures:
      description: ""
      properties:
        adoptedDateTime:
          description: The UTC date and time when the user adopted the signature.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customField:
          description: ""
          type: string
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageBase64:
          description: ""
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        initials150ImageId:
          description: The ID of the user's initials image.
          type: string
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        nrdsStatus:
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signature150ImageId:
          description: The ID of the user's signature image.
          type: string
        signatureFont:
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
          type: string
        signatureGroups:
          description: ""
          items:
            $ref: "#/components/schemas/signatureGroup"
          type: array
        signatureId:
          description: Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        signatureInitials:
          description: Specifies the user's signature in initials format.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        signatureRights:
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
          type: string
        signatureType:
          description: Specifies the type of signature.
          type: string
        signatureUsers:
          description: ""
          items:
            $ref: "#/components/schemas/signatureUser"
          type: array
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampImageUri:
          description: The URI for retrieving the image of the user's stamp.
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountSignature
      x-ds-order: "40"
      x-ms-summary: ""
    AccountTabSettings:
      description: Tab settings determine the tab types and tab functionality that are enabled for an account.
      properties:
        allowTabOrder:
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
          type: string
        allowTabOrderMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        approveDeclineTabsEnabled:
          description: When **true**, approve and decline tabs are enabled.
          type: string
        approveDeclineTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        calculatedFieldsEnabled:
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
          type: string
        calculatedFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkBoxTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkboxTabsEnabled:
          description: When **true**, checkbox tabs are enabled.
          type: string
        dataFieldRegexEnabled:
          description: When **true**, regular expressions are enabled for tabs that contain data fields.
          type: string
        dataFieldRegexMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        dataFieldSizeEnabled:
          description: When **true**, setting character limits for input fields is enabled.
          type: string
        dataFieldSizeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        drawTabsEnabled:
          description: ""
          type: string
        drawTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        firstLastEmailTabsEnabled:
          description: Reserved for DocuSign.
          type: string
        firstLastEmailTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        listTabsEnabled:
          description: When **true**, list tabs are enabled.
          type: string
        listTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        noteTabsEnabled:
          description: When **true**, note tabs are enabled.
          type: string
        noteTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        prefillTabsEnabled:
          description: ""
          type: string
        prefillTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        radioTabsEnabled:
          description: When **true**, radio button tabs are enabled.
          type: string
        radioTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        savingCustomTabsEnabled:
          description: When **true**, saving custom tabs is enabled.
          type: string
        savingCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderToChangeTabAssignmentsEnabled:
          description: Reserved for DocuSign.
          type: string
        senderToChangeTabAssignmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sharedCustomTabsEnabled:
          description: When **true**, shared custom tabs are enabled.
          type: string
        sharedCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabDataLabelEnabled:
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabDataLabelMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLocationEnabled:
          description: Reserved for DocuSign.
          type: string
        tabLocationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLockingEnabled:
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabLockingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabScaleEnabled:
          description: Reserved for DocuSign.
          type: string
        tabScaleMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabTextFormattingEnabled:
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
          type: string
        tabTextFormattingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        textTabsEnabled:
          description: When **true**, text tabs are enabled.
          type: string
        textTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: tabAccountSettings
      x-ds-order: "100"
      x-ms-summary: Tab settings determine the tab types and tab functionality that are enabled for an account.
    AccountWatermarks:
      description: ""
      properties:
        displayAngle:
          description: ""
          type: string
        enabled:
          description: ""
          type: string
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        imageBase64:
          description: ""
          type: string
        transparency:
          description: ""
          type: string
        watermarkText:
          description: ""
          type: string
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: watermark
      x-ds-order: "200"
      x-ms-summary: ""
    Accounts:
      description: Account management
      properties:
        accountIdGuid:
          description: The GUID associated with the account ID.
          type: string
        accountName:
          description: The name on the account.
          type: string
        accountSettings:
          $ref: "#/components/schemas/accountSettingsInformation"
        allowTransactionRooms:
          description: When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
          type: string
        billingPeriodDaysRemaining:
          description: Number of days remaining in the current billing period.
          type: string
        billingPeriodEndDate:
          description: The billing period end date in UTC timedate format.
          type: string
        billingPeriodEnvelopesAllowed:
          description: The number of envelopes that can be sent in the current billing period (can be unlimited).
          type: string
        billingPeriodEnvelopesSent:
          description: The number of envelopes that have been sent in the current billing period.
          type: string
        billingPeriodStartDate:
          description: The billing period start date in UTC timedate format.
          type: string
        billingProfile:
          description: |-
            The type of billing method on the account. Valid values are: 

            - `direct`
            - `web`
          type: string
        canUpgrade:
          description: When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
          type: string
        connectPermission:
          description: ""
          type: string
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        currencyCode:
          description: The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
          type: string
        currentPlanId:
          description: ID of the plan used to create this account.
          type: string
        displayApplianceStartUrl:
          description: ""
          type: string
        displayApplianceUrl:
          description: ""
          type: string
        distributorCode:
          description: The code that identifies the billing plan groups and plans for the new account.
          type: string
        docuSignLandingUrl:
          description: URL of the landing page used to create the account.
          type: string
        dssValues:
          additionalProperties:
            type: string
          description: ""
          type: object
        envelopeSendingBlocked:
          description: When **true**, the ability to send envelopes is blocked. When **false**, envelopes can be sent.
          type: string
        envelopeUnitPrice:
          description: The price of sending an envelope, represented in the account's local currency.
          type: string
        externalAccountId:
          description: The Account ID displayed on the user's Account page.
          type: string
        forgottenPasswordQuestionsCount:
          description: " A complex element that contains up to four Question/Answer pairs for forgotten password information for a user."
          type: string
        isDowngrade:
          description: When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
          type: string
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        planClassification:
          description: |-
            Identifies the type of plan. Examples include:

            - `business`
            - `corporate`
            - `enterprise` 
            - `free`
          type: string
        planEndDate:
          description: The date that the current plan will end.
          type: string
        planName:
          description: |-
            The name of the billing plan used for the account.

            Examples: 

            - `Personal - Annual`
            - `Unlimited Envelope Subscription - Annual Billing`
          type: string
        planStartDate:
          description: The date that the Account started using the current plan.
          type: string
        recipientDomains:
          description: ""
          items:
            $ref: "#/components/schemas/recipientDomain"
          type: array
        seatsAllowed:
          description: The number of active users the account can have at one time.
          type: string
        seatsInUse:
          description: The number of users currently active on the account.
          type: string
        status21CFRPart11:
          description: The status of the account content per (Title 21 CFR Part 11)[https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application]. This regulation defines the criteria under which electronic records and electronic signatures are considered trustworthy.
          type: string
        suspensionDate:
          description: The date on which the account was suspended.
          type: string
        suspensionStatus:
          description: Indicates whether the account is currently suspended.
          type: string
        useDisplayAppliance:
          description: ""
          type: boolean
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountInformation
      x-ds-order: "1"
      x-ms-summary: Account management
    ApplianceInfo:
      description: ""
      properties: {}
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: displayApplianceInfo
      x-ds-order: "50"
      x-ms-summary: ""
    BCCEmailArchive:
      description: |
        The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
      properties:
        bccEmailArchiveHistory:
          description: A list of changes to the BCC email archive configuration.
          items:
            $ref: "#/components/schemas/bccEmailArchiveHistory"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: EmailArchive
      x-ds-definition-name: bccEmailArchiveHistoryList
      x-ds-order: "120"
      x-ms-summary: |
        The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
    BillingPlans:
      description: Billing plans
      properties:
        billingAddress:
          $ref: "#/components/schemas/accountAddress"
        billingAddressIsCreditCardAddress:
          description: When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different.
          type: string
        billingPlan:
          $ref: "#/components/schemas/accountBillingPlan"
        creditCardInformation:
          $ref: "#/components/schemas/creditCardInformation"
        directDebitProcessorInformation:
          $ref: "#/components/schemas/directDebitProcessorInformation"
        downgradePlanInformation:
          $ref: "#/components/schemas/downgradePlanUpdateResponse"
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        paymentProcessorInformation:
          $ref: "#/components/schemas/paymentProcessorInformation"
        referralInformation:
          $ref: "#/components/schemas/referralInformation"
        successorPlans:
          description: A list of billing plans that the current billing plan can be rolled into.
          items:
            $ref: "#/components/schemas/billingPlan"
          type: array
      type: object
      x-ds-category: Billing
      x-ds-definition-name: accountBillingPlanResponse
      x-ds-order: "10"
      x-ms-summary: Billing plans
    BulkSend:
      description: |-
        The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch. 

        **Note**: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
      properties:
        bulkCopies:
          description: An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs, and other information.
          items:
            $ref: "#/components/schemas/bulkSendingCopy"
          type: array
        listId:
          description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          type: string
        name:
          description: The name of the bulk send list.
          type: string
      type: object
      x-ds-category: BulkEnvelopes
      x-ds-definition-name: bulkSendingList
      x-ds-order: "120"
      x-ms-summary: |-
        The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch. 

        **Note**: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
    ChunkedUploads:
      description: The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
      properties:
        checksum:
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content that has been uploaded to the chunked upload. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the commit action is refused.
          type: string
        chunkedUploadId:
          description: "The id of the chunked upload. "
          type: string
        chunkedUploadParts:
          description: A list of the parts that compose the chunked upload, including their byte sizes. The list must be contiguous before you can commit the chunked upload.
          items:
            $ref: "#/components/schemas/chunkedUploadPart"
          type: array
        chunkedUploadUri:
          description: "The URI that you use to reference the chunked upload in other API requests, such as envelope document and envelope attachment requests. "
          type: string
        committed:
          description: "When **true**, the chunked upload has been committed. A committed chunked upload can no longer receive any additional parts and is ready for use within other API requests. "
          type: string
        expirationDateTime:
          description: |-
            The UTC time at which the chunked upload expires and is no longer addressable. 

            **Note**: The length of time before expiration is configurable, and begins when you initiate the chunked upload. You must fully upload and use a chunked upload within this time. The default value for this duration is 20 minutes.
          type: string
        maxChunkedUploadParts:
          description: |
            The maximum number of parts allowed for a chunked upload. This value is configurable per DocuSign environment, account, or integrator. The default value is 128. The maximum possible value is 256.  
          type: string
        maxTotalSize:
          description: The maximum total size allowed for a chunked upload. This value is configured per DocuSign environment, account, or integrator. The default value is 50 MB.
          type: string
        totalSize:
          description: |-
            The total size of the parts of the chunked upload.

            **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: chunkedUploadResponse
      x-ds-order: "150"
      x-ms-summary: The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
    CloudStorage:
      description: Cloud storage
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        errorDetails:
          $ref: "#/components/schemas/externalDocServiceErrorDetails"
        id:
          description: A unique ID for the Salesforce object.
          type: string
        items:
          description: A list of objects that contain information about a file or folder in cloud storage.
          items:
            $ref: "#/components/schemas/externalFile"
          type: array
        name:
          description: The name of the cloud storage item.
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: CloudStorage
      x-ds-definition-name: externalFolder
      x-ds-order: "10"
      x-ms-summary: Cloud storage
    CloudStorageProviders:
      description: The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
      properties:
        storageProviders:
          description: An Array containing the storage providers associated with the user.
          items:
            $ref: "#/components/schemas/cloudStorageProvider"
          type: array
      type: object
      x-ds-category: CloudStorage
      x-ds-definition-name: cloudStorageProviders
      x-ds-order: "20"
      x-ms-summary: The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
    Comments:
      description: Details about envelope comments.
      properties:
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        hmac:
          description: Reserved for DocuSign.
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        mentions:
          description: An array of userIds that are mentioned directly in the body of a comment.
          items:
            type: string
          type: array
        read:
          description: Indicates if the comment has been read by the target recipient of the comment.
          type: boolean
        sentByEmail:
          description: ""
          type: string
        sentByFullName:
          description: ""
          type: string
        sentByImageId:
          description: Reserved for DocuSign.
          type: string
        sentByInitials:
          description: ""
          type: string
        sentByRecipientId:
          description: ""
          type: string
        sentByUserId:
          description: ""
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        subject:
          description: ""
          type: string
        tabId:
          description: The unique identifier for the tab.
          type: string
        text:
          description: "Specifies the text that is shown in the dropdown list. "
          type: string
        threadId:
          description: The unique identifier for the comment thread.
          type: string
        threadOriginatorId:
          description: The userId of the user who created the thread.
          type: string
        timeStampFormatted:
          description: ""
          type: string
        timestamp:
          description: ""
          type: string
        visibleTo:
          description: ""
          items:
            type: string
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: comment
      x-ds-order: "160"
      x-ms-summary: Details about envelope comments.
    ConnectConfigurations:
      description: Contains information about a DocuSign Connect configuration.
      properties:
        allUsers:
          description: When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
          type: string
        allowEnvelopePublish:
          description: When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
          type: string
        allowSalesforcePublish:
          description: When set to **true**  (default), DocuSign sends data to the designated Salesforce account through Connect.
          type: string
        configurationType:
          description: If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
          type: string
        connectId:
          description: The DocuSign-generated ID for the Connect configuration. This property is read only.
          type: string
        enableLog:
          description: |-
            When set to **true**, Connect logging is turned on. We recommend that you enable this functionality, which helps you troubleshoot any issues. 

            You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the console.
          type: string
        envelopeEvents:
          description: |
            An array of strings that lists envelope-related events to track through Connect. The possible event values are: 

            - `sent`: An envelope has the status `sent` in the following scenarios:
               - When the envelope has been sent to recipients.
               - When using remote signing, this event is triggered when the email notification with a link to the documents is sent to at least one recipient.
               - When using embedded signing, this event is triggered when the link is ready for the recipient to sign the envelope.

               An envelope remains in this state until all recipients have viewed or taken action on the envelope.

            - `delivered`: This status is triggered when all recipients have opened the envelope, selected the **Continue** button in the interface, and viewed the documents.
            - `completed`: This status is triggered when all recipients have completed their assigned actions on an envelope.
            - `declined`: This status is triggered when a recipient has declined to sign the envelope.
            - `voided`: The voided status indicates that the sender has voided the envelope.

            **Note**: In previous versions of the API, this value was a single comma-separated string.
          items:
            type: string
          type: array
        eventData:
          $ref: "#/components/schemas/connectEventData"
        externalFolderId:
          description: The id of an external folder.
          type: string
        externalFolderLabel:
          description: The label for an external folder.
          type: string
        includeCertSoapHeader:
          description: When set to **true**, a certificate for a SOAP header is included in messages sent through Connect.
          type: string
        includeCertificateOfCompletion:
          description: "When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. "
          type: string
        includeDocumentFields:
          description: "When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. "
          type: string
        includeDocuments:
          description: |-
            When set to **true**, Connect attaches the envelope documents to the XML payloads of your event notification messages.

            **Note**: Consider resources and scaling when adding documents to your event payloads. Documents attached to these messages are sent in base64 XML element nodes, which are larger than binary document data. This can significantly increase your payload size, opening up windows for failure. If you include documents, you must build your application to scale in these situations. 
          type: string
        includeEnvelopeVoidReason:
          description: When set to **true**, Connect will include the voidedReason for voided envelopes.
          type: string
        includeHMAC:
          description: |-
            When set to **true**, a Hash-based Message Authentication Code (HMAC) signature is included in messages sent through Connect.
            For more information, see [Using HMAC Security with DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect-hmac).
          type: string
        includeSenderAccountasCustomField:
          description: When set to **true**, Connect will include the sender account as Custom Field in the data.
          type: string
        includeTimeZoneInformation:
          description: When set to **true**, Connect will include the envelope time zone information.
          type: string
        name:
          description: The name of the Connect configuration. The name helps identify the configuration in the list.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        recipientEvents:
          description: |
            An array of strings that lists of recipient-related events that trigger a notification
            to your webhook Connect listener. The possible event values are:

            - `sent`: If a recipient type is set to receive an email notification to take action on an envelope, the recipient status is set to `sent` upon delivery of the email.
            - `delivered`: The recipient has viewed the documents in the envelope. This recipient status does not indicate email delivery of the documents in the envelope.
            - `completed`: The recipient has completed their assigned actions on an envelope.
            - `declined`: The recipient has declined to sign a document in the envelope.
            - `authenticationfailed`: At least one signer has failed the authentication check on the document. If this occurs, you have two options:
               - Send a reminder to the recipients, which provides the signer with another chance to access and pass the authentication.
               - Correct the document and modify the authentication setting.
            - `autoresponded`: The recipient's email system sent back an automatic response. This status is only used when **Send-on-behalf-of** is turned off for the account.

            **Note**: In previous versions of the API, this value was a single comma-separated string.
          items:
            type: string
          type: array
        requireMutualTls:
          description: When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro) authentication is enabled.
          type: string
        requiresAcknowledgement:
          description: |+
            When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.

            DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.

            #### When set to **true** and Send Individual Messages (SIM) mode is activated

            If the HTTP status response to a notification message is not in the range of 200-299,
            then the message delivery failed, and the configuration is marked as down.

            The message will be queued and retried once per day.
            While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
            When a message succeeds, all queued messages for the configuration will be tried immediately, in order.

            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **true** and SIM mode is not activated

            If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.

            The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur.
            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **false**

            When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.

          type: string
        salesforceApiVersion:
          description: The version of the Salesforce API that you are using.
          type: string
        salesforceAuthcode:
          description: ""
          type: string
        salesforceCallBackUrl:
          description: ""
          type: string
        salesforceDocumentsAsContentFiles:
          description: When set to **true**, DocuSign can use documents in your Salesforce account for sending and signing.
          type: string
        senderOverride:
          description: ""
          type: string
        senderSelectableItems:
          description: "This property sets the items that are available for selection when adding or editing Connect objects. "
          items:
            type: string
          type: array
        sfObjects:
          description: An array of Salesforce objects.
          items:
            $ref: "#/components/schemas/connectSalesforceObject"
          type: array
        signMessageWithX509Certificate:
          description: "When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. "
          type: string
        soapNamespace:
          description: |-
            The namespace of the SOAP interface.

            **Note**: If `useSoapInterface` is set to **true**, you must set this value.
          type: string
        urlToPublishTo:
          description: The endpoint to which Connect should send webhook notification messages via an HTTPS POST request. The URL must start with `https`. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not acceptable, but you can use free certificates from Let's Encrypt.
          type: string
        useSoapInterface:
          description: When set to **true**, indicates that the `urlToPublishTo` property contains a SOAP endpoint.
          type: string
        userIds:
          description: |-
            A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.

            **Note**: If allUsers is set to `false` then you must provide a list of user ids.
          items:
            type: string
          type: array
        userName:
          description: The name of the user.
          type: string
      type: object
      x-ds-category: Connect
      x-ds-definition-name: connectCustomConfiguration
      x-ds-order: "10"
      x-ms-summary: Contains information about a DocuSign Connect configuration.
    ConnectEvents:
      description: "Connect event logging information. This object contains sections for regular Connect logs and for Connect failures. "
      properties:
        failures:
          description: A list of Connect failure logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        logs:
          description: A list of Connect general logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        totalRecords:
          description: The count of records in the log list.
          type: string
        type:
          description: ""
          type: string
      type: object
      x-ds-category: Connect
      x-ds-definition-name: connectLogs
      x-ds-order: "20"
      x-ms-summary: "Connect event logging information. This object contains sections for regular Connect logs and for Connect failures. "
    ConnectSecret:
      description: ""
      properties:
        failures:
          description: A list of Connect failure logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        logs:
          description: A list of Connect general logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        totalRecords:
          description: The count of records in the log list.
          type: string
        type:
          description: ""
          type: string
      type: object
      x-ds-category: Connect
      x-ds-definition-name: connectLogs
      x-ds-order: "50"
      x-ms-summary: ""
    Contacts:
      description: The `Contacts` resource enables you to manage the contact in an account's address book.
      properties:
        cloudProvider:
          description: |-
            The cloud service that provided the contact. Valid values are:

            - `rooms`
            - `docusignCore` (default)

            <!-- Future:

            - `Box`
            - `GoogleDrive`
            - `Dropbox`
            - `SalesForce`
            - `SkyDrive`

            -->
          type: string
        cloudProviderContainerId:
          description: The id of the container at the cloud provider. For example, this might be the room id for a DocuSign Transaction Room.
          type: string
        contactId:
          description: The id of a contact person in the account's address book.
          type: string
        contactPhoneNumbers:
          description: |-
            A list of the contact's phone numbers.

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
          items:
            $ref: "#/components/schemas/contactPhoneNumber"
          type: array
        contactUri:
          description: The URI for retrieving information about the contact.
          type: string
        emails:
          description: The email address or addresses associated with the contact.
          items:
            type: string
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        isOwner:
          description: When **true**, the current user is the owner of the contact.
          type: boolean
        name:
          description: The name of the contact.
          type: string
        organization:
          description: The name of the contact's organization.
          type: string
        shared:
          description: |-
            When set to **true**, the contact is shared. For more information, see [Shared Contacts](https://support.docusign.com/guides/ndse-user-guide-manage-contacts).

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
          type: string
        signingGroup:
          description: If the contact belongs to a signing group, this property contains the `signingGroupId`.
          type: string
        signingGroupName:
          description: The name of the signing group that the contact belongs to.
          type: string
      type: object
      x-ds-category: Users
      x-ds-definition-name: contact
      x-ds-order: "50"
      x-ms-summary: The `Contacts` resource enables you to manage the contact in an account's address book.
    CustomTabs:
      description: Custom tabs
      properties:
        anchor:
          description: An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
          type: string
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        collaborative:
          description: ""
          type: string
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        createdByDisplayName:
          description: The user name of the DocuSign user who created this object.
          type: string
        createdByUserId:
          description: The userId of the DocuSign user who created this object.
          type: string
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all of the custom tab properties.
          type: string
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        editable:
          description: When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
          type: string
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        height:
          description: The height of the tab in pixels.
          type: string
        includedInEmail:
          description: When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
          type: string
        initialValue:
          description: The original value of the tab.
          type: string
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        items:
          description: If the tab is a list, this represents the values that are possible for the tab.
          items:
            type: string
          type: array
        lastModified:
          description: The UTC DateTime this object was last modified. This is in ISO8601 format.
          type: string
        lastModifiedByDisplayName:
          description: The User Name of the DocuSign user who last modified this object.
          type: string
        lastModifiedByUserId:
          description: The userId of the DocuSign user who last modified this object.
          type: string
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        maximumLength:
          description: The maximum number of entry characters supported by the custom tab.
          type: string
        mergeField:
          $ref: "#/components/schemas/mergeField"
        name:
          description: The name of the custom tab.
          type: string
        paymentItemCode:
          description: |-
            If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.

            Example: `SHAK1`

            Maximum Length: 100 characters.
          type: string
        paymentItemDescription:
          description: |-
            If the custom tab is for a payment request, this is the description of the item associated with the charge.

            Example: `The Danish play by Shakespeare`

            Maximum Length: 100 characters.
          type: string
        paymentItemName:
          description: |-
            If the custom tab is for a payment request, this is the name of the item associated with the charge.

            Maximum Length: 100 characters.

            Example: `Hamlet`
          type: string
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        scaleValue:
          description: Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
          type: string
        selected:
          description: When set to **true**, the radio button is selected.
          type: string
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        stampTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        type:
          description: |
            The type of this tab. Values are:

            - Approve
            - CheckBox
            - Company
            - Date
            - DateSigned,	Decline
            - Email,	EmailAddress
            - EnvelopeId
            - FirstName
            - Formula
            - FullName,	InitialHere
            - InitialHereOptional
            - LastName
            - List
            - Note
            - Number
            - Radio
            - SignerAttachment
            - SignHere
            - SignHereOptional
            - Ssn
            - Text
            - Title
            - Zip5
            - Zip5Dash4
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
      type: object
      x-ds-category: CustomTabs
      x-ds-definition-name: tabMetadata
      x-ds-order: "10"
      x-ms-summary: Custom tabs
    DocumentResponsiveHtmlPreview:
      description: This resource is used to create a responsive preview of a specific document.
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            type: string
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-order: "230"
      x-ms-summary: This resource is used to create a responsive preview of a specific document.
    ENoteConfigurations:
      description: ""
      properties:
        apiKey:
          description: ""
          type: string
        connectConfigured:
          description: ""
          type: string
        eNoteConfigured:
          description: ""
          type: string
        organization:
          description: ""
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        userName:
          description: The name of the user.
          type: string
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: eNoteConfiguration
      x-ds-order: "110"
      x-ms-summary: ""
    EnvelopeAttachments:
      description: ""
      properties:
        accessControl:
          description: Valid values are `sender` and `senderAndAllRecipients`.
          type: string
        attachmentId:
          description: The unique identifier for the attachment.
          type: string
        attachmentType:
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        label:
          description: |-
            A label for the attachment. Potential values include: 

            - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms.
            - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property. 
          type: string
        name:
          description: The name of the attachment.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: envelopeAttachment
      x-ds-order: "60"
      x-ms-summary: ""
    EnvelopeConsumerDisclosures:
      description: Details about envelope consumer disclosures.
      properties:
        accountEsignId:
          description: The GUID of the account associated with the consumer disclosure.
          type: string
        allowCDWithdraw:
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
          type: string
        allowCDWithdrawMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        changeEmail:
          description: If the customer needs to change their email address, this is the email address to which they should the change request.
          type: string
        changeEmailOther:
          description: |-
            Other information about the requirements for the user to change their email address.

            Example: 

            `We do not require any other information from you to change your email address.`
          type: string
        companyName:
          description: |
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
          type: string
        companyPhone:
          description: The phone number of the company associated with the consumer disclosure, as a free-formatted string.
          type: string
        copyCostPerPage:
          description: |-
            The cost per page if the customer requests paper copies.

            Example: 

            `0.0000`
          type: string
        copyFeeCollectionMethod:
          description: |-
            Specifies the fee collection method for cases in which the customer requires paper copies of the document.

            Maximum length: 255 characters.

            Example: 

            `We will bill you for any fees at that time, if any.`
          type: string
        copyRequestEmail:
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
          type: string
        custom:
          description: When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
          type: string
        enableEsign:
          description: When set to **true** (default), indicates that eSign is enabled.
          type: string
        esignAgreement:
          description: The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics. It also includes the HTML tags used for formatting.
          type: string
        esignText:
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
          type: string
        languageCode:
          description: |-
            The simple type enumeration for the language to use when displaying the disclosure. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          type: string
        mustAgreeToEsign:
          description: When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting `consumerDisclosureFrequency` and the user's actions.
          type: string
        pdfId:
          description: |-
            **Deprecated**. 

            The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
          type: string
        useBrand:
          description: |-
            When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a signing brand with a specified company name, that value is used in email notifications and in the signing experience.  

            When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. 
          type: string
        useConsumerDisclosureWithinAccount:
          description: When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
          type: string
        useConsumerDisclosureWithinAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        withdrawAddressLine1:
          description: |-
            Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawAddressLine2:
          description: |-
            Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawByEmail:
          description: When set to **true** (default), indicates that the customer can withdraw consent by email.
          type: string
        withdrawByMail:
          description: When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
          type: string
        withdrawByPhone:
          description: When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
          type: string
        withdrawCity:
          description: |-
            Contains the city of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 50 characters. 
          type: string
        withdrawConsequences:
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
          type: string
        withdrawEmail:
          description: |-
            Contains the email address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawOther:
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
          type: string
        withdrawPhone:
          description: |-
            Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.

            Maximum length: 20 characters. 
          type: string
        withdrawPostalCode:
          description: |-
            Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 20 characters. 
          type: string
        withdrawState:
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: consumerDisclosure
      x-ds-order: "90"
      x-ms-summary: Details about envelope consumer disclosures.
    EnvelopeCustomFields:
      description: |-
        An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".

        When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: customFields
      x-ds-order: "70"
      x-ms-summary: |-
        An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".

        When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
    EnvelopeDocumentFields:
      description: Envelope document fields
      properties:
        documentFields:
          description: |
            The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements: 

            * name - A string that can be a maximum of 50 characters. 
            * value - A string that can be a maximum of 200 characters.

            *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element. 
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentFieldsInformation
      x-ds-order: "60"
      x-ms-summary: Envelope document fields
    EnvelopeDocumentHtmlDefinitions:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            $ref: "#/components/schemas/documentHtmlDefinitionOriginal"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-order: "220"
      x-ms-summary: ""
    EnvelopeDocumentTabs:
      description: "Envelope Document Tabs resource "
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: tabs
      x-ds-order: "50"
      x-ms-summary: "Envelope Document Tabs resource "
    EnvelopeDocumentVisibility:
      description: |-
        Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.

        **Note**: Before you use Document Visibility, you should be aware of the following information:

        - Document Visibility must be enabled for your account by your DocuSign administrator. 
        - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. 
        - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
        - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.

        The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
      properties:
        documentVisibility:
          description: An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentVisibilityList
      x-ds-order: "170"
      x-ms-summary: |-
        Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.

        **Note**: Before you use Document Visibility, you should be aware of the following information:

        - Document Visibility must be enabled for your account by your DocuSign administrator. 
        - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. 
        - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
        - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.

        The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
    EnvelopeDocuments:
      description: Envelope documents
      properties:
        envelopeDocuments:
          description: An array of document objects.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: envelopeDocumentsResult
      x-ds-order: "40"
      x-ms-summary: Envelope documents
    EnvelopeEmailSettings:
      description: Envelope email settings
      properties:
        bccEmailAddresses:
          description: |-
            An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.

            While this property is an array, note that it takes only a single email address.

            **Note**: Only users with the `canManageAccount` setting set to **true** can use this option. 

            DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes. However, using this property overrides the BCC for Email Archive information setting for this envelope. 

            **Example**: if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address.
          items:
            $ref: "#/components/schemas/bccEmailAddress"
          type: array
        replyEmailAddressOverride:
          description: "The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address is in a correct format, but does not verify that it is active. Maximum Length: 100 characters."
          type: string
        replyEmailNameOverride:
          description: "The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters."
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: emailSettings
      x-ds-order: "30"
      x-ms-summary: Envelope email settings
    EnvelopeFormData:
      description: This object contains the data that recipients have entered into the form fields associated with an envelope.
      properties:
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        envelopeId:
          description: The id of the envelope.
          type: string
        formData:
          description: An array of form data objects.
          items:
            $ref: "#/components/schemas/formDataItem"
          type: array
        prefillFormData:
          description: ""
          items:
            $ref: "#/components/schemas/formDataItem"
          type: array
        recipientFormData:
          description: An array of form data objects that are associated with specific recipients.
          items:
            $ref: "#/components/schemas/recipientFormData"
          type: array
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        status:
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: envelopeFormData
      x-ds-order: "160"
      x-ms-summary: This object contains the data that recipients have entered into the form fields associated with an envelope.
    EnvelopeHtmlDefinitions:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            $ref: "#/components/schemas/documentHtmlDefinitionOriginal"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-order: "240"
      x-ms-summary: ""
    EnvelopeLocks:
      description: This section provides information about envelope locks.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        lockDurationInSeconds:
          description: |
            
            The number of seconds until the lock expires when there is no activity on the envelope.

            The default value is 300 seconds. The maximum value is 1,800 seconds.

            The lock duration can be extended.
          type: string
        lockToken:
          description: A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
          type: string
        lockType:
          description: The type of lock.  Currently `edit` is the only supported type.
          type: string
        lockedByApp:
          description: The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
          type: string
        lockedByUser:
          $ref: "#/components/schemas/userInfo"
        lockedUntilDateTime:
          description: The date and time that the lock expires.
          type: string
        useScratchPad:
          description: "When set to **true**, a scratchpad is used to edit information.

            \ "
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: lockInformation
      x-ds-order: "80"
      x-ms-summary: This section provides information about envelope locks.
    EnvelopeRecipientTabs:
      description: |
        All of the tabs associated with a recipient. Each property is a list of a type of tab.
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: tabs
      x-ds-order: "50"
      x-ms-summary: |
        All of the tabs associated with a recipient. Each property is a list of a type of tab.
    EnvelopeRecipients:
      description: Envelope recipients
      properties:
        agents:
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/agent"
          type: array
        carbonCopies:
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/carbonCopy"
          type: array
        certifiedDeliveries:
          description: A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
          items:
            $ref: "#/components/schemas/certifiedDelivery"
          type: array
        currentRoutingOrder:
          description: The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.
          type: string
        editors:
          description: A list of users who can edit the envelope.
          items:
            $ref: "#/components/schemas/editor"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        inPersonSigners:
          description: Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
          items:
            $ref: "#/components/schemas/inPersonSigner"
          type: array
        intermediaries:
          description: Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
          items:
            $ref: "#/components/schemas/intermediary"
          type: array
        notaries:
          description: ""
          items:
            $ref: "#/components/schemas/notaryRecipient"
          type: array
        recipientCount:
          description: The number of recipients in the envelope.
          type: string
        seals:
          description: A list of electronic seals to apply to documents.
          items:
            $ref: "#/components/schemas/sealSign"
          type: array
        signers:
          description: A list of signers on the envelope.
          items:
            $ref: "#/components/schemas/signer"
          type: array
        witnesses:
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: "#/components/schemas/witness"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: recipients
      x-ds-order: "20"
      x-ms-summary: Envelope recipients
    EnvelopeTemplates:
      description: Envelope templates
      properties:
        templates:
          description: An array of `templateSummary` objects that contain information about templates.
          items:
            $ref: "#/components/schemas/templateSummary"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: templateInformation
      x-ds-order: "85"
      x-ms-summary: Envelope templates
    EnvelopeTransferRules:
      description: This resource provides methods that enable account administrators to create and manage envelope transfer rules.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopeTransferRules:
          description: Contains information about a specific envelope transfer rule.
          items:
            $ref: "#/components/schemas/envelopeTransferRule"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: envelopeTransferRuleInformation
      x-ds-order: "120"
      x-ms-summary: This resource provides methods that enable account administrators to create and manage envelope transfer rules.
    EnvelopeViews:
      description: Embedding Envelope views
      properties:
        url:
          description: The view URL to be navigated to.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: viewUrl
      x-ds-order: "1"
      x-ms-summary: Embedding Envelope views
    EnvelopeWorkflowDefinition:
      description: ""
      properties:
        currentWorkflowStepId:
          description: ""
          type: string
        workflowStatus:
          description: ""
          type: string
        workflowSteps:
          description: ""
          items:
            $ref: "#/components/schemas/workflowStep"
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: workflow
      x-ds-order: "300"
      x-ms-summary: ""
    Envelopes:
      description: Envelope creation, management
      properties:
        accessControlListBase64:
          description: Reserved for DocuSign.
          type: string
        allowComments:
          description: When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document.
          type: string
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowReassign:
          description: When **true**, the recipient can redirect an envelope to a more appropriate recipient.
          type: string
        allowViewHistory:
          description: When set to **true**, recipients can view the history of the envelope.
          type: string
        anySigner:
          description: Deprecated. This feature has been replaced by signing groups.
          type: string
        asynchronous:
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
          type: string
        attachmentsUri:
          description: Contains a URL for retrieving the attachments that are associated with the envelope.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyDefault:
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        brandId:
          description: The id of the brand.
          type: string
        brandLock:
          description: When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
          type: string
        certificateUri:
          description: The URI for retrieving certificate information.
          type: string
        completedDateTime:
          description: Specifies the date and time this item was completed.
          type: string
        copyRecipientData:
          description: ""
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        customFieldsUri:
          description: The URI for retrieving custom fields.
          type: string
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        deletedDateTime:
          description: Reserved for DocuSign.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        disableResponsiveDocument:
          description: When set to **true**, responsive documents are disabled for the envelope.
          type: string
        documentsCombinedUri:
          description: The URI for retrieving all of the documents associated with the envelope as a single PDF file.
          type: string
        documentsUri:
          description: The URI for retrieving all of the documents associated with the envelope as separate files.
          type: string
        emailBlurb:
          description: This is the same as the email body. If specified it is included in the email body for all envelope recipients.
          type: string
        emailSettings:
          $ref: "#/components/schemas/emailSettings"
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        enableWetSign:
          description: When set to **true**, the signer is allowed to print the document and sign it on paper.
          type: string
        enforceSignerVisibility:
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
          type: string
        envelopeAttachments:
          description: An array of attachment objects that provide information about the attachments that are associated with the envelope.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeIdStamping:
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
          type: string
        envelopeLocation:
          description: Reserved for DocuSign.
          type: string
        envelopeMetadata:
          $ref: "#/components/schemas/envelopeMetadata"
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        expireAfter:
          description: An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        externalEnvelopeId:
          description: May contain an external identifier for the envelope.
          type: string
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasComments:
          description: When set to **true**, indicates that users have added comments to the envelope.
          type: string
        hasFormDataChanged:
          description: Specifies if the `EnvelopeFormData` associated with any forms in the envelope has changed.
          type: string
        hasWavFile:
          description: "When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope. "
          type: string
        holder:
          description: Reserved for DocuSign.
          type: string
        initialSentDateTime:
          description: The date and time the envelope was initially sent.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        isDynamicEnvelope:
          description: When set to **true**, indicates that the envelope is a dynamic envelope.
          type: string
        isSignatureProviderEnvelope:
          description: When set to **true**, indicates that the envelope is a signature-provided envelope.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        location:
          description: Reserved for DocuSign.
          type: string
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        messageLock:
          description: |-
            When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 

            Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 

            However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
          type: string
        notification:
          $ref: "#/components/schemas/notification"
        notificationUri:
          description: The URI for retrieving notifications.
          type: string
        powerForm:
          $ref: "#/components/schemas/powerForm"
        purgeCompletedDate:
          description: The date that a purge was completed.
          type: string
        purgeRequestDate:
          description: The date that a purge was requested.
          type: string
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsLock:
          description: When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
          type: string
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        sender:
          $ref: "#/components/schemas/userInfo"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signingLocation:
          description: Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
          type: string
        status:
          description: |
            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusChangedDateTime:
          description: The data and time that the status changed.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        templatesUri:
          description: The URI for retrieving the templates.
          type: string
        transactionId:
          description: " Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned."
          type: string
        useDisclosure:
          description: |-
            When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 

            If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
          type: string
        voidedDateTime:
          description: The date and time the envelope or template was voided.
          type: string
        voidedReason:
          description: The reason the envelope or template was voided.
          type: string
        workflow:
          $ref: "#/components/schemas/workflow"
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: envelope
      x-ds-order: "10"
      x-ms-summary: Envelope creation, management
    FavoriteTemplates:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        favoriteTemplates:
          description: ""
          items:
            $ref: "#/components/schemas/favoriteTemplatesContentItem"
          type: array
        templatesUpdatedCount:
          description: ""
          format: int32
          type: integer
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: favoriteTemplatesInfo
      x-ds-order: "270"
      x-ms-summary: ""
    Folders:
      description: Folder management
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopes:
          description: A list of envelopes in this folder.
          items:
            $ref: "#/components/schemas/envelopeSummary"
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: Folders
      x-ds-definition-name: foldersResponse
      x-ds-order: "10"
      x-ms-summary: Folder management
    GroupBrands:
      description: If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
      properties:
        brandOptions:
          description: A list of brands.
          items:
            $ref: "#/components/schemas/brand"
          type: array
        recipientBrandIdDefault:
          description: The brand that envelope recipients see when a brand is not explicitly set.
          type: string
        senderBrandIdDefault:
          description: The brand that envelope senders see when a brand is not explicitly set.
          type: string
      type: object
      x-ds-category: UserGroups
      x-ds-definition-name: brandsResponse
      x-ds-order: "30"
      x-ms-summary: If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
    GroupUsers:
      description: Groups' users
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        users:
          description: An array of `userInfo` objects containing information about the users in the group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
      type: object
      x-ds-category: UserGroups
      x-ds-definition-name: usersResponse
      x-ds-order: "20"
      x-ms-summary: Groups' users
    Groups:
      description: Group information
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        groups:
          description: A collection group objects containing information about the groups.
          items:
            $ref: "#/components/schemas/group"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: UserGroups
      x-ds-definition-name: groupInformation
      x-ds-order: "10"
      x-ms-summary: Group information
    IdentityVerifications:
      description: Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables you to list the workflows that are available to an account.
      properties:
        identityVerification:
          description: "\ \n"
          items:
            $ref: "#/components/schemas/accountIdentityVerificationWorkflow"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: accountIdentityVerificationResponse
      x-ds-order: "30"
      x-ms-summary: Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables you to list the workflows that are available to an account.
    Invoices:
      description: Invoices
      properties:
        amount:
          description: "Reserved: TBD"
          type: string
        balance:
          description: "Reserved: TBD"
          type: string
        dueDate:
          description: "Reserved: TBD"
          type: string
        invoiceId:
          description: "Reserved: TBD"
          type: string
        invoiceItems:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingInvoiceItem"
          type: array
        invoiceNumber:
          description: "Reserved: TBD"
          type: string
        invoiceUri:
          description: Contains a URI for an endpoint that you can use to retrieve invoice information.
          type: string
        nonTaxableAmount:
          description: ""
          type: string
        pdfAvailable:
          description: ""
          type: string
        taxableAmount:
          description: ""
          type: string
      type: object
      x-ds-category: Billing
      x-ds-definition-name: billingInvoice
      x-ds-order: "20"
      x-ms-summary: Invoices
    Notary:
      description: |
        Use DocuSign eNotary to notarize documents digitally.
        Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
        to see which jurisdictions are supported.
      properties:
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        enabled:
          description: ""
          type: string
        searchable:
          description: ""
          type: string
        userInfo:
          $ref: "#/components/schemas/userInformation"
      type: object
      x-ds-category: Notary
      x-ds-definition-name: notary
      x-ds-order: "280"
      x-ms-summary: |
        Use DocuSign eNotary to notarize documents digitally.
        Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
        to see which jurisdictions are supported.
    NotaryJournals:
      description: ""
      properties:
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        documentName:
          description: ""
          type: string
        jurisdiction:
          $ref: "#/components/schemas/jurisdiction"
        notaryJournalId:
          description: ""
          type: string
        notaryJournalMetaData:
          $ref: "#/components/schemas/notaryJournalMetaData"
        signerName:
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
          type: string
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: notaryJournal
      x-ds-order: "220"
      x-ms-summary: ""
    NotaryJurisdiction:
      description: Creating, updating, and deleting notary jurisdiction objects.
      properties:
        commissionExpiration:
          description: ""
          type: string
        commissionId:
          description: ""
          type: string
        county:
          description: ""
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        jurisdiction:
          $ref: "#/components/schemas/jurisdiction"
        registeredName:
          description: ""
          type: string
        sealType:
          description: ""
          type: string
      type: object
      x-ds-category: Notary
      x-ds-definition-name: notaryJurisdiction
      x-ds-order: "290"
      x-ms-summary: Creating, updating, and deleting notary jurisdiction objects.
    NotificationDefaults:
      description: The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
      properties:
        apiEmailNotifications:
          $ref: "#/components/schemas/notificationDefaultSettings"
        emailNotifications:
          $ref: "#/components/schemas/notificationDefaultSettings"
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: notificationDefaults
      x-ds-order: "120"
      x-ms-summary: The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
    PaymentGatewayAccounts:
      description: Information about a connected payment gateway account.
      properties:
        allowCustomMetadata:
          description: |-
            When **true**, the sender can pass custom metadata about the payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab, in the `customMetadata` property under `paymentDetails`. 

            For example, this property is set to **true** for the Authorize.net gateway by default. As a result, the extra metadata that you send displays for the Authorize.net transaction in the merchant gateway portal under **Description**.

            **Note**: This property is read only and cannot be changed.
          type: boolean
        config:
          $ref: "#/components/schemas/paymentGatewayAccountSetting"
        displayName:
          description: |-
            A user-defined name for a connected gateway account.

            This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.

            The human-readable version of `paymentGatewayAccountId`.
          type: string
        isEnabled:
          description: When **true**, the payment gateway account is enabled.
          type: string
        isLegacy:
          description: Reserved for DocuSign.
          type: string
        lastModified:
          description: The UTC DateTime that the payment gateway account was last updated.
          type: string
        payPalLegacySettings:
          $ref: "#/components/schemas/payPalLegacySettings"
        paymentGateway:
          description: |-
            Payment gateway used by the connected gateway account.
            This is the name used by the API.
            For a human-readable version use `paymentGatewayDisplayName`.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
          type: string
        paymentGatewayAccountId:
          description: A GUID that identifies the payment gateway account. For a human-readable version use `displayName`.
          type: string
        paymentGatewayDisplayName:
          description: |-
            The display name of the payment gateway that the connected gateway account uses.
            This is the human-readable version of `paymentGateway`.

            Possible values are:

            * Stripe
            * Braintree
            * Authorize.Net
          type: string
        supportedCurrencies:
          description: |-
            A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.

            Examples: 

            - `USD`
            - `CAD`
            - `EUR`
            - `HKD`
          items:
            type: string
          type: array
        supportedPaymentMethods:
          description: An array of paymentMethodWithOptions objects that specify the payment methods that are available for the gateway.
          items:
            type: string
          type: array
        supportedPaymentMethodsWithOptions:
          description: An array of `paymentMethodWithOptions` objects that specify the payment methods that are available for the gateway, as well as the payment options that are compatible with each payment method.
          items:
            $ref: "#/components/schemas/paymentMethodWithOptions"
          type: array
        zeroDecimalCurrencies:
          description: ""
          items:
            type: string
          type: array
      type: object
      x-ds-category: Payments
      x-ds-definition-name: paymentGatewayAccount
      x-ds-order: "210"
      x-ms-summary: Information about a connected payment gateway account.
    Payments:
      description: Payments
      properties:
        amount:
          description: "Reserved: TBD"
          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        paymentDate:
          description: ""
          type: string
        paymentId:
          description: ""
          type: string
        paymentNumber:
          description: |-
            When set to **true**, a PDF version of the invoice is available. 

            To get the PDF, make the call again and change "Accept:" in the header to "Accept: application/pdf".
          type: string
      type: object
      x-ds-category: Billing
      x-ds-definition-name: billingPaymentItem
      x-ds-order: "30"
      x-ms-summary: Payments
    PowerFormData:
      description: Data that recipients have entered in PowerForm fields.
      properties:
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        recipients:
          description: An array of powerform recipients.
          items:
            $ref: "#/components/schemas/powerFormFormDataRecipient"
          type: array
      type: object
      x-ds-category: PowerForms
      x-ds-definition-name: powerFormFormDataEnvelope
      x-ds-order: "90"
      x-ms-summary: Data that recipients have entered in PowerForm fields.
    PowerForms:
      description: The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
      properties:
        createdBy:
          description: The id of the user who created the PowerForm. This property is returned in a response only when you set the `include_created_by` query parameter to **true**.
          type: string
        createdDateTime:
          description: The date and time that the PowerForm was created.
          type: string
        emailBody:
          description: |-
            For a PowerForm that is sent by email, this is the body of the email message sent to the recipients.

            Maximum length: 10000 characters.
          type: string
        emailSubject:
          description: |
            Sets the envelope name for the envelopes that the PowerForm generates. One option is to make this property the same as the subject from the template.

            You can customize the subject line to include a recipient's name or email address by using merge fields. For information about adding merge fields to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/).
          type: string
        envelopes:
          description: An array of envelope objects that contain information about the envelopes that are associated with the PowerForm.
          items:
            $ref: "#/components/schemas/envelope"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        instructions:
          description: The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm by a method other than email. When you include instructions, they display as an introduction after the recipient accesses the PowerForm.
          type: string
        isActive:
          description: |-
            When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.


            When **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL. 

            If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.
          type: string
        lastUsed:
          description: The date and time that the PowerForm was last used.
          type: string
        limitUseInterval:
          description: The length of time before the same recipient can sign the same PowerForm again. This property is used in combination with the `limitUseIntervalUnits` property.
          type: string
        limitUseIntervalEnabled:
          description: When **true**, the `limitUseInterval` is enabled.
          type: string
        limitUseIntervalUnits:
          description: |
            The units associated with the `limitUseInterval`. Valid values are:

            - `minutes`
            - `hours`
            - `days`
            - `weeks`
            - `months`

            For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
          type: string
        maxUseEnabled:
          description: When set to **true**, you can set a maximum number of uses for the PowerForm.
          type: string
        name:
          description: The name of the PowerForm.
          type: string
        powerFormId:
          description: The id of the PowerForm.
          type: string
        powerFormUrl:
          description: The URL for the PowerForm.
          type: string
        recipients:
          description: |-
            An array of `powerFormRecipient` objects.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can enter generic information for the `role` property and leave other details (such as `name` and `email`) blank.
          items:
            $ref: "#/components/schemas/powerFormRecipient"
          type: array
        senderName:
          description: |-
            The name of the sender. 

            **Note**: The default sender for a PowerForm is the PowerForm Administrator who created it.
          type: string
        senderUserId:
          description: The id of the sender.
          type: string
        signingMode:
          description: |-
            The signing method to use. Valid values are:

            - `email`: This mode verifies the recipient's identity by using email authentication before the recipient can sign a document.

            - `direct`: This mode does not require any verification. We recommend that you use this signing method only when another form of authentication is in use.

            **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.

            For more information about signing modes, see the [overview of the Create method](https://developers.docusign.com/docs/esign-rest-api/reference/PowerForms/PowerForms/create).
          type: string
        templateId:
          description: The id of the template used to create the PowerForm.
          type: string
        templateName:
          description: The name of the template used to create the PowerForm.
          type: string
        timesUsed:
          description: "The number of times the PowerForm has been used. "
          type: string
        uri:
          description: The URI for the PowerForm.
          type: string
        usesRemaining:
          description: "The number of times that the PowerForm can still be used. If no use limit is set, the value is `Unlimited`. "
          type: string
      type: object
      x-ds-category: PowerForms
      x-ds-definition-name: powerForm
      x-ds-order: "80"
      x-ms-summary: The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
    Reports:
      description: ""
      properties:
        reports:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductListItem"
          type: array
      type: object
      x-ds-category: Accounts
      x-ds-definition-name: reportInProductList
      x-ds-order: "301"
      x-ms-summary: ""
    RequestLogs:
      description: Request logs
      properties:
        apiRequestLogMaxEntries:
          description: Specifies the maximum number of API requests to log.
          type: string
        apiRequestLogRemainingEntries:
          description: Indicates the remaining number of API requests that can be logged.
          type: string
        apiRequestLogging:
          description: " When set to **true**, enables API request logging for the user. "
          type: string
      type: object
      x-ds-category: Diagnostics
      x-ds-definition-name: diagnosticsSettingsInformation
      x-ds-order: "10"
      x-ms-summary: Request logs
    Resources:
      description: API resource information
      properties:
        resources:
          description: ""
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-category: Diagnostics
      x-ds-definition-name: resourceInformation
      x-ds-order: "20"
      x-ms-summary: API resource information
    ResponsiveHtmlPreview:
      description: This resource is used to create a responsive preview of all of the documents in an envelope.
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            type: string
          type: array
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-order: "250"
      x-ms-summary: This resource is used to create a responsive preview of all of the documents in an envelope.
    Services:
      description: API service information
      properties:
        buildBranch:
          description: "Reserved: TBD"
          type: string
        buildBranchDeployedDateTime:
          description: "Reserved: TBD"
          type: string
        buildSHA:
          description: "Reserved: TBD"
          type: string
        buildVersion:
          description: "Reserved: TBD"
          type: string
        linkedSites:
          description: ""
          items:
            type: string
          type: array
        serviceVersions:
          description: ""
          items:
            $ref: "#/components/schemas/serviceVersion"
          type: array
      type: object
      x-ds-category: Diagnostics
      x-ds-definition-name: serviceInformation
      x-ds-order: "30"
      x-ms-summary: API service information
    SigningGroupUsers:
      description: Signing groups' users
      properties:
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/signingGroupUser"
          type: array
      type: object
      x-ds-category: SigningGroups
      x-ds-definition-name: signingGroupUsers
      x-ds-order: "20"
      x-ms-summary: Signing groups' users
    SigningGroups:
      description: Signing groups
      properties:
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdBy:
          description: The name of the user who created the signing group.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        groupEmail:
          description: The email address for the signing group. You can use a group email address to email all of the group members at the same time.
          type: string
        groupName:
          description: The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
          type: string
        groupType:
          description: |-
            The group type. Possible values include:

            - `adminstrators`
            - `everyone`
            - `customGroup`
            - `sharedSigningGroup`

            <!-- More? To do -->
          type: string
        modified:
          description: The date and time that the signing group was last modified.
          type: string
        modifiedBy:
          description: The user id (GUID) of the user who last modified this user record.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/signingGroupUser"
          type: array
      type: object
      x-ds-category: SigningGroups
      x-ds-definition-name: signingGroup
      x-ds-order: "10"
      x-ms-summary: Signing groups
    TabsBlob:
      description: ""
      properties:
        allowTabOrder:
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
          type: string
        allowTabOrderMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        approveDeclineTabsEnabled:
          description: When **true**, approve and decline tabs are enabled.
          type: string
        approveDeclineTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        calculatedFieldsEnabled:
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
          type: string
        calculatedFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkBoxTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkboxTabsEnabled:
          description: When **true**, checkbox tabs are enabled.
          type: string
        dataFieldRegexEnabled:
          description: When **true**, regular expressions are enabled for tabs that contain data fields.
          type: string
        dataFieldRegexMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        dataFieldSizeEnabled:
          description: When **true**, setting character limits for input fields is enabled.
          type: string
        dataFieldSizeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        drawTabsEnabled:
          description: ""
          type: string
        drawTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        firstLastEmailTabsEnabled:
          description: Reserved for DocuSign.
          type: string
        firstLastEmailTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        listTabsEnabled:
          description: When **true**, list tabs are enabled.
          type: string
        listTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        noteTabsEnabled:
          description: When **true**, note tabs are enabled.
          type: string
        noteTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        prefillTabsEnabled:
          description: ""
          type: string
        prefillTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        radioTabsEnabled:
          description: When **true**, radio button tabs are enabled.
          type: string
        radioTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        savingCustomTabsEnabled:
          description: When **true**, saving custom tabs is enabled.
          type: string
        savingCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderToChangeTabAssignmentsEnabled:
          description: Reserved for DocuSign.
          type: string
        senderToChangeTabAssignmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sharedCustomTabsEnabled:
          description: When **true**, shared custom tabs are enabled.
          type: string
        sharedCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabDataLabelEnabled:
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabDataLabelMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLocationEnabled:
          description: Reserved for DocuSign.
          type: string
        tabLocationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLockingEnabled:
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabLockingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabScaleEnabled:
          description: Reserved for DocuSign.
          type: string
        tabScaleMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabTextFormattingEnabled:
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
          type: string
        tabTextFormattingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        textTabsEnabled:
          description: When **true**, text tabs are enabled.
          type: string
        textTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-category: Envelopes
      x-ds-definition-name: tabAccountSettings
      x-ds-order: "120"
      x-ms-summary: ""
    TemplateBulkRecipients:
      description: Template bulk recipients
      properties:
        bulkRecipients:
          description: A complex type containing information about the bulk recipients in the response.
          items:
            $ref: "#/components/schemas/bulkRecipient"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-category: Templates
      x-ds-definition-name: bulkRecipientsResponse
      x-ds-order: "30"
      x-ms-summary: Template bulk recipients
    TemplateCustomFields:
      description: A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes.
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: customFields
      x-ds-order: "70"
      x-ms-summary: A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes.
    TemplateDocumentFields:
      description: Template document fields
      properties:
        documentFields:
          description: |
            The array of name/value custom data strings to add to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the following elements: 

            * `name` - A string that can be a maximum of 50 characters. 
            * `value` - A string that can be a maximum of 200 characters.

            **Important**: If you are using XML, the name/value pair is contained in a `nameValue` element. 
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: documentFieldsInformation
      x-ds-order: "60"
      x-ms-summary: Template document fields
    TemplateDocumentHtmlDefinitions:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            $ref: "#/components/schemas/documentHtmlDefinitionOriginal"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-order: "300"
      x-ms-summary: ""
    TemplateDocumentResponsiveHtmlPreview:
      description: This resource is used to create a responsive preview of a specific template document.
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            type: string
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-order: "280"
      x-ms-summary: This resource is used to create a responsive preview of a specific template document.
    TemplateDocumentTabs:
      description: ""
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: tabs
      x-ds-order: "50"
      x-ms-summary: ""
    TemplateDocumentVisibility:
      description: |-
        Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.

        **Note**: Before you use Document Visibility, you should be aware of the following information:

        - Document Visibility must be enabled for your account by your DocuSign administrator. 
        - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. 
        - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
        - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.

        The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
      properties:
        documentVisibility:
          description: An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: templateDocumentVisibilityList
      x-ds-order: "180"
      x-ms-summary: |-
        Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.

        **Note**: Before you use Document Visibility, you should be aware of the following information:

        - Document Visibility must be enabled for your account by your DocuSign administrator. 
        - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document. 
        - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
        - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.

        The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
    TemplateDocuments:
      description: Template documents
      properties:
        templateDocuments:
          description: An array of document objects that contain information about the documents associated with the template.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        templateId:
          description: "The id of the template. If a value is not provided, DocuSign generates a value. "
          type: string
      type: object
      x-ds-category: Templates
      x-ds-definition-name: templateDocumentsResult
      x-ds-order: "40"
      x-ms-summary: Template documents
    TemplateHtmlDefinitions:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            $ref: "#/components/schemas/documentHtmlDefinitionOriginal"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ds-order: "310"
      x-ms-summary: ""
    TemplateLocks:
      description: This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        lockDurationInSeconds:
          description: |
            The number of seconds until the lock expires when there is no activity on the template.

            If no value is entered, then the default value of 300 seconds is used. The maximum value is 1,800 seconds.

            The lock duration can be extended.
          type: string
        lockToken:
          description: A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
          type: string
        lockType:
          description: The type of lock.  Currently `edit` is the only supported type.
          type: string
        lockedByApp:
          description: Specifies the friendly name of  the application that is locking the envelope.
          type: string
        lockedByUser:
          $ref: "#/components/schemas/userInfo"
        lockedUntilDateTime:
          description: The date and time that the lock expires.
          type: string
        useScratchPad:
          description: "When set to **true**, a scratchpad is used to edit information.

            \ "
          type: string
      type: object
      x-ds-category: Templates
      x-ds-definition-name: lockInformation
      x-ds-order: "80"
      x-ms-summary: This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
    TemplateRecipientTabs:
      description: Template tabs
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: tabs
      x-ds-order: "50"
      x-ms-summary: Template tabs
    TemplateRecipients:
      description: Template recipients
      properties:
        agents:
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/agent"
          type: array
        carbonCopies:
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/carbonCopy"
          type: array
        certifiedDeliveries:
          description: A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
          items:
            $ref: "#/components/schemas/certifiedDelivery"
          type: array
        currentRoutingOrder:
          description: The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.
          type: string
        editors:
          description: A complex type defining the management and access rights of a recipient assigned assigned as an editor on the document.
          items:
            $ref: "#/components/schemas/editor"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        inPersonSigners:
          description: Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
          items:
            $ref: "#/components/schemas/inPersonSigner"
          type: array
        intermediaries:
          description: Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
          items:
            $ref: "#/components/schemas/intermediary"
          type: array
        notaries:
          description: ""
          items:
            $ref: "#/components/schemas/notaryRecipient"
          type: array
        recipientCount:
          description: The number of recipients in the envelope.
          type: string
        seals:
          description: Specifies one or more electronic seals to apply on documents. For more information on Electronic Seals , see https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals
          items:
            $ref: "#/components/schemas/sealSign"
          type: array
        signers:
          description: A list of signers on the envelope.
          items:
            $ref: "#/components/schemas/signer"
          type: array
        witnesses:
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: "#/components/schemas/witness"
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: recipients
      x-ds-order: "20"
      x-ms-summary: Template recipients
    TemplateResponsiveHtmlPreview:
      description: This resource is used to create a responsive preview of all of the documents associated with a template.
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            type: string
          type: array
      type: object
      x-ds-category: Templates
      x-ds-definition-name: documentHtmlDefinitions
      x-ds-order: "290"
      x-ms-summary: This resource is used to create a responsive preview of all of the documents associated with a template.
    TemplateViews:
      description: A TemplateView contains a URL that you can embed in your application to generate a template view that uses the DocuSign user interface (UI).
      properties:
        url:
          description: The URL that you navigate to in order to start the view.
          type: string
      type: object
      x-ds-category: Templates
      x-ds-definition-name: viewUrl
      x-ds-order: "55"
      x-ms-summary: A TemplateView contains a URL that you can embed in your application to generate a template view that uses the DocuSign user interface (UI).
    Templates:
      description: Template management
      properties:
        accessControlListBase64:
          description: Reserved for DocuSign.
          type: string
        allowComments:
          description: When set to **true**, indicates that comments are allowed on the envelope.
          type: string
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowReassign:
          description: When **true**, the recipient can redirect an envelope to a more appropriate recipient.
          type: string
        allowViewHistory:
          description: When set to **true**, recipients can view the history of the envelope.
          type: string
        anySigner:
          description: Deprecated. This feature has been replaced by signing groups.
          type: string
        asynchronous:
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
          type: string
        attachmentsUri:
          description: Contains a URL for retrieving the attachments that are associated with the envelope.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyDefault:
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
          type: string
        autoMatch:
          description: |-
            By default, templates that have been used within
            the last 60 days are included in auto-matching.

            By explicitly setting `autoMatch`,
            you can permanently include or exclude the template
            in auto matching.

            When **true** the template is included in auto-matching
            regardless of when it was last used.

            When **false** the template is never included in auto-matching.
          type: string
        autoMatchSpecifiedByUser:
          description: |-
            If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
            This is a read-only property.
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        brandId:
          description: The id of the brand.
          type: string
        brandLock:
          description: When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
          type: string
        certificateUri:
          description: The URI for retrieving certificate information.
          type: string
        completedDateTime:
          description: Specifies the date and time this item was completed.
          type: string
        copyRecipientData:
          description: ""
          type: string
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        customFieldsUri:
          description: The URI for retrieving custom fields.
          type: string
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        deletedDateTime:
          description: Reserved for DocuSign.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        disableResponsiveDocument:
          description: When set to **true**, responsive documents are disabled for the envelope.
          type: string
        documents:
          description: A complex element that contains details about the documents associated with the envelope.
          items:
            $ref: "#/components/schemas/document"
          type: array
        documentsCombinedUri:
          description: The URI for retrieving all of the documents associated with the envelope as a single PDF file.
          type: string
        documentsUri:
          description: The URI for retrieving all of the documents associated with the envelope as separate files.
          type: string
        emailBlurb:
          description: This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.
          type: string
        emailSettings:
          $ref: "#/components/schemas/emailSettings"
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        enableWetSign:
          description: When set to **true**, the signer is allowed to print the document and sign it on paper.
          type: string
        enforceSignerVisibility:
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
          type: string
        envelopeAttachments:
          description: An array of attachment objects that provide information about the attachments that are associated with the envelope.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeIdStamping:
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
          type: string
        envelopeLocation:
          description: Reserved for DocuSign.
          type: string
        envelopeMetadata:
          $ref: "#/components/schemas/envelopeMetadata"
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        expireAfter:
          description: An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        externalEnvelopeId:
          description: May contain an external identifier for the envelope.
          type: string
        favoritedByMe:
          description: ""
          type: string
        folderId:
          description: The unique identifier for the folder that the template belongs to.
          type: string
        folderIds:
          description: An array of folder IDs that the template is in.
          items:
            type: string
          type: array
        folderName:
          description: The name of the folder the template belongs to.
          type: string
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasComments:
          description: When set to **true**, indicates that users have added comments to the envelope.
          type: string
        hasFormDataChanged:
          description: Specifies if the `EnvelopeFormData` associated with any forms in the template has changed.
          type: string
        hasWavFile:
          description: When set to **true**, indicates that the template includes a .wav file.
          type: string
        holder:
          description: Reserved for DocuSign.
          type: string
        initialSentDateTime:
          description: The date and time the envelope that used the template was initially sent.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        isDynamicEnvelope:
          description: When set to **true**, indicates that the envelope is a dynamic envelope.
          type: string
        isSignatureProviderEnvelope:
          description: When set to **true**, indicates that the envelope is a signature-provided envelope.
          type: string
        lastModified:
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
          type: string
        lastModifiedBy:
          $ref: "#/components/schemas/userInfo"
        lastModifiedDateTime:
          description: The date and time the template was last modified.
          type: string
        lastUsed:
          description: The date and time the template was last used.
          type: string
        location:
          description: Reserved for DocuSign.
          type: string
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        messageLock:
          description: |-
            When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 

            Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 

            However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
          type: string
        name:
          description: The name of the template.
          type: string
        newPassword:
          description: The user's new password.
          type: string
        notification:
          $ref: "#/components/schemas/notification"
        notificationUri:
          description: The URI for retrieving notifications.
          type: string
        owner:
          $ref: "#/components/schemas/userInfo"
        pageCount:
          description: "An integer value specifying the number of document pages in the template. "
          type: string
        password:
          description: The password for editing the template.
          type: string
        passwordProtected:
          description: If **true**, a password is required to edit the template.
          type: string
        powerForm:
          $ref: "#/components/schemas/powerForm"
        powerForms:
          description: An array of PowerForm objects that contain information about any PowerForms that are included in the template.
          items:
            $ref: "#/components/schemas/powerForm"
          type: array
        purgeCompletedDate:
          description: The date that a purge was completed.
          type: string
        purgeRequestDate:
          description: The date that a purge was requested.
          type: string
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsLock:
          description: When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
          type: string
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        sender:
          $ref: "#/components/schemas/userInfo"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        shared:
          description: |
            When **true**, indicates the template is shared with the **Everyone** group,
            and is shared with all users on the account.

            If **false**, the template is only shared with the **Administrator** group.
          type: string
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signingLocation:
          description: Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
          type: string
        status:
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusChangedDateTime:
          description: The data and time that the status changed.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
        templatesUri:
          description: The URI for retrieving the templates.
          type: string
        transactionId:
          description: " Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned."
          type: string
        uri:
          description: Contains a URI that you can use to retreve the template.
          type: string
        useDisclosure:
          description: |-
            When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 

            If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
          type: string
        voidedDateTime:
          description: The date and time the envelope or template was voided.
          type: string
        voidedReason:
          description: The reason the envelope or template was voided.
          type: string
        workflow:
          $ref: "#/components/schemas/workflow"
      type: object
      x-ds-category: Templates
      x-ds-definition-name: envelopeTemplate
      x-ds-order: "10"
      x-ms-summary: Template management
    UserCustomSettings:
      description: Users' custom settings
      properties:
        customSettings:
          description: The name/value pair information for the user custom setting.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-category: Users
      x-ds-definition-name: customSettingsInformation
      x-ds-order: "30"
      x-ms-summary: Users' custom settings
    UserProfiles:
      description: Users' profiles
      properties:
        address:
          $ref: "#/components/schemas/addressInformation"
        authenticationMethods:
          description: "Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation. "
          items:
            $ref: "#/components/schemas/authenticationMethod"
          type: array
        companyName:
          description: The name of the user's company.
          type: string
        displayOrganizationInfo:
          description: " When set to **true**, the user's company and title information display on the ID card. "
          type: string
        displayPersonalInfo:
          description: When set to **true**, the user's address and phone number display on the ID card.
          type: string
        displayProfile:
          description: When set to **true**, the user's ID card can be viewed from signed documents and envelope history.
          type: string
        displayUsageHistory:
          description: When set to **true**, the user's usage information displays on the ID card.
          type: string
        profileImageUri:
          description: The URL for retrieving the user's profile image.
          type: string
        title:
          description: |-
            The user's job title.

            Limit: 100 characters.
          type: string
        usageHistory:
          $ref: "#/components/schemas/usageHistory"
        userDetails:
          $ref: "#/components/schemas/userInformation"
        userProfileLastModifiedDate:
          description: The date and time that the user's profile was last modified.
          type: string
      type: object
      x-ds-category: Users
      x-ds-definition-name: userProfile
      x-ds-order: "20"
      x-ms-summary: Users' profiles
    UserSignatures:
      description: Users' signatures
      properties:
        adoptedDateTime:
          description: The date and time the user adopted their signature.
          type: string
        createdDateTime:
          description: The UTC date and time when the user created the signature.
          type: string
        customField:
          description: Serialized information about any custom [eHanko stamps](https://support.docusign.com/en/articles/Sending-and-Signing-with-eHanko) that have been ordered from an eHanko provider, including the order status, purchase order id, time created, and time modified.
          type: string
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        externalID:
          description: |-
            An external ID for the signature or stamp.

            **Note**: If a recipient uses a stamp instead of a signature, this is the stamp vendor's serial number for the stamp.
          type: string
        imageBase64:
          description: A Base64-encoded representation of the signature image.
          type: string
        imageType:
          description: |-
            The format of the signature image, such as:

            - `GIF`
            - `PNG`
            - `JPG`
            - `PDF`
            - `BMP`
          type: string
        initials150ImageId:
          description: The ID of the user's initials image.
          type: string
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        lastModifiedDateTime:
          description: The UTC date and time when the signature was last modified.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        nrdsStatus:
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signature150ImageId:
          description: The ID of the user's signature image.
          type: string
        signatureFont:
          description: |
            The font type for the signature, if the signature is not drawn. The supported font types are:

            "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
          type: string
        signatureId:
          description: |-
            The ID associated with the signature name. You can use this property in the URI in place of the signature name. This enables the use of special characters (such as "&", "<", and ">") in a signature name.

            **Note**: When you update a signature, its signature ID might change. In that case you need to use `signatureName` to get the new `signatureId`.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        signatureInitials:
          description: " The initials associated with the signature."
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        signatureRights:
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
          type: string
        signatureType:
          description: |-
            Specifies the type of signature. Possible values include:

            - `RubberStamp`: A DocuSign pre-formatted signature style. This is the default value.
            - `Imported`: A signature image that the user uploaded.
            - `Drawn`: A freehand drawing of the user's signature and initials.
          type: string
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampImageUri:
          description: The URI for retrieving the image of the user's stamp.
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-category: Users
      x-ds-definition-name: userSignature
      x-ds-order: "40"
      x-ms-summary: Users' signatures
    Users:
      description: The Users resource enables you to create and manage account users.
      properties:
        activationAccessCode:
          description: The activation code a new user must enter when activating their account.
          type: string
        company:
          description: The name of the user's company.
          type: string
        connectConfigurations:
          description: Object representing the user's custom Connect configuration.
          items:
            $ref: "#/components/schemas/connectUserObject"
          type: array
        countryCode:
          description: The three-letter code for the user's country.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customSettings:
          description: The name/value pair information for the user custom setting.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        defaultAccountId:
          description: The default account ID associated with the user.
          type: string
        email:
          description: The user's email address.
          type: string
        enableConnectForUser:
          description: Boolean value that specifies whether the user is enabled for updates from DocuSign Connect.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        firstName:
          description: |-
            The user's first name. 
            Maximum Length: 50 characters.
          type: string
        forgottenPasswordInfo:
          $ref: "#/components/schemas/forgottenPasswordInformation"
        groupList:
          description: |
            A list of the group information for groups to add the user to.
            Use [UserGroups::listGroups](https://developers.docusign.com/docs/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.

            When setting a user's group, only the `groupId` is required.
          items:
            $ref: "#/components/schemas/group"
          type: array
        hasRemoteNotary:
          description: ""
          type: boolean
        homeAddress:
          $ref: "#/components/schemas/addressInformation"
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isAdmin:
          description: Determines if the feature set is actively set as part of the plan.
          type: string
        isNAREnabled:
          description: When set to **true**, National Association of Realtors (NAR) signature logos are enabled for the user.
          type: string
        lastLogin:
          description: The date and time when the user last logged in to the system.
          type: string
        lastName:
          description: |-
            The user's last name. 
            Maximum Length: 50 characters.
          type: string
        loginStatus:
          description: |
            Shows the current status of the user's password. Possible values are: 

            * password_reset
            * password_active
            * password_expired
            * password_locked
            * password_reset_failed 
          type: string
        middleName:
          description: |-
            The user's middle name. 
            Limit: 50 characters.
          type: string
        password:
          description: The user's password.
          type: string
        passwordExpiration:
          description: If password expiration is enabled, the date-time when the user's password expires.
          type: string
        permissionProfileId:
          description: The id of the permission profile associated with the user.
          type: string
        permissionProfileName:
          description: The name of the permission profile associated with the user.
          type: string
        profileImageUri:
          description: The URL for retrieving the user's profile image.
          type: string
        sendActivationEmail:
          description: When set to **true**, specifies that an activation email will be sent to the user.
          type: string
        sendActivationOnInvalidLogin:
          description: When set to **true**, specifies that an additional activation email be sent if user's log on fails before the account is activated.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        subscribe:
          description: ""
          type: string
        suffixName:
          description: |-
            The suffix for the user's name, such as Jr, IV, PhD, etc.

            Limit: 50 characters. 
          type: string
        title:
          description: |-
            The salutation for the user, such as Ms, Dr, Capt., etc.

            Limit: 10 characters.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userAddedToAccountDateTime:
          description: The date and time that the user was added to the account.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        userName:
          description: |-
            The user's full name.
            <!--
            `title` + `firstName` + `middleName` + `lastName` + `suffixName`
            -->
          type: string
        userProfileLastModifiedDate:
          description: The date and time that the user's profile was last modified.
          type: string
        userSettings:
          $ref: "#/components/schemas/userSettingsInformation"
        userStatus:
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
          type: string
        userType:
          description: The type of user, for example `CompanyUser`.
          type: string
        workAddress:
          $ref: "#/components/schemas/addressInformation"
      type: object
      x-ds-category: Users
      x-ds-definition-name: userInformation
      x-ds-order: "10"
      x-ms-summary: The Users resource enables you to create and manage account users.
    WorkspaceItems:
      description: This object contains information about a file or folder in a workspace.
      properties:
        callerAuthorization:
          $ref: "#/components/schemas/workspaceUserAuthorization"
        contentType:
          description: If the item is a file, this property specifies the content type of the file.
          type: string
        created:
          description: The UTC DateTime when the workspace item was created.
          type: string
        createdById:
          description: The id of the user who created the workspace item.
          type: string
        createdByInformation:
          $ref: "#/components/schemas/workspaceUser"
        extension:
          description: The file extension of a file item.
          type: string
        fileSize:
          description: The size of the file in bytes.
          type: string
        fileUri:
          description: The URI for retrieving the file.
          type: string
        id:
          description: The id of the workspace item.
          type: string
        isPublic:
          description: " When **true**, the item is public."
          type: string
        lastModified:
          description: The UTC DateTime that the item was last modified.
          type: string
        lastModifiedById:
          description: The id of the user who last modified the item.
          type: string
        lastModifiedByInformation:
          $ref: "#/components/schemas/workspaceUser"
        name:
          description: The name of the file or folder.
          type: string
        pageCount:
          description: The number of pages in a file.
          type: string
        parentFolderId:
          description: The id of the parent folder, or the special value `root` for the root folder.
          type: string
        parentFolderUri:
          description: The URI of the parent folder.
          type: string
        sha256:
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content of a file. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the upload is refused.
          type: string
        thumbHeight:
          description: The height of the thumbnail image.
          type: string
        thumbWidth:
          description: The width of the thumbnail image.
          type: string
        thumbnail:
          $ref: "#/components/schemas/page"
        type:
          description: |-
            The type of workspace item. Valid values are:

            - `file`
            - `folder`
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userAuthorization:
          $ref: "#/components/schemas/workspaceUserAuthorization"
      type: object
      x-ds-category: Workspaces
      x-ds-definition-name: workspaceItem
      x-ds-order: "130"
      x-ms-summary: This object contains information about a file or folder in a workspace.
    Workspaces:
      description: A DocuSign workspace is a collaboration area for sharing files and data.
      properties:
        billableAccountId:
          description: The id of the account to bill.
          type: string
        callerInformation:
          $ref: "#/components/schemas/workspaceUser"
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdByInformation:
          $ref: "#/components/schemas/workspaceUser"
        lastModified:
          description: Utc date and time the comment was last updated (can only be done by creator.)
          type: string
        lastModifiedByInformation:
          $ref: "#/components/schemas/workspaceUser"
        settings:
          $ref: "#/components/schemas/workspaceSettings"
        status:
          description: |-
            The status of the workspace. Valid values are:

            - `active`
            - `closed`
          type: string
        workspaceBaseUrl:
          description: The relative URL for accessing the workspace.
          type: string
        workspaceDescription:
          description: Text describing the purpose of the workspace.
          type: string
        workspaceId:
          description: The id of the workspace, always populated.
          type: string
        workspaceName:
          description: The name of the workspace.
          type: string
        workspaceUri:
          description: The relative URI for accessing the workspace.
          type: string
      type: object
      x-ds-category: Workspaces
      x-ds-definition-name: workspace
      x-ds-order: "140"
      x-ms-summary: A DocuSign workspace is a collaboration area for sharing files and data.
    accessCodeFormat:
      description: Object specifying the format of the string provided to a recipient in order to access an envelope.
      properties:
        formatRequired:
          description: Boolean specifying whether this format configuration is required.
          type: string
        formatRequiredMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        letterRequired:
          description: Boolean specifying whether alphabetical characters are required in the access code string.
          type: string
        letterRequiredMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        minimumLength:
          description: Minimum length of the access code string.
          type: string
        minimumLengthMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        numberRequired:
          description: Boolean specifying whether numerical characters (0-9) are required in the access code string.
          type: string
        numberRequiredMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        specialCharacterRequired:
          description: Boolean specifying whether special characters are required in the access code string. The string cannot contain the special characters '<', '>', '&', or '#'.
          type: string
        specialCharacterRequiredMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: accessCodeFormat
      x-ms-summary: Object specifying the format of the string provided to a recipient in order to access an envelope.
    accountAddress:
      description: Contains information about the address associated with the account.
      properties:
        address1:
          description: "The first line of the address. Maximum length: 100 characters."
          type: string
        address2:
          description: "The second line of the address. Maximum length: 100 characters."
          type: string
        city:
          description: "The city associated with the address. Maximum length: 40 characters."
          type: string
        country:
          description: "The country associated with the address. Maximum length: 50 characters."
          type: string
        email:
          description: The email address associated with the account.
          type: string
        fax:
          description: The fax number associated with the account.
          type: string
        firstName:
          description: "The first name of the user associated with the account. Maximum Length: 50 characters."
          type: string
        lastName:
          description: The last name of the user associated with the account.
          type: string
        phone:
          description: The phone number associated with the account.
          type: string
        postalCode:
          description: "The postal code associated with the address. Maximum length: 20 characters."
          type: string
        state:
          description: "The state or province associated with the address. Maximum length: 40 characters."
          type: string
        supportedCountries:
          description: An array of supported countries associated with the account.
          items:
            $ref: "#/components/schemas/country"
          type: array
      type: object
      x-ds-definition-name: accountAddress
      x-ms-summary: Contains information about the address associated with the account.
    accountBillingPlan:
      description: Contains information about an account billing plan.
      properties:
        addOns:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/addOn"
          type: array
        appStoreReceiptExpirationDate:
          description: ""
          type: string
        appStoreReceiptPurchaseDate:
          description: ""
          type: string
        canCancelRenewal:
          description: Reserved for DocuSign.
          type: string
        canUpgrade:
          description: When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
          type: string
        currencyCode:
          description: Specifies the ISO currency code to use for the account.
          type: string
        downgradePlanInformation:
          $ref: "#/components/schemas/downgradePlanUpdateResponse"
        enableSupport:
          description: When set to **true**, customer support is provided as part of the account plan.
          type: string
        includedSeats:
          description: The number of seats (users) included in the plan.
          type: string
        incrementalSeats:
          description: Reserved for DocuSign.
          type: string
        isDowngrade:
          description: When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
          type: string
        notificationType:
          description: ""
          type: string
        otherDiscountPercent:
          description: " Any other percentage discount for the plan. "
          type: string
        paymentCycle:
          description: |-
            The payment cycle associated with the plan. The possible values are: 

            - `Monthly`
            - `Annually` 
          type: string
        paymentMethod:
          description: " The payment method used with the plan. The possible values are: CreditCard, PurchaseOrder, Premium, or Freemium. "
          type: string
        perSeatPrice:
          description: |-
            The per-seat price associated with the plan.

            Example: `"456.0000"`
          type: string
        planClassification:
          description: |-
            Identifies the type of plan. Examples include:

            - `business`
            - `corporate`
            - `enterprise` 
            - `free`
          type: string
        planFeatureSets:
          description: |
            A complex type that sets the feature sets for the account. It contains the following information (all string content):

            * currencyFeatureSetPrices - Contains the currencyCode and currencySymbol for the alternate currency values for envelopeFee, fixedFee, seatFee that are configured for this plan feature set.
            * envelopeFee - An incremental envelope cost for plans with envelope overages (when isEnabled=true).
            * featureSetId - A unique ID for the feature set.
            * fixedFee - A one-time fee associated with the plan (when isEnabled=true).
            * isActive - Specifies whether the feature set is actively set as part of the plan.
            * isEnabled - Specifies whether the feature set is actively enabled as part of the plan.
            * name - The name of the feature set.
            * seatFee - An incremental seat cost for seat-based plans (when isEnabled=true).
          items:
            $ref: "#/components/schemas/featureSet"
          type: array
        planId:
          description: DocuSign's id for the account plan.
          type: string
        planName:
          description: |-
            The name of the billing plan used for the account.

            Examples: 

            - `Personal - Annual`
            - `Unlimited Envelope Subscription - Annual Billing`
          type: string
        renewalStatus:
          description: |-
            The renewal status for the account. Valid values are:

            * `auto`: The account automatically renews.
            * `queued_for_close`: The account will be closed at the `billingPeriodEndDate`.
            * `queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.

            **Note**: For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
          type: string
        seatDiscounts:
          description: "\n "
          items:
            $ref: "#/components/schemas/seatDiscount"
          type: array
        supportIncidentFee:
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
          type: string
        supportPlanFee:
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
          type: string
      type: object
      x-ds-definition-name: accountBillingPlan
      x-ms-summary: Contains information about an account billing plan.
    accountBillingPlanResponse:
      description: Defines an account billing plan response object.
      properties:
        billingAddress:
          $ref: "#/components/schemas/accountAddress"
        billingAddressIsCreditCardAddress:
          description: When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different.
          type: string
        billingPlan:
          $ref: "#/components/schemas/accountBillingPlan"
        creditCardInformation:
          $ref: "#/components/schemas/creditCardInformation"
        directDebitProcessorInformation:
          $ref: "#/components/schemas/directDebitProcessorInformation"
        downgradePlanInformation:
          $ref: "#/components/schemas/downgradePlanUpdateResponse"
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        paymentProcessorInformation:
          $ref: "#/components/schemas/paymentProcessorInformation"
        referralInformation:
          $ref: "#/components/schemas/referralInformation"
        successorPlans:
          description: A list of billing plans that the current billing plan can be rolled into.
          items:
            $ref: "#/components/schemas/billingPlan"
          type: array
      type: object
      x-ds-definition-name: accountBillingPlanResponse
      x-ms-summary: Defines an account billing plan response object.
    accountIdentityInputOption:
      description: ""
      properties:
        isRequired:
          description: ""
          type: boolean
        optionName:
          description: ""
          type: string
        valueType:
          description: ""
          type: string
      type: object
      x-ds-definition-name: accountIdentityInputOption
      x-ms-summary: ""
    accountIdentityVerificationResponse:
      description: ""
      properties:
        identityVerification:
          description: " "
          items:
            $ref: "#/components/schemas/accountIdentityVerificationWorkflow"
          type: array
      type: object
      x-ds-definition-name: accountIdentityVerificationResponse
      x-ms-summary: ""
    accountIdentityVerificationStep:
      description: Information about a specific step in an Identity Verification workflow.
      properties:
        name:
          description: The name of the Identity Verification workflow step.
          type: string
        type:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: accountIdentityVerificationStep
      x-ms-summary: Information about a specific step in an Identity Verification workflow.
    accountIdentityVerificationWorkflow:
      description: Specifies an Identity Verification workflow.
      properties:
        defaultDescription:
          description: Text describing the purpose of the Identity Verification workflow.
          type: string
        defaultName:
          description: The name of the Identity Verification workflow.
          type: string
        inputOptions:
          description: ""
          items:
            $ref: "#/components/schemas/accountIdentityInputOption"
          type: array
        signatureProvider:
          $ref: "#/components/schemas/accountSignatureProvider"
        workflowId:
          description: |-
            Workflow unique ID</br>This is the ID you must specify when setting ID Verification in an envelope using the `identityVerification`
            [core recipient parameter](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#core-recipient-parameters)
          type: string
        workflowResourceKey:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: accountIdentityVerificationWorkflow
      x-ms-summary: Specifies an Identity Verification workflow.
    accountInformation:
      description: Contains account Information.
      properties:
        accountIdGuid:
          description: The GUID associated with the account ID.
          type: string
        accountName:
          description: The name on the account.
          type: string
        accountSettings:
          $ref: "#/components/schemas/accountSettingsInformation"
        allowTransactionRooms:
          description: When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.
          type: string
        billingPeriodDaysRemaining:
          description: Number of days remaining in the current billing period.
          type: string
        billingPeriodEndDate:
          description: The billing period end date in UTC timedate format.
          type: string
        billingPeriodEnvelopesAllowed:
          description: The number of envelopes that can be sent in the current billing period (can be unlimited).
          type: string
        billingPeriodEnvelopesSent:
          description: The number of envelopes that have been sent in the current billing period.
          type: string
        billingPeriodStartDate:
          description: The billing period start date in UTC timedate format.
          type: string
        billingProfile:
          description: |-
            The type of billing method on the account. Valid values are: 

            - `direct`
            - `web`
          type: string
        canUpgrade:
          description: When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response.
          type: string
        connectPermission:
          description: ""
          type: string
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        currencyCode:
          description: The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
          type: string
        currentPlanId:
          description: ID of the plan used to create this account.
          type: string
        displayApplianceStartUrl:
          description: ""
          type: string
        displayApplianceUrl:
          description: ""
          type: string
        distributorCode:
          description: The code that identifies the billing plan groups and plans for the new account.
          type: string
        docuSignLandingUrl:
          description: URL of the landing page used to create the account.
          type: string
        dssValues:
          additionalProperties:
            type: string
          description: ""
          type: object
        envelopeSendingBlocked:
          description: When **true**, the ability to send envelopes is blocked. When **false**, envelopes can be sent.
          type: string
        envelopeUnitPrice:
          description: The price of sending an envelope, represented in the account's local currency.
          type: string
        externalAccountId:
          description: The Account ID displayed on the user's Account page.
          type: string
        forgottenPasswordQuestionsCount:
          description: " A complex element that contains up to four Question/Answer pairs for forgotten password information for a user."
          type: string
        isDowngrade:
          description: When **true**, the account has been downgraded from a premium account type. Otherwise **false**.
          type: string
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        planClassification:
          description: |-
            Identifies the type of plan. Examples include:

            - `business`
            - `corporate`
            - `enterprise` 
            - `free`
          type: string
        planEndDate:
          description: The date that the current plan will end.
          type: string
        planName:
          description: |-
            The name of the billing plan used for the account.

            Examples: 

            - `Personal - Annual`
            - `Unlimited Envelope Subscription - Annual Billing`
          type: string
        planStartDate:
          description: The date that the Account started using the current plan.
          type: string
        recipientDomains:
          description: ""
          items:
            $ref: "#/components/schemas/recipientDomain"
          type: array
        seatsAllowed:
          description: The number of active users the account can have at one time.
          type: string
        seatsInUse:
          description: The number of users currently active on the account.
          type: string
        status21CFRPart11:
          description: The status of the account content per (Title 21 CFR Part 11)[https://www.fda.gov/regulatory-information/search-fda-guidance-documents/part-11-electronic-records-electronic-signatures-scope-and-application]. This regulation defines the criteria under which electronic records and electronic signatures are considered trustworthy.
          type: string
        suspensionDate:
          description: The date on which the account was suspended.
          type: string
        suspensionStatus:
          description: Indicates whether the account is currently suspended.
          type: string
        useDisplayAppliance:
          description: ""
          type: boolean
      type: object
      x-ds-definition-name: accountInformation
      x-ms-summary: Contains account Information.
    accountMinimumPasswordLength:
      description: ""
      properties:
        maximumLength:
          description: The maximum number of entry characters supported by the custom tab.
          type: string
        minimumLength:
          description: Minimum length of the access code string.
          type: string
      type: object
      x-ds-definition-name: accountMinimumPasswordLength
      x-ms-summary: ""
    accountNotification:
      description: A complex element that specifies notifications (expirations and reminders) for the envelope.
      properties:
        expirations:
          $ref: "#/components/schemas/expirations"
        reminders:
          $ref: "#/components/schemas/reminders"
        userOverrideEnabled:
          description: When **true**, the user can override envelope expirations.
          type: string
      type: object
      x-ds-definition-name: accountNotification
      x-ms-summary: A complex element that specifies notifications (expirations and reminders) for the envelope.
    accountPasswordExpirePasswordDays:
      description: ""
      properties:
        maximumDays:
          description: ""
          type: string
        minimumDays:
          description: ""
          type: string
      type: object
      x-ds-definition-name: accountPasswordExpirePasswordDays
      x-ms-summary: ""
    accountPasswordLockoutDurationMinutes:
      description: ""
      properties:
        maximumMinutes:
          description: ""
          type: string
        minimumMinutes:
          description: ""
          type: string
      type: object
      x-ds-definition-name: accountPasswordLockoutDurationMinutes
      x-ms-summary: ""
    accountPasswordLockoutDurationType:
      description: ""
      properties:
        options:
          description: An array of option strings supported by this setting.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: accountPasswordLockoutDurationType
      x-ms-summary: ""
    accountPasswordMinimumPasswordAgeDays:
      description: ""
      properties:
        maximumAge:
          description: ""
          type: string
        minimumAge:
          description: ""
          type: string
      type: object
      x-ds-definition-name: accountPasswordMinimumPasswordAgeDays
      x-ms-summary: ""
    accountPasswordQuestionsRequired:
      description: Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
      properties:
        maximumQuestions:
          description: The maximum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or greater than `minimumQuestions`.
          type: string
        minimumQuestions:
          description: The minimum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or less than `maximumQuestions`.
          type: string
      type: object
      x-ds-definition-name: accountPasswordQuestionsRequired
      x-ms-summary: Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
    accountPasswordRules:
      description: ""
      properties:
        expirePassword:
          description: When set to **true**, passwords expire. The default value is `false`.
          type: string
        expirePasswordDays:
          description: The number of days before passwords expire. To use this property, the `expirePassword` property must be set to **true**.
          type: string
        expirePasswordDaysMetadata:
          $ref: "#/components/schemas/accountPasswordExpirePasswordDays"
        lockoutDurationMinutes:
          description: The number of minutes a user is locked out of the system after three (?) failed login attempts. The default value is `2`.
          type: string
        lockoutDurationMinutesMetadata:
          $ref: "#/components/schemas/accountPasswordLockoutDurationMinutes"
        lockoutDurationType:
          description: |-
            The interval associated with the user lockout after a failed login attempt.

            Possible values are: (?????)

            - `minutes` (default)
            - `hours`
            - `days`
          type: string
        lockoutDurationTypeMetadata:
          $ref: "#/components/schemas/accountPasswordLockoutDurationType"
        minimumPasswordAgeDays:
          description: The minimum number of days after a password is set before it can be changed. This value can be `0` or more days. The default value is `0`.
          type: string
        minimumPasswordAgeDaysMetadata:
          $ref: "#/components/schemas/accountPasswordMinimumPasswordAgeDays"
        minimumPasswordLength:
          description: The minimum number of characters in the password. This value must be a number between `6` and `15`. The default value is `6`.
          type: string
        minimumPasswordLengthMetadata:
          $ref: "#/components/schemas/accountMinimumPasswordLength"
        passwordIncludeDigit:
          description: When set to **true**, passwords must include a digit. The default value is `false`.
          type: string
        passwordIncludeDigitOrSpecialCharacter:
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeLowerCase:
          description: When set to **true**, passwords must include a lowercase letter. The default value is `false`.
          type: string
        passwordIncludeSpecialCharacter:
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeUpperCase:
          description: When set to **true**, passwords must include an uppercase letter. The default value is `false`.
          type: string
        passwordStrengthType:
          description: |-
            The type of password strength. Possible values are:

            - `basic`: The minimum password length is 6 characters with no other password requirements.
            - `medium`: The minimum password length is 7 characters. Passwords must also have one uppercase letter, one lowercase letter, and one number or special character.
            - `strong`: The minimum password length is 9 characters. Passwords must also have one uppercase letter, one lowercase letter, one number, and one special character.
            - `custom`: This option enables you to customize password requirements, including the following properties:

               - `minimumPasswordLength`
               - `minimumPasswordAgeDays`
               - `passwordIncludeDigit`
               - `passwordIncludeDigitOrSpecialCharacter`
               - `passwordIncludeLowerCase`
               - `passwordIncludeSpecialCharacter`
               - `passwordIncludeUpperCase`
               - `questionsRequired`
          type: string
        passwordStrengthTypeMetadata:
          $ref: "#/components/schemas/accountPasswordStrengthType"
        questionsRequired:
          description: The number of security questions required to confirm the user’s identity before the user can reset their password. The default value is `0`.
          type: string
        questionsRequiredMetadata:
          $ref: "#/components/schemas/accountPasswordQuestionsRequired"
      type: object
      x-ds-definition-name: accountPasswordRules
      x-ms-summary: ""
    accountPasswordStrengthType:
      description: ""
      properties:
        options:
          description: An array of option strings supported by this setting.
          items:
            $ref: "#/components/schemas/accountPasswordStrengthTypeOption"
          type: array
      type: object
      x-ds-definition-name: accountPasswordStrengthType
      x-ms-summary: ""
    accountPasswordStrengthTypeOption:
      description: ""
      properties:
        minimumLength:
          description: Minimum length of the access code string.
          type: string
        name:
          description: ""
          type: string
        passwordIncludeDigit:
          description: When set to **true**, passwords must include a digit. The default value is `false`.
          type: string
        passwordIncludeDigitOrSpecialCharacter:
          description: |-
            When set to **true**, passwords must include either a digit or a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeLowerCase:
          description: When set to **true**, passwords must include a lowercase letter. The default value is `false`.
          type: string
        passwordIncludeSpecialCharacter:
          description: |-
            When set to **true**, passwords must include a special character. The default value is `false`.

            **Note**: Passwords cannot include angle brackets (`<` `>`) or spaces.
          type: string
        passwordIncludeUpperCase:
          description: When set to **true**, passwords must include an uppercase letter. The default value is `false`.
          type: string
      type: object
      x-ds-definition-name: accountPasswordStrengthTypeOption
      x-ms-summary: ""
    accountRoleSettings:
      description: "This object defines account permissions for users who are associated with the account permission profile. "
      properties:
        allowAccountManagement:
          description: When **true**, users have full administrative access to the account.
          type: string
        allowAccountManagementMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowApiAccess:
          description: When **true**, users can manage documents by using the API.
          type: string
        allowApiAccessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowApiAccessToAccount:
          description: When **true**, users can access the account by using the eSignature API.
          type: string
        allowApiAccessToAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowApiSendingOnBehalfOfOthers:
          description: When **true**, users can send envelopes on behalf of others.
          type: string
        allowApiSendingOnBehalfOfOthersMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowApiSequentialSigning:
          description: When **true**, users may specify sequential signing recipients when they send documents by using the API.
          type: string
        allowApiSequentialSigningMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAutoTagging:
          description: " If **true**, auto-tagging is enabled for the account."
          type: string
        allowAutoTaggingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowBulkSending:
          description: When **true**, bulk sending is enabled for users.
          type: string
        allowBulkSendingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowDocuSignDesktopClient:
          description: |
            When **true**, the DocuSign Desktop Client is enabled for users.
          type: string
        allowDocuSignDesktopClientMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowESealRecipients:
          description: When **true**, users can add electronic seal ([eSeal](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals)) recipients.
          type: string
        allowESealRecipientsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopeSending:
          description: When **true**, users can send envelopes.
          type: string
        allowEnvelopeSendingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPowerFormsAdminToAccessAllPowerFormEnvelopes:
          description: When **true**, PowerForm Administrators can access all of the PowerForm envelopes associated with the account.
          type: string
        allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSendersToSetRecipientEmailLanguage:
          description: When **true**, senders can set the language of the email that is sent to recipients.
          type: string
        allowSendersToSetRecipientEmailLanguageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSignerAttachments:
          description: When **true**, users can add requests for attachments from signers.
          type: string
        allowSignerAttachmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSupplementalDocuments:
          description: When **true**, senders can include supplemental documents.
          type: string
        allowSupplementalDocumentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowTaggingInSendAndCorrect:
          description: When **true**, the tagger palette is visible during the sending and correct flows and users can add tabs to documents.
          type: string
        allowTaggingInSendAndCorrectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowVaulting:
          description: Reserved for DocuSign.
          type: string
        allowVaultingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowWetSigningOverride:
          description: When **true**, users can override the default account setting that controls whether recipients can sign documents on paper. The option to overrride this setting occurs during the sending process on a per-envelope basis.
          type: string
        allowWetSigningOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowedAddressBookAccess:
          description: |
            Specifies the level of access that users have to the account's address book. Valid values are:

            - `personal`
            - `useShared`
            - `usePersonalAndShared`
            - `personalAndShared`
          type: string
        allowedAddressBookAccessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowedClickwrapsAccess:
          description: ""
          type: string
        allowedClickwrapsAccessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowedTemplateAccess:
          description: |-
            Specifies the level of access that users have to account templates. Valid values are: 

            - `none` 
            - `use`
            - `create`
            - `share`
          type: string
        allowedTemplateAccessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowedToBeEnvelopeTransferRecipient:
          description: "When **true**, users can be recipients of envelopes transferred to them by administrators of other accounts. "
          type: string
        allowedToBeEnvelopeTransferRecipientMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canCreateWorkspaces:
          description: Reserved for DocuSign.
          type: string
        canCreateWorkspacesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableDocumentUpload:
          description: When **true**, users cannot upload documents.
          type: string
        disableDocumentUploadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableOtherActions:
          description: When **true**, users can access the **Other Actions** menu.
          type: string
        disableOtherActionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableApiRequestLogging:
          description: |-
            When **true**, API request logging is enabled.

            **Note**: Logging limits apply.
          type: string
        enableApiRequestLoggingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableRecipientViewingNotifications:
          description: When **true**, senders are notified when recipients view the documents that they send.
          type: string
        enableRecipientViewingNotificationsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSequentialSigningInterface:
          description: When **true**, the sequential signing user interface is enabled.
          type: string
        enableSequentialSigningInterfaceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableTransactionPointIntegration:
          description: Reserved for DocuSign.
          type: string
        enableTransactionPointIntegrationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        powerFormRole:
          description: |
            The PowerForms rights associated with the account permission profile. Valid values are:

            - `none` 
            - `user` 
            - `admin`
          type: string
        powerFormRoleMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        receiveCompletedSelfSignedDocumentsAsEmailLinks:
          description: When **true**, senders receive emails about completed, self-signed documents that contain links to the completed documents instead of PDF attachments.
          type: string
        receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signingUiVersionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustAccept:
          description: When **true**, senders can require recipients to accept supplemental documents.
          type: string
        supplementalDocumentsMustAcceptMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustRead:
          description: When **true**, senders can require recipients to read supplemental documents.
          type: string
        supplementalDocumentsMustReadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustView:
          description: When **true**, users can require recipients to view supplemental documents.
          type: string
        supplementalDocumentsMustViewMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useNewDocuSignExperienceInterface:
          description: Reserved for DocuSign.
          type: string
        useNewDocuSignExperienceInterfaceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useNewSendingInterface:
          description: Reserved for DocuSign.
          type: string
        useNewSendingInterfaceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        vaultingMode:
          description: Reserved for DocuSign.
          type: string
        vaultingModeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: accountRoleSettings
      x-ms-summary: "This object defines account permissions for users who are associated with the account permission profile. "
    accountSeals:
      description: ""
      properties:
        seals:
          description: A list of electronic seals to apply to documents.
          items:
            $ref: "#/components/schemas/sealIdentifier"
          type: array
      type: object
      x-ds-definition-name: accountSeals
      x-ms-summary: ""
    accountSettingsInformation:
      description: Contains account settings information. Used in requests to set property values. Used in responses to report property values.
      properties:
        accessCodeFormat:
          $ref: "#/components/schemas/accessCodeFormat"
        accountDateTimeFormat:
          description: UTC date/time format for the account.
          type: string
        accountDateTimeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        accountDefaultLanguage:
          description: ""
          type: string
        accountDefaultLanguageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        accountName:
          description: The name on the account.
          type: string
        accountNameMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        accountNotification:
          $ref: "#/components/schemas/accountNotification"
        accountUISettings:
          $ref: "#/components/schemas/accountUISettings"
        adoptSigConfig:
          description: |-
            When set to **true**, [Signature Adoption Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-signature-adopt-config) is enabled. 

            **Note**: Only Admin users can change this setting.
          type: string
        adoptSigConfigMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        advancedCorrect:
          description: If **true**, the Advanced Correction feature is enabled for this account.
          type: string
        advancedCorrectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAccessCodeFormat:
          description: |-
            When **true**, the configured [Access Code Format](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/get#accessCodeFormat) page is enabled for account administrators.

            **Note**: Only Admin users can change this setting.
          type: string
        allowAccessCodeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAccountManagementGranular:
          description: |-
            When **true**, the account can be managed on a per-user basis.

            **Note**: Only Admin users can change this setting.
          type: string
        allowAccountManagementGranularMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAccountMemberNameChange:
          description: Boolean that specifies whether member names can be changed in the account.
          type: string
        allowAccountMemberNameChangeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAdvancedRecipientRoutingConditional:
          description: When set to **true**, [Conditional Routing](https://support.docusign.com/en/guides/ndse-user-guide-conditional-recipients) is enabled for the account as part of DocuSign's Advanced Recipient Routing feature.
          type: string
        allowAdvancedRecipientRoutingConditionalMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAgentNameEmailEdit:
          description: |2
              If **true**, an agent recipient can change the email addresses of recipients later in the signing order.
          type: string
        allowAgentNameEmailEditMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAgreementActions:
          description: ""
          type: string
        allowAgreementActionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAutoNavSettings:
          description: |2
              If **true**, auto-navigation can be enabled for this account.
          type: string
        allowAutoNavSettingsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAutoTagging:
          description: " If **true**, auto-tagging is enabled for the account."
          type: string
        allowAutoTaggingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowBulkSend:
          description: |-
            When set to **true**, bulk send functionality is enabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        allowBulkSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowCDWithdraw:
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
          type: string
        allowCDWithdrawMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowConnectHttpListenerConfigs:
          description: Boolean that specifies whether a Connect configuration can use HTTP listeners.
          type: string
        allowConnectSendFinishLater:
          description: Reserved for DocuSign.
          type: string
        allowConnectSendFinishLaterMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowConnectUnifiedPayloadUI:
          description: ""
          type: string
        allowConsumerDisclosureOverride:
          description: |
            If **true**,
            the account has the ability to change the
            [Consumer Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure)
            setting.
          type: string
        allowConsumerDisclosureOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowDataDownload:
          description: |
            When set to **true**, senders can download form data from the envelopes that they send.

            **Note**: Only Admin users can change this setting.
          type: string
        allowDataDownloadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowDocumentDisclosures:
          description: Boolean that specifies whether disclosure documents can be included in envelopes.
          type: string
        allowDocumentDisclosuresMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowDocumentVisibility:
          description: |
            When **true**, the [Document Visibility](https://support.docusign.com/guides/ndse-user-guide-document-visibility) feature is enabled for the account.
          type: string
        allowDocumentVisibilityMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowDocumentsOnSignedEnvelopes:
          description: Boolean that specifies whether notifications can include the envelope's signed document.
          type: string
        allowDocumentsOnSignedEnvelopesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEHankoStamps:
          description: |
            When **true**,
            [eHanko stamps](https://support.docusign.com/en/guides/ndse-user-guide-manage-your-stamps)
            are enabled.
          type: string
        allowEHankoStampsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowENoteEOriginal:
          description: |
            Specifies whether eNote eOriginal integration is enabled.
          type: string
        allowENoteEOriginalMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopeCorrect:
          description: |
            When set to **true**, the envelope correction feature is enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        allowEnvelopeCorrectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopeCustodyTransfer:
          description: |+
            Specifies whether the account is able to
            manage rules that [transfer ownership](https://support.docusign.com/en/guides/ndse-admin-guide-custody-transfer)
            of envelopes within the same account.



          type: string
        allowEnvelopeCustodyTransferMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopeCustomFields:
          description: |
            Specifies whether
            [envelope custom fields](https://support.docusign.com/en/guides/ndse-user-guide-manage-custom-fields)
            are enabled.
          type: string
        allowEnvelopeCustomFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopePublishReporting:
          description: |
            When set to **true**, envelope publishing reporting is enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        allowEnvelopePublishReportingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEnvelopeReporting:
          description: |
            Specifies whether the account has access to reports.
          type: string
        allowEnvelopeReportingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowExpressSignerCertificate:
          description: |
            When set to **true**, signers are required to use Express Digital Signatures.

            **Note**: Only Admin users can change this setting.
          type: string
        allowExpressSignerCertificateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowExpression:
          description: |+
            If the account plan does not include calculated fields, this setting allows an account to use them.

          type: string
        allowExpressionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowExtendedSendingResourceFile:
          description: Boolean that specifies whether resource files can be used for extended sending.
          type: string
        allowExtendedSendingResourceFileMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowExternalSignaturePad:
          description: |
            When set to **true**, the account can
            configure and use signature pads for their recipients.

            **Note**: Only Admin users can change this setting.
          type: string
        allowExternalSignaturePadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowIDVLevel1:
          description: When set to **true**, IDV Level 1 is allowed. The default value is **false**.
          type: string
        allowIDVLevel1Metadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowIDVLevel2:
          description: ""
          type: string
        allowIDVLevel2Metadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowIDVLevel3:
          description: ""
          type: string
        allowIDVLevel3Metadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowIDVPlatform:
          description: ""
          type: string
        allowIDVPlatformMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowInPerson:
          description: |+
            When set to **true**, the account administrator can enable in-person signing.

            **Note**: Only SysAdmin users can change this setting.

          type: string
        allowInPersonMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowManagedStamps:
          description: When **true**, [Managed Stamps](https://support.docusign.com/en/guides/ndse-admin-guide-managed-stamps) are enabled.
          type: string
        allowManagedStampsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowMarkupMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowMemberTimeZone:
          description: |
            When set to **true**, account users can set their own
            [time zone settings](https://support.docusign.com/en/articles/How-do-I-modify-time-zone-settings-for-my-account).

            **Note**: Only Admin users can change this setting.
          type: string
        allowMemberTimeZoneMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowMergeFields:
          description: |
            When set to **true**, the account can use
            [merge fields](https://support.docusign.com/en/guides/dfs-user-guide-merge-fields-user)
            with DocuSign for Salesforce.
          type: string
        allowMergeFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowMultipleBrandProfiles:
          description: |
            Specifies whether the account supports multiple brands.
          type: string
        allowMultipleBrandProfilesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowMultipleSignerAttachments:
          description: |-
            When set to **true**, recipients can
            upload multiple signer attachments with a single attachment.

            **Note**: Only Admin users can change this setting.
          type: string
        allowMultipleSignerAttachmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowNonUSPhoneAuth:
          description: |
            Specifies whether users can use
            international numbers
            for phone authentication.
          type: string
        allowNonUSPhoneAuthMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowOcrOfEnvelopeDocuments:
          description: ""
          type: string
        allowOcrOfEnvelopeDocumentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowOfflineSigning:
          description: |-
            When set to **true**,
            [offline signing](https://support.docusign.com/articles/Offline-access-with-the-DocuSign-Mobile-App-for-iOS-iPad-iPhone-iPod-Touch)
            is enabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        allowOfflineSigningMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowOpenTrustSignerCertificate:
          description: |-
            When set to **true**, senders can use OpenTrust signer certificates.

            **Note**: Only Admin users can change this setting.
          type: string
        allowOpenTrustSignerCertificateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowOrganizations:
          description: Boolean that specifies whether [DocuSign Admin](https://developers.docusign.com/orgadmin-api) is enabled for the account.
          type: string
        allowOrganizationsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPaymentProcessing:
          description: |-
            When set to **true**, payment processing is enabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        allowPaymentProcessingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPersonalSignerCertificate:
          description: |-
            When set to **true**, signers can use personal signer certificates.

            **Note**: Only Admin users can change this setting.
          type: string
        allowPersonalSignerCertificateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPhoneAuthOverride:
          description: Boolean that specifies whether users can override phone authentication.
          type: string
        allowPhoneAuthOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPhoneAuthentication:
          description: Boolean that specifies whether phone authentication is enabled for the account.
          type: string
        allowPhoneAuthenticationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPrivateSigningGroups:
          description: Reserved for DocuSign. This property returns the value **false** when listing account settings. Read only.
          type: string
        allowPrivateSigningGroupsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowRecipientConnect:
          description: ""
          type: string
        allowRecipientConnectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowReminders:
          description: |
            When set to **true**,
            an account administrator can to turn on reminders
            and expiration defaults for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        allowRemindersMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowRemoteNotary:
          description: ""
          type: string
        allowRemoteNotaryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowResourceFileBranding:
          description: |
            If **true**,
            resource files can be uploaded in branding.
          type: string
        allowResourceFileBrandingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSMSDelivery:
          description: ""
          type: string
        allowSMSDeliveryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSafeBioPharmaSignerCertificate:
          description: |
            When set to **true**,
            account administrators can
            specify that signers are
            required to use SAFE-BioPharma digital signatures.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSafeBioPharmaSignerCertificateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSecurityAppliance:
          description: Boolean that specifies whether a DocuSign Signature Appliance can be used with the account.
          type: string
        allowSecurityApplianceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSendToCertifiedDelivery:
          description: |
            If **true**,
            the account admin can enable the
            Send to Certified Delivery
            feature on the account.
          type: string
        allowSendToCertifiedDeliveryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSendToIntermediary:
          description: |
            If **true**,
            the account admin can enable the Send to Intermediary
            feature on the account.
          type: string
        allowSendToIntermediaryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowServerTemplates:
          description: |
            If **true**,
            the account can use templates.
          type: string
        allowServerTemplatesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSetEmbeddedRecipientStartURL:
          description: ""
          type: string
        allowSetEmbeddedRecipientStartURLMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSharedTabs:
          description: |
            When set to **true**,
            shared tabs are enabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSharedTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSignDocumentFromHomePage:
          description: |-
            When set to **true**, recipients can sign documents from the home page.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSignDocumentFromHomePageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSignNow:
          description: |
            If **true**,
            the account administrator can enable
            the Sign Now feature.
          type: string
        allowSignNowMetadata:
          description: |
            Metadata that indicates whether the `allowSignNow` property is editable.
          type: string
        allowSignatureStamps:
          description: |-
            When set to **true**, Signature Stamps are enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSignatureStampsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSignerReassign:
          description: |
            When set to **true**, the recipient of an envelope sent from this account can reassign it to another person.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSignerReassignMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSignerReassignOverride:
          description: |-
            When set to **true**, an account administrator can override the ability of an envelope recipient to reassign it to another person.

            **Note**: Only Admin users can change this setting.
          type: string
        allowSignerReassignOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSigningExtensions:
          description: Boolean that specifies whether Signing and App Extensions are allowed.
          type: string
        allowSigningExtensionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSigningGroups:
          description: When set to **true**, the account allows signing groups. This setting is only shown in responses that list account settings. Read only.
          type: string
        allowSigningGroupsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSigningInsights:
          description: ""
          type: string
        allowSigningInsightsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSigningRadioDeselect:
          description: Boolean that specifies whether the account supports radio buttons on tabs [Radio CustomTabType](https://developers.docusign.com/esign-soap-api/reference/Sending-Group/Tab).
          type: string
        allowSigningRadioDeselectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSocialIdLogin:
          description: Deprecated.
          type: string
        allowSocialIdLoginMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSupplementalDocuments:
          description: When **true**, this user can include supplemental documents.
          type: string
        allowSupplementalDocumentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowUsersToAccessDirectory:
          description: ""
          type: string
        allowUsersToAccessDirectoryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowValueInsights:
          description: ""
          type: string
        allowValueInsightsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        anchorPopulationScope:
          description: |+
            This property determines how template anchor tabs are applied.

            Valid values are:

            - `document`: Anchor tabs are applied only to the document that you specify. 
            - `envelope`: Anchor tabs are applied to all of the documents in the envelope associated with the template.

            **Note**: When you are using the `anchorPopulationScope` property with a Composite Template, the value `document` is supported only with a single server template and a single inline template.

          type: string
        anchorPopulationScopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        anchorTagVersionedPlacementEnabled:
          description: |
            Reserved for DocuSign.
          type: string
        anchorTagVersionedPlacementMetadataEnabled:
          $ref: "#/components/schemas/settingsMetadata"
        attachCompletedEnvelope:
          description: |-
            When set to **true**, envelope documents are included as a PDF file attachment to "signing completed" emails.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        attachCompletedEnvelopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        authenticationCheck:
          description: |
            Sets when authentication checks are applied for recipient envelope access. This setting only applies to the following ID checks: 

            - Phone Authentication
            - SMS Authentication
            - Knowledge-Based ID

            This setting takes one of the following options: 

            - `initial_access`: The authentication check always applies the first time a recipient accesses the documents. Recipients are not asked to authenticate again when they access the documents from the same browser on the same device. If the recipient attempts to access the documents from a different browser or a different device, the recipient must pass authentication again. Once authenticated, that recipient is not challenged again on the new device or browser. The ability for a recipient to skip authentication for documents is limited to documents sent from the same sending account.
            - `each_access`: Authentication checks apply every time a recipient attempts to access the envelope. However, you can configure the Authentication Expiration setting to allow recipients to skip authentication when they have recently passed authentication by setting a variable time frame.

            **Note**: Only Admin users can change this setting.
          type: string
        authenticationCheckMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        autoNavRule:
          description: |
            Specifies how auto-navigation works.
            Valid values are:

            - `off`
            - `required_fields`
            - `required_and_blank_fields`
            - `all_fields`
            - `page_then_required_fields`
            - `page_then_required_and_blank_fields`
            - `page_then_all_fields`
          type: string
        autoNavRuleMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        autoProvisionSignerAccount:
          description: Boolean that specifies whether to automatically provision a user membership in the account for accountless recipients. (Also known as Just-in-Time provisioning.)
          type: string
        autoProvisionSignerAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        bccEmailArchive:
          description: Boolean that specifies whether BCC for Email Archive is enabled for the account. BCC for Email Archive allows you to set up an archive email address so that a BCC copy of an envelope is sent only to that address.
          type: string
        bccEmailArchiveMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        betaSwitchConfiguration:
          description: |
            Reserved for DocuSign.
          type: string
        betaSwitchConfigurationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        billingAddress:
          $ref: "#/components/schemas/addressInformation"
        billingAddressMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        bulkSend:
          description: When **true**, this user can use the bulk send feature for the account.
          type: string
        bulkSendMaxCopiesInBatch:
          description: ""
          type: string
        bulkSendMaxUnprocessedEnvelopesCount:
          description: ""
          type: string
        bulkSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canSelfBrandSend:
          description: When set to **true**, account administrators can self-brand their sending console through the DocuSign console.
          type: string
        canSelfBrandSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canSelfBrandSign:
          description: When set to **true**, account administrators can self-brand their signing console through the DocuSign console.
          type: string
        canSelfBrandSignMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canUseSalesforceOAuth:
          description: ""
          type: string
        canUseSalesforceOAuthMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        captureVoiceRecording:
          description: Reserved for DocuSign.
          type: string
        captureVoiceRecordingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        cfrUseWideImage:
          description: Boolean that specifies whether to use a shorter/wider format when generating the CFR Part 11 signature image.
          type: string
        cfrUseWideImageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkForMultipleAdminsOnAccount:
          description: ""
          type: string
        checkForMultipleAdminsOnAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        chromeSignatureEnabled:
          description: Boolean that specifies whether the signers of the envelopes from this account use a signature with a DocuSign chrome around it or not.
          type: string
        chromeSignatureEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        commentEmailShowMessageText:
          description: |-
            When set to **true**, the text of comments is included in email notifications when a comment is posted.

            **Note**:  If the envelope requires additional recipient authentication, comment text is not included.
          type: string
        commentEmailShowMessageTextMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        commentsAllowEnvelopeOverride:
          description: When set to **true** and comments are enabled for the account, senders can disable comments for an envelope through the **Advanced Options** menu that appears during the sending process.
          type: string
        commentsAllowEnvelopeOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        conditionalFieldsEnabled:
          description: |-
            When set to **true**, conditional fields can be used in documents.

            **Note**: Only Admin users can change this setting.
          type: string
        conditionalFieldsEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        consumerDisclosureFrequency:
          description: |
            Speficies how often to display the consumer disclosure.

            Valid values are:

            - `once`: Per account, the supplemental document is displayed once only per `userId`. 
            - `always`: Per envelope, the supplemental document is displayed once only per `userId`. 
            - `each_access`: Per envelope, the supplemental document is displayed once only per `recipientId`.
          type: string
        consumerDisclosureFrequencyMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        convertPdfFields:
          description: Boolean that specifies whether to enable PDF form fields to get converted to DocuSign secure fields when the document is added or uploaded to an envelope.
          type: string
        convertPdfFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        dataPopulationScope:
          description: |-
            Specifies how data is shared for tabs with the same tabLabel. Valid values are:

            - `document`: Tabs in a document with the same label populate with the same data.
            - `envelope`: Tabs in all documents in the envelope with the same label populate with the same data.

            This setting applies to the following tab types: 

            - Check box 
            - Company
            - Data field
            - Drop-down list
            - Full name 
            - Formula
            - Note
            - Title

            **Note**: Only Admin users can change this setting. Changing this setting affects envelopes that have been sent but not completed.                                                                                                                                                                                                                 
          type: string
        dataPopulationScopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableAutoTemplateMatching:
          description: ""
          type: string
        disableAutoTemplateMatchingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableMobileApp:
          description: When **true**, the mobile app distributor key is prevented from connecting for account users.
          type: string
        disableMobileAppMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableMobilePushNotifications:
          description: |-
            When set to **true**, push notifications are disabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        disableMobilePushNotificationsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableMobileSending:
          description: |-
            When set to **true**, sending from a mobile application is disabled.

            **Note**: Only Admin users can change this setting.
          type: string
        disableMobileSendingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableMultipleSessions:
          description: |-
            When set to **true**, account users cannot be logged into multiple sessions at the same time.

            **Note**: Only Admin users can change this setting.
          type: string
        disableMultipleSessionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disablePurgeNotificationsForSenderMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableSignerCertView:
          description: When **true**, signers cannot view certificates of completion.
          type: string
        disableSignerCertViewMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableSignerHistoryView:
          description: When **true**, signers cannot view envelope history.
          type: string
        disableSignerHistoryViewMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableStyleSignature:
          description: "When **true**, the **Select Style** option is hidden from signers and they must draw their signature instead. "
          type: string
        disableStyleSignatureMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableUploadSignature:
          description: |-
            When set to **true**, signers cannot upload custom image files of their signature and initials.

            **Note**: Only Admin users can change this setting.
          type: string
        disableUploadSignatureMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableUserSharing:
          description: When **true**, the User Sharing feature is disabled for the account.
          type: string
        disableUserSharingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        displayBetaSwitch:
          description: Boolean that specifies whether to display a Beta switch for your app.
          type: string
        displayBetaSwitchMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        documentConversionRestrictions:
          description: |
            Sets the account document upload restriction for non-account administrators. Valid values are:

            - `no_restrictions`: There are no restrictions on the type of documents that can be uploaded.
            - `allow_pdf_only`: Non-administrators can only upload PDF files.
            - `no_upload`: Non-administrators cannot upload files.

            **Note**: Only Admin users can change this setting.
          type: string
        documentConversionRestrictionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        documentRetention:
          description: Sets a document retention period, which controls the number of days that DocuSign retains documents after they have reached a completed,declined, or voided state. When document retention is enabled for the account, the default value is `356` days.
          type: string
        documentRetentionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        documentRetentionPurgeTabs:
          description: |-
            When set to **true** and `documentRetention` is set, document fields and metadata are also purged after the document retention period ends. The default value is **false**.

            **Note**: Only Admins can change this setting.
          type: string
        documentVisibility:
          description: |-
            Configures the Document Visibility feature for the account. Valid values are:

            - `Off`: Document Visibility is not active for the account.
            - `MustSignToViewUnlessSenderAccount`: Document Visibility is enabled for all envelopes sent from the account. Any member of the sending account can view all of the documents in an envelope.
            - `MustSignToViewUnlessSender`: Document Visibility is enabled for all envelopes sent from the account. Only the sender can view all of the documents in an envelope.
            - `SenderCanSetMustSignToViewUnlessSenderAccount`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents within it are still visible to any member of the sending account.
            Vd- `SenderCanSetMustSignToViewUnlessSender`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents in the envelope are visible only to the sender.

            **Note**: For this configuration to take effect, `allowDocumentVisibility` must be set to **true**.
          type: string
        documentVisibilityMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        emailTemplateVersion:
          description: Specifies the version of the email templates used in an account. If new signing is selected in a member's Admin page, the user is updated to the newest version (1.1), the minimum version of email supported for the account.
          type: string
        emailTemplateVersionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAccessCodeGenerator:
          description: When **true**, enables Access Code Generator on the account.
          type: string
        enableAccessCodeGeneratorMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAdvancedPayments:
          description: When **true**, enables Advanced Payments for the account.
          type: string
        enableAdvancedPaymentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAdvancedPowerForms:
          description: When **true**, enables advanced PowerForms for the account.
          type: string
        enableAdvancedPowerFormsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAgreementActionsForCLM:
          description: ""
          type: string
        enableAgreementActionsForCLMMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAgreementActionsForESign:
          description: ""
          type: string
        enableAgreementActionsForESignMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAutoNav:
          description: |-
            When **true**, enables the account to set the AutoNav rule setting, which enables a sender to override the auto-navigation setting per envelope.

            **Note**: To change this setting, you must be a SysAdmin user or `EnableAutoNavByDSAdmin must be set.
          type: string
        enableAutoNavMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableCalculatedFields:
          description: |-
            When set to **true**, calculated fields are enabled for the account. 

            **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowExpression` is set to **true**.
          type: string
        enableCalculatedFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableClickwraps:
          description: Boolean that specifies whether clickwraps are enabled in your app. A [clickwrap](https://developers.docusign.com/click-api/guides/) is an iframe that you embed in your own website or app.
          type: string
        enableClickwrapsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableCommentsHistoryDownloadInSigning:
          description: ""
          type: string
        enableCommentsHistoryDownloadInSigningMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableCustomerSatisfactionMetricTracking:
          description: When **true**, enables customer satisfaction metric tracking for the account.
          type: string
        enableCustomerSatisfactionMetricTrackingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableDSPro:
          description: Reserved for DocuSign.
          type: string
        enableDSProMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableEnvelopeStampingByAccountAdmin:
          description: |-
            When set to **true**, enables the account administrator to control envelope stamping for an account (stamping the `envelopeId` in the the document margins).

            **Note**: This setting can be changed only by Admin users, and only if the account-level setting `enableEnvelopeStampingByDSAdmin` is set to **true**.
          type: string
        enableEnvelopeStampingByAccountAdminMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableEnvelopeStampingByDSAdmin:
          description: When **true**, enables the DocuSign administrator to control envelope stamping for an account (placement of the `envelopeId`).
          type: string
        enableEnvelopeStampingByDSAdminMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableEsignCommunities:
          description: ""
          type: string
        enableEsignCommunitiesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableInBrowserEditor:
          description: ""
          type: string
        enableInBrowserEditorMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enablePaymentProcessing:
          description: |-
            When set to **true**, payment processing is enabled for this account.

            **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowPaymentProcessing` is set.
          type: string
        enablePaymentProcessingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enablePowerForm:
          description: |-
            When set to **true**, enables PowerForms for the account.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enablePowerFormDirect:
          description: |-
            When set to **true**, enables direct PowerForms for an account. Direct PowerForms are in-session PowerForms.

            **Note**: Only Admin users can change this setting.
          type: string
        enablePowerFormDirectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enablePowerFormMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableRecipientDomainValidation:
          description: Reserved for DocuSign.
          type: string
        enableRecipientDomainValidationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableReportLinks:
          description: |-
            Enables direct links to envelopes in reports for administrators in the following scopes:
            - `NoEnvelopes`
            - `AllEnvelopes`
            - `OnlyOwnEnvelopes`
          type: string
        enableReportLinksMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableRequireSignOnPaper:
          description: |
            When set to **true**, the account can use the `requireSignOnPaper` option.

            **Note**: Only Admin users can change this setting.
          type: string
        enableRequireSignOnPaperMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableReservedDomain:
          description: |-
            When **true**, account administrators can reserve a web domain and users. Domains are organization-specific reserved internet domains, such as `@exampledomain.com`. You can define policy settings for users of each reserved domain within your organization, export lists of domain users for audit purposes, and manage domain users.

            - Domains may be claimed by an organization.
            - When a domain is claimed by an organization, all users within that domain are added to the organization, even if they have trial or free accounts.
            - You can set domain controls for all users of the domain.
            - You can export information about your organization’s users that are associated with your reserved domains.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableReservedDomainMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableResponsiveSigning:
          description: When **true**, enables responsive signing.
          type: string
        enableResponsiveSigningMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSMSAuthentication:
          description: |
            When set to **true**, the account can use SMS authentication.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSMSAuthenticationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableScheduledRelease:
          description: When set to **true**, scheduled releases are enabled. The default value is **false**.
          type: string
        enableScheduledReleaseMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSearch:
          description: ""
          type: string
        enableSearchMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSearchUI:
          description: ""
          type: string
        enableSearchUIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSendToAgent:
          description: |
            When **true**, this account can use the Agent recipient type.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableSendToAgentMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSendToIntermediary:
          description: |
            When set to **true**, this account can use the Intermediary recipient type.

            **Note**: Only Admin users can change this setting, and only if `allowSendToIntermediary` is set.
          type: string
        enableSendToIntermediaryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSendToManage:
          description: |
            When set to **true**, this account can use the Editor recipient type.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSendToManageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSendingTagsFontSettings:
          description: When **true**, enables fonts to be set on tags for the account.
          type: string
        enableSendingTagsFontSettingsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSequentialSigningAPI:
          description: |-
            When set to **true**, the account can define the routing
            order of recipients for envelopes sent by using the eSignature API.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableSequentialSigningAPIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSequentialSigningUI:
          description: |
            When set to **true**, the account can define the routing order
            of recipients for envelopes sent by using the DocuSign application.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableSequentialSigningUIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignOnPaper:
          description: |
            When set to **true**, a sender can allow signers to use the sign on paper option.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSignOnPaperMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignOnPaperOverride:
          description: |-
            When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSignOnPaperOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignWithNotary:
          description: |-
            When set to **true**, Sign with Notary functionality is enabled for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSignWithNotaryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignerAttachments:
          description: |-
            When set to **true**, users can use the signing attachments feature to request attachments from signers.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSignerAttachmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSigningExtensionComments:
          description: When set to **true**, enables comments for the account so that signers and recipients can make and respond to comments in documents belonging to the envelopes that they are sent.
          type: string
        enableSigningExtensionCommentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSigningExtensionConversations:
          description: When **true**, enables conversation functionality.
          type: string
        enableSigningExtensionConversationsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSigningOrderSettingsForAccount:
          description: When **true**, switches Signing Order to On by default for new envelopes.
          type: string
        enableSigningOrderSettingsForAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSmartContracts:
          description: When set to **true**, blockchain-based [Smart Contracts](https://www.docusign.com/products/blockchain) are enabled. The default value is **false**.
          type: string
        enableSmartContractsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSocialIdLogin:
          description: Deprecated.
          type: string
        enableSocialIdLoginMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableStrikeThrough:
          description: When **true**, enables strikethrough formatting in documents.
          type: string
        enableStrikeThroughMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableTransactionPoint:
          description: Reserved for DocuSign.
          type: string
        enableTransactionPointMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableVaulting:
          description: When set to **true**, Vaulting is enabled for the account.
          type: string
        enableVaultingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableWitnessing:
          description: Reserved for DocuSign.
          type: string
        enableWitnessingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enforceTemplateNameUniqueness:
          description: When **true**, the template name must be unique.
          type: string
        enforceTemplateNameUniquenessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        envelopeIntegrationAllowed:
          description: |-
            Shows the envelope integration rule for the account, which indicates whether custom admins can enable Connect for their accounts. Enumeration values are: 

            - `not_allowed`
            - `full` 

            **Note**: Only SysAdmin users can change this setting.                                                                                 
          type: string
        envelopeIntegrationAllowedMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        envelopeIntegrationEnabled:
          description: |-
            When **true**, enables Connect for an account. Note that Connect integration requires additional configuration that must be set up for it to take effect; this switch is only the on/off control for the account.

            **Note**: Only Admin users can change this setting, and only when `envelopeIntegrationAllowed` is set.
          type: string
        envelopeIntegrationEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        envelopeStampingDefaultValue:
          description: When set to **true**, envelopes sent by this account automatically have the envelope ID stamped in the document margins, unless the sender selects not to have the documents stamped.
          type: string
        envelopeStampingDefaultValueMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        expressSend:
          description: Boolean that specifies whether a member of an account can express send (without tags) or must send with tags on documents.
          type: string
        expressSendAllowTabs:
          description: Boolean that specifies whether a member of an account can send templates without the tags being stripped out, even when the account is configured to let its users express send only (they cannot use the tagger).
          type: string
        expressSendAllowTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        expressSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        externalDocumentSources:
          $ref: "#/components/schemas/externalDocumentSources"
        externalSignaturePadType:
          description: |
            Specifies the signature pad type.
            Valid values are:

            - `none`
            - `topaz`
            - `e_padv9`
            - `e_pad_integrisign`
            - `topaz_sigplusextlite`

            **Note**: Only Admin users can change this setting.
          type: string
        externalSignaturePadTypeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        faxOutEnabled:
          description: |-
            When set to **true**, fax delivery to recipients is allowed for the account.

            **Note**: Only Admin users can change this setting.
          type: string
        faxOutEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        guidedFormsHtmlAllowed:
          description: When set to **true**, HTML used to implement [Guided Forms](https://www.docusign.com/products/guided-forms) is enabled for the account.
          type: string
        guidedFormsHtmlAllowedMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        hideAccountAddressInCoC:
          description: Boolean that specifies whether to hide the account address in the Certificate of Completion.
          type: string
        hideAccountAddressInCoCMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        hidePricing:
          description: Boolean that specifies whether to hide the pricing functionality for an account.
          type: string
        hidePricingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        idCheckConfigurations:
          description: A list of ID check configuration objects.
          items:
            $ref: "#/components/schemas/idCheckConfiguration"
          type: array
        idCheckExpire:
          description: |-
            Determines when a user's authentication with the account expires. Valid values are:

            - `always`: Users are required to authenticate each time.
            - `variable`: If the authentication for a user is valid and falls within the value for the `idCheckExpireDays` property, the user is not required to authenticate again.

            **Note**: Only Admin users can change this setting.
          type: string
        idCheckExpireDays:
          description: |-
            The number of days before user authentication credentials expire. A value of `0` specifies that users must re-authenticate for each new session.

            **Note**: Only Admin users can change this setting.
          type: string
        idCheckExpireDaysMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        idCheckExpireMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        idCheckExpireMinutes:
          description: The number of minutes before user authentication credentials expire.
          type: string
        idCheckExpireMinutesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        idCheckRequired:
          description: |-
            Indicates if authentication is configured for the account. Valid values are:

            - `always`: Authentication checks are performed on every envelope.
            - `never`: Authentication checks are not performed on any envelopes.
            - `optional`: Authentication is configurable per envelope.

            **Note**: Only Admin users can change this setting.
          type: string
        idCheckRequiredMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        identityVerification:
          description: " "
          items:
            $ref: "#/components/schemas/accountIdentityVerificationWorkflow"
          type: array
        identityVerificationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        ignoreErrorIfAnchorTabNotFound:
          description: Reserved for DocuSign.
          type: string
        ignoreErrorIfAnchorTabNotFoundMetadataEnabled:
          $ref: "#/components/schemas/settingsMetadata"
        inPersonIDCheckQuestion:
          description: |-
            A text field containing the question that an in-person signing host uses to collect personal information from the recipient. The recipient's response to this question is saved and can be viewed in the certificate associated with the envelope.

            **Note**: Only Admin users can change this setting.
          type: string
        inPersonIDCheckQuestionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        inPersonSigningEnabled:
          description: When **true**, in-person signing is enabled for the account.
          type: string
        inPersonSigningEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        inSessionEnabled:
          description: |-
            When **true**, the account can send in-session (embedded) envelopes.

            **Note**: Only Admin users can change this setting.
          type: string
        inSessionEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        inSessionSuppressEmails:
          description: |-
            When set to **true**, emails are not sent to the in-session (embedded) recipients on an envelope.

            **Note**: Only Admin users can change this setting.
          type: string
        inSessionSuppressEmailsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        maxNumberOfCustomStamps:
          description: The maximum number of custom stamps.
          type: string
        maximumSigningGroups:
          description: |-
            The maximum number of signing groups allowed on the account. The default value is `50`. This setting is only shown in responses that list account settings.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        maximumSigningGroupsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        maximumUsersPerSigningGroup:
          description: |-
            The maximum number of users per signing group. The default value is `50`. This setting is only shown in responses that list account settings.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        maximumUsersPerSigningGroupMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        mobileSessionTimeout:
          description: |-
            The number of minutes of inactivity before a mobile user is automatically logged out of the system. Valid values are `1` to `120` minutes. The default value is `20` minutes.

            **Note**: Only Admin users can change this setting.
          type: string
        mobileSessionTimeoutMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        numberOfActiveCustomStamps:
          description: The number of active custom stamps associated with the account. DocuSign calculates this number automatically. This property is only visible to the DocuSign account manager.
          type: string
        optInMobileSigningV02:
          description: Boolean that specifies whether to opt in for Signing v02 on Mobile Devices functionality.
          type: string
        optInMobileSigningV02Metadata:
          $ref: "#/components/schemas/settingsMetadata"
        optOutAutoNavTextAndTabColorUpdates:
          description: Boolean that allows envelope senders to opt out of the recipient signing auto-navigation feature and opt out of updating tab font color.
          type: string
        optOutAutoNavTextAndTabColorUpdatesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        optOutNewPlatformSeal:
          description: Boolean that specifies whether to allow envelope senders to opt out of using the new platform seal.
          type: string
        optOutNewPlatformSealPlatformMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        phoneAuthRecipientMayProvidePhoneNumber:
          description: |-
            When set to **true**, senders can allow recipients to provide a phone number for the Phone Authentication process.

            **Note**: Only Admin users can change this setting.
          type: string
        phoneAuthRecipientMayProvidePhoneNumberMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        pkiSignDownloadedPDFDocs:
          description: |
            The policy for adding a digital certificate to downloaded, printed, and emailed documents. 

            Possible values are: 

            - `no_sign`
            - `no_sign_allow_user_override`
            - `yes_sign` (Specifies that PDF files downloaded from the platform are signed.)

            **Note**: Only Admin users can change this setting.
          type: string
        pkiSignDownloadedPDFDocsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        recipientSigningAutoNavigationControl:
          description: |
            When set to **true**, recipients receiving envelopes from this account can override auto-navigation functionality.

            **Note**: Only Admin users can change this setting.
          type: string
        recipientSigningAutoNavigationControlMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        recipientsCanSignOffline:
          description: |
            When set to **true**,
            recipients receiving envelopes from this account
            can sign offline.

            **Note**: Only Admin users can change this setting.
          type: string
        recipientsCanSignOfflineMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        require21CFRpt11Compliance:
          description: |
            When set to **true**,
            recipients are required
            to use a 21 CFR part 11-compliant signing experience.

            **Note**: Only Admin users can change this setting.
          type: string
        require21CFRpt11ComplianceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        requireDeclineReason:
          description: |
            When set to **true**, signers who decline to sign an envelope sent from this account
            are required to provide a reason for declining.

            **Note**: Only Admin users can change this setting.
          type: string
        requireDeclineReasonMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        requireExternalUserManagement:
          description: |
            When set to **true**, the account requires external management of users.

            **Note**: Only Admin users can change this setting.
          type: string
        requireExternalUserManagementMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        requireSignerCertificateType:
          description: |
            Sets the Digital Signature certificate requirements for sending envelopes.
            Valid values are:

            - `none`: A Digital Signature certificate is not required.
            - `docusign_express`: Signers must use a DocuSign Express certificate.
            - `docusign_personal`: Signers must use a DocuSign personal certificate.
            - `safe`
            - `open_trust`: Signers must use an OpenTrust certificate.
          type: string
        requireSignerCertificateTypeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        rsaVeridAccountName:
          description: |
            The RSA account name.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
          type: string
        rsaVeridPassword:
          description: |
            The password for the RSA account.


            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
          type: string
        rsaVeridRuleset:
          description: |
            The RSA rule set used with the account.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
          type: string
        rsaVeridUserId:
          description: |
            The user ID for the RSA account.

            **Note**:
            Only Admin users can change this setting. Modifying this value may disrupt
            your ID Check capability.
            Ensure you have the correct value before changing it.
          type: string
        selfSignedRecipientEmailDocument:
          description: |
            Sets how self-signed documents are presented to the email recipients.
            Valid values are:

            - `include_pdf`: A PDF of the completed document is attached to the email.
            - `include_link`: A secure link to the self-signed documents is included
               in the email.

            **Note**: Only Admin users can change this setting.
          type: string
        selfSignedRecipientEmailDocumentMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        selfSignedRecipientEmailDocumentUserOverride:
          description: |
            When set to **true**, the `selfSignedRecipientEmailDocument` user setting
            can be set for an individual user.
            The user setting overrides the account setting.

            **Note**: Only Admin users can change this account setting.
          type: string
        selfSignedRecipientEmailDocumentUserOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sendToCertifiedDeliveryEnabled:
          description: |
            When true,
            the account can use the
            certified deliveries recipient type.
          type: string
        sendToCertifiedDeliveryEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderCanSignInEachLocation:
          description: |
            When set to **true**, a signer can draw their signature in each
            location where a sign or initial tab exists. This functionality
            is typically used for mobile signing.

            **Note**: Only Admin users can change this setting.
          type: string
        senderCanSignInEachLocationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderMustAuthenticateSigning:
          description: |
            When set to **true**, a sender who is also a recipient of an envelope
            must follow the authentication requirements for the envelope.

            **Note**: Only Admin users can change this setting.
          type: string
        senderMustAuthenticateSigningMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sendingTagsFontColor:
          description: |
            The account-wide default font color to use for the content of the tab.

            Valid values are:

            - `Black`
            - `BrightBlue`
            - `BrightRed`
            - `DarkGreen`
            - `DarkRed`
            - `Gold`
            - `Green`
            - `NavyBlue`
            - `Purple`
            - `White`
          type: string
        sendingTagsFontColorMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sendingTagsFontName:
          description: |-
            The account-wide default font to be used for the tab value. Supported fonts include:

            - `Default`
            - `Arial`
            - `ArialNarrow`
            - `Calibri`
            - `CourierNew`
            - `Garamond`
            - `Georgia`
            - `Helvetica`
            - `LucidaConsole`
            - `MSGothic`
            - `MSMincho`
            - `OCR-A`
            - `Tahoma`
            - `TimesNewRoman`
            - `Trebuchet`
            - `Verdana`
          type: string
        sendingTagsFontNameMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sendingTagsFontSize:
          description: |-
            The account-wide default font size used for the information in the tab:

            - `Size7`
            - `Size8`
            - `Size9`
            - `Size10`
            - `Size11`
            - `Size12`
            - `Size14`
            - `Size16`
            - `Size18`
            - `Size20`
            - `Size22`
            - `Size24`
            - `Size26`
            - `Size28`
            - `Size36`
            - `Size48`
            - `Size72`
          type: string
        sendingTagsFontSizeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sessionTimeout:
          description: |
            The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes.
          type: string
        sessionTimeoutMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        setRecipEmailLang:
          description: |
            When set to **true**, senders can set the email language to use for
            each recipient.

            **Note**: Only Admin users can change this setting.
          type: string
        setRecipEmailLangMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        setRecipSignLang:
          description: |
            If **true**,
            setting a unique language for a recipient
            not only affects the email language, but also the signing
            language they are presented with. If **false**, only the email will
            be affected when the sender specifies a unique language for a
            recipient.

            **Note**: Only Admin users can change this setting.
          type: string
        setRecipSignLangMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sharedTemplateFolders:
          description: Boolean that specifies whether an account can use Shared Template Folders.
          type: string
        sharedTemplateFoldersMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        showCompleteDialogInEmbeddedSession:
          description: Boolean that specifies whether complete dialogs are displayed directly within an application in embedded signing sessions.
          type: string
        showCompleteDialogInEmbeddedSessionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        showConditionalRoutingOnSend:
          description: When set to **true**, Conditional Routing options display to senders during the sending experience.
          type: string
        showConditionalRoutingOnSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        showInitialConditionalFields:
          description: Boolean that specifies whether conditional field options are initially displayed (before a user makes entries).
          type: string
        showInitialConditionalFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        showLocalizedWatermarks:
          description: Boolean that specifies whether localized watermarks are displayed.
          type: string
        showLocalizedWatermarksMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        showTutorials:
          description: |
            If **true**,
            show tutorials.
          type: string
        showTutorialsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signDateFormat:
          description: |
            The format for the signature date. Valid values are:

            - `d/M/yyyy`
            - `dd-MM-yy`
            - `dd-MMM-yy`
            - `dd-MM-yyyy`
            - `dd.MM.yyyy`
            - `dd-MMM-yyyy`
            - `dd MMMM yyyy`
            - `M/d/yyyy`
            - `MM-dd-yyyy`
            - `MM/dd/yyyy`
            - `MM/dd/yy`
            - `MMM-dd-yyyy`
            - `MMM d, yyyy`
            - `MMMM d, yyyy`
            - `yyyy-MM-dd`
            - `yyyy-MMM-dd`
            - `yyyy/MM/dd`
            - `yyyy MMMM d`

            **Note**: Only Admin users can change this setting.
          type: string
        signDateFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signTimeFormat:
          description: |
            The format for the signature time. Valid values are:

            - `none`
            - `HH:mm`
            - `h:mm`
            - `HH:mm:ss`
            - `h:mm:ss`
          type: string
        signTimeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signTimeShowAmPm:
          description: |
            If **true**,
            the time shows the AM or PM indicator.
          type: string
        signTimeShowAmPmMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signatureProviders:
          description: Names of electronic or digital signature providers that can be used.
          items:
            type: string
          type: array
        signatureProvidersMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerAttachCertificateToEnvelopePDF:
          description: |
            When set to **true**,
            the Certificate of Completion is included in the PDF of the envelope documents
            when it is downloaded.

            **Note**: Only Admin users can change this setting.
          type: string
        signerAttachCertificateToEnvelopePDFMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerAttachConcat:
          description: |
            When set to **true**, signer attachments are added to the parent document
            that contains the attachment.
            The default behavior creates
            a new document in the envelope for every signer attachment.

            **Note**: Only Admin users can change this setting.
          type: string
        signerAttachConcatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerCanCreateAccount:
          description: |
            When set to **true**,
            a signer can create a DocuSign account
            after signing.

            **Note**: Only Admin users can change this setting.
          type: string
        signerCanCreateAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signerCanSignOnMobileMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerInSessionUseEnvelopeCompleteEmail:
          description: |
            When set to **true**, an "envelope complete" email is sent to an in-session
            (embedded) or offline signer after DocuSign processes the envelope
            if in-session emails are not suppressed.

            **Note**: Only Admin users can change this setting.
          type: string
        signerInSessionUseEnvelopeCompleteEmailMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerLoginRequirements:
          description: |
            Sets the login requirements for signers. Valid values are:

            - `login_not_required`: Signers are not required to log in.
            - `login_required_if_account_holder`: If the signer has a DocuSign account,
              they must log in to sign the document.
            - `login_required_per_session`: The sender cannot send an envelope to anyone
              who does not have a DocuSign account.
            - `login_required_per_envelope`: The sender cannot send an envelope to anyone
              who does not have a DocuSign account, and the signer must also log in for
              each envelope they will sign.


            **Note**: Only Admin users can change this setting. If you use Direct PowerForms
            or captive (embedded signers), the "Account required" settings are bypassed for
            those signers. If your workflow requires that the signer have an account,
            you should not use those methods.
          type: string
        signerLoginRequirementsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerMustHaveAccount:
          description: |
            When set to **true**, senders can only send an envelope to a recipient
            that has a DocuSign account.

            **Note**: Only Account Administrators can change this setting.
          type: string
        signerMustHaveAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerMustLoginToSign:
          description: |
            When set to **true**,
            signers must log in to the DocuSign platform to sign an envelope.

            **Note**: Only Admin users can change this setting.
          type: string
        signerMustLoginToSignMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signerShowSecureFieldInitialValues:
          description: |
            When set to **true**, the initial values of all SecureFields are written
            to the document when it is sent.

            **Note**: Only Admin users can change this setting.
          type: string
        signerShowSecureFieldInitialValuesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signingSessionTimeout:
          description: |
            The number of minutes
            that a signing session stays
            alive without any activity.
          type: string
        signingSessionTimeoutMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signingUiVersion:
          description: |
            Reserved for DocuSign.
          type: string
        signingUiVersionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        simplifiedSendingEnabled:
          description: When set to **true**, simplified sending is enabled for the account. The default value is **false**.
          type: string
        simplifiedSendingEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        singleSignOnEnabled:
          description: |
            If **true**,
            single sign-on (SSO) is enabled.
          type: string
        singleSignOnEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        skipAuthCompletedEnvelopes:
          description: |
            If **true**,
            do not require authentication prompt for viewing completed envelopes
          type: string
        skipAuthCompletedEnvelopesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        socialIdRecipAuth:
          description: |
            If **true**,
            recipients can use
            [social ids](https://support.docusign.com/guides/signer-authentication)
            when signing
          type: string
        socialIdRecipAuthMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        specifyDocumentVisibility:
          description: |
            When **true**, senders can specify the visibility of the documents in an envelope at the recipient level.
          type: string
        specifyDocumentVisibilityMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        startInAdvancedCorrect:
          description: |
            If **true**,
            when initiating correction of an in-flight envelope
            the sender starts in advanced correct mode.
          type: string
        startInAdvancedCorrectMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustAccept:
          description: When set to **true**, account users must accept supplemental documents when signing.
          type: string
        supplementalDocumentsMustAcceptMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustRead:
          description: When set to **true**, account users must both view and accept supplemental documents when signing.
          type: string
        supplementalDocumentsMustReadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustView:
          description: When set to **true**, account users must view supplemental documents when signing.
          type: string
        supplementalDocumentsMustViewMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        suppressCertificateEnforcement:
          description: Boolean that specifies whether or not API calls require a x509 cert in the header of the call.
          type: string
        suppressCertificateEnforcementMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabAccountSettings:
          $ref: "#/components/schemas/tabAccountSettings"
        timezoneOffsetAPI:
          description: |
            Specifies the time zone
            to use with the API.

            Valid values are:

            - `TZ_01_AfghanistanStandardTime`
            - `TZ_02_AlaskanStandardTime`
            - `TZ_03_ArabStandardTime`
            - `TZ_04_ArabianStandardTime`
            - `TZ_05_ArabicStandardTime`
            - `TZ_06_ArgentinaStandardTime`
            - `TZ_07_AtlanticStandardTime`
            - `TZ_08_AUS_CentralStandardTime`
            - `TZ_09_AUS_EasternStandardTime`
            - `TZ_10_AzerbaijanStandardTime`
            - `TZ_11_AzoresStandardTime`
            - `TZ_12_BangladeshStandardTime`
            - `TZ_13_CanadaCentralStandardTime`
            - `TZ_14_CapeVerdeStandardTime`
            - `TZ_15_CaucasusStandardTime`
            - `TZ_16_CentralAustraliaStandardTime`
            - `TZ_17_CentralAmericaStandardTime`
            - `TZ_18_CentralAsiaStandardTime`
            - `TZ_19_CentralBrazilianStandardTime`
            - `TZ_20_CentralEuropeStandardTime`
            - `TZ_21_CentralEuropeanStandardTime`
            - `TZ_22_CentralPacificStandardTime`
            - `TZ_23_CentralStandardTime`
            - `TZ_24_CentralStandardTimeMexico`
            - `TZ_25_ChinaStandardTime`
            - `TZ_26_DatelineStandardTime`
            - `TZ_27_E_AfricaStandardTime`
            - `TZ_28_E_AustraliaStandardTime`
            - `TZ_29_E_EuropeStandardTime`
            - `TZ_30_E_SouthAmericaStandardTime`
            - `TZ_31_EasternStandardTime`
            - `TZ_32_EgyptStandardTime`
            - `TZ_33_EkaterinburgStandardTime`
            - `TZ_34_FijiStandardTime`
            - `TZ_35_FLE_StandardTime`
            - `TZ_36_GeorgianStandardTime`
            - `TZ_37_GMT_StandardTime`
            - `TZ_38_GreenlandStandardTime`
            - `TZ_39_GreenwichStandardTime`
            - `TZ_40_GTB_StandardTime`
            - `TZ_41_HawaiianStandardTime`
            - `TZ_42_IndiaStandardTime`
            - `TZ_43_IranStandardTime`
            - `TZ_44_IsraelStandardTime`
            - `TZ_45_JordanStandardTime`
            - `TZ_46_KaliningradStandardTime`
            - `TZ_47_KamchatkaStandardTime`
            - `TZ_48_KoreaStandardTime`
            - `TZ_49_MagadanStandardTime`
            - `TZ_50_MauritiusStandardTime`
            - `TZ_51_MidAtlanticStandardTime`
            - `TZ_52_MiddleEastStandardTime`
            - `TZ_53_MontevideoStandardTime`
            - `TZ_54_MoroccoStandardTime`
            - `TZ_55_MountainStandardTime`
            - `TZ_56_MountainStandardTimeMMexico`
            - `TZ_57_MyanmarStandardTime`
            - `TZ_58_N_CentralAsiaStandardTime`
            - `TZ_59_NamibiaStandardTime`
            - `TZ_60_NepalStandardTime`
            - `TZ_61_NewZealandStandardTime`
            - `TZ_62_NewfoundlandStandardTime`
            - `TZ_63_NorthAsiaEastStandardTime`
            - `TZ_64_NorthAsiaStandardTime`
            - `TZ_65_PacificSAStandardTime`
            - `TZ_66_PacificStandardTime`
            - `TZ_67_PacificStandardTimeMexico`
            - `TZ_68_PakistanStandardTime`
            - `TZ_69_ParaguayStandardTime`
            - `TZ_70_RomanceStandardTime`
            - `TZ_71_RussianStandardTime`
            - `TZ_72_SAEasternStandardTime`
            - `TZ_73_SAPacificStandardTime`
            - `TZ_74_SAWesternStandardTime`
            - `TZ_75_SamoaStandardTime`
            - `TZ_76_SE_AsiaStandardTime`
            - `TZ_77_SingaporeStandardTime`
            - `TZ_78_SouthAfricaStandardTime`
            - `TZ_79_SriLankaStandardTime`
            - `TZ_80_SyriaStandardTime`
            - `TZ_81_TaipeiStandardTime`
            - `TZ_82_TasmaniaStandardTime`
            - `TZ_83_TokyoStandardTime`
            - `TZ_84_TongaStandardTime`
            - `TZ_85_TurkeyStandardTime`
            - `TZ_86_UlaanbaatarStandardTime`
            - `TZ_87_US_EasternStandardTime`
            - `TZ_88_USMountainStandardTime`
            - `TZ_89_VenezuelaStandardTime`
            - `TZ_90_VladivostokStandardTime`
            - `TZ_91_W_AustraliaStandardTime`
            - `TZ_92_W_CentralAfricaStandardTime`
            - `TZ_93_W_EuropeStandardTime`
            - `TZ_94_WestAsiaStandardTime`
            - `TZ_95_WestPacificStandardTime`
            - `TZ_96_YakutskStandardTime`
          type: string
        timezoneOffsetAPIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneOffsetUI:
          description: |
            Specifies the time zone
            to use in the UI.

            Valid values are:

            - `TZ_01_AfghanistanStandardTime`
            - `TZ_02_AlaskanStandardTime`
            - `TZ_03_ArabStandardTime`
            - `TZ_04_ArabianStandardTime`
            - `TZ_05_ArabicStandardTime`
            - `TZ_06_ArgentinaStandardTime`
            - `TZ_07_AtlanticStandardTime`
            - `TZ_08_AUS_CentralStandardTime`
            - `TZ_09_AUS_EasternStandardTime`
            - `TZ_10_AzerbaijanStandardTime`
            - `TZ_11_AzoresStandardTime`
            - `TZ_12_BangladeshStandardTime`
            - `TZ_13_CanadaCentralStandardTime`
            - `TZ_14_CapeVerdeStandardTime`
            - `TZ_15_CaucasusStandardTime`
            - `TZ_16_CentralAustraliaStandardTime`
            - `TZ_17_CentralAmericaStandardTime`
            - `TZ_18_CentralAsiaStandardTime`
            - `TZ_19_CentralBrazilianStandardTime`
            - `TZ_20_CentralEuropeStandardTime`
            - `TZ_21_CentralEuropeanStandardTime`
            - `TZ_22_CentralPacificStandardTime`
            - `TZ_23_CentralStandardTime`
            - `TZ_24_CentralStandardTimeMexico`
            - `TZ_25_ChinaStandardTime`
            - `TZ_26_DatelineStandardTime`
            - `TZ_27_E_AfricaStandardTime`
            - `TZ_28_E_AustraliaStandardTime`
            - `TZ_29_E_EuropeStandardTime`
            - `TZ_30_E_SouthAmericaStandardTime`
            - `TZ_31_EasternStandardTime`
            - `TZ_32_EgyptStandardTime`
            - `TZ_33_EkaterinburgStandardTime`
            - `TZ_34_FijiStandardTime`
            - `TZ_35_FLE_StandardTime`
            - `TZ_36_GeorgianStandardTime`
            - `TZ_37_GMT_StandardTime`
            - `TZ_38_GreenlandStandardTime`
            - `TZ_39_GreenwichStandardTime`
            - `TZ_40_GTB_StandardTime`
            - `TZ_41_HawaiianStandardTime`
            - `TZ_42_IndiaStandardTime`
            - `TZ_43_IranStandardTime`
            - `TZ_44_IsraelStandardTime`
            - `TZ_45_JordanStandardTime`
            - `TZ_46_KaliningradStandardTime`
            - `TZ_47_KamchatkaStandardTime`
            - `TZ_48_KoreaStandardTime`
            - `TZ_49_MagadanStandardTime`
            - `TZ_50_MauritiusStandardTime`
            - `TZ_51_MidAtlanticStandardTime`
            - `TZ_52_MiddleEastStandardTime`
            - `TZ_53_MontevideoStandardTime`
            - `TZ_54_MoroccoStandardTime`
            - `TZ_55_MountainStandardTime`
            - `TZ_56_MountainStandardTimeMMexico`
            - `TZ_57_MyanmarStandardTime`
            - `TZ_58_N_CentralAsiaStandardTime`
            - `TZ_59_NamibiaStandardTime`
            - `TZ_60_NepalStandardTime`
            - `TZ_61_NewZealandStandardTime`
            - `TZ_62_NewfoundlandStandardTime`
            - `TZ_63_NorthAsiaEastStandardTime`
            - `TZ_64_NorthAsiaStandardTime`
            - `TZ_65_PacificSAStandardTime`
            - `TZ_66_PacificStandardTime`
            - `TZ_67_PacificStandardTimeMexico`
            - `TZ_68_PakistanStandardTime`
            - `TZ_69_ParaguayStandardTime`
            - `TZ_70_RomanceStandardTime`
            - `TZ_71_RussianStandardTime`
            - `TZ_72_SAEasternStandardTime`
            - `TZ_73_SAPacificStandardTime`
            - `TZ_74_SAWesternStandardTime`
            - `TZ_75_SamoaStandardTime`
            - `TZ_76_SE_AsiaStandardTime`
            - `TZ_77_SingaporeStandardTime`
            - `TZ_78_SouthAfricaStandardTime`
            - `TZ_79_SriLankaStandardTime`
            - `TZ_80_SyriaStandardTime`
            - `TZ_81_TaipeiStandardTime`
            - `TZ_82_TasmaniaStandardTime`
            - `TZ_83_TokyoStandardTime`
            - `TZ_84_TongaStandardTime`
            - `TZ_85_TurkeyStandardTime`
            - `TZ_86_UlaanbaatarStandardTime`
            - `TZ_87_US_EasternStandardTime`
            - `TZ_88_USMountainStandardTime`
            - `TZ_89_VenezuelaStandardTime`
            - `TZ_90_VladivostokStandardTime`
            - `TZ_91_W_AustraliaStandardTime`
            - `TZ_92_W_CentralAfricaStandardTime`
            - `TZ_93_W_EuropeStandardTime`
            - `TZ_94_WestAsiaStandardTime`
            - `TZ_95_WestPacificStandardTime`
            - `TZ_96_YakutskStandardTime`
          type: string
        timezoneOffsetUIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        universalSignatureOptIn:
          description: |
            Reserved for DocuSign.
          type: string
        useAccountLevelEmail:
          description: |
            Reserved for DocuSign.
          type: string
        useAccountLevelEmailMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useConsumerDisclosure:
          description: |
            When set to **true**, the account uses an Electronic Record and
            Signature Disclosure Statement.

            **Note**: Only Admin users can change this setting.
          type: string
        useConsumerDisclosureMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useConsumerDisclosureWithinAccount:
          description: When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
          type: string
        useConsumerDisclosureWithinAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useDerivedKeys:
          description: |
            Reserved for DocuSign.
          type: string
        useDerivedKeysMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useDocuSignExpressSignerCertificate:
          description: |
            If **true**,
            signers
            are required to use Express Digital Signatures.
          type: string
        useDocuSignExpressSignerCertificateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useMultiAppGroupsData:
          description: ""
          type: string
        useMultiAppGroupsDataMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useNewBlobForPdf:
          description: |
            Reserved for DocuSign.
          type: string
        useNewBlobForPdfMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useSAFESignerCertificates:
          description: |
            If **true**,
            signers are
            required to use SAFE digital signatures.
          type: string
        useSAFESignerCertificatesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        useSignatureProviderPlatform:
          description: Boolean that specifies whether the account uses the digital signature provider platform to eSign.
          type: string
        useSignatureProviderPlatformMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        usesAPI:
          description: |
            When set to **true**,
            the account can use the API.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        usesAPIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        validationsAllowed:
          description: Boolean that specifies whether validations on recipient email domains are allowed.
          type: string
        validationsAllowedMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        validationsBrand:
          description: |
            Valid values are:

            - `docusign`
            - `account`
          type: string
        validationsBrandMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        validationsCadence:
          description: |
            Valid values are:

            - `none`
            - `monthly`
          type: string
        validationsCadenceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        validationsEnabled:
          description: |
            If **true**,
            enables validations.
          type: string
        validationsEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        validationsReport:
          description: |
            Valid values are:

            - `none`
            - `life_sciences_part11`
          type: string
        validationsReportMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        waterMarkEnabled:
          description: |
            If **true**,
            the
            [watermark feature](https://support.docusign.com/en/articles/How-do-I-manage-the-watermark-for-In-Process-envelopes-sent-from-my-account)
            is enabled for the account.
          type: string
        waterMarkEnabledMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        writeReminderToEnvelopeHistory:
          description: |-
            If **true**,
            sent reminders are included in the envelope history.
          type: string
        writeReminderToEnvelopeHistoryMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        wurflMinAllowableScreenSize:
          description: The smallest screen allowed.
          type: string
        wurflMinAllowableScreenSizeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: accountSettingsInformation
      x-ms-summary: Contains account settings information. Used in requests to set property values. Used in responses to report property values.
    accountSharedAccess:
      description: Contains shared access information.
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        endPosition:
          description: "The last index position in the result set. "
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        sharedAccess:
          description: A list of shared access information of envelope and templates for the users specified in the request.
          items:
            $ref: "#/components/schemas/memberSharedItems"
          type: array
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: accountSharedAccess
      x-ms-summary: Contains shared access information.
    accountSignature:
      description: ""
      properties:
        adoptedDateTime:
          description: The UTC date and time when the user adopted the signature.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customField:
          description: ""
          type: string
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageBase64:
          description: ""
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        initials150ImageId:
          description: The ID of the user's initials image.
          type: string
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        nrdsStatus:
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signature150ImageId:
          description: The ID of the user's signature image.
          type: string
        signatureFont:
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
          type: string
        signatureGroups:
          description: ""
          items:
            $ref: "#/components/schemas/signatureGroup"
          type: array
        signatureId:
          description: Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        signatureInitials:
          description: Specifies the user's signature in initials format.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        signatureRights:
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
          type: string
        signatureType:
          description: Specifies the type of signature.
          type: string
        signatureUsers:
          description: ""
          items:
            $ref: "#/components/schemas/signatureUser"
          type: array
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampImageUri:
          description: The URI for retrieving the image of the user's stamp.
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-definition-name: accountSignature
      x-ms-summary: ""
    accountSignatureDefinition:
      description: ""
      properties:
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signatureFont:
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
          type: string
        signatureGroups:
          description: ""
          items:
            $ref: "#/components/schemas/signatureGroupDef"
          type: array
        signatureId:
          description: Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
          type: string
        signatureInitials:
          description: Specifies the user's signature in initials format.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        signatureUsers:
          description: ""
          items:
            $ref: "#/components/schemas/signatureUserDef"
          type: array
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
      type: object
      x-ds-definition-name: accountSignatureDefinition
      x-ms-summary: ""
    accountSignatureProvider:
      description: |
        Contains information abotu the signature provider associated with the Identity Verification workflow. 
        If empty, then this specific workflow is not intended for signers.
      properties:
        isRequired:
          description: Reserved for DocuSign.
          type: string
        priority:
          description: Reserved for DocuSign.
          type: string
        signatureProviderDisplayName:
          description: Reserved for DocuSign.
          type: string
        signatureProviderId:
          description: Reserved for DocuSign.
          type: string
        signatureProviderName:
          description: |+
            The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.

            Example: `universalsignaturepen_default`

          type: string
        signatureProviderOptionsMetadata:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/accountSignatureProviderOption"
          type: array
        signatureProviderRequiredOptions:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/signatureProviderRequiredOption"
          type: array
      type: object
      x-ds-definition-name: accountSignatureProvider
      x-ms-summary: |
        Contains information abotu the signature provider associated with the Identity Verification workflow. 
        If empty, then this specific workflow is not intended for signers.
    accountSignatureProviderOption:
      description: Reserved for DocuSign.
      properties:
        signatureProviderOptionDisplayName:
          description: Reserved for DocuSign.
          type: string
        signatureProviderOptionId:
          description: Reserved for DocuSign.
          type: string
        signatureProviderOptionName:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: accountSignatureProviderOption
      x-ms-summary: Reserved for DocuSign.
    accountSignatureProviders:
      description: ""
      properties:
        signatureProviders:
          description: Names of electronic or digital signature providers that can be used.
          items:
            $ref: "#/components/schemas/accountSignatureProvider"
          type: array
      type: object
      x-ds-definition-name: accountSignatureProviders
      x-ms-summary: ""
    accountSignaturesInformation:
      description: ""
      properties:
        accountSignatures:
          description: ""
          items:
            $ref: "#/components/schemas/accountSignature"
          type: array
      type: object
      x-ds-definition-name: accountSignaturesInformation
      x-ms-summary: ""
    accountUISettings:
      description: An object that defines the options that are available to non-administrators in the UI.
      properties:
        adminMessage:
          $ref: "#/components/schemas/adminMessage"
        askAnAdmin:
          $ref: "#/components/schemas/askAnAdmin"
        enableAdminMessage:
          description: ""
          type: string
        enableAdminMessageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableAdvancedPaymentsReactEdit:
          description: ""
          type: string
        enableEasySignCanUseMultiTemplateApply:
          description: ""
          type: string
        enableEasySignCanUseMultiTemplateApplyMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableEasySignTemplateUpload:
          description: ""
          type: string
        enableEasySignTemplateUploadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableEnvelopeCopyWithData:
          description: ""
          type: string
        enableEnvelopeCopyWithDataMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableLegacyHomepageLink:
          description: ""
          type: string
        enableLegacyHomepageLinkMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        hideSendAnEnvelope:
          description: ""
          type: string
        hideSendAnEnvelopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        hideUseATemplate:
          description: When set to **true**, the **Templates** menu is hidden from account users who are not Admins. The default value is **false**.
          type: string
        hideUseATemplateInPrepare:
          description: ""
          type: string
        hideUseATemplateInPrepareMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        hideUseATemplateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        orderBasedRecipientIdGeneration:
          description: ""
          type: string
        orderBasedRecipientIdGenerationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        removeEnvelopeForwarding:
          description: ""
          type: string
        removeEnvelopeForwardingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        shouldRedactAccessCode:
          description: ""
          type: string
        shouldRedactAccessCodeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        uploadNewImageToSignOrInitial:
          description: ""
          type: string
        uploadNewImageToSignOrInitialMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: accountUISettings
      x-ms-summary: An object that defines the options that are available to non-administrators in the UI.
    addOn:
      description: Contains information about add ons.
      properties:
        active:
          description: Reserved for DocuSign.
          type: string
        addOnId:
          description: Reserved for DocuSign.
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        name:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: addOn
      x-ms-summary: Contains information about add ons.
    addressInformation:
      description: Contains address information.
      properties:
        address1:
          description: |-
            The first line of the user's address.
            Maximum length: 100 characters.
          type: string
        address2:
          description: |-
            The second line of the user's address.
            Maximum length: 100 characters.
          type: string
        city:
          description: "The user's city. Maximum length: 40 characters."
          type: string
        country:
          description: "The user's country. Maximum length: 50 characters."
          type: string
        fax:
          description: A fax number associated with the address, if one is available.
          type: string
        phone:
          description: A phone number associated with the address.
          type: string
        postalCode:
          description: "The user's postal code. Maximum length: 20 characters."
          type: string
        stateOrProvince:
          description: "The user's state or province. Maximum length: 40 characters."
          type: string
        zipPlus4:
          description: ""
          type: string
      type: object
      x-ds-definition-name: addressInformation
      x-ms-summary: Contains address information.
    addressInformationInput:
      description: Contains address input information.
      properties:
        addressInformation:
          $ref: "#/components/schemas/addressInformation"
        displayLevelCode:
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
          type: string
        receiveInResponse:
          description: A Boolean value that specifies whether the information must be returned in the response.
          type: string
      type: object
      x-ds-definition-name: addressInformationInput
      x-ms-summary: Contains address input information.
    adminMessage:
      description: ""
      properties:
        baseMessage:
          description: ""
          type: string
        moreInformation:
          description: ""
          type: string
      type: object
      x-ds-definition-name: adminMessage
      x-ms-summary: ""
    agent:
      description: Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |-
            The email id of the agent. Notification of the document to sign is sent to this email id. 

            Maximum length: 100 characters. 
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: agent
      x-ms-summary: Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
    apiRequestLog:
      description: Contains API request log information.
      properties:
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        requestLogId:
          description: ""
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-definition-name: apiRequestLog
      x-ms-summary: Contains API request log information.
    apiRequestLogsResult:
      description: Contains information about mutiple API request logs.
      properties:
        apiRequestLogs:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/apiRequestLog"
          type: array
      type: object
      x-ds-definition-name: apiRequestLogsResult
      x-ms-summary: Contains information about mutiple API request logs.
    appStoreProduct:
      description: Contains information about an APP store product.
      properties:
        marketPlace:
          description: ""
          type: string
        productId:
          description: The Product ID from the AppStore.
          type: string
      type: object
      x-ds-definition-name: appStoreProduct
      x-ms-summary: Contains information about an APP store product.
    appStoreReceipt:
      description: Contains information about an APP store receipt.
      properties:
        productId:
          description: The Product ID from the AppStore.
          type: string
        receiptData:
          description: "Reserved: TBD"
          type: string
      type: object
      x-ds-definition-name: appStoreReceipt
      x-ms-summary: Contains information about an APP store receipt.
    approve:
      description: |
        A tab that allows the recipient to approve documents
        without placing a signature or initials on the
        document.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        buttonText:
          description: " Specifies the approval text that displays in the tab. "
          type: string
        buttonTextMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. You can only use this when adding new tabs for a recipient. When used, the new tab inherits all of the properties of the custom tab.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: |
            Specifies the page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: approve
      x-ms-summary: |
        A tab that allows the recipient to approve documents
        without placing a signature or initials on the
        document.
    askAnAdmin:
      description: ""
      properties:
        email:
          description: ""
          type: string
        message:
          description: ""
          type: string
        name:
          description: ""
          type: string
        phone:
          description: ""
          type: string
      type: object
      x-ds-definition-name: askAnAdmin
      x-ms-summary: ""
    attachment:
      description: Contains information about an attachment.
      properties:
        accessControl:
          description: Valid values are `sender` and `senderAndAllRecipients`.
          type: string
        attachmentId:
          description: The unique identifier for the attachment.
          type: string
        attachmentType:
          description: Specifies the type of the attachment for the recipient.
          type: string
        data:
          description: A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
          type: string
        label:
          description: |
            A label for the attachment. Potential values include: 

            - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms.
            - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property. 
          type: string
        name:
          description: The name of the attachment.
          type: string
        remoteUrl:
          description: The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.
          type: string
      type: object
      x-ds-definition-name: attachment
      x-ms-summary: Contains information about an attachment.
    authenticationMethod:
      description: Contains information about the method used for authentication.
      properties:
        authenticationType:
          description: "Indicates the type of authentication. Valid values are: PhoneAuth, STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth. "
          type: string
        lastProvider:
          description: "The last provider that authenticated the user. "
          type: string
        lastTimestamp:
          description: " The data and time the user last used the authentication method. "
          type: string
        totalCount:
          description: "The number of times the authentication method was used. "
          type: string
      type: object
      x-ds-definition-name: authenticationMethod
      x-ms-summary: Contains information about the method used for authentication.
    authenticationStatus:
      description: A complex element that contains information about a user's authentication status.
      properties:
        accessCodeResult:
          $ref: "#/components/schemas/eventResult"
        ageVerifyResult:
          $ref: "#/components/schemas/eventResult"
        anySocialIDResult:
          $ref: "#/components/schemas/eventResult"
        facebookResult:
          $ref: "#/components/schemas/eventResult"
        googleResult:
          $ref: "#/components/schemas/eventResult"
        idLookupResult:
          $ref: "#/components/schemas/eventResult"
        idQuestionsResult:
          $ref: "#/components/schemas/eventResult"
        identityVerificationResult:
          $ref: "#/components/schemas/eventResult"
        linkedinResult:
          $ref: "#/components/schemas/eventResult"
        liveIDResult:
          $ref: "#/components/schemas/eventResult"
        ofacResult:
          $ref: "#/components/schemas/eventResult"
        openIDResult:
          $ref: "#/components/schemas/eventResult"
        phoneAuthResult:
          $ref: "#/components/schemas/eventResult"
        sTANPinResult:
          $ref: "#/components/schemas/eventResult"
        salesforceResult:
          $ref: "#/components/schemas/eventResult"
        signatureProviderResult:
          $ref: "#/components/schemas/eventResult"
        smsAuthResult:
          $ref: "#/components/schemas/eventResult"
        twitterResult:
          $ref: "#/components/schemas/eventResult"
        yahooResult:
          $ref: "#/components/schemas/eventResult"
      type: object
      x-ds-definition-name: authenticationStatus
      x-ms-summary: A complex element that contains information about a user's authentication status.
    bccEmailAddress:
      description: Contains information about the BCC email address.
      properties:
        bccEmailAddressId:
          description: |-
            Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email. 
             
            Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
          type: string
        email:
          description: |-
            Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.

            Maximum of length: 100 characters. 
          type: string
      type: object
      x-ds-definition-name: bccEmailAddress
      x-ms-summary: Contains information about the BCC email address.
    bccEmailArchive:
      description: This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
      properties:
        accountId:
          description: The id of the account that owns the BCC email archive configuration.
          type: string
        bccEmailArchiveId:
          description: The id of the BCC email archive configuration.
          type: string
        created:
          description: The UTC DateTime when the BCC email archive configuration was created.
          type: string
        createdBy:
          $ref: "#/components/schemas/userInfo"
        email:
          description: |-
            The BCC email address to use for archiving DocuSign messages.

            Example: customer_bcc@example.com
          type: string
        emailNotificationId:
          description: The GUID of the activation email message sent to the BCC email address.
          type: string
        modified:
          description: The UTC DateTime when the BCC email archive configuration was last modified.
          type: string
        modifiedBy:
          $ref: "#/components/schemas/userInfo"
        status:
          description: |-
            The status of the BCC email address. Possible values are:

            - `activation_sent`: An activation link has been sent to the BCC email address.
            - `active`: The BCC email address is actively used for archiving.
            - `closed`: The BCC email address is no longer used for archiving.
          type: string
        uri:
          description: The helper URI for retrieving the BCC email archive.
          type: string
      type: object
      x-ds-definition-name: bccEmailArchive
      x-ms-summary: This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
    bccEmailArchiveHistory:
      description: Contains details about the history of the BCC email archive configuration.
      properties:
        accountId:
          description: The id of the account that owns the BCC email archive configuration.
          type: string
        action:
          description: |-
            The action taken on the BCC email archive configuration.

            Examples: 

            - `CREATED`: The BCC email archive configuration has been created.
            - `UPDATED`: The BCC email address has been activated by clicking on the activation link in the activation email message.
            - `CLOSED`: The BCC email address has been marked as closed is no longer used for archiving.
          type: string
        email:
          description: |-
            The BCC email address used to archive the emails that DocuSign generates. 

            Example: customer_bcc@example.com
          type: string
        modified:
          description: The UTC DateTime when the BCC email address was last modified.
          type: string
        modifiedBy:
          $ref: "#/components/schemas/userInfo"
        status:
          description: |-
            The status of the BCC email address. Possible values are:

            - `activation_sent`: An activation link has been sent to the BCC email address.
            - `active`: The BCC email address is actively used for archiving.
            - `closed`: The BCC email address is no longer used for archiving.
          type: string
      type: object
      x-ds-definition-name: bccEmailArchiveHistory
      x-ms-summary: Contains details about the history of the BCC email archive configuration.
    bccEmailArchiveHistoryList:
      description: ""
      properties:
        bccEmailArchiveHistory:
          description: A list of changes to the BCC email archive configuration.
          items:
            $ref: "#/components/schemas/bccEmailArchiveHistory"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: bccEmailArchiveHistoryList
      x-ms-summary: ""
    bccEmailArchiveList:
      description: Contains a list of BCC email archive configurations.
      properties:
        bccEmailArchives:
          description: A list of  BCC email archive configurations.
          items:
            $ref: "#/components/schemas/bccEmailArchive"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: bccEmailArchiveList
      x-ms-summary: Contains a list of BCC email archive configurations.
    billingCharge:
      description: Contains information about a billing charge.
      properties:
        allowedQuantity:
          description: "Reserved: TBD"
          type: string
        blocked:
          description: "Reserved: TBD"
          type: string
        chargeName:
          description: |-
            Provides information on what services the charge item is for.

            The following table provides a description of the different chargeName values available at this time.

            | chargeName | Description |
            | --- | --- |
            | id_check | ID Check Charge |
            | in_person_signing | In Person Signing charge |
            | envelopes Included | Sent Envelopes for the account |
            | age_verify | Age verification check |
            | ofac | OFAC Check |
            | id_confirm | ID confirmation check |
            | student_authentication | STAN PIN authentication check |
            | wet_sign_fax | Pages for returning signed documents by fax |
            | attachment_fax | Pages for returning attachments by fax |
            | phone_authentication | Phone authentication charge |
            | powerforms | PowerForm envelopes sent |
            | signer_payments | Payment processing charge |
            | outbound_fax | Send by fax charge |
            | bulk_recipient_envelopes | Bulk Recipient Envelopes sent |
            | sms_authentications | SMS authentication charge |
            | saml_authentications | SAML authentication charge |
            | express_signer_certificate | DocuSign Express Certificate charge |
            | personal_signer_certificate | Personal Signer Certificate charge |
            | safe_certificate | SAFE BioPharma Signer Certificate charge |
            | seats | Included active seats charge |
            | open_trust_certificate | OpenTrust Signer Certificate charge |
          type: string
        chargeType:
          description: "Reserved: TBD"
          type: string
        chargeUnitOfMeasure:
          description: "Reserved: TBD"
          type: string
        discounts:
          description: ""
          items:
            $ref: "#/components/schemas/billingDiscount"
          type: array
        firstEffectiveDate:
          description: ""
          type: string
        includedQuantity:
          description: ""
          type: string
        incrementalQuantity:
          description: "Reserved: TBD"
          type: string
        lastEffectiveDate:
          description: ""
          type: string
        prices:
          description: ""
          items:
            $ref: "#/components/schemas/billingPrice"
          type: array
        unitPrice:
          description: "Reserved: TBD"
          type: string
        usedQuantity:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingCharge
      x-ms-summary: Contains information about a billing charge.
    billingChargeResponse:
      description: Defines a billing charge response object.
      properties:
        billingChargeItems:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingCharge"
          type: array
      type: object
      x-ds-definition-name: billingChargeResponse
      x-ms-summary: Defines a billing charge response object.
    billingDiscount:
      description: ""
      properties:
        beginQuantity:
          description: "Reserved: TBD"
          type: string
        discount:
          description: ""
          type: string
        endQuantity:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingDiscount
      x-ms-summary: ""
    billingInvoice:
      description: Contains information about a billing invoice.
      properties:
        amount:
          description: The total amount of the purchase.
          type: string
        balance:
          description: "Reserved: TBD"
          type: string
        dueDate:
          description: "Reserved: TBD"
          type: string
        invoiceId:
          description: "Reserved: TBD"
          type: string
        invoiceItems:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingInvoiceItem"
          type: array
        invoiceNumber:
          description: "Reserved: TBD"
          type: string
        invoiceUri:
          description: Contains a URI for an endpoint that you can use to retrieve invoice information.
          type: string
        nonTaxableAmount:
          description: ""
          type: string
        pdfAvailable:
          description: ""
          type: string
        taxableAmount:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingInvoice
      x-ms-summary: Contains information about a billing invoice.
    billingInvoiceItem:
      description: Contains information about an item on a billing invoice.
      properties:
        chargeAmount:
          description: "Reserved: TBD"
          type: string
        chargeName:
          description: "Reserved: TBD"
          type: string
        invoiceItemId:
          description: "Reserved: TBD"
          type: string
        quantity:
          description: The quantity of envelopes to add to the account.
          type: string
        unitPrice:
          description: "Reserved: TBD"
          type: string
      type: object
      x-ds-definition-name: billingInvoiceItem
      x-ms-summary: Contains information about an item on a billing invoice.
    billingInvoicesResponse:
      description: Defines a billing invoice response object.
      properties:
        billingInvoices:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingInvoice"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
      type: object
      x-ds-definition-name: billingInvoicesResponse
      x-ms-summary: Defines a billing invoice response object.
    billingInvoicesSummary:
      description: ""
      properties:
        billingInvoices:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingInvoice"
          type: array
        pastDueBalance:
          description: ""
          type: string
        paymentAllowed:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingInvoicesSummary
      x-ms-summary: ""
    billingPayment:
      description: Contains information on a billing plan.
      properties:
        amount:
          description: "Reserved: TBD"
          type: string
        invoiceId:
          description: "Reserved: TBD"
          type: string
        paymentId:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingPayment
      x-ms-summary: Contains information on a billing plan.
    billingPaymentItem:
      description: Defines a billing payment request object.
      properties:
        amount:
          description: The total amount of the purchase.
          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        paymentDate:
          description: ""
          type: string
        paymentId:
          description: ""
          type: string
        paymentNumber:
          description: |-
            When set to **true**, a PDF version of the invoice is available. 

            To get the PDF, make the call again and change "Accept:" in the header to "Accept: application/pdf".
          type: string
      type: object
      x-ds-definition-name: billingPaymentItem
      x-ms-summary: Defines a billing payment request object.
    billingPaymentRequest:
      description: ""
      properties:
        paymentAmount:
          description: The payment amount for the past due invoices. This value must match the pastDueBalance value retrieved using Get Past Due Invoices.
          type: string
      type: object
      x-ds-definition-name: billingPaymentRequest
      x-ms-summary: ""
    billingPaymentResponse:
      description: Defines an billing payment response object.
      properties:
        billingPayments:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingPayment"
          type: array
      type: object
      x-ds-definition-name: billingPaymentResponse
      x-ms-summary: Defines an billing payment response object.
    billingPaymentsResponse:
      description: Defines a billing payments response object.
      properties:
        billingPayments:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingPaymentItem"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
      type: object
      x-ds-definition-name: billingPaymentsResponse
      x-ms-summary: Defines a billing payments response object.
    billingPlan:
      description: Contains information about a billing plan.
      properties:
        appStoreProducts:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/appStoreProduct"
          type: array
        currencyPlanPrices:
          description: Contains the `currencyCode` and `currencySymbol` for the alternate currency values for `envelopeFee`, `fixedFee`, and `seatFee` that are configured for this plan feature set.
          items:
            $ref: "#/components/schemas/currencyPlanPrice"
          type: array
        enableSupport:
          description: When set to **true**, customer support is provided as part of the account plan.
          type: string
        includedSeats:
          description: The number of seats (users) included in the plan.
          type: string
        otherDiscountPercent:
          description: |-
            Any other percentage discount for the plan.

            Example: `"0.00"`
          type: string
        paymentCycle:
          description: " The payment cycle associated with the plan. The possible values are: Monthly or Annually. "
          type: string
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        perSeatPrice:
          description: The per seat price for the plan.
          type: string
        planClassification:
          description: |-
            Identifies the type of plan. Examples include:

            - `business`
            - `corporate`
            - `enterprise` 
            - `free`
          type: string
        planFeatureSets:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/featureSet"
          type: array
        planId:
          description: DocuSign's id for the account plan.
          type: string
        planName:
          description: "\n"
          type: string
        seatDiscounts:
          description: A complex type that returns information about any seat discounts. It contains the information `BeginSeatCount`, `EndSeatCount` and `SeatDiscountPercent`.
          items:
            $ref: "#/components/schemas/seatDiscount"
          type: array
        supportIncidentFee:
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
          type: string
        supportPlanFee:
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
          type: string
      type: object
      x-ds-definition-name: billingPlan
      x-ms-summary: Contains information about a billing plan.
    billingPlanInformation:
      description: This object contains details about a billing plan.
      properties:
        appStoreReceipt:
          $ref: "#/components/schemas/appStoreReceipt"
        billingAddress:
          $ref: "#/components/schemas/accountAddress"
        creditCardInformation:
          $ref: "#/components/schemas/creditCardInformation"
        directDebitProcessorInformation:
          $ref: "#/components/schemas/directDebitProcessorInformation"
        downgradeReason:
          description: (Optional) The user's reason for downgrading their billing plan.
          type: string
        enableSupport:
          description: When set to **true**, customer support is provided as part of the account plan.
          type: string
        includedSeats:
          description: The number of seats (users) included in the plan.
          type: string
        incrementalSeats:
          description: Reserved for DocuSign.
          type: string
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        paymentProcessorInformation:
          $ref: "#/components/schemas/paymentProcessorInformation"
        planInformation:
          $ref: "#/components/schemas/planInformation"
        referralInformation:
          $ref: "#/components/schemas/referralInformation"
        renewalStatus:
          description: |-
            The renewal status of the account. Possible values are:

            - `auto`: The account automatically renews. 
            - `queued_for_close`: The account will be closed at the billingPeriodEndDate. 
            - queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.
          type: string
        saleDiscountAmount:
          description: Reserved for DocuSign.
          type: string
        saleDiscountFixedAmount:
          description: Reserved for DocuSign.
          type: string
        saleDiscountPercent:
          description: Reserved for DocuSign.
          type: string
        saleDiscountPeriods:
          description: Reserved for DocuSign.
          type: string
        saleDiscountSeatPriceOverride:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: billingPlanInformation
      x-ms-summary: This object contains details about a billing plan.
    billingPlanPreview:
      description: Information used to provide a preview of a billing plan.
      properties:
        currencyCode:
          description: Specifies the ISO currency code for the account.
          type: string
        invoice:
          $ref: "#/components/schemas/billingInvoice"
        isProrated:
          description: When set to **true**, the billing plan is prorated.
          type: string
        subtotalAmount:
          description: ""
          type: string
        taxAmount:
          description: ""
          type: string
        totalAmount:
          description: ""
          type: string
      type: object
      x-ds-definition-name: billingPlanPreview
      x-ms-summary: Information used to provide a preview of a billing plan.
    billingPlanResponse:
      description: Defines a billing plan response object.
      properties:
        billingPlan:
          $ref: "#/components/schemas/billingPlan"
        successorPlans:
          description: A list of billing plans that the current billing plan can be rolled into.
          items:
            $ref: "#/components/schemas/billingPlan"
          type: array
      type: object
      x-ds-definition-name: billingPlanResponse
      x-ms-summary: Defines a billing plan response object.
    billingPlanUpdateResponse:
      description: Defines a billing plan update response object.
      properties:
        accountPaymentMethod:
          description: |-
            The type of payment method used for the account. Valid values are:

            - `credit_card`
            - 
          type: string
        billingPlanPreview:
          $ref: "#/components/schemas/billingPlanPreview"
        currencyCode:
          description: Specifies the ISO currency code for the account.
          type: string
        includedSeats:
          description: The number of seats (users) included in the plan.
          type: string
        paymentCycle:
          description: |-
            The payment cycle associated with the plan. The possible values are: 

            - `Monthly`
            - `Annually` 
          type: string
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        planId:
          description: DocuSign's id for the account plan.
          type: string
        planName:
          description: |-
            The name of the billing plan used for the account.

            Examples: 

            - `Personal - Annual`
            - `Unlimited Envelope Subscription - Annual Billing`
          type: string
      type: object
      x-ds-definition-name: billingPlanUpdateResponse
      x-ms-summary: Defines a billing plan update response object.
    billingPlansResponse:
      description: Defines a billing plans response object.
      properties:
        billingPlans:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/billingPlan"
          type: array
      type: object
      x-ds-definition-name: billingPlansResponse
      x-ms-summary: Defines a billing plans response object.
    billingPrice:
      description: ""
      properties:
        beginQuantity:
          description: "Reserved: TBD"
          type: string
        endQuantity:
          description: ""
          type: string
        unitPrice:
          description: "Reserved: TBD"
          type: string
      type: object
      x-ds-definition-name: billingPrice
      x-ms-summary: ""
    brand:
      description: Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
      properties:
        brandCompany:
          description: The name of the company associated with the brand.
          type: string
        brandId:
          description: The ID used to identify a specific brand in API calls.
          type: string
        brandLanguages:
          description: |-
            An array of two-letter codes for the languages that you want to use with the brand. The supported languages are:

            - Arabic (`ar`)
            - Armenian (`hy`)
            - Bahasa Indonesia (`id`)
            - Bahasa Malay (`ms`)
            - Bulgarian (`bg`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Czech (`cs`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English UK (`en_GB`)
            - English US (`en`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canada (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brasil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukranian (`uk`)
            - Vietnamese (`vi`)
          items:
            type: string
          type: array
        brandName:
          description: The name of the brand.
          type: string
        colors:
          description: |-
            An array of name-value pairs specifying the colors that the brand uses for the following elements:

            - Button background
            - Button text
            - Header background
            - Header text
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        defaultBrandLanguage:
          description: |-
            The two-letter code for the language that you want to use as the brand default. The supported languages are:

            - Arabic (`ar`)
            - Armenian (`hy`)
            - Bahasa Indonesia (`id`)
            - Bahasa Malay (`ms`)
            - Bulgarian (`bg`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Czech (`cs`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English UK (`en_GB`)
            - English US (`en`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canada (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brasil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukranian (`uk`)
            - Vietnamese (`vi`)
          type: string
        emailContent:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/brandEmailContent"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        isOverridingCompanyName:
          description: When **true**, the `brandCompany` property is overriding the name of the company in the account settings.
          type: boolean
        isSendingDefault:
          description: When **true**, the sending brand is the default brand for sending new envelopes.
          type: boolean
        isSigningDefault:
          description: When **true**, the siging brand is the default brand for the signing experience.
          type: boolean
        landingPages:
          description: |-
            An array of name/value pairs specifying the pages to which the user is redirected after the following events occur:

            - Signing Completed
            - Viewed Exit
            - Finish Later
            - Decline
            - Session Timeout
            - Authentication Failure

            If you do not specify landing pages, the DocuSign default pages are used.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        links:
          description: An array of `brandLink` objects that contain information about the links that the brand uses.
          items:
            $ref: "#/components/schemas/brandLink"
          type: array
        logos:
          $ref: "#/components/schemas/brandLogos"
        resources:
          $ref: "#/components/schemas/brandResourceUrls"
      type: object
      x-ds-definition-name: brand
      x-ms-summary: Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
    brandEmailContent:
      description: Deprecated.
      properties:
        content:
          description: Deprecated.
          type: string
        emailContentType:
          description: Deprecated.
          type: string
        emailToLink:
          description: Deprecated.
          type: string
        linkText:
          description: Deprecated.
          type: string
      type: object
      x-ds-definition-name: brandEmailContent
      x-ms-summary: Deprecated.
    brandLink:
      description: Information about a link that a brand uses.
      properties:
        linkText:
          description: The text used for the link.
          type: string
        linkType:
          description: |-
            The type of link. Valid values include:

            - `aboutDocusign`
            - `closeButton`
          type: string
        showLink:
          description: When **true**, the link displays to the recipient.
          type: string
        urlOrMailTo:
          description: The URL or mailto address of the link.
          type: string
      type: object
      x-ds-definition-name: brandLink
      x-ms-summary: Information about a link that a brand uses.
    brandLogos:
      description: Information about the logos associated with the brand.
      properties:
        email:
          description: The URI for the logo that the brand uses in the header of email messages.
          type: string
        primary:
          description: The URI for the brand's primary logo.
          type: string
        secondary:
          description: The URI for the brand's secondary logo.
          type: string
      type: object
      x-ds-definition-name: brandLogos
      x-ms-summary: Information about the logos associated with the brand.
    brandRequest:
      description: This request object contains information about a specific brand.
      properties:
        brandId:
          description: The ID of the brand used in API calls
          type: string
      type: object
      x-ds-definition-name: brandRequest
      x-ms-summary: This request object contains information about a specific brand.
    brandResourceUrls:
      description: |-
        Brands use resource files to style the following experiences: 

        - Email
        - Sending
        - Signing
        - Captive (embedded) signing 

        You can modify these resource files to customize these experiences.
      properties:
        email:
          description: The URI for the email resource file that the brand uses.
          type: string
        sending:
          description: The URI for the sending resource file that the brand uses.
          type: string
        signing:
          description: The URI for the signing resource file that the brand uses.
          type: string
        signingCaptive:
          description: The URI for the captive (embedded) signing resource file that the brand uses.
          type: string
      type: object
      x-ds-definition-name: brandResourceUrls
      x-ms-summary: |-
        Brands use resource files to style the following experiences: 

        - Email
        - Sending
        - Signing
        - Captive (embedded) signing 

        You can modify these resource files to customize these experiences.
    brandResources:
      description: Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
      properties:
        createdByUserInfo:
          $ref: "#/components/schemas/userInfo"
        createdDate:
          description: The date and time that the brand resource was created.
          type: string
        dataNotSavedNotInMaster:
          description: Deprecated.
          items:
            type: string
          type: array
        modifiedByUserInfo:
          $ref: "#/components/schemas/userInfo"
        modifiedDate:
          description: The date on which this user record was last modified.
          type: string
        modifiedTemplates:
          description: |-
            This property is returned in the response to the [AccountBrands::listResources][listResources] request. It contains a list of any email templates that have been modified to differ from the master resource files.

            [listResources]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/AccountBrands/listResources
          items:
            type: string
          type: array
        resourcesContentType:
          description: |-
            The type of brand resource file. A brand uses a different resource file to control each of the following experiences:

            - Sending (`sending`)
            - Signing (`signing`)
            - Email messages (`email`)
            - Captive (embedded) signing (`signing_captive`)

            You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.
          type: string
        resourcesContentUri:
          description: The URI for the brand resource file.
          type: string
      type: object
      x-ds-definition-name: brandResources
      x-ms-summary: Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
    brandResourcesList:
      description: ""
      properties:
        resourcesContentTypes:
          description: A list of resources that the brand uses.
          items:
            $ref: "#/components/schemas/brandResources"
          type: array
      type: object
      x-ds-definition-name: brandResourcesList
      x-ms-summary: ""
    brandsRequest:
      description: Details about one or more brands.
      properties:
        brands:
          description: A list of brands.
          items:
            $ref: "#/components/schemas/brandRequest"
          type: array
      type: object
      x-ds-definition-name: brandsRequest
      x-ms-summary: Details about one or more brands.
    brandsResponse:
      description: ""
      properties:
        brands:
          description: A list of brands.
          items:
            $ref: "#/components/schemas/brand"
          type: array
        recipientBrandIdDefault:
          description: The brand that envelope recipients see when a brand is not explicitly set.
          type: string
        senderBrandIdDefault:
          description: The brand that envelope senders see when a brand is not explicitly set.
          type: string
      type: object
      x-ds-definition-name: brandsResponse
      x-ms-summary: ""
    bulkEnvelope:
      description: ""
      properties:
        bulkRecipientRow:
          description: The row of the recipient in the CSV file used to create the bulk recipient list.
          type: string
        bulkStatus:
          description: |-
            Indicates the status of the bulk send operation. Returned values can be:
            - `queued`
            - `processing`
            - `sent`
            - `failed`
          type: string
        email:
          description: The email address of the recipient assigned to this envelope transaction.
          type: string
        envelopeId:
          description: GUID of the bulk envelope.
          type: string
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        name:
          description: The name of the recipient assigned to this envelope transaction.
          type: string
        submittedDateTime:
          description: The date and time on which the bulk envelope was created.
          type: string
        transactionId:
          description: Identifier for the envelope transaction. The ID is a sender-generated value and is valid in the DocuSign system for 7 days. We recommend that you use a transaction ID for offline signing to ensure that an envelope is not sent multiple times. You can use the transaction ID to determine an envelope's status (queued, processing, sent, or failed) in cases where the Internet connection is lost before envelope status is returned.
          type: string
      type: object
      x-ds-definition-name: bulkEnvelope
      x-ms-summary: ""
    bulkEnvelopeStatus:
      description: ""
      properties:
        batchId:
          description: Specifies an identifier which can be used to retrieve a more detailed status of individual bulk recipient batches.
          type: string
        batchSize:
          description: The number of items returned in this response.
          type: string
        bulkEnvelopes:
          description: A list of bulk envelope objects.
          items:
            $ref: "#/components/schemas/bulkEnvelope"
          type: array
        bulkEnvelopesBatchUri:
          description: URI at which you can retrieve the batch envelopes.
          type: string
        endPosition:
          description: "The last index position in the result set. "
          type: string
        failed:
          description: "The number of entries with a status of failed. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        queued:
          description: "The number of entries with a status of queued. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        sent:
          description: The number of entries with a status of sent.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        submittedDate:
          description: The date on which the bulk envelope was created.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: bulkEnvelopeStatus
      x-ms-summary: ""
    bulkRecipient:
      description: ""
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        email:
          description: |-
            Specifies the recipient's email address. 

            Maximum length: 100 characters.
          type: string
        errorDetails:
          description: Array or errors.
          items:
            $ref: "#/components/schemas/errorDetails"
          type: array
        identification:
          description: |-
            Specifies the authentication check used for the signer. If blank then no authentication check is required for the signer. Only one value can be used in this field.

            The acceptable values are:

            * KBA: Enables the normal ID check authentication set up for your account.
            * Phone: Enables phone authentication.
            * SMS: Enables SMS authentication.
          type: string
        name:
          description: |-
            Specifies the recipient's name. 

            Maximum length: 50 characters.
          type: string
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        phoneNumber:
          description: |-
            This is only used if the Identification field value is Phone or SMS. The value for this field can be a valid telephone number or, if Phone, usersupplied (SMS authentication cannot use a user supplied number). Parenthesis and dashes can be used in the telephone number.

            If `usersupplied` is used, the signer supplies his or her own telephone number.
          type: string
        recipientSignatureProviderInfo:
          description: ""
          items:
            $ref: "#/components/schemas/bulkRecipientSignatureProvider"
          type: array
        rowNumber:
          description: ""
          type: string
        tabLabels:
          description: |-
            Specifies values used to populate recipient tabs with information. This allows each bulk recipient signer to have different values for their associated tabs. Any number of `tabLabel` columns can be added to the bulk recipient file.

            The information used in the bulk recipient file header must be the same as the `tabLabel` for the tab.

            The values entered in this column are automatically inserted into the corresponding tab for the recipient in the same row.

            Note that this option cannot be used for tabs that do not have data or that are automatically populated data such as Signature, Full Name, Email Address, Company, Title, and Date Signed tabs.
          items:
            $ref: "#/components/schemas/bulkRecipientTabLabel"
          type: array
      type: object
      x-ds-definition-name: bulkRecipient
      x-ms-summary: ""
    bulkRecipientSignatureProvider:
      description: ""
      properties:
        name:
          description: ""
          type: string
        value:
          description: "Specifies the value of the tab. "
          type: string
      type: object
      x-ds-definition-name: bulkRecipientSignatureProvider
      x-ms-summary: ""
    bulkRecipientTabLabel:
      description: ""
      properties:
        name:
          description: ""
          type: string
        value:
          description: "Specifies the value of the tab. "
          type: string
      type: object
      x-ds-definition-name: bulkRecipientTabLabel
      x-ms-summary: ""
    bulkRecipientsRequest:
      description: ""
      properties:
        bulkRecipients:
          description: A complex type containing information about the bulk recipients in the request.
          items:
            $ref: "#/components/schemas/bulkRecipient"
          type: array
      type: object
      x-ds-definition-name: bulkRecipientsRequest
      x-ms-summary: ""
    bulkRecipientsResponse:
      description: ""
      properties:
        bulkRecipients:
          description: A complex type containing information about the bulk recipients in the response.
          items:
            $ref: "#/components/schemas/bulkRecipient"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: bulkRecipientsResponse
      x-ms-summary: ""
    bulkRecipientsSummaryResponse:
      description: ""
      properties:
        bulkRecipients:
          description: A complex type containing information about the bulk recipients in the response.
          items:
            $ref: "#/components/schemas/bulkRecipient"
          type: array
        bulkRecipientsCount:
          description: The number of items returned in this response.
          type: string
        bulkRecipientsUri:
          description: Reserved for DocuSign.
          type: string
        errorDetails:
          description: Array or errors.
          items:
            $ref: "#/components/schemas/errorDetails"
          type: array
      type: object
      x-ds-definition-name: bulkRecipientsSummaryResponse
      x-ms-summary: ""
    bulkRecipientsUpdateResponse:
      description: ""
      properties:
        signer:
          $ref: "#/components/schemas/signer"
      type: object
      x-ds-definition-name: bulkRecipientsUpdateResponse
      x-ms-summary: ""
    bulkSendBatchRequest:
      description: ""
      properties:
        batchName:
          description: ""
          type: string
      type: object
      x-ds-definition-name: bulkSendBatchRequest
      x-ms-summary: ""
    bulkSendBatchStatus:
      description: Result of `getBulkSendBatchStatus`
      properties:
        batchId:
          description: The batch ID.
          type: string
        batchName:
          description: The batch name.
          type: string
        batchSize:
          description: |
            The number of of bulk envelopes submitted in the current batch
          type: string
        bulkErrors:
          description: An array of error statuses.
          items:
            $ref: "#/components/schemas/bulkSendErrorStatus"
          type: array
        envelopeIdOrTemplateId:
          description: |
            The ID of the draft envelope or template that was used to create the batch.
          type: string
        envelopesUri:
          description: |
            The URI to get all envelopes sent in the batch.
          type: string
        failed:
          description: |
            The number of envelopes that failed to process or send.
          type: string
        mailingListId:
          description: The id of the mailing list used to create the batch.
          type: string
        ownerUserId:
          description: ""
          type: string
        queued:
          description: |
            The number of envelopes waiting in pending queue
          type: string
        senderUserId:
          description: The id of the sender.
          type: string
        sent:
          description: The number of envelopes sent successfully.
          type: string
        submittedDate:
          description: |+
            The timestamp of  when the batch was submitted in ISO-8601 format.

          type: string
      type: object
      x-ds-definition-name: bulkSendBatchStatus
      x-ms-summary: Result of `getBulkSendBatchStatus`
    bulkSendBatchSummaries:
      description: "A list of bulk send batch summaries. "
      properties:
        batchSizeLimit:
          description: The maximum number of envelopes the account is permitted to submit in a given batch.
          type: string
        bulkBatchSummaries:
          description: An array of batch summaries.
          items:
            $ref: "#/components/schemas/bulkSendBatchSummary"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        queueLimit:
          description: Maximum number of envelopes an account is permitted to have in the queue at any one time.
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalQueued:
          description: The number of envelopes currently pending processing for the entire account.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: bulkSendBatchSummaries
      x-ms-summary: "A list of bulk send batch summaries. "
    bulkSendBatchSummary:
      description: Summary status of a single batch.
      properties:
        batchId:
          description: The batch ID.
          type: string
        batchName:
          description: The name of the batch.
          type: string
        batchSize:
          description: The number of envelopes in the batch.
          type: string
        batchUri:
          description: The batch details URI.
          type: string
        failed:
          description: Number of envelopes that failed to send.
          type: string
        queued:
          description: |
            Number of envelopes peding processing.
          type: string
        sent:
          description: Number of envelopes that have been sent.
          type: string
        submittedDate:
          description: The time stamp of when the batch was created in ISO-8601 format.
          type: string
      type: object
      x-ds-definition-name: bulkSendBatchSummary
      x-ms-summary: Summary status of a single batch.
    bulkSendErrorStatus:
      description: A single bulk send error report.
      properties:
        created:
          description: The timestamp of when the error occurred in ISO-8601 format.
          type: string
        errorMessage:
          description: |
            The error message generated during processing, if any.
          type: string
        recipientEmails:
          description: |
            An array of email addresses for the failed bulk envelope.

            Recipient email/info of the failed bulk envelope.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: bulkSendErrorStatus
      x-ms-summary: A single bulk send error report.
    bulkSendRequest:
      description: This object contains information about the envelope or template that you want to send in bulk.
      properties:
        batchName:
          description: ""
          type: string
        envelopeOrTemplateId:
          description: The GUID of the envelope or template that you want to send in bulk.
          type: string
      type: object
      x-ds-definition-name: bulkSendRequest
      x-ms-summary: This object contains information about the envelope or template that you want to send in bulk.
    bulkSendResponse:
      description: The object contains the response to a bulk send request.
      properties:
        batchId:
          description: A batch identifier that you can use to get the status of the batch.
          type: string
        batchName:
          description: ""
          type: string
        batchSize:
          description: The total number of items in the batch being queried.
          type: string
        envelopeOrTemplateId:
          description: The GUID of the envelope or template that was sent.
          type: string
        errorDetails:
          description: A human-readable object that describes errors that occur. It is only valid for responses and ignored in requests.
          items:
            type: string
          type: array
        errors:
          description: A list of errors that occurred. This information is intended to be parsed by machine.
          items:
            type: string
          type: array
        queueLimit:
          description: ""
          type: string
        totalQueued:
          description: ""
          type: string
      type: object
      x-ds-definition-name: bulkSendResponse
      x-ms-summary: The object contains the response to a bulk send request.
    bulkSendTestResponse:
      description: This object contains the results of a bulk send test.
      properties:
        canBeSent:
          description: |-
            When **true**, the envelope or template is compatible with the bulk send list and can be sent by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.

            **Note**: This property is only returned in responses and ignored in requests.

            [BulkSendRequest]: https://developers.docusign.com/docs/esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest
          type: boolean
        validationErrorDetails:
          description: Human-readable details about any validation errors that occurred.
          items:
            type: string
          type: array
        validationErrors:
          description: |-
            A list of validation errors that were encountered during the bulk send test.

            **Note**: This information is intended to be parsed by machine.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: bulkSendTestResponse
      x-ms-summary: This object contains the results of a bulk send test.
    bulkSendingCopy:
      description: This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
      properties:
        customFields:
          description: |-
            The custom fields for this copy of the envelope.

            **Note**: These custom fields must also be included in the original envelope or template that you want to send.
          items:
            $ref: "#/components/schemas/bulkSendingCopyCustomField"
          type: array
        emailBlurb:
          description: The email body for this copy of the envelope.
          type: string
        emailSubject:
          description: |-
            The email subject line for this copy of the envelope.
            For information about adding merge field information to the email subject,
            see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/templates/templates/create/).
          type: string
        recipients:
          description: Information about the recipients associated with this copy of the envelope.
          items:
            $ref: "#/components/schemas/bulkSendingCopyRecipient"
          type: array
      type: object
      x-ds-definition-name: bulkSendingCopy
      x-ms-summary: This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
    bulkSendingCopyCustomField:
      description: This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send.
      properties:
        name:
          description: The name of the custom field.
          type: string
        value:
          description: The value of the custom field.
          type: string
      type: object
      x-ds-definition-name: bulkSendingCopyCustomField
      x-ms-summary: This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send.
    bulkSendingCopyRecipient:
      description: This object contains details about a bulk send recipient.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        email:
          description: The recipient's email address.
          type: string
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        hostEmail:
          description: |
            The email address of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.
          type: string
        hostName:
          description: |
            The name of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
          type: string
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identificationMethod:
          description: ""
          type: string
        name:
          description: ""
          type: string
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        roleName:
          description: The name of the role associated with the recipient. This property is optional and is only used in place of a `recipientId`.
          type: string
        signerName:
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
          type: string
        signingGroupId:
          description: |-
            Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).

            **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy. 
          type: string
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        tabs:
          description: |-
            A list of tabs associated with the recipient. In a bulk send request, each of these recipient tabs must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

            For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.

             You can use the following types of tabs to match bulk send recipients to an envelope:

            - Text tabs
            - Radio group tabs (where the name of the `radioGroup` on the envelope is used as the `tabLabel` in the bulk send list)
            - List tabs
          items:
            $ref: "#/components/schemas/bulkSendingCopyTab"
          type: array
      type: object
      x-ds-definition-name: bulkSendingCopyRecipient
      x-ms-summary: This object contains details about a bulk send recipient.
    bulkSendingCopyTab:
      description: |-
        A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

        For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
      properties:
        initialValue:
          description: The initial value that you want to assign to the tab.
          type: string
        tabLabel:
          description: |-
            The label associated with the recipient tab. In a bulk send request, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

            Maximum Length: 500 characters.
          type: string
      type: object
      x-ds-definition-name: bulkSendingCopyTab
      x-ms-summary: |-
        A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.

        For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
    bulkSendingList:
      description: This object contains the details for the bulk send list.
      properties:
        bulkCopies:
          description: An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs, and other information.
          items:
            $ref: "#/components/schemas/bulkSendingCopy"
          type: array
        listId:
          description: The GUID of the bulk send list.
          type: string
        name:
          description: The name of the bulk send list.
          type: string
      type: object
      x-ds-definition-name: bulkSendingList
      x-ms-summary: This object contains the details for the bulk send list.
    bulkSendingListSummaries:
      description: This complex type contains summaries that provide basic information about the bulk send lists that belong to the current user.
      properties:
        bulkListSummaries:
          description: An array of `bulkSendingListSummary` objects where each summary provides basic information about a bulk send list that belongs to the current user.
          items:
            $ref: "#/components/schemas/bulkSendingListSummary"
          type: array
      type: object
      x-ds-definition-name: bulkSendingListSummaries
      x-ms-summary: This complex type contains summaries that provide basic information about the bulk send lists that belong to the current user.
    bulkSendingListSummary:
      description: This object contains basic information about a bulk send list.
      properties:
        bulkSendListId:
          description: The GUID of the bulk send list. This property is created after you post a new bulk send list.
          type: string
        createdByUser:
          description: The GUID of the user who created the bulk send list.
          type: string
        createdDate:
          description: The UTC DateTime that the bulk send list was created.
          type: string
        name:
          description: The name of the bulk send list.
          type: string
      type: object
      x-ds-definition-name: bulkSendingListSummary
      x-ms-summary: This object contains basic information about a bulk send list.
    captiveRecipient:
      description: This object contains details about a captive (embedded) recipient.
      properties:
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        email:
          description: The email address associated with the captive recipient.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        userName:
          description: The username associated with the captive recipient.
          type: string
      type: object
      x-ds-definition-name: captiveRecipient
      x-ms-summary: This object contains details about a captive (embedded) recipient.
    captiveRecipientInformation:
      description: Contains information about captive (embedded) recipients.
      properties:
        captiveRecipients:
          description: A complex type containing information about one or more captive recipients.
          items:
            $ref: "#/components/schemas/captiveRecipient"
          type: array
      type: object
      x-ds-definition-name: captiveRecipientInformation
      x-ms-summary: Contains information about captive (embedded) recipients.
    carbonCopy:
      description: "Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. "
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        agentCanEditEmail:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.
          type: string
        agentCanEditName:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: Not applicable for Carbon Copy recipients.
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |-
            The recipient's email address. Notification of the document to sign is sent to this email address. 

            Maximum length: 100 characters. 
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        proofFile:
          $ref: "#/components/schemas/recipientProofFile"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: carbonCopy
      x-ms-summary: "Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents. "
    certifiedDelivery:
      description: Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        agentCanEditEmail:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.
          type: string
        agentCanEditName:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: The recipient's email address.
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        proofFile:
          $ref: "#/components/schemas/recipientProofFile"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The status of the recipient. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: certifiedDelivery
      x-ms-summary: Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
    checkbox:
      description: |
        A tab that allows the recipient to select a yes/no (on/off) option.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to apply. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: This property does not apply to `checkbox` tabs. Check boxes are always optional.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        selected:
          description: When **true**, the checkbox is selected.
          type: string
        selectedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When **true**, this tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-7, -6)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-7, -6)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: checkbox
      x-ms-summary: |
        A tab that allows the recipient to select a yes/no (on/off) option.
    chunkedUploadPart:
      description: An object that contains information about the chunked upload part.
      properties:
        sequence:
          description: The order of the part in the chunked upload.
          type: string
        size:
          description: |-
            The size of the part in bytes. 

            We recommend that a chunked upload part is no larger than a few MB in size.
          type: string
      type: object
      x-ds-definition-name: chunkedUploadPart
      x-ms-summary: An object that contains information about the chunked upload part.
    chunkedUploadRequest:
      description: This is the request object for uploading a chunked upload.
      properties:
        chunkedUploadId:
          description: |-
            The id of the chunked upload.

            **Note**: This property is ignored in requests, and overridden with an auto-generated value in responses.
          type: string
        data:
          description: |-
            A Base64-encoded representation of the content hat is used to upload the file. 

            Maximum size: 50 MB. However, data is also subject to REST API limits regarding request sizes, and Internet Information Systems (IIS) might place further constraints on file size.
          type: string
      type: object
      x-ds-definition-name: chunkedUploadRequest
      x-ms-summary: This is the request object for uploading a chunked upload.
    chunkedUploadResponse:
      description: This response object is returned after you upload a chunked upload.
      properties:
        checksum:
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content that has been uploaded to the chunked upload. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the commit action is refused.
          type: string
        chunkedUploadId:
          description: "The id of the chunked upload. "
          type: string
        chunkedUploadParts:
          description: A list of the parts that compose the chunked upload, including their byte sizes. The list must be contiguous before you can commit the chunked upload.
          items:
            $ref: "#/components/schemas/chunkedUploadPart"
          type: array
        chunkedUploadUri:
          description: "The URI that you use to reference the chunked upload in other API requests, such as envelope document and envelope attachment requests. "
          type: string
        committed:
          description: "When **true**, the chunked upload has been committed. A committed chunked upload can no longer receive any additional parts and is ready for use within other API requests. "
          type: string
        expirationDateTime:
          description: |
            The UTC time at which the chunked upload expires and is no longer addressable. 

            **Note**: You must fully upload and use a chunked upload within 20 minutes of initializing it.
          type: string
        maxChunkedUploadParts:
          description: "The maximum number of parts allowed for a chunked upload. This value is configurable per DocuSign environment, account, or integrator. The default value is 128. The maximum possible value is 256.  "
          type: string
        maxTotalSize:
          description: The maximum total size allowed for a chunked upload. This value is configured per DocuSign environment, account, or integrator. The default value is 50 MB.
          type: string
        totalSize:
          description: |-
            The total size of the parts of the chunked upload.

            **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents.
          type: string
      type: object
      x-ds-definition-name: chunkedUploadResponse
      x-ms-summary: This response object is returned after you upload a chunked upload.
    cloudStorageProvider:
      description: Contains details about a specific cloud storage provider.
      properties:
        authenticationUrl:
          description: "The authentication URL used for the cloud storage provider. This information is only included in the response if the user has not passed authentication for the cloud storage provider. If the redirectUrl query string is provided, the returnUrl is appended to the authenticationUrl. "
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        redirectUrl:
          description: |-
            The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.

            The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
          type: string
        service:
          description: The service name for the cloud storage provider.
          type: string
        serviceId:
          description: The DocuSign-generated ID for the cloud storage provider.
          type: string
      type: object
      x-ds-definition-name: cloudStorageProvider
      x-ms-summary: Contains details about a specific cloud storage provider.
    cloudStorageProviders:
      description: ""
      properties:
        storageProviders:
          description: An Array containing the storage providers associated with the user.
          items:
            $ref: "#/components/schemas/cloudStorageProvider"
          type: array
      type: object
      x-ds-definition-name: cloudStorageProviders
      x-ms-summary: ""
    comment:
      description: ""
      properties:
        envelopeId:
          description: The Guid of the envelope the comment thread belongs to.
          type: string
        hmac:
          description: Reserved for DocuSign.
          type: string
        id:
          description: The unique identifier for the comment.
          type: string
        mentions:
          description: An array of userIds that are mentioned directly in the body of a comment.
          items:
            type: string
          type: array
        read:
          description: When **true**, indicates that the comment was read.
          type: boolean
        sentByEmail:
          description: The email address of the user who created the comment.
          type: string
        sentByFullName:
          description: The full name of the user who created the comment.
          type: string
        sentByImageId:
          description: Reserved for DocuSign.
          type: string
        sentByInitials:
          description: The initials of the user who created the comment.
          type: string
        sentByRecipientId:
          description: The recipient id of the user who created the comment.
          type: string
        sentByUserId:
          description: The user id of the user who created the comment.
          type: string
        signingGroupId:
          description: The id of the signing group that can view the comment or that created the comment.
          type: string
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        subject:
          description: The subject of the envelope.
          type: string
        tabId:
          description: The unique identifier for the tab that represents the comment thread.
          type: string
        text:
          description: |-
            The content of the comment, as UTF-8 text. 

            Maximum Length: 500 characters.

            **Note**: The maximum size allowed for the entire message body is 32 KB. 
          type: string
        threadId:
          description: The unique identifier for the comment thread.
          type: string
        threadOriginatorId:
          description: The userId of the user who created the thread.
          type: string
        timeStampFormatted:
          description: The time the comment was created, formatted according to the format of the user who created the comment.
          type: string
        timestamp:
          description: The time the comment was created.
          type: string
        visibleTo:
          description: The user ids of the users that the comment is visible to.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: comment
      x-ms-summary: ""
    commentHistoryResult:
      description: ""
      properties:
        comments:
          description: An array of comment tabs that contain information about users' comments on documents.
          items:
            $ref: "#/components/schemas/comment"
          type: array
        count:
          description: The maximum number of results to return.
          format: int32
          type: integer
        endTimetoken:
          description: ""
          type: string
        startTimetoken:
          description: ""
          type: string
      type: object
      x-ds-definition-name: commentHistoryResult
      x-ms-summary: ""
    commentPublish:
      description: ""
      properties:
        id:
          description: A unique ID for the Salesforce object.
          type: string
        mentions:
          description: An array of userIds that are mentioned directly in the body of a comment.
          items:
            type: string
          type: array
        text:
          description: "Specifies the text that is shown in the dropdown list. "
          type: string
        threadAnchorKeys:
          additionalProperties:
            type: string
          description: ""
          type: object
        threadId:
          description: The unique identifier for the comment thread.
          type: string
        visibleTo:
          description: ""
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: commentPublish
      x-ms-summary: ""
    commentThread:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        comments:
          description: An array of comment tabs that contain information about users' comments on documents.
          items:
            $ref: "#/components/schemas/comment"
          type: array
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        threadId:
          description: The unique identifier for the comment thread.
          type: string
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: commentThread
      x-ms-summary: ""
    commentsPublish:
      description: ""
      properties:
        commentsToPublish:
          description: ""
          items:
            $ref: "#/components/schemas/commentPublish"
          type: array
      type: object
      x-ds-definition-name: commentsPublish
      x-ms-summary: ""
    commissionCounty:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: commissionCounty
      x-ms-summary: ""
    commissionExpiration:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: commissionExpiration
      x-ms-summary: ""
    commissionNumber:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: commissionNumber
      x-ms-summary: ""
    commissionState:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: commissionState
      x-ms-summary: ""
    company:
      description: |
        A tab that displays the recipient's company name.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: company
      x-ms-summary: |
        A tab that displays the recipient's company name.
    completeSignHashResponse:
      description: ""
      properties:
        documents:
          description: A complex element that contains details about the documents associated with the envelope.
          items:
            $ref: "#/components/schemas/signHashDocument"
          type: array
        redirectionUrl:
          description: ""
          type: string
        remainingSignatureRequests:
          description: For documents that require multiple signatures, this is the number of signature requests remaining.
          type: string
      type: object
      x-ds-definition-name: completeSignHashResponse
      x-ms-summary: ""
    compositeTemplate:
      description: |-
        This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.

        [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
      properties:
        compositeTemplateId:
          description: The id of this composite template. This id is used as a reference when adding document object information. If used, the document's `content-disposition` must include the composite template ID to which the document should be added. If a composite template ID is not specified in the content-disposition, the document is applied based on the value of the `documentId` property only. If no document object is specified, the composite template inherits the first document.
          type: string
        document:
          $ref: "#/components/schemas/document"
        inlineTemplates:
          description: " Zero or more inline templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value."
          items:
            $ref: "#/components/schemas/inlineTemplate"
          type: array
        pdfMetaDataTemplateSequence:
          description: |-
            A number representing the sequence in which to apply the template that contains the PDF metadata.

            Example: `4`
          type: string
        serverTemplates:
          description: Zero or more server-side templates and their position in the overlay. If supplied, they are overlaid into the envelope in the order of their Sequence value
          items:
            $ref: "#/components/schemas/serverTemplate"
          type: array
      type: object
      x-ds-definition-name: compositeTemplate
      x-ms-summary: |-
        This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.

        [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
    conditionalRecipientRule:
      description: ""
      properties:
        conditions:
          description: An array of conditions that satisfy the rule.
          items:
            $ref: "#/components/schemas/conditionalRecipientRuleCondition"
          type: array
        order:
          description: |-
            An integer that specifies the order in which rules are processed.
            Lower values are processed before higher values.
          type: string
        recipientGroup:
          $ref: "#/components/schemas/recipientGroup"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
      type: object
      x-ds-definition-name: conditionalRecipientRule
      x-ms-summary: ""
    conditionalRecipientRuleCondition:
      description: ""
      properties:
        filters:
          description: ""
          items:
            $ref: "#/components/schemas/conditionalRecipientRuleFilter"
          type: array
        order:
          description: |-
            An integer that specifies the order in which rules are processed.
            Lower values are processed before higher values.
          type: string
        recipientLabel:
          description: ""
          type: string
      type: object
      x-ds-definition-name: conditionalRecipientRuleCondition
      x-ms-summary: ""
    conditionalRecipientRuleFilter:
      description: ""
      properties:
        operator:
          description: ""
          type: string
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        scope:
          description: Must be set to "api".
          type: string
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        value:
          description: "Specifies the value of the tab. "
          type: string
      type: object
      x-ds-definition-name: conditionalRecipientRuleFilter
      x-ms-summary: ""
    connectConfigResults:
      description: This object contains the results of a ConnectConfigurations::GET method.
      properties:
        configurations:
          description: An array of DocuSign Connect configurations.
          items:
            $ref: "#/components/schemas/connectCustomConfiguration"
          type: array
        totalRecords:
          description: The number of results.
          type: string
      type: object
      x-ds-definition-name: connectConfigResults
      x-ms-summary: This object contains the results of a ConnectConfigurations::GET method.
    connectCustomConfiguration:
      description: ""
      properties:
        allUsers:
          description: When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
          type: string
        allowEnvelopePublish:
          description: When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
          type: string
        allowSalesforcePublish:
          description: When set to **true**  (default), DocuSign sends data to the designated Salesforce account through Connect.
          type: string
        configurationType:
          description: If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
          type: string
        connectId:
          description: " Specifies the DocuSign generated ID for the Connect configuration.  "
          type: string
        enableLog:
          description: |-
            When set to **true**, Connect logging is turned on. We recommend that you enable this functionality, which helps you troubleshoot any issues. 

            You can have a maximum of 100 active logs in your account. You can view the entries in active logs in the **Logs** tab in the console.
          type: string
        envelopeEvents:
          description: |-
            A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. 

            To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
          items:
            type: string
          type: array
        eventData:
          $ref: "#/components/schemas/connectEventData"
        externalFolderId:
          description: The id of an external folder.
          type: string
        externalFolderLabel:
          description: The label for an external folder.
          type: string
        includeCertSoapHeader:
          description: ""
          type: string
        includeCertificateOfCompletion:
          description: "When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. "
          type: string
        includeDocumentFields:
          description: "When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. "
          type: string
        includeDocuments:
          description: reserved
          type: string
        includeEnvelopeVoidReason:
          description: "When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. "
          type: string
        includeHMAC:
          description: ""
          type: string
        includeSenderAccountasCustomField:
          description: When set to **true**, Connect will include the sender account as Custom Field in the data.
          type: string
        includeTimeZoneInformation:
          description: When set to **true**, Connect will include the envelope time zone information.
          type: string
        name:
          description: The name of the Connect configuration. The name helps identify the configuration in the list.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        recipientEvents:
          description: |-
            An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the `url` property. 

            To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
          items:
            type: string
          type: array
        requireMutualTls:
          description: When set to **true**, [Mutual TLS](https://developers.docusign.com/esign-rest-api/guides/mutual-tls-intro) authentication is enabled.
          type: string
        requiresAcknowledgement:
          description: |+
            When set to **true**, event delivery acknowledgements are enabled for your Connect configuration.

            DocuSign Connect awaits a valid 200 response from your application acknowledging that it received a message. If you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and places it into a failure queue. It is imperative that you acknowledge successful receipt of Connect events as they occur by sending a 200 event back.

            #### When set to **true** and Send Individual Messages (SIM) mode is activated

            If the HTTP status response to a notification message is not in the range of 200-299,
            then the message delivery failed, and the configuration is marked as down.

            The message will be queued and retried once per day.
            While a Connect configuration is marked down, subsequent notifications will not be tried. Instead they will be immediately queued with the reason `Pending`.
            When a message succeeds, all queued messages for the configuration will be tried immediately, in order.

            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **true** and SIM mode is not activated

            If the HTTP Status response to a notification message is not in the range of 200-299,  then the message delivery failed, and the message is queued.

            The message will be retried after at least a day the next time a subsequent message is successfully sent to this configuration (subscription).  Subsequent notifications will be tried when they occur.
            There is a maximum of ten retries. Alternately, you can use **Republish Connect Information** to manually republish the notification.

            #### When set to **false**

            When `requiresAcknowledgement` is set to **false** and you do not acknowledge receiving an event notification message within 100 seconds, DocuSign treats the message as a failure and determines that the server is unavailable. It does not retry to send the notification message, and you must handle the failure manually.

          type: string
        salesforceApiVersion:
          description: The version of the Salesforce API that you are using.
          type: string
        salesforceAuthcode:
          description: ""
          type: string
        salesforceCallBackUrl:
          description: ""
          type: string
        salesforceDocumentsAsContentFiles:
          description: When set to **true**, DocuSign can use documents in your Salesforce account for sending and signing.
          type: string
        senderOverride:
          description: ""
          type: string
        senderSelectableItems:
          description: "This property sets the items that are available for selection when adding or editing Connect objects. "
          items:
            type: string
          type: array
        sfObjects:
          description: An array of Salesforce objects.
          items:
            $ref: "#/components/schemas/connectSalesforceObject"
          type: array
        signMessageWithX509Certificate:
          description: "When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. "
          type: string
        soapNamespace:
          description: |-
            The namespace of the SOAP interface.

            **Note**: If `useSoapInterface` is set to **true**, you must set this value.
          type: string
        urlToPublishTo:
          description: This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address.
          type: string
        useSoapInterface:
          description: "When set to **true**, the notifications are sent to your endpoint as SOAP requests. "
          type: string
        userIds:
          description: |-
            A comma-separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When a tracked event occurs for a set user, the a notification message is sent to your Connect listener.

            **Note**: If allUsers is set to `false` then you must provide a list of user ids.
          items:
            type: string
          type: array
        userName:
          description: The name of the user.
          type: string
      type: object
      x-ds-definition-name: connectCustomConfiguration
      x-ms-summary: ""
    connectDebugLog:
      description: ""
      properties:
        connectConfig:
          description: The name of the Connect configuration.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        eventDateTime:
          description: The UTC date and time of the event.
          type: string
        eventDescription:
          description: A description of the event.
          type: string
        payload:
          description: Log output.
          type: string
      type: object
      x-ds-definition-name: connectDebugLog
      x-ms-summary: ""
    connectEventData:
      description: |-
        This object lets you choose the data format of your Connect response.
        For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications). 
      properties:
        format:
          description: |+
            The format of the response. One of:

            If the value of `version` is `restv2.1`, the value of this property is one of:

            - `json` (Default when `version` is `rest2.1`.
            - `xml`

            If the value of `version` is `legacy` or empty, the only valid value is `xml`.


            For more information about formats, see the *Data format* section in [Choose the architecture of your webhook](https://developers.docusign.com/platform/webhooks/connect/architecture/).

          type: string
        includeData:
          description: |
            A string array of the data to be included.
            The default is the empty array `[]`.

            - `attachments`: Include attachments associated with the envelope.
            - `custom_fields`: Include the custom fields associated with the envelope.
            - `documents`: Include the documents associated with the envelope.
            - `extensions`: Include information about the email settings associated with the envelope.
            - `folders`: Include the folder where the envelope exists.
            - `payment_tabs`: Include the payment tabs associated with the envelope.
            - `powerform`: Include the PowerForms associated with the envelope.
            - `recipients`: Include the recipients associated with the envelope.
            - `tabs`: Include the tabs associated with the envelope.
          items:
            type: string
          type: array
        version:
          description: |-
            Specifies how the connection data is returned.

            - `legacy`: (Default) The response follows the original Connect Message format.
            - `restv2.1`: The response follows the new Connect Message format.
          type: string
      type: object
      x-ds-definition-name: connectEventData
      x-ms-summary: |-
        This object lets you choose the data format of your Connect response.
        For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications). 
    connectFailureFilter:
      description: A list of failed envelope IDs to retry.
      properties:
        envelopeIds:
          description: |
            An array of envelope GUIDs.

            Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
          items:
            type: string
          type: array
        synchronous:
          description: Must be **false**. Setting this property to any other value will result in errors.
          type: string
      type: object
      x-ds-definition-name: connectFailureFilter
      x-ms-summary: A list of failed envelope IDs to retry.
    connectFailureResult:
      description: This object contains details about a Connect failure result.
      properties:
        configId:
          description: Reserved for DocuSign.
          type: string
        configUrl:
          description: |
            Reserved for DocuSign.
          type: string
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        status:
          description: The connection status.
          type: string
        statusMessage:
          description: A human-readable message describing the connection status.
          type: string
      type: object
      x-ds-definition-name: connectFailureResult
      x-ms-summary: This object contains details about a Connect failure result.
    connectFailureResults:
      description: ""
      properties:
        retryQueue:
          description: Details about a Connect failure result.
          items:
            $ref: "#/components/schemas/connectFailureResult"
          type: array
      type: object
      x-ds-definition-name: connectFailureResults
      x-ms-summary: ""
    connectLog:
      description: Contains information about a Connect log entry.
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        configUrl:
          description: The web address of the listener or retrieving service endpoint for Connect.
          type: string
        connectDebugLog:
          description: |-
            A complex element containing information about the Connect configuration, error details, date/time, description and payload.
            This information is included in the response only when the `additional_info` query is set to **true**.
            This additional information is only available when retrieving general logs with [ConnectEvents:get](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/get), but not when retrieving failure logs with [ConnectEvents:listFailures](https://developers.docusign.com/docs/esign-rest-api/reference/Connect/ConnectEvents/listFailures).
          items:
            $ref: "#/components/schemas/connectDebugLog"
          type: array
        connectId:
          description: The id of the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post.
          type: string
        created:
          description: The UTC DateTime when the Connect post was created.
          type: string
        email:
          description: The email address of the envelope sender.
          type: string
        envelopeId:
          description: The id of the envelope that failed to post.
          type: string
        error:
          description: The error that caused the Connect post to fail.
          type: string
        failureId:
          description: The failure log ID for the failure.
          type: string
        failureUri:
          description: The URI for the Connect post failure.
          type: string
        lastTry:
          description: The UTC DateTime of the last attempt to post.
          type: string
        logId:
          description: The Connect log ID for the entry.
          type: string
        logUri:
          description: The URI for the Connect log entry.
          type: string
        retryCount:
          description: The number of times the Connect post has been retried.
          type: string
        retryUri:
          description: A URI that you can use to retry to publish the Connect post.
          type: string
        status:
          description: |-
            The envelope status for the Connect post. Possible values are:
            - `Any`
            - `Voided`
            - `Created`
            - `Deleted`
            - `Sent`
            - `Delivered`
            - `Signed`
            - `Completed`
            - `Declined`
            - `TimedOut`
            - `Template`
            - `Processing`

            For details about these statuses, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
          type: string
        subject:
          description: The subject of the envelope.
          type: string
        userName:
          description: The name of the sender of the envelope.
          type: string
      type: object
      x-ds-definition-name: connectLog
      x-ms-summary: Contains information about a Connect log entry.
    connectLogs:
      description: ""
      properties:
        failures:
          description: A list of Connect failure logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        logs:
          description: A list of Connect general logs.
          items:
            $ref: "#/components/schemas/connectLog"
          type: array
        totalRecords:
          description: The count of records in the log list.
          type: string
        type:
          description: ""
          type: string
      type: object
      x-ds-definition-name: connectLogs
      x-ms-summary: ""
    connectSalesforceField:
      description: This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
      properties:
        dsAttribute:
          description: ""
          type: string
        dsLink:
          description: A URL that links to the information in the DocuSign field.
          type: string
        dsNode:
          description: ""
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        sfField:
          description: ""
          type: string
        sfFieldName:
          description: The name of the Salesforce field.
          type: string
        sfFolder:
          description: The name of the Salesforce folder.
          type: string
        sfLockedValue:
          description: ""
          type: string
      type: object
      x-ds-definition-name: connectSalesforceField
      x-ms-summary: This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
    connectSalesforceObject:
      description: |-
        A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.

        When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see 
        [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
      properties:
        active:
          description: When set to **true**, the `connectSalesforceObject` is active.
          type: string
        description:
          description: A description of the `connectSalesforceObject`.
          type: string
        id:
          description: The id of the `connectSalesforceObject`.
          type: string
        insert:
          description: ""
          type: string
        onCompleteOnly:
          description: When **true**, Salesforce is updated only when the envelope is complete.
          type: string
        selectFields:
          description: The DocuSign and Salesforce fields that you want to use to match a Salesforce object with DocuSign information. This information tells Connect when to send updates to Salesforce.
          items:
            $ref: "#/components/schemas/connectSalesforceField"
          type: array
        sfObject:
          description: The Salesforce.com object type, such as `case`, `contact`, or `opportunity`.
          type: string
        sfObjectName:
          description: |-
            A name for the Salesforce object.

            **Note**: You can enter any name for the object. It does not have to match the `sfObject` property.
          type: string
        updateFields:
          description: |-
            The DocuSign and Salesforce fields that you want to update. 

            **Note**: You can choose to update SalesForce (with information from DocuSign) only, update DocuSign only, or both.
          items:
            $ref: "#/components/schemas/connectSalesforceField"
          type: array
      type: object
      x-ds-definition-name: connectSalesforceObject
      x-ms-summary: |-
        A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.

        When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see 
        [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
    connectUserObject:
      description: ""
      properties:
        configurationtype:
          description: The type of custom Connect configuration being accessed.
          type: string
        connectId:
          description: The ID of the custom Connect configuration being accessed.
          type: string
        enabled:
          description: Boolean value that indicates whether the custom Connect configuration is enabled or not.
          type: string
        hasAccess:
          description: ""
          type: string
        senderSearchableItems:
          description: ""
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: connectUserObject
      x-ms-summary: ""
    consoleViewRequest:
      description: The request object for the EnvelopeViews::createConsole method.
      properties:
        envelopeId:
          description: The id of the envelope.
          type: string
        returnUrl:
          description: |-
            (Optional) The URL to which the user should be redirected after the console view session has ended.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
          type: string
      type: object
      x-ds-definition-name: consoleViewRequest
      x-ms-summary: The request object for the EnvelopeViews::createConsole method.
    consumerDisclosure:
      description: Details about consumer disclosures.
      properties:
        accountEsignId:
          description: The GUID of the account associated with the consumer disclosure.
          type: string
        allowCDWithdraw:
          description: |-
            When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**.
            **Note**: Only Admin users can change this setting.
          type: string
        allowCDWithdrawMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        changeEmail:
          description: |-
            If the customer needs to change their email address, this is the email address to which they should the change request.

            Maximum length: 100 characters.
          type: string
        changeEmailOther:
          description: |-
            Other information about the requirements for the user to change their email address.

            Maximum length: 255 characters.

            Example: 

            `We do not require any other information from you to change your email address.`
          type: string
        companyName:
          description: |-
            Specifies the company name used in the disclosure. The default value is the account name.

            However, if your account uses signing brands that specify a company name, you can substitute the brand's company name by setting the `useBrand` property to **true**. Whenever an envelope is sent from the account that uses a signing brand with a specified `companyName`, that value is used in email notifications and in the signing experience.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. You must also set the value of the `useBrand` property to **true**.
          type: string
        companyPhone:
          description: The phone number of the company associated with the consumer disclosure, as a free-formatted string.
          type: string
        copyCostPerPage:
          description: |-
            The cost per page if the customer requests paper copies.

            Example: 

            `0.0000`
          type: string
        copyFeeCollectionMethod:
          description: |-
            Specifies the fee collection method for cases in which the customer requires paper copies of the document.

            Maximum length: 255 characters.

            Example: 

            `We will bill you for any fees at that time, if any.`
          type: string
        copyRequestEmail:
          description: |-
            The email address to which the customer should send a request for copies of a document.

            Maximum length: 100 characters.
          type: string
        custom:
          description: When set to **true**, indicates that the consumer disclosure is a custom disclosure. The default is **false**.
          type: string
        enableEsign:
          description: When set to **true** (default), indicates that eSign is enabled.
          type: string
        esignAgreement:
          description: The final, assembled text of the Electronic Record and Signature Disclosure that includes the appropriate `companyName` and other specifics. It also includes the HTML tags used for formatting.
          type: string
        esignText:
          description: |-
            The template for the Electronic Record and Signature Disclosure, which contains placeholders for information such as the `companyName`. It also includes the HTML tags used for formatting.

            **Note**: If you are switching to or updating a custom disclosure, you can edit both the text and the HTML formatting.
          type: string
        languageCode:
          description: |-
            The code for the language version of the disclosure. The following languages are supported:

            - Arabic (`ar`)
            - Bulgarian (`bg`)
            - Czech (`cs`)
            - Chinese Simplified (`zh_CN`)
            - Chinese Traditional (`zh_TW`)
            - Croatian (`hr`)
            - Danish (`da`)
            - Dutch (`nl`)
            - English US (`en`)
            - English UK (`en_GB`)
            - Estonian (`et`)
            - Farsi (`fa`)
            - Finnish (`fi`)
            - French (`fr`)
            - French Canadian (`fr_CA`)
            - German (`de`)
            - Greek (`el`)
            - Hebrew (`he`)
            - Hindi (`hi`)
            - Hungarian (`hu`)
            - Bahasa Indonesian (`id`)
            - Italian (`it`)
            - Japanese (`ja`)
            - Korean (`ko`)
            - Latvian (`lv`)
            - Lithuanian (`lt`)
            - Bahasa Melayu (`ms`)
            - Norwegian (`no`)
            - Polish (`pl`)
            - Portuguese (`pt`)
            - Portuguese Brazil (`pt_BR`)
            - Romanian (`ro`)
            - Russian (`ru`)
            - Serbian (`sr`)
            - Slovak (`sk`)
            - Slovenian (`sl`)
            - Spanish (`es`)
            - Spanish Latin America (`es_MX`)
            - Swedish (`sv`)
            - Thai (`th`)
            - Turkish (`tr`)
            - Ukrainian (`uk`) 
            - Vietnamese (`vi`)

            Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
          type: string
        mustAgreeToEsign:
          description: When set to **true**, the  recipient must agree to the consumer disclosure. The value of this property is read only. It is calculated based on the account setting `consumerDisclosureFrequency` and the user's actions.
          type: string
        pdfId:
          description: |-
            **Deprecated**. 

            The `pdfId` property in the consumer_disclosure PUT request is deprecated. For security reasons going forward, any value provided in the request packet must be ignored. 
          type: string
        useBrand:
          description: |-
            When set to **true**, specifies that the company name in the signing brand is used for the disclosure. Whenever an envelope is sent from the account that uses a signing brand with a specified company name, that value is used in email notifications and in the signing experience.  

            When set to **false** (default), or if the signing brand does not specify a company name, the account name is used instead.

            **Note**: This substitution only works if you use the default legal disclosure or if you apply the `companyName` to the merge fields in a custom ERSD. 
          type: string
        useConsumerDisclosureWithinAccount:
          description: When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement.
          type: string
        useConsumerDisclosureWithinAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        withdrawAddressLine1:
          description: |-
            Contains the first address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawAddressLine2:
          description: |-
            Contains the second address line of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawByEmail:
          description: When set to **true** (default), indicates that the customer can withdraw consent by email.
          type: string
        withdrawByMail:
          description: When set to **true**, indicates that the customer can withdraw consent by postal mail. The default is **false**.
          type: string
        withdrawByPhone:
          description: When set to **true**, indicates that the customer can withdraw consent by phone. The default is **false**.
          type: string
        withdrawCity:
          description: |-
            Contains the city of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 50 characters. 
          type: string
        withdrawConsequences:
          description: |-
            Text indicating the consequences of withdrawing consent.

            Maximum length: 255 characters.
          type: string
        withdrawEmail:
          description: |-
            Contains the email address to which a customer can send a consent withdrawal notification.

            Maximum length: 100 characters. 
          type: string
        withdrawOther:
          description: |-
            Contains any other information needed to withdraw consent.

            Maximum length: 255 characters.

            Example:

            `We do not need any other information from you to withdraw consent.`
          type: string
        withdrawPhone:
          description: |-
            Contains the phone number that a customer can call to register consent withdrawal notification as a free-formatted string.

            Maximum length: 20 characters. 
          type: string
        withdrawPostalCode:
          description: |-
            Contains the postal code of the postal address to which a customer can send a consent withdrawal notification.

            Maximum length: 20 characters. 
          type: string
        withdrawState:
          description: |-
            Contains the state of the postal address to which a customer can send a consent withdrawal notification.

            Example: `PA`
          type: string
      type: object
      x-ds-definition-name: consumerDisclosure
      x-ms-summary: Details about consumer disclosures.
    contact:
      description: ""
      properties:
        cloudProvider:
          description: |-
            The cloud service that provided the contact. Valid values are:

            - `rooms`
            - `docusignCore` (default)

            <!-- Future:

            - `Box`
            - `GoogleDrive`
            - `Dropbox`
            - `SalesForce`
            - `SkyDrive`

            -->
          type: string
        cloudProviderContainerId:
          description: The id of the container at the cloud provider. For example, this might be the room id for a DocuSign Transaction Room.
          type: string
        contactId:
          description: The id of a contact person in the account's address book.
          type: string
        contactPhoneNumbers:
          description: |-
            A list of the contact's phone numbers.

            **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:

            - Sending an envelope by using SMS
            - Using phone authentication

            You must ask the user who added the contact for the phone number and then manually enter it into the authentication box.
          items:
            $ref: "#/components/schemas/contactPhoneNumber"
          type: array
        contactUri:
          description: The URI for retrieving information about the contact.
          type: string
        emails:
          description: ""
          items:
            type: string
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        isOwner:
          description: ""
          type: boolean
        name:
          description: ""
          type: string
        organization:
          description: ""
          type: string
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        signingGroup:
          description: ""
          type: string
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
      type: object
      x-ds-definition-name: contact
      x-ms-summary: ""
    contactGetResponse:
      description: This response object contains information about the contacts associated with an account.
      properties:
        contacts:
          description: A list of contacts.
          items:
            $ref: "#/components/schemas/contact"
          type: array
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: contactGetResponse
      x-ms-summary: This response object contains information about the contacts associated with an account.
    contactModRequest:
      description: The request object containing the new information for the contacts.
      properties:
        contactList:
          description: A list of contacts.
          items:
            $ref: "#/components/schemas/contact"
          type: array
      type: object
      x-ds-definition-name: contactModRequest
      x-ms-summary: The request object containing the new information for the contacts.
    contactPhoneNumber:
      description: Details about the phone numbers associated with a specific contact.
      properties:
        phoneNumber:
          description: |-
            The contact's phone number.

            Example: `+12223334444`
          type: string
        phoneType:
          description: |-
            The type of phone number. Valid values are:

            - `home`
            - `mobile`
            - `work`
            - `other`
            - `fax`
          type: string
      type: object
      x-ds-definition-name: contactPhoneNumber
      x-ms-summary: Details about the phone numbers associated with a specific contact.
    contactUpdateResponse:
      description: This response objects shows the updated details for the contacts.
      properties:
        contacts:
          description: A list of contacts.
          items:
            $ref: "#/components/schemas/contact"
          type: array
      type: object
      x-ds-definition-name: contactUpdateResponse
      x-ms-summary: This response objects shows the updated details for the contacts.
    correctViewRequest:
      description: The request body for the EnvelopeViews::createCorrect method.
      properties:
        returnUrl:
          description: |-
            (Optional) The URL to which the user should be redirected after the correct/send view session has ended. DocuSign redirects to this URL and includes an event parameter that your app can use.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.

            The event parameters returned are:

            * `send` (user corrected and sent the envelope)
            * `save` (user saved the envelope)
            * `cancel` (user canceled the transaction.)
            * `error` (there was an error when performing the correct or send)
            * `sessionEnd` (the session ended before the user completed a different action)

            **Note**: Include `https://` in the URL or the redirect might not succeed on some browsers.
          type: string
        suppressNavigation:
          description: Specifies whether the window is displayed with or without dressing.
          type: string
        viewUrl:
          description: ""
          type: string
      type: object
      x-ds-definition-name: correctViewRequest
      x-ms-summary: The request body for the EnvelopeViews::createCorrect method.
    country:
      description: ""
      properties:
        isoCode:
          description: ""
          type: string
        name:
          description: ""
          type: string
        provinceValidated:
          description: ""
          type: string
        provinces:
          description: ""
          items:
            $ref: "#/components/schemas/province"
          type: array
      type: object
      x-ds-definition-name: country
      x-ms-summary: ""
    creditCardInformation:
      description: This object contains information about a credit card that is associated with an account.
      properties:
        address:
          $ref: "#/components/schemas/addressInformation"
        cardNumber:
          description: The credit card number.
          type: string
        cardType:
          description: |-
            The type of credit card. Valid values are: 

            - `visa` 
            - `mastercard` 
            - `amex`
          type: string
        cvNumber:
          description: The 3 or 4-digit card verification value (CVV) number associated with the credit card. CVV numbers are also referred to as card security codes (CSCs).
          type: string
        expirationMonth:
          description: The month that the credit card expires, expressed as a number from 1 to 12.
          type: string
        expirationYear:
          description: The year in which the credit card expires, in 4-digit format.
          type: string
        nameOnCard:
          description: The exact name as it appears on the credit card.
          type: string
      type: object
      x-ds-definition-name: creditCardInformation
      x-ms-summary: This object contains information about a credit card that is associated with an account.
    creditCardTypes:
      description: ""
      properties:
        cardTypes:
          description: An array containing supported credit card types.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: creditCardTypes
      x-ms-summary: ""
    currency:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        numericalValue:
          description: ""
          type: string
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number being accessed.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When **true**, the tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: The status of the item.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: currency
      x-ms-summary: ""
    currencyFeatureSetPrice:
      description: Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
      properties:
        currencyCode:
          description: Reserved for DocuSign.
          type: string
        currencySymbol:
          description: Reserved for DocuSign.
          type: string
        envelopeFee:
          description: Reserved for DocuSign.
          type: string
        fixedFee:
          description: Reserved for DocuSign.
          type: string
        seatFee:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: currencyFeatureSetPrice
      x-ms-summary: Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
    currencyPlanPrice:
      description: ""
      properties:
        currencyCode:
          description: Specifies the ISO currency code for the account.
          type: string
        currencySymbol:
          description: Specifies the currency symbol for the account.
          type: string
        perSeatPrice:
          description: |-
            The per-seat price associated with the plan.

            Example: `"456.0000"`
          type: string
        supportIncidentFee:
          description: |-
            The support incident fee charged for each support incident.

            Example: `"$0.00"`
          type: string
        supportPlanFee:
          description: |-
            The support plan fee charged for this plan.

            Example: `"$0.00"`
          type: string
        supportedCardTypes:
          $ref: "#/components/schemas/creditCardTypes"
      type: object
      x-ds-definition-name: currencyPlanPrice
      x-ms-summary: ""
    customField:
      description: This object provides details about a custom field.
      properties:
        customFieldType:
          description: |-
            The type of custom field. Valid values are:

            - `text` (default)
            - `list`
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        fieldId:
          description: The id of the custom field.
          type: string
        listItems:
          description: |-
            For a list custom field, this is an array of strings that represent the items in a list. 

            Maximum Length: 2,000 characters.
          items:
            type: string
          type: array
        name:
          description: The name of the custom field.
          type: string
        required:
          description: When set to **true**, the signer must complete the custom field.
          type: string
        show:
          description: When set to **true**, the custom field displays at the top of the Certificate of Completion.
          type: string
        value:
          description: |-
            Specifies the value of the custom field. 

            Maximum Length: 2,000 characters.
          type: string
      type: object
      x-ds-definition-name: customField
      x-ms-summary: This object provides details about a custom field.
    customFields:
      description: Contains information about custom fields.
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-definition-name: customFields
      x-ms-summary: Contains information about custom fields.
    customFieldsEnvelope:
      description: ""
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-definition-name: customFieldsEnvelope
      x-ms-summary: ""
    customSettingsInformation:
      description: ""
      properties:
        customSettings:
          description: The name/value pair information for the user custom setting.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-definition-name: customSettingsInformation
      x-ms-summary: ""
    date:
      description: |
        A tab that allows the recipient to enter a date. Date tabs
        are one-line fields that allow date information to be
        entered in any format. The tooltip for this tab recommends
        entering the date as MM/DD/YYYY, but this is not enforced.
        The format entered by the signer is retained. If you need a
        particular date format enforced, DocuSign recommends using a
        Text tab with a validation pattern and a validation message
        to enforce the format.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: date
      x-ms-summary: |
        A tab that allows the recipient to enter a date. Date tabs
        are one-line fields that allow date information to be
        entered in any format. The tooltip for this tab recommends
        entering the date as MM/DD/YYYY, but this is not enforced.
        The format entered by the signer is retained. If you need a
        particular date format enforced, DocuSign recommends using a
        Text tab with a validation pattern and a validation message
        to enforce the format.
    dateSigned:
      description: |
        A tab that displays the date that the recipient signed the
        document.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: dateSigned
      x-ms-summary: |
        A tab that displays the date that the recipient signed the
        document.
    dateStampProperties:
      description: |-
        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.

        This property contains the following information about the central rectangle:

        - `DateAreaX`: The X axis position of the top-left corner.
        - `DateAreaY`: The Y axis position of the top-left corner.
        - `DateAreaWidth`: The width of the rectangle.
        - `DateAreaHeight`: The height of the rectangle.
      properties:
        dateAreaHeight:
          description: The height of the rectangle.
          type: string
        dateAreaWidth:
          description: The width of the rectangle.
          type: string
        dateAreaX:
          description: The X axis position of the top-left corner.
          type: string
        dateAreaY:
          description: The Y axis position of the top-left corner.
          type: string
      type: object
      x-ds-definition-name: dateStampProperties
      x-ms-summary: |-
        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.

        This property contains the following information about the central rectangle:

        - `DateAreaX`: The X axis position of the top-left corner.
        - `DateAreaY`: The Y axis position of the top-left corner.
        - `DateAreaWidth`: The width of the rectangle.
        - `DateAreaHeight`: The height of the rectangle.
    decline:
      description: |
        A tab that allows the recipient the option of declining an
        envelope. If the recipient clicks the tab during the signing
        process, the envelope is voided.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        buttonText:
          description: " Specifies the decline text displayed in the tab."
          type: string
        buttonTextMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        declineReason:
          description: The reason the recipient declined the document.
          type: string
        declineReasonMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: decline
      x-ms-summary: |
        A tab that allows the recipient the option of declining an
        envelope. If the recipient clicks the tab during the signing
        process, the envelope is voided.
    diagnosticsSettingsInformation:
      description: ""
      properties:
        apiRequestLogMaxEntries:
          description: Specifies the maximum number of API requests to log.
          type: string
        apiRequestLogRemainingEntries:
          description: Indicates the remaining number of API requests that can be logged.
          type: string
        apiRequestLogging:
          description: " When set to **true**, enables API request logging for the user. "
          type: string
      type: object
      x-ds-definition-name: diagnosticsSettingsInformation
      x-ms-summary: ""
    directDebitProcessorInformation:
      description: Contains information about a bank that processes a customer's direct debit payments.
      properties:
        bankBranchCode:
          description: |-
            The branch code of the bank used for direct debit.

            Maximum Length: 10 characters.
          type: string
        bankCheckDigit:
          description: |-
            The check digit or digits in the international bank account number. These digits are used to confirm the validity of the account.

            Maximum Length: 4 characters.
          type: string
        bankCode:
          description: |-
            The code or number that identifies the bank. This is also known as the sort code.

            Example: `200000`

            Maximum Length: 18 characters.
          type: string
        bankName:
          description: |-
            The name of the direct debit bank.

            Maximum Length: 80 characters.
          type: string
        bankTransferAccountName:
          description: |-
            The name on the direct debit bank account. This field is required for POST and PUT requests.

            Maximum Length: 60 characters.
          type: string
        bankTransferAccountNumber:
          description: |-
            The customer's bank account number. This value will be obfuscated. This field is required for POST and PUT requests.

            Maximum Length: 30 characters.
          type: string
        bankTransferType:
          description: |-
            Specifies the type of direct debit transfer. The value of this field is dependent on the user's country. This field is required for POST and PUT requests. Possible values are:

            - `DirectDebitUK`
            - `DirectEntryAU`
            - `SEPA`
          type: string
        country:
          description: |+
            The user's country. The system populates this value automatically.

          type: string
        email:
          description: |-
            The email address of the user who is associated with the payment method. This field is required for POST and PUT requests.

            Maximum Length: 80 characters.
          type: string
        firstName:
          description: |-
            The user's first name. This field is required for POST and PUT requests.

            Maximum Length: 30 characters.
          type: string
        iBAN:
          description: |-
            The International Bank Account Number (IBAN). 

            Example: `DE89370400440532013000`

            For more information, see [PeopleSoft's guide to Setting Up Banks](https://docs.oracle.com/cd/E16365_01/fscm91pbr0/eng/psbooks/fsbk/chapter.htm?File=fsbk/htm/fsbk03.htm).

            **Note**: This number will be obfuscated.
          type: string
        lastName:
          description: |-
            The user's last name. This field is required for POST and PUT requests.

            Maximum Length: 70 characters.
          type: string
      type: object
      x-ds-definition-name: directDebitProcessorInformation
      x-ms-summary: Contains information about a bank that processes a customer's direct debit payments.
    displayApplianceAccount:
      description: ""
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        optOutAutoNavTextAndTabColorUpdates:
          description: Boolean that allows envelope senders to opt out of the recipient signing auto-navigation feature and opt out of updating tab font color.
          type: boolean
        showInitialConditionalFields:
          description: Boolean that specifies whether conditional field options are initially displayed (before a user makes entries).
          type: boolean
        signingVersion:
          description: ""
          type: string
        tagHasSigBlock:
          description: ""
          type: boolean
      type: object
      x-ds-definition-name: displayApplianceAccount
      x-ms-summary: ""
    displayApplianceInfo:
      description: ""
      properties: {}
      type: object
      x-ds-definition-name: displayApplianceInfo
      x-ms-summary: ""
    displayAppliancePdf:
      description: ""
      properties: {}
      type: object
      x-ds-definition-name: displayAppliancePdf
      x-ms-summary: ""
    displayApplianceSignerAttachment:
      description: ""
      properties: {}
      type: object
      x-ds-definition-name: displayApplianceSignerAttachment
      x-ms-summary: ""
    dobInformationInput:
      description: |-
        Complex type containing:

        * dateOfBirth
        * displayLevelCode
        * receiveInResponse
      properties:
        dateOfBirth:
          description: Specifies the recipient's date, month, and year of birth.
          type: string
        displayLevelCode:
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
          type: string
        receiveInResponse:
          description: A Boolean value that specifies whether the information must be returned in the response.
          type: string
      type: object
      x-ds-definition-name: dobInformationInput
      x-ms-summary: |-
        Complex type containing:

        * dateOfBirth
        * displayLevelCode
        * receiveInResponse
    document:
      description: A document object.
      properties:
        applyAnchorTabs:
          description: Reserved for DocuSign.
          type: string
        assignTabsToRecipientId:
          description: ""
          type: string
        display:
          description: |
            This string sets the display and behavior properties of
            the document during signing. The possible values are:

            * `modal`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a modal window.
              This is the recommended value for supplemental documents. 

            * `download`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a new browser window. 

            * `inline`<br>
              The document is shown in the normal signing window.
              This value is not used with supplemental documents,
              but is the default value for all other documents.
          type: string
        documentBase64:
          description: The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding.
          type: string
        documentFields:
          description: "The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements:\ 


            * name ÃÂ¢ÃÂÃÂ A string that can be a maximum of 50 characters.\ 

            * value ÃÂ¢ÃÂÃÂ A string that can be a maximum of 200 characters.


            *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element.\ \n"
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        documentId:
          description: Specifies the document ID of this document. This value is used by tabs to determine which document they appear in.
          type: string
        encryptedWithKeyManager:
          description: "When set to **true**, the document is been already encrypted by the sender for use with the DocuSign Key Manager Security Appliance.

            \ "
          type: string
        fileExtension:
          description: "The file extension type of the document. Non-PDF documents are converted to PDF.


            If the document is not a PDF, `fileExtension` is required.


            If you try to upload a non-PDF document without a `fileExtension`, you will receive an \"unable to load document\" error message. \ 

            \ "
          type: string
        fileFormatHint:
          description: ""
          type: string
        htmlDefinition:
          $ref: "#/components/schemas/documentHtmlDefinition"
        includeInDownload:
          description: |
            When set to **true**,
            the document is included in the combined document download (`documentsCombinedUri`). 
            The default value is **true**.
          type: string
        matchBoxes:
          description: |
            Matchboxes define areas in a document for document matching when you are creating envelopes. They are only used when you upload and edit a template. 

            A matchbox consists of 5 elements:

            * pageNumber - The document page number  on which the matchbox will appear. 
            * xPosition - The x position of the matchbox on a page. 
            * yPosition - The y position of the matchbox on a page.
            * width - The width of the matchbox. 
            * height - The height of the matchbox. 
          items:
            $ref: "#/components/schemas/matchBox"
          type: array
        name:
          description: The name of the document.
          type: string
        order:
          description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          type: string
        pages:
          description: An array of page objects.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        pdfFormFieldOption:
          description: ""
          type: string
        remoteUrl:
          description: |
            The file id from the cloud storage service where
            the document is located. This information is
            returned using
            [CloudStorage::listFolders](https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage/CloudStorage/listFolders/) or
            [CloudStorage::list](https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage/CloudStorage/list/).
          type: string
        signerMustAcknowledge:
          description: |+
            Sets how the signer interacts with the supplemental document.
            The possible values are: 

            *	`no_interaction`<br>
              No recipient action is required. 

            *	`view`<br>
              The recipient is required to view the document. 

            *	`accept`<br>
              The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. 

            *	`view_accept`<br>
              The recipient is required to view and accept the document.  

          type: string
        signerMustAcknowledgeUseAccountDefault:
          description: ""
          type: boolean
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        transformPdfFields:
          description: |
            When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
      type: object
      x-ds-definition-name: document
      x-ms-summary: A document object.
    documentFieldsInformation:
      description: ""
      properties:
        documentFields:
          description: "The array of name/value custom data strings to be added to a document. Custom document field information is returned in the status, but otherwise is not used by DocuSign. The array contains the elements:\ 


            * name ÃÂ¢ÃÂÃÂ A string that can be a maximum of 50 characters.\ 

            * value ÃÂ¢ÃÂÃÂ A string that can be a maximum of 200 characters.


            *IMPORTANT*: If you are using xml, the name/value pair is contained in a nameValue element.\ \n"
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-definition-name: documentFieldsInformation
      x-ms-summary: ""
    documentHtmlCollapsibleDisplaySettings:
      description: ""
      properties:
        arrowClosed:
          description: ""
          type: string
        arrowColor:
          description: ""
          type: string
        arrowLocation:
          description: ""
          type: string
        arrowOpen:
          description: ""
          type: string
        arrowSize:
          description: ""
          type: string
        arrowStyle:
          description: ""
          type: string
        containerStyle:
          description: ""
          type: string
        labelStyle:
          description: ""
          type: string
        onlyArrowIsClickable:
          description: ""
          type: boolean
        outerLabelAndArrowStyle:
          description: ""
          type: string
      type: object
      x-ds-definition-name: documentHtmlCollapsibleDisplaySettings
      x-ms-summary: ""
    documentHtmlDefinition:
      description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
      properties:
        displayAnchorPrefix:
          description: Contains text that all display anchors must start with. Using at least 4 characters will improve anchor processing performance.
          type: string
        displayAnchors:
          description: An object that defines how to handle a section of the HTML in signing. This property enables an incoming request to make a section of the HTML collapsible and expandable or hidden from view. A start anchor, end anchor, or both are required. If the anchors are not found, the display anchor will be ignored. For a list of the available types, see the `display` enum.
          items:
            $ref: "#/components/schemas/documentHtmlDisplayAnchor"
          type: array
        displayOrder:
          description: The position on the page where the display section appears.
          type: string
        displayPageNumber:
          description: The number of the page on which the display section appears.
          type: string
        documentGuid:
          description: The GUID of the document.
          type: string
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        headerLabel:
          description: Header text or an HTML tag to place above the responsive HTML block.
          type: string
        maxScreenWidth:
          description: If set, the responsive HTML version of the signing document will only display on screens with the specified pixel width or less. If the screen is larger than the value that you specify, the default PDF version of the content displays instead.
          type: string
        removeEmptyTags:
          description: Holds a comma-separated list of HTML tags to remove if they have no text within their node (including child nodes).
          type: string
        showMobileOptimizedToggle:
          description: When set to **true**, the **Mobile-Friendly** toggle displays at the top of the screen on the user's mobile device. This toggle enables the user to switch between the mobile-friendly and PDF versions of a document. For example, the recipient can use this toggle to review the document using the PDF view before they finish signing.
          type: string
        source:
          description: |-
            Specifies the type of responsive signing that will be used with the document. Valid strings are:

            - `document`: The HTML signing page will be generated from the provided document. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
            - `html`: The HTML signing page will be passed directly. For details, see [Converting a PDF to a signable HTML document](https://developers.docusign.com/esign-rest-api/guides/responsive-signing/converting-pdf).
          type: string
      type: object
      x-ds-definition-name: documentHtmlDefinition
      x-ms-summary: Holds the properties that define how to generate the responsive-formatted HTML for the document.
    documentHtmlDefinitionOriginal:
      description: ""
      properties:
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdGuid:
          description: The GUID of the document.
          type: string
        htmlDefinition:
          $ref: "#/components/schemas/documentHtmlDefinition"
      type: object
      x-ds-definition-name: documentHtmlDefinitionOriginal
      x-ms-summary: ""
    documentHtmlDefinitionOriginals:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            $ref: "#/components/schemas/documentHtmlDefinitionOriginal"
          type: array
      type: object
      x-ds-definition-name: documentHtmlDefinitionOriginals
      x-ms-summary: ""
    documentHtmlDefinitions:
      description: ""
      properties:
        htmlDefinitions:
          description: Holds the properties that define how to generate the responsive-formatted HTML for the document.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: documentHtmlDefinitions
      x-ms-summary: ""
    documentHtmlDisplayAnchor:
      description: ""
      properties:
        caseSensitive:
          description: When set to **true**, the start or end anchor strings must match the strings specified by the start and end anchor settings in case as well as in content.
          type: boolean
        displaySettings:
          $ref: "#/components/schemas/documentHtmlDisplaySettings"
        endAnchor:
          description: |-
            Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
          type: string
        removeEndAnchor:
          description: When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.
          type: boolean
        removeStartAnchor:
          description: When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.
          type: boolean
        startAnchor:
          description: |-
            Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
          type: string
      type: object
      x-ds-definition-name: documentHtmlDisplayAnchor
      x-ms-summary: ""
    documentHtmlDisplaySettings:
      description: ""
      properties:
        cellStyle:
          description: Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.
          type: string
        collapsibleSettings:
          $ref: "#/components/schemas/documentHtmlCollapsibleDisplaySettings"
        display:
          description: |
            This string sets the display and behavior properties of
            the document during signing. The possible values are:

            * `modal`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a modal window.
              This is the recommended value for supplemental documents. 

            * `download`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a new browser window. 

            * `inline`<br>
              The document is shown in the normal signing window.
              This value is not used with supplemental documents,
              but is the default value for all other documents.
          type: string
        displayLabel:
          description: The label for the display section.
          type: string
        displayOrder:
          description: The position on the page where the display section appears.
          format: int32
          type: integer
        displayPageNumber:
          description: The number of the page on which the display section appears.
          format: int32
          type: integer
        hideLabelWhenOpened:
          description: When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`.
          type: boolean
        inlineOuterStyle:
          description: Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.
          type: string
        labelWhenOpened:
          description: The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`.
          type: string
        preLabel:
          description: Enables you to add descriptive text that appears before a collapsed section or continue button.
          type: string
        scrollToTopWhenOpened:
          description: When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`.
          type: boolean
        tableStyle:
          description: Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`.
          type: string
      type: object
      x-ds-definition-name: documentHtmlDisplaySettings
      x-ms-summary: ""
    documentTemplate:
      description: ""
      properties:
        documentEndPage:
          description: ""
          type: string
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentStartPage:
          description: ""
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        templateId:
          description: The unique identifier of the template. If this is not provided, DocuSign generates an error and the call fails.
          type: string
      type: object
      x-ds-definition-name: documentTemplate
      x-ms-summary: ""
    documentTemplateList:
      description: ""
      properties:
        documentTemplates:
          description: ""
          items:
            $ref: "#/components/schemas/documentTemplate"
          type: array
      type: object
      x-ds-definition-name: documentTemplateList
      x-ms-summary: ""
    documentVisibility:
      description: This object configures a recipient's read/write access to a document.
      properties:
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        rights:
          description: |-
            Indicates whether the document is editable:

            - `editable`
            - `read_only`
          type: string
        visible:
          description: When **true**, the document is visible to the recipient.
          type: string
      type: object
      x-ds-definition-name: documentVisibility
      x-ms-summary: This object configures a recipient's read/write access to a document.
    documentVisibilityList:
      description: A list of `documentVisibility` objects that specify whether documents are visible to recipients.
      properties:
        documentVisibility:
          description: An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
      type: object
      x-ds-definition-name: documentVisibilityList
      x-ms-summary: A list of `documentVisibility` objects that specify whether documents are visible to recipients.
    downgradRequestBillingInfoResponse:
      description: ""
      properties:
        downgradePlanInformation:
          $ref: "#/components/schemas/downgradePlanUpdateResponse"
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
      type: object
      x-ds-definition-name: downgradRequestBillingInfoResponse
      x-ms-summary: ""
    downgradeBillingPlanInformation:
      description: ""
      properties:
        downgradeEventType:
          description: ""
          type: string
        planInformation:
          $ref: "#/components/schemas/planInformation"
      type: object
      x-ds-definition-name: downgradeBillingPlanInformation
      x-ms-summary: ""
    downgradePlanUpdateResponse:
      description: ""
      properties:
        accountPaymentMethod:
          description: |-
            The type of payment method used for the account. Valid values are:

            - `credit_card`
            - 
          type: string
        downgradeEffectiveDate:
          description: ""
          type: string
        downgradePaymentCycle:
          description: ""
          type: string
        downgradePlanId:
          description: ""
          type: string
        downgradePlanName:
          description: ""
          type: string
        downgradeRequestStatus:
          description: ""
          type: string
        message:
          description: ""
          type: string
      type: object
      x-ds-definition-name: downgradePlanUpdateResponse
      x-ms-summary: ""
    draw:
      description: ""
      properties:
        allowSignerUpload:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        useBackgroundAsCanvas:
          description: ""
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: draw
      x-ms-summary: ""
    eNoteConfiguration:
      description: This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
      properties:
        apiKey:
          description: ""
          type: string
        connectConfigured:
          description: When **false**, the user must configure Connect and eOriginal for the integration to work.
          type: string
        eNoteConfigured:
          description: |-
            When **false**, the user must configure eNote for the feature to work.

            **Note**: In the account settings, `allowENoteEOriginal` must be set to **true** to make changes to the configuration.
          type: string
        organization:
          description: The name of the organization.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        userName:
          description: The user's username.
          type: string
      type: object
      x-ds-definition-name: eNoteConfiguration
      x-ms-summary: This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
    editor:
      description: A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |-
            The recipient's email address. Notification of the document to sign is sent to this email address. 

            Maximum length: 100 characters. 
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: |-
            The recipient's first name. 

            Maximum Length: 50 characters.
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: editor
      x-ms-summary: A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
    email:
      description: |
        A tab that allows the recipient to enter an email address.
        This is a one-line field that checks that a valid email
        address is entered. It uses the same parameters as a Text
        tab, with the validation message and pattern set for email
        information.

        When getting information that includes
        this tab type, the original value of the tab when the
        associated envelope was sent is included in the response.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: email
      x-ms-summary: |
        A tab that allows the recipient to enter an email address.
        This is a one-line field that checks that a valid email
        address is entered. It uses the same parameters as a Text
        tab, with the validation message and pattern set for email
        information.

        When getting information that includes
        this tab type, the original value of the tab when the
        associated envelope was sent is included in the response.
    emailAddress:
      description: |
        A tab that displays the recipient's email as entered in the
        recipient information.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab id for the custom tab to be applied. This property can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: emailAddress
      x-ms-summary: |
        A tab that displays the recipient's email as entered in the
        recipient information.
    emailSettings:
      description: |-
        A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent. 

        When the emailSettings information is used for an envelope, it only applies to that envelope. 

        **IMPORTANT**: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings. 

        EmailSettings consists of: 

        * replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
        * replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
        * bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option. 
        DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
        *Example*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
      properties:
        bccEmailAddresses:
          description: |-
            An array containing the email address that should receive a copy of all email communications related to an envelope for archiving purposes. Maximum Length: 100 characters.

            While this property is an array, note that it takes only a single email address.

            **Note**: Only users with the `canManageAccount` setting set to **true** can use this option. 

            DocuSign verifies that the email format is correct, but does not verify that the email address is active. You can use this for archiving purposes. However, using this property overrides the BCC for Email Archive information setting for this envelope. 

            **Example**: if your account has BCC for Email Archive set up for the email address archive@mycompany.com and you send an envelope using the BCC Email Override to send a BCC email to salesarchive@mycompany.com, then a copy of the envelope is only sent to the salesarchive@mycompany.com email address.
          items:
            $ref: "#/components/schemas/bccEmailAddress"
          type: array
        replyEmailAddressOverride:
          description: "The Reply To email address to use for email replies, instead of the one that is configured at the account level. DocuSign verifies that the email address is in a correct format, but does not verify that it is active. Maximum Length: 100 characters."
          type: string
        replyEmailNameOverride:
          description: "The name to associate with the Reply To email address, instead of the name that is configured at the account level. Maximum Length: 100 characters."
          type: string
      type: object
      x-ds-definition-name: emailSettings
      x-ms-summary: |-
        A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent. 

        When the emailSettings information is used for an envelope, it only applies to that envelope. 

        **IMPORTANT**: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings. 

        EmailSettings consists of: 

        * replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
        * replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
        * bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option. 
        DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
        *Example*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
    envelope:
      description: ""
      properties:
        accessControlListBase64:
          description: Reserved for DocuSign.
          type: string
        allowComments:
          description: When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document.
          type: string
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowReassign:
          description: When **true**, the recipient can redirect an envelope to a more appropriate recipient.
          type: string
        allowViewHistory:
          description: When set to **true**, recipients can view the history of the envelope.
          type: string
        anySigner:
          description: Deprecated. This feature has been replaced by signing groups.
          type: string
        asynchronous:
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
          type: string
        attachmentsUri:
          description: Contains a URL for retrieving the attachments that are associated with the envelope.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyDefault:
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        brandId:
          description: The id of the brand.
          type: string
        brandLock:
          description: When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
          type: string
        certificateUri:
          description: The URI for retrieving certificate information.
          type: string
        completedDateTime:
          description: Specifies the date and time this item was completed.
          type: string
        copyRecipientData:
          description: ""
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        customFieldsUri:
          description: The URI for retrieving custom fields.
          type: string
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        deletedDateTime:
          description: Reserved for DocuSign.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        disableResponsiveDocument:
          description: When set to **true**, responsive documents are disabled for the envelope.
          type: string
        documentsCombinedUri:
          description: The URI for retrieving all of the documents associated with the envelope as a single PDF file.
          type: string
        documentsUri:
          description: The URI for retrieving all of the documents associated with the envelope as separate files.
          type: string
        emailBlurb:
          description: This is the same as the email body. If specified it is included in email body for all envelope recipients.
          type: string
        emailSettings:
          $ref: "#/components/schemas/emailSettings"
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        enableWetSign:
          description: When set to **true**, the signer is allowed to print the document and sign it on paper.
          type: string
        enforceSignerVisibility:
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
          type: string
        envelopeAttachments:
          description: An array of attachment objects that provide information about the attachments that are associated with the envelope.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeIdStamping:
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
          type: string
        envelopeLocation:
          description: Reserved for DocuSign.
          type: string
        envelopeMetadata:
          $ref: "#/components/schemas/envelopeMetadata"
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        expireAfter:
          description: An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        externalEnvelopeId:
          description: May contain an external identifier for the envelope.
          type: string
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasComments:
          description: When set to **true**, indicates that users have added comments to the envelope.
          type: string
        hasFormDataChanged:
          description: When set to **true**, indicates that the data collected through form fields on a document has changed.
          type: string
        hasWavFile:
          description: "When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope. "
          type: string
        holder:
          description: Reserved for DocuSign.
          type: string
        initialSentDateTime:
          description: The date and time the envelope was initially sent.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        isDynamicEnvelope:
          description: When set to **true**, indicates that the envelope is a dynamic envelope.
          type: string
        isSignatureProviderEnvelope:
          description: When set to **true**, indicates that the envelope is a signature-provided envelope.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        location:
          description: Reserved for DocuSign.
          type: string
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        messageLock:
          description: |-
            When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 

            Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 

            However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
          type: string
        notification:
          $ref: "#/components/schemas/notification"
        notificationUri:
          description: The URI for retrieving notifications.
          type: string
        powerForm:
          $ref: "#/components/schemas/powerForm"
        purgeCompletedDate:
          description: The date that a purge was completed.
          type: string
        purgeRequestDate:
          description: The date that a purge was requested.
          type: string
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsLock:
          description: When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
          type: string
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        sender:
          $ref: "#/components/schemas/userInfo"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signingLocation:
          description: Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
          type: string
        status:
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusChangedDateTime:
          description: The data and time that the status changed.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        templatesUri:
          description: The URI for retrieving the templates.
          type: string
        transactionId:
          description: Specifies the Transaction ID from the AppStore.
          type: string
        useDisclosure:
          description: |-
            When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 

            If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
          type: string
        voidedDateTime:
          description: The date and time the envelope or template was voided.
          type: string
        voidedReason:
          description: The reason the envelope or template was voided.
          type: string
        workflow:
          $ref: "#/components/schemas/workflow"
      type: object
      x-ds-definition-name: envelope
      x-ms-summary: ""
    envelopeAttachment:
      description: ""
      properties:
        accessControl:
          description: Valid values are `sender` and `senderAndAllRecipients`.
          type: string
        attachmentId:
          description: The unique identifier for the attachment.
          type: string
        attachmentType:
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        label:
          description: ""
          type: string
        name:
          description: ""
          type: string
      type: object
      x-ds-definition-name: envelopeAttachment
      x-ms-summary: ""
    envelopeAttachmentsRequest:
      description: ""
      properties:
        attachments:
          description: An object that contains information about the attachment.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
      type: object
      x-ds-definition-name: envelopeAttachmentsRequest
      x-ms-summary: ""
    envelopeAttachmentsResult:
      description: ""
      properties:
        attachments:
          description: An array of attachment objects that contain information about the attachments.
          items:
            $ref: "#/components/schemas/envelopeAttachment"
          type: array
      type: object
      x-ds-definition-name: envelopeAttachmentsResult
      x-ms-summary: ""
    envelopeAuditEvent:
      description: ""
      properties:
        eventFields:
          description: ""
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-definition-name: envelopeAuditEvent
      x-ms-summary: ""
    envelopeAuditEventResponse:
      description: ""
      properties:
        auditEvents:
          description: "Reserved: TBD"
          items:
            $ref: "#/components/schemas/envelopeAuditEvent"
          type: array
      type: object
      x-ds-definition-name: envelopeAuditEventResponse
      x-ms-summary: ""
    envelopeDefinition:
      description: Envelope object definition.
      properties:
        accessControlListBase64:
          description: Reserved for DocuSign.
          type: string
        accessibility:
          description: |-
            Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.

            **Note**: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.
          type: string
        allowComments:
          description: When **true**, comments are allowed on the envelope.
          type: string
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowReassign:
          description: When **true**, the recipient can redirect an envelope to a more appropriate recipient.
          type: string
        allowRecipientRecursion:
          description: When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.
          type: string
        allowViewHistory:
          description: When **true**, users can view the history of the envelope.
          type: string
        anySigner:
          description: Deprecated. This feature has been replaced by signing groups.
          type: string
        asynchronous:
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
          type: string
        attachments:
          description: An array of attachment objects containing details about any envelope attachments.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        attachmentsUri:
          description: The URI for retrieving the envelope attachments.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyDefault:
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        brandId:
          description: The id of the brand, or text and formatting, to use for the envelope. To use brands, account branding must be enabled for the account.
          type: string
        brandLock:
          description: When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
          type: string
        certificateUri:
          description: The URI for retrieving certificate information.
          type: string
        completedDateTime:
          description: The date and time that the envelope was completed.
          type: string
        compositeTemplates:
          description: A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope.
          items:
            $ref: "#/components/schemas/compositeTemplate"
          type: array
        copyRecipientData:
          description: ""
          type: string
        createdDateTime:
          description: The date and time that the envelope was created.
          type: string
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        customFieldsUri:
          description: The URI for retrieving custom fields.
          type: string
        declinedDateTime:
          description: The date and time that the recipient declined the envelope.
          type: string
        deletedDateTime:
          description: The date and time that the envelope was deleted.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        disableResponsiveDocument:
          description: When set to **true**, the responsive document feature is turned off for the envelope.
          type: string
        documents:
          description: A complex element that contains details about the documents associated with the envelope.
          items:
            $ref: "#/components/schemas/document"
          type: array
        documentsCombinedUri:
          description: The URI for retrieving all of the documents associated with the envelope as a single PDF file.
          type: string
        documentsUri:
          description: The URI for retrieving all of the documents associated with the envelope as separate files.
          type: string
        emailBlurb:
          description: |-
            This optional element holds the body of the email message that is sent to all envelope recipients. 

            Maximum Length: 10000 characters.
          type: string
        emailSettings:
          $ref: "#/components/schemas/emailSettings"
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        enableWetSign:
          description: When set to **true**, the signer is allowed to print the document and sign it on paper.
          type: string
        enforceSignerVisibility:
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
          type: string
        envelopeAttachments:
          description: An array of attachment objects that provide information about the attachments that are associated with the envelope.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeIdStamping:
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
          type: string
        envelopeLocation:
          description: Reserved for DocuSign.
          type: string
        envelopeMetadata:
          $ref: "#/components/schemas/envelopeMetadata"
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        eventNotification:
          $ref: "#/components/schemas/eventNotification"
        expireAfter:
          description: An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        externalEnvelopeId:
          description: May contain an external identifier for the envelope.
          type: string
        folders:
          description: An array of folders that the envelope belongs to.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasComments:
          description: When set to **true**, indicates that users have added comments to the envelope.
          type: string
        hasFormDataChanged:
          description: When set to **true**, indicates that the form data associated with the envelope has changed since it was sent. If **false**, this property does not appear in the response.
          type: string
        hasWavFile:
          description: When set to **true**, indicates that a wave file (voice recording) is part of the envelope.
          type: string
        holder:
          description: Reserved for DocuSign.
          type: string
        initialSentDateTime:
          description: The date and time that the envelope was first sent.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        isDynamicEnvelope:
          description: When set to **true**, indicates that the envelope is a dynamic envelope.
          type: string
        isSignatureProviderEnvelope:
          description: When set to **true**, indicates that the envelope is a signature-provided envelope.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        location:
          description: Reserved for DocuSign.
          type: string
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        messageLock:
          description: |-
            When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 

            Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 

            However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
          type: string
        notification:
          $ref: "#/components/schemas/notification"
        notificationUri:
          description: The URI for retrieving notifications.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        powerForm:
          $ref: "#/components/schemas/powerForm"
        purgeCompletedDate:
          description: The date that a purge was completed.
          type: string
        purgeRequestDate:
          description: The date that a purge was requested.
          type: string
        purgeState:
          description: |
            Initiates a purge request. Valid values are:
            * `documents_queued`: Places envelope documents in the purge queue.
            * `documents_and_metadata_queued`: Places envelope documents and metadata in the purge queue.
          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsLock:
          description: When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
          type: string
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        sender:
          $ref: "#/components/schemas/userInfo"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signingLocation:
          description: Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
          type: string
        status:
          description: |
            Indicates the envelope status. Valid values when creating an envelope are: 

            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.

            You can query these additional statuses once the recipients have interacted with the envelope.

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusChangedDateTime:
          description: The data and time that the status changed.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        templateId:
          description: "The id of the template. If a value is not provided, DocuSign generates a value. "
          type: string
        templateRoles:
          description: |
            This object specifies the template recipients. Each `roleName` in the template must have a recipient assigned to it. This object is comprised of the following elements:

            * `email`: The recipient's email address.
            * `name`: The recipient's name.
            * `roleName`: The template roleName associated with the recipient.
            * `clientUserId`: An optional property that specifies whether the recipient is embedded or remote. If the `clientUserId` is not null, then the recipient is embedded. Note that if a `clientUserId` is used and the account settings `signerMustHaveAccount` or `signerMustLoginToSign` are **true**, an error is generated on sending.
            * `defaultRecipient`: Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the `transformPdfFields` option are mapped to this recipient.
            * `routingOrder`: This specifies the routing order of the recipient in the envelope.
            * `accessCode`: This optional element specifies the access code a recipient has to enter to validate the identity. Maximum Length: 50 characters.
            * `inPersonSignerName`: Optional. If the template role is an in-person signer, this is the full legal name of the signer. Maximum Length: 100 characters.
            * `emailNotification`: This is an optional complex element that has a role-specific `emailSubject`, `emailBody`, and `language`. It follows the same format as the `emailNotification` property for recipients.
            * `tabs`: This property enables the tab values to be specified for matching to tabs in the template.
          items:
            $ref: "#/components/schemas/templateRole"
          type: array
        templatesUri:
          description: The URI for retrieving any templates associated with the envelope.
          type: string
        transactionId:
          description: " Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. We recommend that you use a transaction ID for offline signing to ensure that an envelope is not sent multiple times. You can use the `transactionId` property to determine an envelope's status (i.e. was it created or not) in cases where the Internet connection was lost before the envelope status was returned."
          type: string
        useDisclosure:
          description: |-
            When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 

            If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
          type: string
        voidedDateTime:
          description: The date and time the envelope or template was voided.
          type: string
        voidedReason:
          description: The reason the envelope or template was voided.
          type: string
        workflow:
          $ref: "#/components/schemas/workflow"
      type: object
      x-ds-definition-name: envelopeDefinition
      x-ms-summary: Envelope object definition.
    envelopeDocument:
      description: This object contains details about the envelope document.
      properties:
        addedRecipientIds:
          description: If recipients were added by converting form fields into tabs, their ids appear here. Read only.
          items:
            type: string
          type: array
        attachmentTabId:
          description: If this document is an attachment to another document in the envelope, this is the id of the attachment tab it is associated with on the other document.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        availableDocumentTypes:
          description: ""
          items:
            $ref: "#/components/schemas/signatureType"
          type: array
        containsPdfFormFields:
          description: When **true**, the document has editable form fields that are made available through a PDF format.
          type: string
        display:
          description: |
            This string sets the display and behavior properties of
            the document during signing. The possible values are:

            * `modal`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a modal window.
              This is the recommended value for supplemental documents. 

            * `download`<br>
              The document is shown as a supplement action strip
              and can be viewed, downloaded, or printed in a new browser window. 

            * `inline`<br>
              The document is shown in the normal signing window.
              This value is not used with supplemental documents,
              but is the default value for all other documents.
          type: string
        displayMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentFields:
          description: An object containing information about the custom fields on the document.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        documentId:
          description: The id of the document that the tab is placed on. This value must refer to the id of an existing document.
          type: string
        documentIdGuid:
          description: The GUID of the document.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        includeInDownload:
          description: |
            When set to **true**,
            the document is included in the combined document download (`documentsCombinedUri`). 
            The default value is **true**.
          type: string
        includeInDownloadMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        name:
          description: |-
            The document's file name. 

            Example: `Q1-Report.docx`
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        order:
          description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          type: string
        pages:
          description: An array of page objects that contain information about the pages in the document.
          items:
            $ref: "#/components/schemas/page"
          type: array
        signerMustAcknowledge:
          description: |+
            Sets how the signer interacts with the supplemental document.
            The possible values are: 

            *	`no_interaction`<br>
              No recipient action is required. 

            *	`view`<br>
              The recipient is required to view the document. 

            *	`accept`<br>
              The recipient is required to accept the document by selecting accept during signing, but is not required to view the document. 

            *	`view_accept`<br>
              The recipient is required to view and accept the document.  

          type: string
        signerMustAcknowledgeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sizeBytes:
          description: ""
          type: string
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        type:
          description: ""
          type: string
        uri:
          description: The URI for retrieving the document.
          type: string
      type: object
      x-ds-definition-name: envelopeDocument
      x-ms-summary: This object contains details about the envelope document.
    envelopeDocumentsResult:
      description: ""
      properties:
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
      type: object
      x-ds-definition-name: envelopeDocumentsResult
      x-ms-summary: ""
    envelopeEvent:
      description: For which envelope events should your webhook be called?
      properties:
        envelopeEventStatusCode:
          description: "An envelope status for which your webhook should be called. Values: Draft, Sent, Delivered, Completed, Declined, or Voided."
          type: string
        includeDocuments:
          description: "When set to **true**, the PDF documents are included in the message along with the updated XML. "
          type: string
      type: object
      x-ds-definition-name: envelopeEvent
      x-ms-summary: For which envelope events should your webhook be called?
    envelopeFormData:
      description: ""
      properties:
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        formData:
          description: ""
          items:
            $ref: "#/components/schemas/formDataItem"
          type: array
        prefillFormData:
          description: ""
          items:
            $ref: "#/components/schemas/formDataItem"
          type: array
        recipientFormData:
          description: ""
          items:
            $ref: "#/components/schemas/recipientFormData"
          type: array
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-definition-name: envelopeFormData
      x-ms-summary: ""
    envelopeId:
      description: |
        A tab that displays the envelope ID. Recipients cannot enter
        or change the information in this tab.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |-
            The page number on which the tab is located.
            For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: envelopeId
      x-ms-summary: |
        A tab that displays the envelope ID. Recipients cannot enter
        or change the information in this tab.
    envelopeIdsRequest:
      description: Lists of envelope and transaction IDs to use in the results.
      properties:
        envelopeIds:
          description: A comma-separated list of envelope IDs to include in the results.
          items:
            type: string
          type: array
        transactionIds:
          description: A comma-separated list of transaction IDs to include in the results. Note that transaction IDs are valid for seven days.
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: envelopeIdsRequest
      x-ms-summary: Lists of envelope and transaction IDs to use in the results.
    envelopeMetadata:
      description: ""
      properties:
        allowAdvancedCorrect:
          description: Specifies if the Advanced Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you. It offers more functionality than the Correct feature.
          type: string
        allowCorrect:
          description: Specifies if the Correct feature is enabled for the envelope. This feature enables you to correct the details of in process envelopes that you sent or are shared with you, including the recipient, envelope, and document information.
          type: string
        enableSignWithNotary:
          description: Specifies if DocuSign eNotary service is enabled for the envelope.
          type: string
      type: object
      x-ds-definition-name: envelopeMetadata
      x-ms-summary: ""
    envelopeNotificationRequest:
      description: A complex element that specifies the notification settings for the envelope.
      properties:
        expirations:
          $ref: "#/components/schemas/expirations"
        reminders:
          $ref: "#/components/schemas/reminders"
        useAccountDefaults:
          description: When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**, the reminders and expirations settings specified in this request are used.
          type: string
      type: object
      x-ds-definition-name: envelopeNotificationRequest
      x-ms-summary: A complex element that specifies the notification settings for the envelope.
    envelopePurgeConfiguration:
      description: "Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`). "
      properties:
        purgeEnvelopes:
          description: When set to **true**, purging is enabled.
          type: string
        redactPII:
          description: |-
            When set to **true**, the system also redacts personally identifiable information (PII).

            **Note**: To redact PII, you must also set the property `removeTabsAndEnvelopeAttachments` to **true**.
          type: string
        removeTabsAndEnvelopeAttachments:
          description: "When set to **true**, the system also purges the tabs and attachments associated with the envelopes. "
          type: string
        retentionDays:
          description: The number of days to retain envelope documents before purging them. This value must be a number between `0` and `999`.
          type: string
      type: object
      x-ds-definition-name: envelopePurgeConfiguration
      x-ms-summary: "Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`). "
    envelopeSummary:
      description: " This object describes an envelope."
      properties:
        bulkEnvelopeStatus:
          $ref: "#/components/schemas/bulkEnvelopeStatus"
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        status:
          description: |
            Indicates the envelope status. Valid values are: 

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
      type: object
      x-ds-definition-name: envelopeSummary
      x-ms-summary: " This object describes an envelope."
    envelopeTemplate:
      description: ""
      properties:
        accessControlListBase64:
          description: Reserved for DocuSign.
          type: string
        allowComments:
          description: When set to **true**, users can add comments to the documents in the envelope. For example, if a signer has a question about the text in the document, they can add a comment to the document.
          type: string
        allowMarkup:
          description: |-
            When set to **true**, the Document Markup feature is enabled.

            **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level.
          type: string
        allowReassign:
          description: When **true**, the recipient can redirect an envelope to a more appropriate recipient.
          type: string
        allowViewHistory:
          description: When set to **true**, recipients can view the history of the envelope.
          type: string
        anySigner:
          description: Deprecated. This feature has been replaced by signing groups.
          type: string
        asynchronous:
          description: |-
            When **true**, the envelope is queued for
            processing and the value of the `status` property
            is set to `Processing`. Additionally, GET status
            calls return `Processing` until completed.


            **Note**: A `transactionId` is required for this
            call to work correctly. When the envelope is
            created, the status is `Processing` and an
            `envelopeId` is not returned in the response. To
            get the `envelopeId`, use a GET envelope query by
            using the
            [transactionId](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/Envelopes/create/) or by checking the
            Connect notification.
          type: string
        attachmentsUri:
          description: Contains a URL for retrieving the attachments that are associated with the envelope.
          type: string
        authoritativeCopy:
          description: |-
            When **true**, marks all of the documents in the envelope as authoritative copies.

            **Note**: You can override this value for a specific document. For example, you can set the `authoritativeCopy` property to **true** at the envelope level, but turn it off for a single document by setting the `authoritativeCopy` property for the document to **false**.
          type: string
        authoritativeCopyDefault:
          description: |-
            The default `authoritativeCopy` setting for documents in this envelope that do not have `authoritativeCopy` set.
            If this property is not set, each document defaults to the envelope's `authoritativeCopy`.
          type: string
        autoMatch:
          description: |-
            By default, templates that have been used within
            the last 60 days are included in auto-matching.

            By explicitly setting `autoMatch`,
            you can permanently include or exclude the template
            in auto matching.

            When **true** the template is included in auto-matching
            regardless of when it was last used.

            When **false** the template is never included in auto-matching.
          type: string
        autoMatchSpecifiedByUser:
          description: |-
            If **true**, the template has been explicitly included in or excluded from auto-matching. The default is false.
            This is a read-only property.
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        brandId:
          description: The id of the brand.
          type: string
        brandLock:
          description: When **true**, the `brandId` for the envelope is locked and senders cannot change the brand used for the envelope.
          type: string
        certificateUri:
          description: The URI for retrieving certificate information.
          type: string
        completedDateTime:
          description: Specifies the date and time this item was completed.
          type: string
        copyRecipientData:
          description: ""
          type: string
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        customFieldsUri:
          description: The URI for retrieving custom fields.
          type: string
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        deletedDateTime:
          description: Reserved for DocuSign.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        disableResponsiveDocument:
          description: When set to **true**, responsive documents are disabled for the envelope.
          type: string
        documents:
          description: A complex element that contains details about the documents associated with the envelope.
          items:
            $ref: "#/components/schemas/document"
          type: array
        documentsCombinedUri:
          description: The URI for retrieving all of the documents associated with the envelope as a single PDF file.
          type: string
        documentsUri:
          description: The URI for retrieving all of the documents associated with the envelope as separate files.
          type: string
        emailBlurb:
          description: This is the same as the email body. If the sender enters an email blurb, it is included in the email body for all envelope recipients.
          type: string
        emailSettings:
          $ref: "#/components/schemas/emailSettings"
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        enableWetSign:
          description: When set to **true**, the signer is allowed to print the document and sign it on paper.
          type: string
        enforceSignerVisibility:
          description: |-
            When set to **true**, signers can only view the documents on which they have tabs. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all of the documents in an envelope, unless they are specifically excluded by using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded by using this setting when an envelope is sent.

            **Note**: To use this functionality, [Document Visibility][docviz] must be enabled for the account by making the account setting `allowDocumentVisibility` **true**.

            [docviz]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeDocumentVisibility/
          type: string
        envelopeAttachments:
          description: An array of attachment objects that provide information about the attachments that are associated with the envelope.
          items:
            $ref: "#/components/schemas/attachment"
          type: array
        envelopeDocuments:
          description: An array containing information about the documents that are included in the envelope.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeIdStamping:
          description: |-
            When set to **true**, [Envelope ID Stamping](https://support.docusign.com/en/guides/ndse-user-guide-set-advanced-document-options) is enabled.
            After a document or attachment is stamped with an Envelope ID,
            the ID is seen by all recipients
            and becomes a permanent part of the document
            and cannot be removed.
          type: string
        envelopeLocation:
          description: Reserved for DocuSign.
          type: string
        envelopeMetadata:
          $ref: "#/components/schemas/envelopeMetadata"
        envelopeUri:
          description: The URI for retrieving the envelope or envelopes.
          type: string
        expireAfter:
          description: An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        externalEnvelopeId:
          description: May contain an external identifier for the envelope.
          type: string
        favoritedByMe:
          description: ""
          type: string
        folderId:
          description: The id of the folder.
          type: string
        folderIds:
          description: ""
          items:
            type: string
          type: array
        folderName:
          description: ""
          type: string
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasComments:
          description: When set to **true**, indicates that users have added comments to the envelope.
          type: string
        hasFormDataChanged:
          description: When set to **true**, indicates that the data collected through form fields on a document has changed.
          type: string
        hasWavFile:
          description: "When set to **true**, indicates that a .wav file used for voice authentication is included in the envelope. "
          type: string
        holder:
          description: Reserved for DocuSign.
          type: string
        initialSentDateTime:
          description: The date and time the envelope was initially sent.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        isDynamicEnvelope:
          description: When set to **true**, indicates that the envelope is a dynamic envelope.
          type: string
        isSignatureProviderEnvelope:
          description: When set to **true**, indicates that the envelope is a signature-provided envelope.
          type: string
        lastModified:
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
          type: string
        lastModifiedBy:
          $ref: "#/components/schemas/userInfo"
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        lastUsed:
          description: ""
          type: string
        location:
          description: Reserved for DocuSign.
          type: string
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        messageLock:
          description: |-
            When set to **true**, prevents senders from changing the contents of `emailBlurb` and `emailSubject` properties for the envelope. 

            Additionally, this prevents users from making changes to the contents of `emailBlurb` and `emailSubject` properties when correcting envelopes. 

            However, if the `messageLock` node is set to **true** and the `emailSubject` property is empty, senders and correctors are able to add a subject to the envelope.
          type: string
        name:
          description: ""
          type: string
        newPassword:
          description: The user's new password.
          type: string
        notification:
          $ref: "#/components/schemas/notification"
        notificationUri:
          description: The URI for retrieving notifications.
          type: string
        owner:
          $ref: "#/components/schemas/userInfo"
        pageCount:
          description: "An integer value specifying the number of document pages in the template. "
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        passwordProtected:
          description: ""
          type: string
        powerForm:
          $ref: "#/components/schemas/powerForm"
        powerForms:
          description: An array of PowerForm objects.
          items:
            $ref: "#/components/schemas/powerForm"
          type: array
        purgeCompletedDate:
          description: The date that a purge was completed.
          type: string
        purgeRequestDate:
          description: The date that a purge was requested.
          type: string
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsLock:
          description: When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
          type: string
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        sender:
          $ref: "#/components/schemas/userInfo"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        signerCanSignOnMobile:
          description: |
            When set to **true**, recipients can sign on a mobile device.

            **Note**: Only Admin users can change this setting.
          type: string
        signingLocation:
          description: Specifies the physical location where the signing takes place. It can have two enumeration values; `inPerson` and `online`. The default value is `online`.
          type: string
        status:
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        statusChangedDateTime:
          description: The data and time that the status changed.
          type: string
        statusDateTime:
          description: The DateTime that the envelope changed status (i.e. was created or sent.)
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
        templatesUri:
          description: The URI for retrieving the templates.
          type: string
        transactionId:
          description: Specifies the Transaction ID from the AppStore.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        useDisclosure:
          description: |-
            When set to **true**, the disclosure is shown to recipients in accordance with the account's Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients. 

            If the `useDisclosure` property is not set, then the account's normal disclosure setting is used and the value of the `useDisclosure` property is not returned in responses when getting envelope information.
          type: string
        voidedDateTime:
          description: The date and time the envelope or template was voided.
          type: string
        voidedReason:
          description: The reason the envelope or template was voided.
          type: string
        workflow:
          $ref: "#/components/schemas/workflow"
      type: object
      x-ds-definition-name: envelopeTemplate
      x-ms-summary: ""
    envelopeTemplateResults:
      description: Information about templates.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopeTemplates:
          description: The list of requested templates.
          items:
            $ref: "#/components/schemas/envelopeTemplate"
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: envelopeTemplateResults
      x-ms-summary: Information about templates.
    envelopeTransactionStatus:
      description: ""
      properties:
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        status:
          description: |
            Indicates the envelope status. Valid values are:

            * `completed`: The recipients have finished working with the envelope: the documents are signed and all required tabs are filled in.
            * `created`: The envelope is created as a draft. It can be modified and sent later.
            * `declined`: The envelope has been declined by the recipients.
            * `delivered`: The envelope has been delivered to the recipients.
            * `sent`: The envelope will be sent to the recipients after the envelope is created.
            * `signed`: The envelope has been signed by the recipients.
            * `voided`: The envelope is no longer valid and recipients cannot access or sign the envelope.
          type: string
        transactionId:
          description: " Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The `transactionId` property can be used determine an envelope's status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned."
          type: string
      type: object
      x-ds-definition-name: envelopeTransactionStatus
      x-ms-summary: ""
    envelopeTransferRule:
      description: This object contains details about an envelope transfer rule.
      properties:
        carbonCopyOriginalOwner:
          description: When set to **true**, the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false**.
          type: string
        enabled:
          description: When set to **true**, the envelope transfer rule is active.
          type: string
        envelopeTransferRuleId:
          description: The id of the envelope transfer rule. The system generates this id when the rule is first created.
          type: string
        eventType:
          description: |-
            The type of envelope event that triggers the transfer. Valid values are:

            - `sent`
            - `before sent` 
            - `completed`
          type: string
        fromGroup:
          $ref: "#/components/schemas/group"
        fromUser:
          $ref: "#/components/schemas/userInformation"
        modifiedDate:
          description: The UTC DateTime when the envelope transfer rule was last modified. This property is read only.
          type: string
        modifiedUser:
          $ref: "#/components/schemas/userInformation"
        toFolder:
          $ref: "#/components/schemas/folder"
        toUser:
          $ref: "#/components/schemas/userInformation"
      type: object
      x-ds-definition-name: envelopeTransferRule
      x-ms-summary: This object contains details about an envelope transfer rule.
    envelopeTransferRuleInformation:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopeTransferRules:
          description: Contains information about a specific envelope transfer rule.
          items:
            $ref: "#/components/schemas/envelopeTransferRule"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: envelopeTransferRuleInformation
      x-ms-summary: ""
    envelopeTransferRuleRequest:
      description: This object contains details about the envelope transfer rule that you want to create.
      properties:
        carbonCopyOriginalOwner:
          description: When set to **true**, the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false**.
          type: string
        enabled:
          description: When set to **true**, the envelope transfer rule is active.
          type: string
        envelopeTransferRuleId:
          description: The id of the envelope transfer rule. The system generates this id when the rule is first created.
          type: string
        eventType:
          description: |-
            The type of envelope event that triggers the transfer. Valid values are:

            - `sent`
            - `before sent` 
            - `completed`
          type: string
        fromGroups:
          description: Information about the group that triggers the transfer.
          items:
            $ref: "#/components/schemas/group"
          type: array
        fromUsers:
          description: Information about the user who triggers the transfer.
          items:
            $ref: "#/components/schemas/userInformation"
          type: array
        modifiedDate:
          description: The UTC DateTime when the envelope transfer rule was last modified. This property is read only.
          type: string
        modifiedUser:
          $ref: "#/components/schemas/userInformation"
        toFolder:
          $ref: "#/components/schemas/folder"
        toUser:
          $ref: "#/components/schemas/userInformation"
      type: object
      x-ds-definition-name: envelopeTransferRuleRequest
      x-ms-summary: This object contains details about the envelope transfer rule that you want to create.
    envelopeUpdateSummary:
      description: ""
      properties:
        bulkEnvelopeStatus:
          $ref: "#/components/schemas/bulkEnvelopeStatus"
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        listCustomFieldUpdateResults:
          description: ""
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipientUpdateResults:
          description: An array of `recipientUpdateResults` objects that contain details about the recipients.
          items:
            $ref: "#/components/schemas/recipientUpdateResponse"
          type: array
        tabUpdateResults:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        textCustomFieldUpdateResults:
          description: ""
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-definition-name: envelopeUpdateSummary
      x-ms-summary: ""
    envelopesInformation:
      description: "Result set for the Envelopes: listStatusChanges method"
      properties:
        continuationToken:
          description: A token returned by an earlier API call that you can use with a new call to resume a search query at the point where it left off.  This token system enhances the performance of the API.
          type: string
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopeTransactionStatuses:
          description: Array of envelope statuses and transaction IDs in the result set.
          items:
            $ref: "#/components/schemas/envelopeTransactionStatus"
          type: array
        envelopes:
          description: Set of envelope information
          items:
            $ref: "#/components/schemas/envelope"
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        lastQueriedDateTime:
          description: The last time that a query was performed.
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: envelopesInformation
      x-ms-summary: "Result set for the Envelopes: listStatusChanges method"
    errorDetails:
      description: This object describes errors that occur. It is only valid for responses and ignored in requests.
      properties:
        errorCode:
          description: The code associated with the error condition.
          type: string
        message:
          description: A brief message describing the error condition.
          type: string
      type: object
      x-ds-definition-name: errorDetails
      x-ms-summary: This object describes errors that occur. It is only valid for responses and ignored in requests.
    eventNotification:
      description: Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
      properties:
        envelopeEvents:
          description: |-
            A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property. 

            To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
          items:
            $ref: "#/components/schemas/envelopeEvent"
          type: array
        eventData:
          $ref: "#/components/schemas/connectEventData"
        includeCertificateOfCompletion:
          description: "When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. "
          type: string
        includeCertificateWithSoap:
          description: When set to **true**, the Connect service will digitally sign the XML data. The signature will be included in the XML message.
          type: string
        includeDocumentFields:
          description: "When set to **true**, the Document Fields associated with the envelope's documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. "
          type: string
        includeDocuments:
          description: "When set to **true**, the XML webhook messages will include the envelope's PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger. "
          type: string
        includeEnvelopeVoidReason:
          description: "When set to **true**, this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message. "
          type: string
        includeHMAC:
          description: |-
            When set to **true**, HMAC headers will be included with the webhook notifications.

            **Note**: [HMAC must enabled](https://developers.docusign.com/platform/webhooks/connect/hmac/) at the account level with [one or more HMAC secrets](https://developers.docusign.com/platform/webhooks/connect/setting-up-hmac/).
          type: string
        includeSenderAccountAsCustomField:
          description: When set to **true**, Connect will include the sender account as Custom Field in the data.
          type: string
        includeTimeZone:
          description: "When set to **true**, the envelope's time zone information is included in the webhook messages. "
          type: string
        loggingEnabled:
          description: When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](https://developers.docusign.com/docs/esign-rest-api/reference/connect/connectevents/).
          type: string
        recipientEvents:
          description: |-
            A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.

            To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.
          items:
            $ref: "#/components/schemas/recipientEvent"
          type: array
        requireAcknowledgment:
          description: "When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures. "
          type: string
        signMessageWithX509Cert:
          description: "When set to **true**, Mutual TLS will be enabled for notifications. Mutual TLS must be initiated by the listener (the customer's web server) during the TLS handshake protocol. "
          type: string
        soapNameSpace:
          description: |-
            The namespace of the SOAP interface.

            The namespace value must be set if useSoapInterface is set to true.
          type: string
        url:
          description: The endpoint to which webhook notification messages are sent via an HTTPS POST request. The url must start with https. The customer's web server must use an SSL/TLS certificate whose CA is in the Microsoft list of trusted CAs. Self-signed certificates are not ok. Free certificates from Let's Encrypt can be used.
          type: string
        useSoapInterface:
          description: "When set to **true**, this tells the Connect service that the user's endpoint has implemented a SOAP interface. "
          type: string
      type: object
      x-ds-definition-name: eventNotification
      x-ms-summary: Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
    eventResult:
      description: Information about the result of an event.
      properties:
        eventTimestamp:
          description: Date/time of the event.
          type: string
        failureDescription:
          description: Reason for failure, if the event failed.
          type: string
        status:
          description: Event status.
          type: string
        vendorFailureStatusCode:
          description: Failure status code, if the event failed.
          type: string
      type: object
      x-ds-definition-name: eventResult
      x-ms-summary: Information about the result of an event.
    expirations:
      description: A complex element that specifies the expiration settings for the envelope.
      properties:
        expireAfter:
          description: An integer that sets the number of days the envelope is active.
          type: string
        expireEnabled:
          description: When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.
          type: string
        expireWarn:
          description: An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent.
          type: string
      type: object
      x-ds-definition-name: expirations
      x-ms-summary: A complex element that specifies the expiration settings for the envelope.
    externalClaim:
      description: " Claims about the user from an external provider. This object is reserved for DocuSign internal use."
      properties:
        acquiredTime:
          description: Reserved for DocuSign.
          type: string
        claimName:
          description: Reserved for DocuSign.
          type: string
        provider:
          description: Reserved for DocuSign.
          type: string
        value:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: externalClaim
      x-ms-summary: " Claims about the user from an external provider. This object is reserved for DocuSign internal use."
    externalDocServiceErrorDetails:
      description: ""
      properties:
        authenticationUrl:
          description: "Reserved: TBD"
          type: string
        errorCode:
          description: A code associated with the error condition.
          type: string
        message:
          description: ""
          type: string
      type: object
      x-ds-definition-name: externalDocServiceErrorDetails
      x-ms-summary: ""
    externalDocumentSources:
      description: A complex object specifying the external document sources.
      properties:
        boxnetEnabled:
          description: The account is enabled to allow external documents to be attached from BoxNet.
          type: string
        boxnetMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        dropboxEnabled:
          description: The account is enabled to allow external documents to be attached from DropBox.
          type: string
        dropboxMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        googleDriveEnabled:
          description: The account is enabled to allow external documents to be attached from Google Drive.
          type: string
        googleDriveMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        oneDriveEnabled:
          description: The account is enabled to allow external documents to be attached from OneDrive.
          type: string
        oneDriveMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        salesforceEnabled:
          description: The account is enabled to allow external documents to be attached from Salesforce.
          type: string
        salesforceMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: externalDocumentSources
      x-ms-summary: A complex object specifying the external document sources.
    externalFile:
      description: This object contains information about a file or folder in cloud storage.
      properties:
        date:
          description: The UTC date and time that the file or folder was last modified.
          type: string
        id:
          description: The storage provider's id for the file or folder.
          type: string
        img:
          description: |-
            The file extension for a file.

            **Note**: If the item is a folder, this value is null.
          type: string
        name:
          description: The full name of a file.
          type: string
        size:
          description: The size of the file. The file size limit varies based on the cloud storage provider.
          type: string
        supported:
          description: When set to **true**, DocuSign supports the file type for upload.
          type: string
        type:
          description: |-
            The type of cloud storage item. Valid values are:

            - `file`
            - `folder`
          type: string
        uri:
          description: The URI for the file or folder.
          type: string
      type: object
      x-ds-definition-name: externalFile
      x-ms-summary: This object contains information about a file or folder in cloud storage.
    externalFolder:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        errorDetails:
          $ref: "#/components/schemas/externalDocServiceErrorDetails"
        id:
          description: A unique ID for the Salesforce object.
          type: string
        items:
          description: If the tab is a list, this represents the values that are possible for the tab.
          items:
            $ref: "#/components/schemas/externalFile"
          type: array
        name:
          description: ""
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: externalFolder
      x-ms-summary: ""
    favoriteTemplatesContentItem:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        favoritedDate:
          description: ""
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
      type: object
      x-ds-definition-name: favoriteTemplatesContentItem
      x-ms-summary: ""
    favoriteTemplatesInfo:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        favoriteTemplates:
          description: ""
          items:
            $ref: "#/components/schemas/favoriteTemplatesContentItem"
          type: array
        templatesUpdatedCount:
          description: ""
          format: int32
          type: integer
      type: object
      x-ds-definition-name: favoriteTemplatesInfo
      x-ms-summary: ""
    featureAvailableMetadata:
      description: ""
      properties:
        availabilty:
          description: ""
          type: string
        featureName:
          description: ""
          type: string
      type: object
      x-ds-definition-name: featureAvailableMetadata
      x-ms-summary: ""
    featureSet:
      description: This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
      properties:
        currencyFeatureSetPrices:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/currencyFeatureSetPrice"
          type: array
        envelopeFee:
          description: Reserved for DocuSign.
          type: string
        featureSetId:
          description: Reserved for DocuSign.
          type: string
        fixedFee:
          description: Reserved for DocuSign.
          type: string
        is21CFRPart11:
          description: Reserved for DocuSign.
          type: string
        isActive:
          description: Reserved for DocuSign.
          type: string
        isEnabled:
          description: When set to **true**, the feature set is actively enabled as part of the plan.
          type: string
        name:
          description: Reserved for DocuSign.
          type: string
        seatFee:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: featureSet
      x-ms-summary: This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
    fileType:
      description: ""
      properties:
        fileExtension:
          description: ""
          type: string
        mimeType:
          description: The mime-type of a file type listed in a fileTypes collection.
          type: string
      type: object
      x-ds-definition-name: fileType
      x-ms-summary: ""
    fileTypeList:
      description: ""
      properties:
        fileTypes:
          description: A collection of file types.
          items:
            $ref: "#/components/schemas/fileType"
          type: array
      type: object
      x-ds-definition-name: fileTypeList
      x-ms-summary: ""
    filter:
      description: Use this object to create a filtered view of the items in a folder.
      properties:
        actionRequired:
          description: When set to **true**, the current user needs to take action on the item.
          type: string
        expires:
          description: The number of days a sent envelope remains active before it expires.
          type: string
        folderIds:
          description: |-
            Filters for any combination of folder ids and folder types. The possible folder types are:

            - `awaiting_my_signature`
            - `completed`
            - `draft`
            - `drafts`
            - `expiring_soon`
            - `inbox`
            - `out_for_signature`
            - `recyclebin`
            - `sentitems`
            - `waiting_for_others`
          type: string
        fromDateTime:
          description: The UTC DateTime of the beginning of a date range. If no value is provided, the default search is the previous 30 days.
          type: string
        isTemplate:
          description: When set to **true**, the item is a template.
          type: string
        order:
          description: |-
            (Optional) The order in which to sort the results.

            Valid values are: 


            * `asc`: Ascending order.
            * `desc`: Descending order. 
          type: string
        orderBy:
          description: |-
            The field used to sort the results.

            Example: `Created`
          type: string
        searchTarget:
          description: Reserved for DocuSign.
          type: string
        searchText:
          description: A free text search field for searching across the items in a folder. The search looks for the text that you enter in the recipient names and emails, envelope custom fields, sender name, and subject.
          type: string
        status:
          description: |-
            The status of the envelope. By default, all statuses are returned.

            For details, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions).
          type: string
        toDateTime:
          description: The UTC DateTime of the end of a date range. If no value is provided, the default search is to the current date.
          type: string
      type: object
      x-ds-definition-name: filter
      x-ms-summary: Use this object to create a filtered view of the items in a folder.
    firstName:
      description: |
        A tab that displays the recipient's first name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the first section as the first name.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: firstName
      x-ms-summary: |
        A tab that displays the recipient's first name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the first section as the first name.
    folder:
      description: This object contains details about a folder.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        filter:
          $ref: "#/components/schemas/filter"
        folderId:
          description: The id of the folder.
          type: string
        folderItems:
          description: A list of envelopes and templates that the folder contains.
          items:
            $ref: "#/components/schemas/folderItem_v2"
          type: array
        folders:
          description: A collection of folder objects returned in a response.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        hasAccess:
          description: When set to **true**, the current user has access to the folder.
          type: string
        hasSubFolders:
          description: When set to **true**, the folder has subfolders.
          type: string
        itemCount:
          description: The number of items in the folder.
          type: string
        name:
          description: The name of the folder.
          type: string
        owner:
          $ref: "#/components/schemas/userInfo"
        parentFolderId:
          description: The id of the parent folder, or the special value `root` for the root folder.
          type: string
        parentFolderUri:
          description: The URI of the parent folder.
          type: string
        subFolderCount:
          description: The number of subfolders.
          type: string
        type:
          description: |-
            The type of folder. Possible values include:

            - `draft`
            - `inbox`
            - `normal` (a system-generated folder)
            - `recyclebin`
            - `sentitems`
            - `custom` (a custom folder created by a user)
          type: string
        uri:
          description: The URI for the folder.
          type: string
      type: object
      x-ds-definition-name: folder
      x-ms-summary: This object contains details about a folder.
    folderItemResponse:
      description: Results from a folder item request.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        folderItems:
          description: "A list of the envelopes in the specified folder or folders. "
          items:
            $ref: "#/components/schemas/folderItem_v2"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalRows:
          description: The total number of items in the result.
          type: string
      type: object
      x-ds-definition-name: folderItemResponse
      x-ms-summary: Results from a folder item request.
    folderItem_v2:
      description: Information about folder item results.
      properties:
        completedDateTime:
          description: If the item is an envelope, this is the UTC DateTime when the envelope was completed.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        envelopeId:
          description: If the item is an envelope, this is the id of the envelope.
          type: string
        envelopeUri:
          description: If the item is an envelope, this is the URI for retrieving it.
          type: string
        expireDateTime:
          description: The date and time the envelope is set to expire.
          type: string
        folderId:
          description: The id of the folder.
          type: string
        folderUri:
          description: If the item is a subfolder, this is the URI for retrieving it.
          type: string
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        ownerName:
          description: The name of the user who owns the folder.
          type: string
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        recipientsUri:
          description: Contains a URI for an endpoint that you can use to retrieve the recipients.
          type: string
        senderCompany:
          description: The name of the sender's company.
          type: string
        senderEmail:
          description: The sender's email address.
          type: string
        senderName:
          description: The sender's name.
          type: string
        senderUserId:
          description: The sender's id.
          type: string
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        subject:
          description: The subject of the envelope.
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
        templateUri:
          description: The URI for retrieving the template.
          type: string
      type: object
      x-ds-definition-name: folderItem_v2
      x-ms-summary: Information about folder item results.
    folderItemsResponse:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopes:
          description: An array containing PowerForm data.
          items:
            $ref: "#/components/schemas/envelopeSummary"
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: folderItemsResponse
      x-ms-summary: ""
    folderSharedItem:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        folderId:
          description: The id of the folder.
          type: string
        name:
          description: The name of the folder.
          type: string
        owner:
          $ref: "#/components/schemas/userInfo"
        parentFolderId:
          description: The id of the parent folder.
          type: string
        parentFolderUri:
          description: The URI for the parent folder.
          type: string
        shared:
          description: |-
            Indicates how the folder is shared. Valid values are:

            - `not_shared`
            - `shared_to`
          type: string
        sharedGroups:
          description: A list of groups that share the folder.
          items:
            $ref: "#/components/schemas/memberGroupSharedItem"
          type: array
        sharedUsers:
          description: A list of users that share the folder.
          items:
            $ref: "#/components/schemas/userSharedItem"
          type: array
        uri:
          description: A URI containing the user ID.
          type: string
        user:
          $ref: "#/components/schemas/userInfo"
      type: object
      x-ds-definition-name: folderSharedItem
      x-ms-summary: ""
    foldersRequest:
      description: Information for a folder request.
      properties:
        envelopeIds:
          description: A comma-separated list of envelope IDs.
          items:
            type: string
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        fromFolderId:
          description: " The id of the folder that the envelope is being moved from."
          type: string
      type: object
      x-ds-definition-name: foldersRequest
      x-ms-summary: Information for a folder request.
    foldersResponse:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        envelopes:
          description: An array containing PowerForm data.
          items:
            $ref: "#/components/schemas/envelopeSummary"
          type: array
        folders:
          description: A list of folder objects.
          items:
            $ref: "#/components/schemas/folder"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: foldersResponse
      x-ms-summary: ""
    forgottenPasswordInformation:
      description: A complex element that has up to four Question/Answer pairs for forgotten password information.
      properties:
        forgottenPasswordAnswer1:
          description: The answer to the first forgotten password challenge question.
          type: string
        forgottenPasswordAnswer2:
          description: The answer to the second forgotten password challenge question.
          type: string
        forgottenPasswordAnswer3:
          description: The answer to the third forgotten password challenge question.
          type: string
        forgottenPasswordAnswer4:
          description: The answer to the fourth forgotten password challenge question.
          type: string
        forgottenPasswordQuestion1:
          description: The first challenge question presented to a user who has forgotten their password.
          type: string
        forgottenPasswordQuestion2:
          description: The second challenge question presented to a user who has forgotten their password.
          type: string
        forgottenPasswordQuestion3:
          description: The third challenge question presented to a user who has forgotten their password.
          type: string
        forgottenPasswordQuestion4:
          description: The fourth challenge question presented to a user who has forgotten their password.
          type: string
      type: object
      x-ds-definition-name: forgottenPasswordInformation
      x-ms-summary: A complex element that has up to four Question/Answer pairs for forgotten password information.
    formDataItem:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        listSelectedValue:
          description: The selected value in a list.
          type: string
        name:
          description: The name of the form field.
          type: string
        originalValue:
          description: The initial value associated with the form field.
          type: string
        value:
          description: The current value associated with the form field.
          type: string
      type: object
      x-ds-definition-name: formDataItem
      x-ms-summary: ""
    formulaTab:
      description: |
        The value of a formula tab is calculated
        from the values of other
        number or date tabs in the document.
        When the recipient completes the underlying fields,
        the formula tab calculates and displays the result.

        The `formula` property of the tab
        contains the references
        to the underlying tabs.
        See [Calculated Fields][calculatedfields]
        in the DocuSign Support Center
        to learn more about formulas.

        If a formula tab contains
        a `paymentDetails` property,
        the tab is considered a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formula:
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
          type: string
        formulaMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        hidden:
          description: |
            If this is a regular formula (no `paymentDetails` property is present):

            * **true**: The tab is hidden.
            * **false**: The tab is shown.

            If the formula is payment item (a `paymentDetails` property is present):

            * **true**: The tab is displayed as a payment.
            * **false**: The tab is displayed as a regular formula.
          type: string
        hiddenMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        isPaymentAmountMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roundDecimalPlaces:
          description: The number of decimal places to round to.
          type: string
        roundDecimalPlacesMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+35, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+35, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: formulaTab
      x-ms-summary: |
        The value of a formula tab is calculated
        from the values of other
        number or date tabs in the document.
        When the recipient completes the underlying fields,
        the formula tab calculates and displays the result.

        The `formula` property of the tab
        contains the references
        to the underlying tabs.
        See [Calculated Fields][calculatedfields]
        in the DocuSign Support Center
        to learn more about formulas.

        If a formula tab contains
        a `paymentDetails` property,
        the tab is considered a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    fullName:
      description: |
        A tab that displays the recipient's full name.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: fullName
      x-ms-summary: |
        A tab that displays the recipient's full name.
    graphicsContext:
      description: ""
      properties:
        fillColor:
          description: The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
          type: string
        lineColor:
          description: The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).
          type: string
        lineWeight:
          description: The line weight or thickness to use for the overlay.
          type: string
      type: object
      x-ds-definition-name: graphicsContext
      x-ms-summary: ""
    group:
      description: This object contains information about a group.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        groupId:
          description: The DocuSign group ID for the group.
          type: string
        groupName:
          description: The name of the group.
          type: string
        groupType:
          description: The group type.
          type: string
        permissionProfileId:
          description: |-
            The ID of the permission profile associated with the group. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)
          type: string
        users:
          description: A list of the users in the group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        usersCount:
          description: The total number of users in the group.
          type: string
      type: object
      x-ds-definition-name: group
      x-ms-summary: This object contains information about a group.
    groupInformation:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        groups:
          description: A collection group objects containing information about the groups.
          items:
            $ref: "#/components/schemas/group"
          type: array
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: groupInformation
      x-ms-summary: ""
    idCheckConfiguration:
      description: A complex object specifying ID check configuration.
      properties:
        authSteps:
          description: A list of ID check security steps, each specifying an authorization type.
          items:
            $ref: "#/components/schemas/idCheckSecurityStep"
          type: array
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        name:
          description: The name of the signature.
          type: string
      type: object
      x-ds-definition-name: idCheckConfiguration
      x-ms-summary: A complex object specifying ID check configuration.
    idCheckInformationInput:
      description: A complex element that contains input information related to a recipient ID check.
      properties:
        addressInformationInput:
          $ref: "#/components/schemas/addressInformationInput"
        dobInformationInput:
          $ref: "#/components/schemas/dobInformationInput"
        ssn4InformationInput:
          $ref: "#/components/schemas/ssn4InformationInput"
        ssn9InformationInput:
          $ref: "#/components/schemas/ssn9InformationInput"
      type: object
      x-ds-definition-name: idCheckInformationInput
      x-ms-summary: A complex element that contains input information related to a recipient ID check.
    idCheckSecurityStep:
      description: ""
      properties:
        authType:
          description: Type of authorization used for the security check.
          type: string
      type: object
      x-ds-definition-name: idCheckSecurityStep
      x-ms-summary: ""
    inPersonSigner:
      description: |
        Contains information about an in-person recipient. This is a DocuSign user,
        acting as a Signing Host,
        who is in the same physical location as the signer.
        To learn about the fields used
        for the eNotary feature,
        see the [EnvelopeRecipients resource][resource].

        [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        canSignOffline:
          description: When set to **true**, specifies that the signer can perform the signing ceremony offline.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: |-
            Indicates the number of times that the recipient has been through a signing completion. 

            If this number is greater than `0` for a signing group, only the user who previously completed may sign again.
          type: string
        creationReason:
          description: The reason why the recipient was created (for example, `sender`). Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        defaultRecipient:
          description: |
            When set to **true**,
            this is the default recipient for the envelope.
            This option is used when creating an envelope from a template.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |
            The signer's email address in an eNotary flow.

            Use only when `inPersonSigningType` is `notary`.
            For regular in-person-signer flow, use `signerEmail` instead.
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        hostEmail:
          description: |
            The email address of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.
          type: string
        hostEmailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        hostName:
          description: |
            The name of the signing host.
            This is the DocuSign user that is hosting the in-person signing session.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
          type: string
        hostNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inPersonSigningType:
          description: |
            Specifies whether the envelope uses the eNotary feature.
            Valid values:

            * `inPersonSigner`: The envelope uses the normal in-person signing flow.
            * `notary`: The envelope uses the eNotary in-person signing flow.
          type: string
        inPersonSigningTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |
            The signer's full legal name in an eNotary flow.

            Required when `inPersonSigningType` is `notary`.
            For a regular in-person-signer flow, use `signerName` instead.

            Maximum Length: 100 characters.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        notaryHost:
          $ref: "#/components/schemas/notaryHost"
        notaryId:
          description: ""
          type: string
        note:
          description: |
            A note sent to the in-person signer in the signing email.
            This note is visible only to this recipient.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        recipientSuppliesTabs:
          description: When set to **true**, specifies that the recipient creates the tabs.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireSignOnPaper:
          description: When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
          type: string
        requireSignerCertificate:
          description: |-
            By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.

            This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 

            Set this parameter to `safe` to use a SAFE-BioPharma certificate.

            The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
          type: string
        requireUploadSignature:
          description: When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
          type: string
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signInEachLocation:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signInEachLocationMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signatureInfo:
          $ref: "#/components/schemas/recipientSignatureInformation"
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signerEmail:
          description: |+
            The in-person signer's email address.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `email` instead.

            Maximum Length: 100 characters.

          type: string
        signerEmailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signerFirstName:
          description: The signer's first name.
          type: string
        signerFirstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signerLastName:
          description: The signer's last name.
          type: string
        signerLastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signerName:
          description: |+
            Required. The full legal name of a signer for the envelope. 

            Maximum Length: 100 characters.


          type: string
        signerNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupId:
          description: Not applicable. You cannot use a signing group for an in-person signer.
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: Not applicable.
          type: string
        signingGroupUsers:
          description: Not applicable.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: inPersonSigner
      x-ms-summary: |
        Contains information about an in-person recipient. This is a DocuSign user,
        acting as a Signing Host,
        who is in the same physical location as the signer.
        To learn about the fields used
        for the eNotary feature,
        see the [EnvelopeRecipients resource][resource].

        [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
    initialHere:
      description: |
        A tab that allows the recipient to initial the document. May
        be optional.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        optional:
          description: When set to **true**, the recipient does not need to complete this tab to complete the signing process.
          type: string
        optionalMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        scaleValue:
          description: " Sets the size for the InitialHere tab. It can be value from 0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size."
          type: string
        scaleValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+2, -7)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+2, -7)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: initialHere
      x-ms-summary: |
        A tab that allows the recipient to initial the document. May
        be optional.
    inlineTemplate:
      description: ""
      properties:
        customFields:
          $ref: "#/components/schemas/AccountCustomFields"
        documents:
          description: A complex element that contains details about the documents associated with the envelope.
          items:
            $ref: "#/components/schemas/document"
          type: array
        envelope:
          $ref: "#/components/schemas/envelope"
        recipients:
          $ref: "#/components/schemas/EnvelopeRecipients"
        sequence:
          description: Specifies the order in which templates are overlaid.
          type: string
      type: object
      x-ds-definition-name: inlineTemplate
      x-ms-summary: ""
    integratedUserInfoList:
      description: ""
      properties:
        allUsersSelected:
          description: ""
          type: string
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
      type: object
      x-ds-definition-name: integratedUserInfoList
      x-ms-summary: ""
    intermediary:
      description: Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |-
            The recipient's email address. Notification of the document to sign is sent to this email address. 

            Maximum length: 100 characters. 
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: "The recipient's status. Read only.\ 


            Possible values:


            - `autoresponded`: The recipientÃ¢ÂÂs email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.

            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.

            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).

            - `declined`: The recipient declined to sign the document(s) in the envelope.

            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.

            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.

            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.

            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.\n"
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: intermediary
      x-ms-summary: Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
    jurisdiction:
      description: |-
        Describes the jurisdiction of a notary.
        This is read-only object.
      properties:
        allowSystemCreatedSeal:
          description: If **true**, the seal can be generated by the platform.
          type: string
        allowUserUploadedSeal:
          description: If **true**, the seal can be uploaded by the user.
          type: string
        commissionIdInSeal:
          description: If **true**, the notary's `comissionId` appears in the seal.
          type: string
        county:
          description: The county of the jurisdiction.
          type: string
        countyInSeal:
          description: If **true**, the county name appears in the seal.
          type: string
        enabled:
          description: If **true**, this jurisdiction is enabled.
          type: string
        jurisdictionId:
          description: |
            The ID of the jurisdiction.
            The following jurisdictions
            are supported:

            -  `5 - California`
            -  `6 - Colorado`
            -  `9 - Florida`
            -  `10 - Georgia`
            -  `12 - Idaho`
            -  `13 - Illinois`
            -  `14 - Indiana`
            -  `15 - Iowa`
            -  `17 - Kentucky`
            -  `23 - Minnesota`
            -  `25 - Missouri`
            -  `30 - New Jersey`
            -  `32 - New York`
            -  `33 - North Carolina`
            -  `35 - Ohio`
            -  `37 - Oregon`
            -  `38 - Pennsylvania`
            -  `40 - South Carolina`
            -  `43 - Texas`
            -  `44 - Utah`
            -  `47 - Washington`
            -  `48 - West Virginia`
            -  `49 - Wisconsin`
            -  `62 - Florida Commissioner of Deeds`
          type: string
        name:
          description: The name of the jurisdiction. Typically the state name.
          type: string
        notaryPublicInSeal:
          description: If **true**, the name of the notary appears in the seal.
          type: string
        stateNameInSeal:
          description: If **true**, the name of the state appears in the seal.
          type: string
      type: object
      x-ds-definition-name: jurisdiction
      x-ms-summary: |-
        Describes the jurisdiction of a notary.
        This is read-only object.
    lastName:
      description: |
        A tab that displays the recipient's last name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the last section as the last name.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: lastName
      x-ms-summary: |
        A tab that displays the recipient's last name. This tab
        takes the recipient's name as entered in the recipient
        information, splits it into sections based on spaces and
        uses the last section as the last name.
    list:
      description: |
        This tab offers a list of options to choose from.
        The `listItems`
        property contains a list of
        [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
        objects to specify the selectable options.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign-generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        listItems:
          description: |
            The list of values that can be selected by senders. The list values are separated by semi-colons. Example: [one;two;three;four]

            Maximum Length of listItems:  2048 characters.
            Maximum Length of items in the list: 100 characters. 
          items:
            $ref: "#/components/schemas/listItem"
          type: array
        listSelectedValue:
          description: The value in the list that is selected by default.
          type: string
        listSelectedValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: The value to use when the item is selected.
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: list
      x-ms-summary: |
        This tab offers a list of options to choose from.
        The `listItems`
        property contains a list of
        [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
        objects to specify the selectable options.
    listCustomField:
      description: This object represents a list custom field from which envelope creators and senders can select custom data.
      properties:
        configurationType:
          description: If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        fieldId:
          description: The id of the custom field.
          type: string
        listItems:
          description: |-
            An array of strings that represents the options in a list.

            Maximum length: 2048 characters, but each individual option string can only be a maximum of 100 characters.
          items:
            type: string
          type: array
        name:
          description: The name of the custom field.
          type: string
        required:
          description: When set to **true**, senders are required to select an option from the list before they can send the envelope.
          type: string
        show:
          description: When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.
          type: string
        value:
          description: The value of the custom field. This is the value that the user who creates or sends the envelope selects from the list.
          type: string
      type: object
      x-ds-definition-name: listCustomField
      x-ms-summary: This object represents a list custom field from which envelope creators and senders can select custom data.
    listItem:
      description: |-
        One of the selectable items
        in the `listItems` property
        of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
      properties:
        selected:
          description: |-
            When set to **true**, indicates that this item is the default selection shown to a signer. 

            Only one selection can be set as the default.
          type: string
        selectedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        text:
          description: "Specifies the text that is shown in the dropdown list. "
          type: string
        textMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: Specifies the value that is used when the list item is selected.
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: listItem
      x-ms-summary: |-
        One of the selectable items
        in the `listItems` property
        of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
    localePolicy:
      description: ""
      properties:
        addressFormat:
          description: ""
          type: string
        addressFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowRegion:
          description: ""
          type: string
        calendarType:
          description: ""
          type: string
        calendarTypeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        cultureName:
          description: ""
          type: string
        cultureNameMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        currencyCode:
          description: The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
          type: string
        currencyCodeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        currencyNegativeFormat:
          description: ""
          type: string
        currencyNegativeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        currencyPositiveFormat:
          description: ""
          type: string
        currencyPositiveFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        customDateFormat:
          description: ""
          type: string
        customSignDateFormat:
          description: ""
          type: string
        customSignTimeFormat:
          description: ""
          type: string
        customTimeFormat:
          description: ""
          type: string
        dateFormat:
          description: ""
          type: string
        dateFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        effectiveAddressFormat:
          description: ""
          type: string
        effectiveCalendarType:
          description: ""
          type: string
        effectiveCurrencyCode:
          description: ""
          type: string
        effectiveCurrencyNegativeFormat:
          description: ""
          type: string
        effectiveCurrencyPositiveFormat:
          description: ""
          type: string
        effectiveCustomDateFormat:
          description: ""
          type: string
        effectiveCustomTimeFormat:
          description: ""
          type: string
        effectiveDateFormat:
          description: ""
          type: string
        effectiveInitialFormat:
          description: ""
          type: string
        effectiveNameFormat:
          description: ""
          type: string
        effectiveTimeFormat:
          description: ""
          type: string
        effectiveTimeZone:
          description: ""
          type: string
        initialFormat:
          description: ""
          type: string
        initialFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        nameFormat:
          description: ""
          type: string
        nameFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signDateFormat:
          description: |
            The format for the signature date. Valid values are:

            - `d/M/yyyy`
            - `dd-MM-yy`
            - `dd-MMM-yy`
            - `dd-MM-yyyy`
            - `dd.MM.yyyy`
            - `dd-MMM-yyyy`
            - `dd MMMM yyyy`
            - `M/d/yyyy`
            - `MM-dd-yyyy`
            - `MM/dd/yyyy`
            - `MM/dd/yy`
            - `MMM-dd-yyyy`
            - `MMM d, yyyy`
            - `MMMM d, yyyy`
            - `yyyy-MM-dd`
            - `yyyy-MMM-dd`
            - `yyyy/MM/dd`
            - `yyyy MMMM d`

            **Note**: Only Admin users can change this setting.
          type: string
        signDateFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        signTimeFormat:
          description: |
            The format for the signature time. Valid values are:

            - `none`
            - `HH:mm`
            - `h:mm`
            - `HH:mm:ss`
            - `h:mm:ss`
          type: string
        signTimeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timeFormat:
          description: ""
          type: string
        timeFormatMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timeZone:
          description: ""
          type: string
        timeZoneMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: localePolicy
      x-ms-summary: ""
    localePolicyTab:
      description: ""
      properties:
        addressFormat:
          description: ""
          type: string
        calendarType:
          description: ""
          type: string
        cultureName:
          description: ""
          type: string
        currencyCode:
          description: The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
          type: string
        currencyNegativeFormat:
          description: ""
          type: string
        currencyPositiveFormat:
          description: ""
          type: string
        customDateFormat:
          description: ""
          type: string
        customTimeFormat:
          description: ""
          type: string
        dateFormat:
          description: ""
          type: string
        initialFormat:
          description: ""
          type: string
        nameFormat:
          description: ""
          type: string
        timeFormat:
          description: ""
          type: string
        timeZone:
          description: ""
          type: string
      type: object
      x-ds-definition-name: localePolicyTab
      x-ms-summary: ""
    lockInformation:
      description: ""
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        lockDurationInSeconds:
          description: The number of seconds to lock the envelope for editing.  This value must be greater than `0` seconds.
          type: string
        lockToken:
          description: A unique identifier provided to the owner of the lock. You must use this token with subsequent calls to prove ownership of the lock.
          type: string
        lockType:
          description: The type of lock.  Currently `edit` is the only supported type.
          type: string
        lockedByApp:
          description: The human-readable name of the application that is locking the envelope or template. This value displays to the user in error messages when lock conflicts occur.
          type: string
        lockedByUser:
          $ref: "#/components/schemas/userInfo"
        lockedUntilDateTime:
          description: The date and time that the lock expires.
          type: string
        useScratchPad:
          description: "When set to **true**, a scratchpad is used to edit information.

            \ "
          type: string
      type: object
      x-ds-definition-name: lockInformation
      x-ms-summary: ""
    lockRequest:
      description: This request object contains information about the lock that you want to create or update.
      properties:
        lockDurationInSeconds:
          description: The number of seconds to lock the envelope for editing.  Must be greater than 0 seconds.
          type: string
        lockType:
          description: The type of lock.  Currently `edit` is the only supported type.
          type: string
        lockedByApp:
          description: A friendly name of the application used to lock the envelope.  Will be used in error messages to the user when lock conflicts occur.
          type: string
        templatePassword:
          description: The [password for the template](https://support.docusign.com/en/guides/ndse-user-guide-template-passwords). If you are using a lock for a template that has a password or an envelope that is based on a template that has a password, you must enter the `templatePassword` to save the changes.
          type: string
        useScratchPad:
          description: "When set to **true**, a scratchpad is used to edit information.

            \ "
          type: string
      type: object
      x-ds-definition-name: lockRequest
      x-ms-summary: This request object contains information about the lock that you want to create or update.
    loginAccount:
      description: ""
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        accountIdGuid:
          description: The GUID associated with the account ID.
          type: string
        baseUrl:
          description: The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located, and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
          type: string
        email:
          description: The email address for the user.
          type: string
        isDefault:
          description: This value is true if this is the default account for the user, otherwise false is returned.
          type: string
        loginAccountSettings:
          description: A list of settings on the acccount that indicate what features are available.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        loginUserSettings:
          description: A list of user-level settings that indicate what user-specific features are available.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        name:
          description: The name associated with the account.
          type: string
        siteDescription:
          description: An optional descirption of the site that hosts the account.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        userName:
          description: The name of this user as defined by the account.
          type: string
      type: object
      x-ds-definition-name: loginAccount
      x-ms-summary: ""
    loginInformation:
      description: ""
      properties:
        apiPassword:
          description: Contains a token that can be used for authentication in API calls instead of using the user name and password.
          type: string
        loginAccounts:
          description: The list of accounts that authenticating user is a member of.
          items:
            $ref: "#/components/schemas/loginAccount"
          type: array
      type: object
      x-ds-definition-name: loginInformation
      x-ms-summary: ""
    matchBox:
      description: ""
      properties:
        height:
          description: The height of the tab in pixels.
          type: string
        pageNumber:
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
      type: object
      x-ds-definition-name: matchBox
      x-ms-summary: ""
    memberGroupSharedItem:
      description: Information about items shared among groups.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        group:
          $ref: "#/components/schemas/group"
        shared:
          description: |-
            How the item is shared. One of:


            - `not_shared`: The item is not shared.

            - `shared_to`: The item is shared.
          type: string
      type: object
      x-ds-definition-name: memberGroupSharedItem
      x-ms-summary: Information about items shared among groups.
    memberSharedItems:
      description: Information about shared items.
      properties:
        envelopes:
          description: List of information about shared envelopes.
          items:
            $ref: "#/components/schemas/sharedItem"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        folders:
          description: List of information about shared folders.
          items:
            $ref: "#/components/schemas/folderSharedItem"
          type: array
        templates:
          description: List of information about shared templates.
          items:
            $ref: "#/components/schemas/templateSharedItem"
          type: array
        user:
          $ref: "#/components/schemas/userInfo"
      type: object
      x-ds-definition-name: memberSharedItems
      x-ms-summary: Information about shared items.
    mergeField:
      description: Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
      properties:
        allowSenderToEdit:
          description: When **true**, the sender can modify the value of the `mergeField` tab during the sending process.
          type: string
        allowSenderToEditMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        configurationType:
          description: If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
          type: string
        configurationTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        path:
          description: Sets the object associated with the custom tab. Currently this is the Salesforce Object.
          type: string
        pathExtended:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/pathExtendedElement"
          type: array
        pathExtendedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pathMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        row:
          description: Specifies the row number in a Salesforce table that the merge field value corresponds to.
          type: string
        rowMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        writeBack:
          description: When **true**, data entered into the merge field during Signing will update the mapped Salesforce field.
          type: string
        writeBackMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: mergeField
      x-ms-summary: Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
    mobileNotifierConfiguration:
      description: ""
      properties:
        deviceId:
          description: ""
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        platform:
          description: The Platform of the client application
          type: string
      type: object
      x-ds-definition-name: mobileNotifierConfiguration
      x-ms-summary: ""
    mobileNotifierConfigurationInformation:
      description: ""
      properties:
        mobileNotifierConfigurations:
          description: ""
          items:
            $ref: "#/components/schemas/mobileNotifierConfiguration"
          type: array
      type: object
      x-ds-definition-name: mobileNotifierConfigurationInformation
      x-ms-summary: ""
    money:
      description: |
        Describes information
        about the `total` of a payment.
      properties:
        amountInBaseUnit:
          description: |
            The total payment amount
            in the currency's base unit.
            For example, for USD
            the base currency is one cent.
          type: string
        currency:
          description: |
            The three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            For example:

            * AUD Australian dollar
            * CAD Canadian dollar
            * EUR Euro
            * GBP Great Britain pound
            * USD United States dollar

            This is a read-only property.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
          type: string
        displayAmount:
          description: |
            The payment amount as displayed
            in the `currency`.

            For example, if the payment amount
            is USD 12.59,
            the `amountInBaseUnit` is 1259 (cents),
            and the displayed amount is `$12.59 USD`.

            This is a read-only property.
          type: string
      type: object
      x-ds-definition-name: money
      x-ms-summary: |
        Describes information
        about the `total` of a payment.
    nameValue:
      description: A name-value pair that describes an item and provides a value for the item.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        name:
          description: The name of the item.
          type: string
        originalValue:
          description: The initial value of the item.
          type: string
        value:
          description: The current value of the item.
          type: string
      type: object
      x-ds-definition-name: nameValue
      x-ms-summary: A name-value pair that describes an item and provides a value for the item.
    newAccountDefinition:
      description: ""
      properties:
        accountName:
          description: The account name for the new account.
          type: string
        accountSettings:
          $ref: "#/components/schemas/accountSettingsInformation"
        addressInformation:
          $ref: "#/components/schemas/accountAddress"
        creditCardInformation:
          $ref: "#/components/schemas/creditCardInformation"
        directDebitProcessorInformation:
          $ref: "#/components/schemas/directDebitProcessorInformation"
        distributorCode:
          description: The Distributor Code that you received from DocuSign.
          type: string
        distributorPassword:
          description: The password for the `distributorCode`.
          type: string
        envelopePartitionId:
          description: Reserved for DocuSign.
          type: string
        initialUser:
          $ref: "#/components/schemas/userInformation"
        paymentMethod:
          description: |-
            The payment method used for the billing plan. Valid values are:

            - `NotSupported`
            - `CreditCard`
            - `PurchaseOrder`
            - `Premium`
            - `Freemium`
            - `FreeTrial`
            - `AppStore`
            - `DigitalExternal`
            - `DirectDebit`
          type: string
        paymentProcessorInformation:
          $ref: "#/components/schemas/paymentProcessorInformation"
        planInformation:
          $ref: "#/components/schemas/planInformation"
        referralInformation:
          $ref: "#/components/schemas/referralInformation"
        socialAccountInformation:
          $ref: "#/components/schemas/socialAccountInformation"
      type: object
      x-ds-definition-name: newAccountDefinition
      x-ms-summary: ""
    newAccountSummary:
      description: ""
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        accountIdGuid:
          description: The GUID associated with the account ID.
          type: string
        accountName:
          description: The account name for the new account.
          type: string
        apiPassword:
          description: Contains a token that can be used for authentication in API calls instead of using the user name and password.
          type: string
        baseUrl:
          description: The URL that should be used for successive calls to this account. It includes the protocal (https), the DocuSign server where the account is located, and the account number. Use this Url to make API calls against this account. Many of the API calls provide Uri's that are relative to this baseUrl.
          type: string
        billingPlanPreview:
          $ref: "#/components/schemas/billingPlanPreview"
        userId:
          description: Specifies the user ID of the new user.
          type: string
      type: object
      x-ds-definition-name: newAccountSummary
      x-ms-summary: ""
    newUser:
      description: Object representing a new user.
      properties:
        apiPassword:
          description: Contains a token that can be used for authentication in API calls instead of using the user name and password.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        email:
          description: The user's email address.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        membershipId:
          description: The user's membership ID.
          type: string
        permissionProfileId:
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          type: string
        permissionProfileName:
          description: |-
            The name of the account permission profile. 

            Example: `Account Administrator`
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userId:
          description: Specifies the user ID for the new user.
          type: string
        userName:
          description: The name of the user.
          type: string
        userStatus:
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
          type: string
      type: object
      x-ds-definition-name: newUser
      x-ms-summary: Object representing a new user.
    newUsersDefinition:
      description: ""
      properties:
        newUsers:
          description: A list of one or more new users.
          items:
            $ref: "#/components/schemas/userInformation"
          type: array
      type: object
      x-ds-definition-name: newUsersDefinition
      x-ms-summary: ""
    newUsersSummary:
      description: Object representing a summary of data for new users.
      properties:
        newUsers:
          description: A list of one or more new users.
          items:
            $ref: "#/components/schemas/newUser"
          type: array
      type: object
      x-ds-definition-name: newUsersSummary
      x-ms-summary: Object representing a summary of data for new users.
    notarize:
      description: |-
        A tab that alerts notary recipients that
        they must take action on the page.
        Only one notarize tab can appear on a page.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |+
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |+
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: notarize
      x-ms-summary: |-
        A tab that alerts notary recipients that
        they must take action on the page.
        Only one notarize tab can appear on a page.
    notary:
      description: ""
      properties:
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        enabled:
          description: The date the this object was created.
          type: string
        searchable:
          description: If **true**, this notary is searchable.
          type: string
        userInfo:
          $ref: "#/components/schemas/userInformation"
      type: object
      x-ds-definition-name: notary
      x-ms-summary: ""
    notaryHost:
      description: |
        This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.

        It describes information about the notary host.
        The following information is required
        when using the eNotary in-person signing flow:

        * `name`: Specifies the notary's full legal name.
        * `email`: Specifies the notary's email address.
        * `recipientId`: A unique ID number for the notary signing host.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: |
            The notary's email address.

            Maximum Length: 100 characters.
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        hostRecipientId:
          description: ""
          type: string
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |
            The notary's full legal name.

            Maximum Length: 100 characters.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        note:
          description: |
            A note sent to the notary in the signing email.
            This note is visible only to this notary.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: "The code associated with the recipient's status. Read only. "
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: notaryHost
      x-ms-summary: |
        This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.

        It describes information about the notary host.
        The following information is required
        when using the eNotary in-person signing flow:

        * `name`: Specifies the notary's full legal name.
        * `email`: Specifies the notary's email address.
        * `recipientId`: A unique ID number for the notary signing host.
    notaryJournal:
      description: ""
      properties:
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        documentName:
          description: ""
          type: string
        jurisdiction:
          $ref: "#/components/schemas/jurisdiction"
        notaryJournalId:
          description: ""
          type: string
        notaryJournalMetaData:
          $ref: "#/components/schemas/notaryJournalMetaData"
        signerName:
          description: |
            The in-person signer's full legal name.

            Required when `inPersonSigningType` is `inPersonSigner`.
            For eNotary flow, use `name` instead.

            Maximum Length: 100 characters.
          type: string
      type: object
      x-ds-definition-name: notaryJournal
      x-ms-summary: ""
    notaryJournalCredibleWitness:
      description: ""
      properties:
        address:
          description: The user's address.
          type: string
        name:
          description: ""
          type: string
        signatureImage:
          description: ""
          type: string
      type: object
      x-ds-definition-name: notaryJournalCredibleWitness
      x-ms-summary: ""
    notaryJournalList:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        notaryJournals:
          description: ""
          items:
            $ref: "#/components/schemas/notaryJournal"
          type: array
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: notaryJournalList
      x-ms-summary: ""
    notaryJournalMetaData:
      description: ""
      properties:
        comment:
          description: ""
          type: string
        credibleWitnesses:
          description: ""
          items:
            $ref: "#/components/schemas/notaryJournalCredibleWitness"
          type: array
        signatureImage:
          description: ""
          type: string
        signerIdType:
          description: ""
          type: string
      type: object
      x-ds-definition-name: notaryJournalMetaData
      x-ms-summary: ""
    notaryJurisdiction:
      description: A notary jurisdiction.
      properties:
        commissionExpiration:
          description: "The expiration date of the notary's commission in format: `MM/DD/YYYY`."
          type: string
        commissionId:
          description: The notary's commission identification. This varies from jurisdiction to jurisdiction.
          type: string
        county:
          description: The county that the commission is valid in.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        jurisdiction:
          $ref: "#/components/schemas/jurisdiction"
        registeredName:
          description: The registered name of the notary.
          type: string
        sealType:
          description: |-
            The seal type used for this juridiction.

            - `not_available`
            - `system_created`
            - `user_uploaded`
          type: string
      type: object
      x-ds-definition-name: notaryJurisdiction
      x-ms-summary: A notary jurisdiction.
    notaryJurisdictionList:
      description: A paged list of jurisdictions.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        notaryJurisdictions:
          description: An array of jurisdictions.
          items:
            $ref: "#/components/schemas/notaryJurisdiction"
          type: array
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: notaryJurisdictionList
      x-ms-summary: A paged list of jurisdictions.
    notaryRecipient:
      description: ""
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        agentCanEditEmail:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.
          type: string
        agentCanEditName:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        bulkRecipientsUri:
          description: Reserved for DocuSign.
          type: string
        canSignOffline:
          description: When set to **true**, specifies that the signer can perform the signing ceremony offline.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        creationReason:
          description: The reason why the item was created.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        defaultRecipient:
          description: When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: ""
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: |-
            The user's first name. 
            Maximum Length: 50 characters.
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        isBulkRecipient:
          description: |
            Reserved for DocuSign.
          type: string
        isBulkRecipientMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lastName:
          description: |-
            The user's last name. 
            Maximum Length: 50 characters.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        liveOakStartURL:
          description: ""
          type: string
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        notaryId:
          description: ""
          type: string
        notarySigners:
          description: ""
          items:
            type: string
          type: array
        notaryType:
          description: ""
          type: string
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        offlineAttributes:
          $ref: "#/components/schemas/offlineAttributes"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        proofFile:
          $ref: "#/components/schemas/recipientProofFile"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        recipientSuppliesTabs:
          description: When set to **true**, specifies that the recipient creates the tabs.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireSignOnPaper:
          description: When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
          type: string
        requireSignerCertificate:
          description: |-
            By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.

            This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 

            Set this parameter to `safe` to use a SAFE-BioPharma certificate.

            The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
          type: string
        requireUploadSignature:
          description: When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
          type: string
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signInEachLocation:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signInEachLocationMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signatureInfo:
          $ref: "#/components/schemas/recipientSignatureInformation"
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusCode:
          description: Reserved for DocuSign.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: notaryRecipient
      x-ms-summary: ""
    notaryResult:
      description: Describes a single notary jurisdiction.
      properties:
        jurisdictions:
          description: ""
          items:
            $ref: "#/components/schemas/jurisdiction"
          type: array
        notary:
          $ref: "#/components/schemas/notary"
      type: object
      x-ds-definition-name: notaryResult
      x-ms-summary: Describes a single notary jurisdiction.
    notarySeal:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        scaleValue:
          description: Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
          type: string
        scaleValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: notarySeal
      x-ms-summary: ""
    note:
      description: |
        A tab that displays additional information, in the form of a
        note, for the recipient.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: note
      x-ms-summary: |
        A tab that displays additional information, in the form of a
        note, for the recipient.
    notification:
      description: A complex element that specifies the notification settings for the envelope.
      properties:
        expirations:
          $ref: "#/components/schemas/expirations"
        reminders:
          $ref: "#/components/schemas/reminders"
        useAccountDefaults:
          description: When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**, the reminders and expirations settings specified in this request are used.
          type: string
      type: object
      x-ds-definition-name: notification
      x-ms-summary: A complex element that specifies the notification settings for the envelope.
    notificationDefaultSettings:
      description: Contains details about the default notification settings for the envelope notifications that senders and signers receive.
      properties:
        senderEmailNotifications:
          $ref: "#/components/schemas/senderEmailNotifications"
        signerEmailNotifications:
          $ref: "#/components/schemas/signerEmailNotifications"
      type: object
      x-ds-definition-name: notificationDefaultSettings
      x-ms-summary: Contains details about the default notification settings for the envelope notifications that senders and signers receive.
    notificationDefaults:
      description: ""
      properties:
        apiEmailNotifications:
          $ref: "#/components/schemas/notificationDefaultSettings"
        emailNotifications:
          $ref: "#/components/schemas/notificationDefaultSettings"
      type: object
      x-ds-definition-name: notificationDefaults
      x-ms-summary: ""
    number:
      description: |
        A tab that allows the recipient to enter numbers and decimal
        (.) points.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formula:
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
          type: string
        formulaMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: number
      x-ms-summary: |
        A tab that allows the recipient to enter numbers and decimal
        (.) points.
    oauthAccess:
      description: ""
      properties:
        access_token:
          description: Access token information.
          type: string
        data:
          description: A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        expires_in:
          description: ""
          type: string
        refresh_token:
          description: ""
          type: string
        scope:
          description: Must be set to "api".
          type: string
        token_type:
          description: ""
          type: string
      type: object
      x-ds-definition-name: oauthAccess
      x-ms-summary: ""
    offlineAttributes: {}
    page:
      description: Description of a page of a document.
      properties:
        dpi:
          description: The number of dots per inch used for the page image.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        height:
          description: The height of the page in pixels.
          type: string
        imageBytes:
          description: The number of image bytes.
          type: string
        mimeType:
          description: The MIME type.
          type: string
        pageId:
          description: The id of the page.
          type: string
        sequence:
          description: The sequence of the page in the document, or page number.
          type: string
        width:
          description: The width of the page in pixels.
          type: string
      type: object
      x-ds-definition-name: page
      x-ms-summary: Description of a page of a document.
    pageImages:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        pages:
          description: An array of page objects.
          items:
            $ref: "#/components/schemas/page"
          type: array
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: pageImages
      x-ms-summary: ""
    pageRequest:
      description: ""
      properties:
        password:
          description: The user's encrypted password hash.
          type: string
        rotate:
          description: "Sets the direction the page image is rotated. The possible settings are: left or right"
          type: string
      type: object
      x-ds-definition-name: pageRequest
      x-ms-summary: ""
    pathExtendedElement:
      description: ""
      properties:
        name:
          description: ""
          type: string
        type:
          description: ""
          type: string
        typeName:
          description: ""
          type: string
      type: object
      x-ds-definition-name: pathExtendedElement
      x-ms-summary: ""
    payPalLegacySettings:
      description: ""
      properties:
        currency:
          description: |
            The three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            For example:

            * AUD Australian dollar
            * CAD Canadian dollar
            * EUR Euro
            * GBP Great Britain pound
            * USD United States dollar

            This is a read-only property.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
          type: string
        partner:
          description: ""
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        userName:
          description: The name of the user.
          type: string
        vendor:
          description: ""
          type: string
      type: object
      x-ds-definition-name: payPalLegacySettings
      x-ms-summary: ""
    paymentDetails:
      description: |
        When a formula tab
        has a `paymentDetails` property,
        the formula tab
        is a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
      properties:
        allowedPaymentMethods:
          description: |
            An array of accepted payment methods:

            * `CreditCard`
            * `ApplePay`
            * `AndroidPay`
            * `BankAccount`

            For example, if you only accept credit cards and ACH transfers, you would set this property to:

            `'["BankAccount", "CreditCard"]'`

            Do not specify `BankAccount` (ACH) if you are also using in-person signing.
          items:
            type: string
          type: array
        chargeId:
          description: The GUID set by the payment gateway (such as Stripe) that identifies a transaction. The `chargeId` is created when authorizing a payment and must be referenced when completing a payment.
          type: string
        currencyCode:
          description: |
            Specifies the three-letter
            [ISO 4217][ISO4217] currency code for the payment.

            Supported currencies are:

            * AUD: Australian dollar
            * CAD: Canadian dollar
            * EUR: Euro
            * GBP: Great Britain pound
            * USD: United States dollar

            Specifying any other ISO 4217 code for payments is an error.

            [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217
          type: string
        currencyCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customMetadata:
          description: |-
            This is a sender-defined field that passes any extra metadata about the payment that will show up in the Authorize.net transaction under **Description** in the merchant gateway portal. The custom metadata will be recorded in downloaded Authorize.net reports. 

            The following example shows what the **Description** field of the transaction will look like: 

            `<envelopeID>, <customMetadata>`
          type: string
        customMetadataRequired:
          description: A sender-defined field that specifies whether custom metadata is required for the transaction. When set to **true**, custom metadata is required. This property only applies if you are using an Authorize.net payment gateway account.
          type: boolean
        customerId:
          description: The customer ID.
          type: string
        gatewayAccountId:
          description: |
            A GUID that identifies the payment gateway
            connected to the sender's DocuSign account.

            There is no public API
            for connecting payment gateway accounts
            You must connect and manage payment gateway accounts
            through the DocuSign Admin console
            and through your chosen payment gateway.

            You can get the gateway account ID
            in the Payments section
            of the DocuSign Admin console.


            [paymentgateways]:  https://support.docusign.com/en/guides/managing-payment-gateways
          type: string
        gatewayAccountIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        gatewayDisplayName:
          description: |-
            Display name of the gateway connected to sender's Docusign account.

            Possible values are: Stripe, Braintree, Authorize.Net.
          type: string
        gatewayName:
          description: |-
            Name of the gateway connected to sender's DocuSign account.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
          type: string
        lineItems:
          description: |
            A payment formula can have
            one or more line items
            that provide detail about
            individual items in a payment request.

            The list of line items
            are returned as metadata
            to the payment gateway.
          items:
            $ref: "#/components/schemas/paymentLineItem"
          type: array
        paymentOption:
          description: |-
            This property specifies how the signer's collected payment details will be used.

            Possible values:

            - `authorize`: The payment details will be used to collect payment. This is the default value.
            - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
            - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.
          type: string
        paymentSourceId:
          description: The payment source ID.
          type: string
        signerValues:
          $ref: "#/components/schemas/paymentSignerValues"
        status:
          description: |
            This read-only property describes the status of a payment.

            * `new`<br>
              This is a new payment request.
              The envelope has been created,
              but no payment authorizations have been made.

            * `auth_complete`<br>
              A recipient has entered their credit card information,
              but the envelope has not been completed.
              The card has not been charged.

            * `payment_complete`<br>
              The recipient's card has been charged.

            * `payment_capture_failed`<br>
              Final charge failed.
              This can happen when too much time
              passes between authorizing the payment
              and completing the document.

            * `future_payment_saved` <br>
            The recipient's payment method has been saved to the sender's payment gateway.
          type: string
        total:
          $ref: "#/components/schemas/money"
      type: object
      x-ds-definition-name: paymentDetails
      x-ms-summary: |
        When a formula tab
        has a `paymentDetails` property,
        the formula tab
        is a payment item.
        See [Requesting Payments Along with Signatures][paymentguide]
        in the DocuSign Support Center
        to learn more about payments.

        [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
    paymentGatewayAccount:
      description: This object contains details about a payment gateway account.
      properties:
        allowCustomMetadata:
          description: |-
            When **true**, the sender can pass custom metadata about the payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab, in the `customMetadata` property under `paymentDetails`. 

            For example, this property is set to **true** for the Authorize.net gateway by default. As a result, the extra metadata that you send displays for the Authorize.net transaction in the merchant gateway portal under **Description**.

            **Note**: This property is read only and cannot be changed.
          type: boolean
        config:
          $ref: "#/components/schemas/paymentGatewayAccountSetting"
        displayName:
          description: |-
            A user-defined name for a connected gateway account.

            This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.

            The human-readable version of `paymentGatewayAccountId`.
          type: string
        isEnabled:
          description: When **true**, the payment gateway account is enabled.
          type: string
        isLegacy:
          description: Reserved for DocuSign.
          type: string
        lastModified:
          description: The UTC DateTime that the payment gateway account was last updated.
          type: string
        payPalLegacySettings:
          $ref: "#/components/schemas/payPalLegacySettings"
        paymentGateway:
          description: |-
            Payment gateway used by the connected gateway account.
            This is the name used by the API.
            For a human-readable version use `paymentGatewayDisplayName`.

            Possible values are:

            * `Stripe`
            * `Braintree`
            * `AuthorizeDotNet`
          type: string
        paymentGatewayAccountId:
          description: A GUID that identifies the payment gateway account. For a human-readable version use `displayName`.
          type: string
        paymentGatewayDisplayName:
          description: |-
            The display name of the payment gateway that the connected gateway account uses.
            This is the human-readable version of `paymentGateway`.

            Possible values are:

            * Stripe
            * Braintree
            * Authorize.Net
          type: string
        supportedCurrencies:
          description: |-
            A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.

            Examples: 

            - `USD`
            - `CAD`
            - `EUR`
            - `HKD`
          items:
            type: string
          type: array
        supportedPaymentMethods:
          description: An array of paymentMethodWithOptions objects that specify the payment methods that are available for the gateway.
          items:
            type: string
          type: array
        supportedPaymentMethodsWithOptions:
          description: An array of `paymentMethodWithOptions` objects that specify the payment methods that are available for the gateway, as well as the payment options that are compatible with each payment method.
          items:
            $ref: "#/components/schemas/paymentMethodWithOptions"
          type: array
        zeroDecimalCurrencies:
          description: ""
          items:
            type: string
          type: array
      type: object
      x-ds-definition-name: paymentGatewayAccount
      x-ms-summary: This object contains details about a payment gateway account.
    paymentGatewayAccountSetting:
      description: ""
      properties:
        apiFields:
          description: ""
          type: string
        authorizationCode:
          description: ""
          type: string
        credentialStatus:
          description: ""
          type: string
        merchantId:
          description: ""
          type: string
      type: object
      x-ds-definition-name: paymentGatewayAccountSetting
      x-ms-summary: ""
    paymentGatewayAccountsInfo:
      description: Holds information about connected payment accounts.
      properties:
        paymentGatewayAccounts:
          description: A list of payment gateway accounts.
          items:
            $ref: "#/components/schemas/paymentGatewayAccount"
          type: array
      type: object
      x-ds-definition-name: paymentGatewayAccountsInfo
      x-ms-summary: Holds information about connected payment accounts.
    paymentLineItem:
      description: |+
        A line item describes details
        about an individual line item
        in a payment request.

      properties:
        amountReference:
          description: |+
            This is a the `tabLabel`
            that specifies the amount paid
            for the line items.

          type: string
        description:
          description: |
            A sender-defined description of the line item.
          type: string
        itemCode:
          description: |
            This is the sender-defined
            SKU, inventory number, or other item code
            for the line item.
          type: string
        name:
          description: |
            This is a sender-defined
            product name, service name,
            or other designation for the line item.
          type: string
      type: object
      x-ds-definition-name: paymentLineItem
      x-ms-summary: |+
        A line item describes details
        about an individual line item
        in a payment request.

    paymentMethodWithOptions:
      description: This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
      properties:
        supportedOptions:
          description: |-
            The payment options that are compatible with the payment method in the `type` property.

            Possible values are:

            - `save` 
            - `save_and_authorize`
            - `authorize`
          items:
            type: string
          type: array
        type:
          description: |-
            The name of a payment method that the gateway accepts.

            Possible values are:

            - `CreditCard`
            - `ApplePay`
            - `AndroidPay`
            - `BankAccount`
            - `PayPal`
          type: string
      type: object
      x-ds-definition-name: paymentMethodWithOptions
      x-ms-summary: This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
    paymentProcessorInformation:
      description: ""
      properties:
        address:
          $ref: "#/components/schemas/addressInformation"
        billingAgreementId:
          description: The id of the billing agreement.
          type: string
        email:
          description: The email address associated with the payment processor.
          type: string
      type: object
      x-ds-definition-name: paymentProcessorInformation
      x-ms-summary: ""
    paymentSignerValues:
      description: ""
      properties:
        paymentOption:
          description: |-
            This property specifies how the signer's collected payment details will be used.

            Possible values:

            - `authorize`: The payment details will be used to collect payment. This is the default value.
            - `save`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway.
            - `save_and_authorize`: The signer's payment method (credit card or bank account) will be saved to the sender's payment gateway and will also be used to collect payment.
          type: string
      type: object
      x-ds-definition-name: paymentSignerValues
      x-ms-summary: ""
    permissionProfile:
      description: This object defines the account permissions for a profile that you can apply to a group of users.
      properties:
        modifiedByUsername:
          description: The username of the user who last modified the permission profile.
          type: string
        modifiedDateTime:
          description: The date and time when the permission profile was last modified.
          type: string
        permissionProfileId:
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          type: string
        permissionProfileName:
          description: |-
            The name of the account permission profile. 

            Example: `Account Administrator`
          type: string
        settings:
          $ref: "#/components/schemas/accountRoleSettings"
        userCount:
          description: The total number of users in the group associated with the account permission profile.
          type: string
        users:
          description: A list of user objects containing information about the users who are associated with the account permission profile.
          items:
            $ref: "#/components/schemas/userInformation"
          type: array
      type: object
      x-ds-definition-name: permissionProfile
      x-ms-summary: This object defines the account permissions for a profile that you can apply to a group of users.
    permissionProfileInformation:
      description: Contains details about the permission profiles associated with an account.
      properties:
        permissionProfiles:
          description: A complex type containing a collection of permission profiles.
          items:
            $ref: "#/components/schemas/permissionProfile"
          type: array
      type: object
      x-ds-definition-name: permissionProfileInformation
      x-ms-summary: Contains details about the permission profiles associated with an account.
    phoneNumber:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: ""
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: phoneNumber
      x-ms-summary: ""
    planInformation:
      description: An object used to identify the features and attributes of the account being created.
      properties:
        addOns:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/addOn"
          type: array
        currencyCode:
          description: Specifies the ISO currency code for the account.
          type: string
        freeTrialDaysOverride:
          description: Reserved for DocuSign.
          type: string
        planFeatureSets:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/featureSet"
          type: array
        planId:
          description: DocuSign's id for the account plan.
          type: string
        recipientDomains:
          description: ""
          items:
            $ref: "#/components/schemas/recipientDomain"
          type: array
      type: object
      x-ds-definition-name: planInformation
      x-ms-summary: An object used to identify the features and attributes of the account being created.
    polyLine:
      description: ""
      properties:
        x1:
          description: ""
          type: string
        x2:
          description: ""
          type: string
        y1:
          description: ""
          type: string
        y2:
          description: ""
          type: string
      type: object
      x-ds-definition-name: polyLine
      x-ms-summary: ""
    polyLineOverlay:
      description: This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        graphicsContext:
          $ref: "#/components/schemas/graphicsContext"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        overlayType:
          description: The type of overlay to use. The API currently supports only the `outline` overlay type.
          type: string
        overlayTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        polyLines:
          description: An array of `polyLine` objects that contain x- and y-coordinates representing the locations of the lines.
          items:
            $ref: "#/components/schemas/polyLine"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, indicates that the tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: polyLineOverlay
      x-ms-summary: This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
    powerForm:
      description: Contains details about a PowerForm.
      properties:
        createdBy:
          description: The id of the user who created the PowerForm.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        emailBody:
          description: |-
            The body of the email message sent to the recipients. 

            Maximum length: 10000 characters.
          type: string
        emailSubject:
          description: |
            The subject line of the email message that is sent to all recipients.

            For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/docs/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).
          type: string
        envelopes:
          description: An array containing PowerForm data.
          items:
            $ref: "#/components/schemas/envelope"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        instructions:
          description: "The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm by a method other than email. If instructions are entered, they display as an introduction after the recipient accesses the PowerForm.  Limit: 2000 characters."
          type: string
        isActive:
          description: |
            When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.

            When **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL. 

            If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.
          type: string
        lastUsed:
          description: The UTC DateTime when the PowerForm was last used.
          type: string
        limitUseInterval:
          description: The length of time before the same recipient can sign the same PowerForm. This property is used in combination with the `limitUseIntervalUnits` property.
          type: string
        limitUseIntervalEnabled:
          description: When **true**, the `limitUseInterval` is enabled.
          type: string
        limitUseIntervalUnits:
          description: |
            The units associated with the `limitUseInterval`. Valid values are:

            - `minutes`
            - `hours
            - `days`
            - `weeks`
            - `months`

            For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.
          type: string
        maxUseEnabled:
          description: When set to **true**, you can set a maximum number of uses for the PowerForm.
          type: string
        name:
          description: The name of the PowerForm.
          type: string
        powerFormId:
          description: The id of the PowerForm.
          type: string
        powerFormUrl:
          description: The URL for the PowerForm.
          type: string
        recipients:
          description: An array of recipient objects that provides details about the recipients of the envelope.
          items:
            $ref: "#/components/schemas/powerFormRecipient"
          type: array
        senderName:
          description: The sender's name.
          type: string
        senderUserId:
          description: The id of the sender.
          type: string
        signingMode:
          description: |-
            The signing mode to use. Valid values are:
             
            - `email`: Verifies the recipient's identity using email authentication before the recipient can sign a document. The recipient enters their email address and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code for the PowerForm to the recipient. If the recipient does not provide a valid email address, they cannot open and sign the document.  
            - `direct`: Does not require any verification. After a recipient enters their email address and clicks **Begin Signing**, a new browser tab opens and the recipient can immediately begin the signing process. Because the recipient's identity is not verified by using email authentication, we strongly recommend that you only use the `direct` signing mode when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).  

            **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`.
          type: string
        templateId:
          description: The id of the template used to create the PowerForm.
          type: string
        templateName:
          description: The name of the template used to create the PowerForm.
          type: string
        timesUsed:
          description: "The number of times the PowerForm has been used. "
          type: string
        uri:
          description: The URI for the PowerForm.
          type: string
        usesRemaining:
          description: The number of times the PowerForm can still be used.
          type: string
      type: object
      x-ds-definition-name: powerForm
      x-ms-summary: Contains details about a PowerForm.
    powerFormFormDataEnvelope:
      description: ""
      properties:
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        recipients:
          description: An array of recipient objects that provides details about the recipients of the envelope.
          items:
            $ref: "#/components/schemas/powerFormFormDataRecipient"
          type: array
      type: object
      x-ds-definition-name: powerFormFormDataEnvelope
      x-ms-summary: ""
    powerFormFormDataRecipient:
      description: ""
      properties:
        email:
          description: ""
          type: string
        formData:
          description: ""
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        name:
          description: The name of the recipient.
          type: string
        recipientId:
          description: The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the document.
          type: string
      type: object
      x-ds-definition-name: powerFormFormDataRecipient
      x-ms-summary: ""
    powerFormRecipient:
      description: "**Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`."
      properties:
        accessCode:
          description: |-
            (Optional) The access code that the recipient must enter to access the PowerForm.

            Maximum Length: 50 characters. The code must also conform to the account's access code format setting.

            If blank but the signer accessCode property is set in the envelope, then that value is used.

            If blank and the signer accessCode property is not set, then the access code is not required.
          type: string
        accessCodeLocked:
          description: When **true**, the `accessCode` property is locked and cannot be edited.
          type: string
        accessCodeRequired:
          description: When **true**, the recipient must enter the `accessCode` to access the PowerForm.
          type: string
        email:
          description: |-
            The email address of the recipient.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
          type: string
        emailLocked:
          description: When **true**, the recipient's email address is locked and cannot be edited.
          type: string
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckRequired:
          description: |-
            Indicates if authentication is configured for the account. Valid values are:

            - `always`: Authentication checks are performed on every envelope. 
            - `never`: Authentication checks are not performed on any envelopes. 
            - `optional:` Authentication is configurable per envelope.
          type: string
        name:
          description: |-
            The name of the PowerForm recipient.

            **Note**: For self-service documents where you do not know who the recipients are in advance, you can leave this property blank.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        roleName:
          description: |-
            The role associated with the recipient (for example, `Member`).

            This property is required when you are working with template recipients and PowerForm recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        templateRequiresIdLookup:
          description: When **true**, the template used to create the PowerForm requires ID lookup for the recipient.
          type: string
        userNameLocked:
          description: When **true**, the `userName` property for the recipient is locked and cannot be edited.
          type: string
      type: object
      x-ds-definition-name: powerFormRecipient
      x-ms-summary: "**Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`."
    powerFormSendersResponse:
      description: This object includes information about the users who have sent PowerForms.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          format: int32
          type: integer
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        powerFormSenders:
          description: An array of `userInfo` objects containing information about users who have sent PowerForms.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          format: int32
          type: integer
        startPosition:
          description: The starting index position of the current result set.
          format: int32
          type: integer
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          format: int32
          type: integer
      type: object
      x-ds-definition-name: powerFormSendersResponse
      x-ms-summary: This object includes information about the users who have sent PowerForms.
    powerFormsFormDataResponse:
      description: ""
      properties:
        envelopes:
          description: An array containing PowerForm data.
          items:
            $ref: "#/components/schemas/powerFormFormDataEnvelope"
          type: array
      type: object
      x-ds-definition-name: powerFormsFormDataResponse
      x-ms-summary: ""
    powerFormsRequest:
      description: ""
      properties:
        powerForms:
          description: An array of PowerForm objects.
          items:
            $ref: "#/components/schemas/powerForm"
          type: array
      type: object
      x-ds-definition-name: powerFormsRequest
      x-ms-summary: ""
    powerFormsResponse:
      description: A list of PowerForms.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          format: int32
          type: integer
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        powerForms:
          description: An array of PowerForm objects.
          items:
            $ref: "#/components/schemas/powerForm"
          type: array
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          format: int32
          type: integer
        startPosition:
          description: The starting index position of the current result set.
          format: int32
          type: integer
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          format: int32
          type: integer
      type: object
      x-ds-definition-name: powerFormsResponse
      x-ms-summary: A list of PowerForms.
    prefillTabs:
      description: ""
      properties:
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
      type: object
      x-ds-definition-name: prefillTabs
      x-ms-summary: ""
    proofServiceResourceToken:
      description: ""
      properties:
        proofBaseURI:
          description: Returns the available base URIs to request the [ID Evidence API](https://developers.docusign.com/docs/idevidence-api/).
          type: string
        resourceToken:
          description: Token that can be used to access [ID Evidence API](https://developers.docusign.com/docs/idevidence-api/) endpoints.
          type: string
      type: object
      x-ds-definition-name: proofServiceResourceToken
      x-ms-summary: ""
    proofServiceViewLink:
      description: ""
      properties:
        ViewLink:
          description: ""
          type: string
      type: object
      x-ds-definition-name: proofServiceViewLink
      x-ms-summary: ""
    propertyMetadata:
      description: Metadata about a property.
      properties:
        options:
          description: An array of option strings supported by this setting.
          items:
            type: string
          type: array
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
      type: object
      x-ds-definition-name: propertyMetadata
      x-ms-summary: Metadata about a property.
    province:
      description: ""
      properties:
        isoCode:
          description: ""
          type: string
        name:
          description: ""
          type: string
      type: object
      x-ds-definition-name: province
      x-ms-summary: ""
    provisioningInformation:
      description: ""
      properties:
        defaultConnectionId:
          description: ""
          type: string
        defaultPlanId:
          description: ""
          type: string
        distributorCode:
          description: The code that identifies the billing plan groups and plans for the new account.
          type: string
        distributorPassword:
          description: The password for the `distributorCode`.
          type: string
        passwordRuleText:
          description: ""
          type: string
        planPromotionText:
          description: ""
          type: string
        purchaseOrderOrPromAllowed:
          description: ""
          type: string
      type: object
      x-ds-definition-name: provisioningInformation
      x-ms-summary: ""
    purchasedEnvelopesInformation:
      description: ""
      properties:
        amount:
          description: The total amount of the purchase.
          type: string
        appName:
          description: The AppName of the client application.
          type: string
        currencyCode:
          description: Specifies the ISO currency code of the purchase. This is based on the ISO 4217 currency code information.
          type: string
        platform:
          description: The Platform of the client application
          type: string
        productId:
          description: The Product ID from the AppStore.
          type: string
        quantity:
          description: The quantity of envelopes to add to the account.
          type: string
        receiptData:
          description: The encrypted Base64 encoded receipt data.
          type: string
        storeName:
          description: The name of the AppStore.
          type: string
        transactionId:
          description: Specifies the Transaction ID from the AppStore.
          type: string
      type: object
      x-ds-definition-name: purchasedEnvelopesInformation
      x-ms-summary: ""
    radio:
      description: |
        One of the selectable radio buttons
        in the `radios` property
        of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        selected:
          description: When set to **true**, the radio button is selected.
          type: string
        selectedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: radio
      x-ms-summary: |
        One of the selectable radio buttons
        in the `radios` property
        of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
    radioGroup:
      description: |
        This group tab is used to place radio buttons on a document.
        The `radios` property
        contains a list of
        [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
        objects  associated with the group. Only one radio button can
        be selected in a group.
      properties:
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        groupName:
          description: The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
          type: string
        groupNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        radios:
          description: Specifies the locations and status for radio buttons that are grouped together.
          items:
            $ref: "#/components/schemas/radio"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        tooltipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: radioGroup
      x-ms-summary: |
        This group tab is used to place radio buttons on a document.
        The `radios` property
        contains a list of
        [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
        objects  associated with the group. Only one radio button can
        be selected in a group.
    recipientAdditionalNotification:
      description: Describes an additional notification method.
      properties:
        phoneNumber:
          $ref: "#/components/schemas/recipientPhoneNumber"
        secondaryDeliveryMethod:
          description: |
            The secondary delivery method. One of:

            - `email`
            - `fax`
            - `SMS`
            - `offline`
          type: string
        secondaryDeliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        secondaryDeliveryStatus:
          description: |
            (Read-only) The status of the delivery.

            One of:

            - `autoresponded`
            - `optedout`
            - `limitreached`
          type: string
      type: object
      x-ds-definition-name: recipientAdditionalNotification
      x-ms-summary: Describes an additional notification method.
    recipientAttachment:
      description: ""
      properties:
        attachmentId:
          description: The unique identifier for the attachment.
          type: string
        attachmentType:
          description: |-
            Specifies the type of the attachment for the recipient. Possible values are:

            - `.htm`
            - `.xml`
          type: string
        data:
          description: A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size.
          type: string
        label:
          description: An optional label for the attachment.
          type: string
        name:
          description: The name of the attachment.
          type: string
        remoteUrl:
          description: The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads.
          type: string
      type: object
      x-ds-definition-name: recipientAttachment
      x-ms-summary: ""
    recipientDomain:
      description: ""
      properties:
        active:
          description: ""
          type: string
        domainCode:
          description: ""
          type: string
        domainName:
          description: ""
          type: string
        recipientDomainId:
          description: ""
          type: string
      type: object
      x-ds-definition-name: recipientDomain
      x-ms-summary: ""
    recipientEmailNotification:
      description: ""
      properties:
        emailBody:
          description: The body of the email message.
          type: string
        emailBodyMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailSubject:
          description: The subject line for the email notification.
          type: string
        emailSubjectMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        supportedLanguage:
          description: |
            The language to use for the standard email format and signing view for a recipient.

            For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

            **Note**: This setting affects only DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

             To retrieve the possible values, use the [Accounts::listSupportedLanguages][ListLang] method.

            [ListLang]: https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/Accounts/listSupportedLanguages/
          type: string
        supportedLanguageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: recipientEmailNotification
      x-ms-summary: ""
    recipientEvent:
      description: ""
      properties:
        includeDocuments:
          description: "When set to **true**, the PDF documents are included in the message along with the updated XML. "
          type: string
        recipientEventStatusCode:
          description: "Send a webhook notification for the following recipient statuses: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded."
          type: string
      type: object
      x-ds-definition-name: recipientEvent
      x-ms-summary: ""
    recipientFormData:
      description: ""
      properties:
        DeclinedTime:
          description: The date and time the recipient declined the envelope.
          type: string
        DeliveredTime:
          description: The date and time the recipient viewed the documents in the envelope in the DocuSign signing UI.
          type: string
        SentTime:
          description: The date and time the envelope was sent to the recipient.
          type: string
        SignedTime:
          description: The date and time the recipient signed the documents.
          type: string
        email:
          description: The recipient's email address.
          type: string
        formData:
          description: An array of form data objects.
          items:
            $ref: "#/components/schemas/formDataItem"
          type: array
        name:
          description: The name of the recipient.
          type: string
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
      type: object
      x-ds-definition-name: recipientFormData
      x-ms-summary: ""
    recipientGroup:
      description: Describes a group of recipients.
      properties:
        groupMessage:
          description: The group message, typically a description of the group.
          type: string
        groupName:
          description: The name of the group
          type: string
        recipients:
          description: An array of recipient objects that provides details about the recipients of the envelope.
          items:
            $ref: "#/components/schemas/recipientOption"
          type: array
      type: object
      x-ds-definition-name: recipientGroup
      x-ms-summary: Describes a group of recipients.
    recipientIdentityInputOption:
      description: ""
      properties:
        name:
          description: ""
          type: string
        phoneNumberList:
          description: ""
          items:
            $ref: "#/components/schemas/recipientIdentityPhoneNumber"
          type: array
        valueType:
          description: ""
          type: string
      type: object
      x-ds-definition-name: recipientIdentityInputOption
      x-ms-summary: ""
    recipientIdentityPhoneNumber:
      description: ""
      properties:
        extension:
          description: ""
          type: string
        number:
          description: ""
          type: string
      type: object
      x-ds-definition-name: recipientIdentityPhoneNumber
      x-ms-summary: ""
    recipientIdentityVerification:
      description: |-
        Specifies ID Verification applied on an envelope by workflow ID.
        See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
        method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
        for more information on how to retrieve workflow IDs available for an account.
        This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
      properties:
        inputOptions:
          description: ""
          items:
            $ref: "#/components/schemas/recipientIdentityInputOption"
          type: array
        workflowId:
          description: |-
            ID of the Identity Verification worklow used to verify recipients' identity.

            This ID must match one of the [workflowId](https://developers.docusign.com/docs/esign-rest-api/reference/accounts/identityverifications/list/) available to your account.
          type: string
      type: object
      x-ds-definition-name: recipientIdentityVerification
      x-ms-summary: |-
        Specifies ID Verification applied on an envelope by workflow ID.
        See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
        method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
        for more information on how to retrieve workflow IDs available for an account.
        This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
    recipientNamesResponse:
      description: This response object contains a list of recipients.
      properties:
        multipleUsers:
          description: When set to **true**, the email address is used by more than one user.
          type: string
        recipientNames:
          description: The names of the recipients associated with the email address.
          items:
            type: string
          type: array
        reservedRecipientEmail:
          description: When set to **true**, new names cannot be added to the email address.
          type: string
      type: object
      x-ds-definition-name: recipientNamesResponse
      x-ms-summary: This response object contains a list of recipients.
    recipientOption:
      description: ""
      properties:
        email:
          description: ""
          type: string
        name:
          description: ""
          type: string
        recipientLabel:
          description: ""
          type: string
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
      type: object
      x-ds-definition-name: recipientOption
      x-ms-summary: ""
    recipientPhoneAuthentication:
      description: |-
        A complex type that contains the elements:

        * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
        * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
        * `recordVoicePrint`: Reserved for DocuSign.
        * `validateRecipProvidedNumber`: Reserved for DocuSign.
      properties:
        recipMayProvideNumber:
          description: Boolean. When set to **true**, the recipient can supply a phone number their choice.
          type: string
        recipMayProvideNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recordVoicePrint:
          description: Reserved for DocuSign.
          type: string
        recordVoicePrintMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderProvidedNumbers:
          description: "An array containing a list of phone numbers that the recipient can use for SMS text authentication. "
          items:
            type: string
          type: array
        senderProvidedNumbersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validateRecipProvidedNumber:
          description: " Reserved for DocuSign."
          type: string
        validateRecipProvidedNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: recipientPhoneAuthentication
      x-ms-summary: |-
        A complex type that contains the elements:

        * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
        * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
        * `recordVoicePrint`: Reserved for DocuSign.
        * `validateRecipProvidedNumber`: Reserved for DocuSign.
    recipientPhoneNumber:
      description: Describes the recipient phone number.
      properties:
        countryCode:
          description: |-
            The numeric country calling code for `number`. For example, the country calling code for the US and Canada is `1`, for the UK: `44`,

            Do not include the `+` symbol.
          type: string
        countryCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        number:
          description: |-
            The telephone number. Use only the digits `0`-`9`. Remove any non-numeric characters.

            Do not include the `countryCode`. For US, Canada, and other
            [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan) countries, do not include a leading `1` or `0`.
          type: string
        numberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: recipientPhoneNumber
      x-ms-summary: Describes the recipient phone number.
    recipientPreviewRequest:
      description: This request object contains the information necessary to create a recipient preview.
      properties:
        assertionId:
          description: A unique identifier of the authentication event executed by the client application.
          type: string
        authenticationInstant:
          description: A sender-generated value that indicates the date and time that the signer was authenticated.
          type: string
        authenticationMethod:
          description: |-
            Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. 

            Choose a value from this list: 
            * Biometric 
            * Email
            * HTTPBasicAuth
            * Kerberos
            * KnowledgeBasedAuth
            * None
            * PaperDocuments
            * Password
            * RSASecureID
            * SingleSignOn_CASiteminder
            * SingleSignOn_InfoCard
            * SingleSignOn_MicrosoftActiveDirectory
            * SingleSignOn_Other
            * SingleSignOn_Passport
            * SingleSignOn_SAML
            * Smartcard
            * SSLMutualAuth
            * X509Certificate

            This information is included in the Certificate of Completion.
          type: string
        pingFrequency:
          description: Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds.
          type: string
        pingUrl:
          description: The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received.
          type: string
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        returnUrl:
          description: The URL to which the sender should be redirected after viewing the preview.
          type: string
        securityDomain:
          description: The domain in which the user authenticated.
          type: string
        xFrameOptions:
          description: |-
            Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.

            Valid values are:

            - `deny`: The page cannot be displayed in a frame.
            - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
            - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
          type: string
        xFrameOptionsAllowFromUrl:
          description: When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property.
          type: string
      type: object
      x-ds-definition-name: recipientPreviewRequest
      x-ms-summary: This request object contains the information necessary to create a recipient preview.
    recipientProofFile:
      description: The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
      properties:
        isInProofFile:
          description: Indicates whether a proof file is available for this recipient.
          type: string
      type: object
      x-ds-definition-name: recipientProofFile
      x-ms-summary: The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
    recipientRouting:
      description: Describes the recipient routing rules.
      properties:
        rules:
          $ref: "#/components/schemas/recipientRules"
      type: object
      x-ds-definition-name: recipientRouting
      x-ms-summary: Describes the recipient routing rules.
    recipientRules:
      description: ""
      properties:
        conditionalRecipients:
          description: ""
          items:
            $ref: "#/components/schemas/conditionalRecipientRule"
          type: array
      type: object
      x-ds-definition-name: recipientRules
      x-ms-summary: ""
    recipientSMSAuthentication:
      description: Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
      properties:
        senderProvidedNumbers:
          description: "An array containing a list of phone numbers that the recipient can use for SMS text authentication. "
          items:
            type: string
          type: array
        senderProvidedNumbersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: recipientSMSAuthentication
      x-ms-summary: Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
    recipientSignatureInformation:
      description: |-
        Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.

        Used only with recipient types In Person Signers and Signers.
      properties:
        fontStyle:
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
          type: string
        signatureInitials:
          description: Specifies the user's signature in initials format.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
      type: object
      x-ds-definition-name: recipientSignatureInformation
      x-ms-summary: |-
        Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.

        Used only with recipient types In Person Signers and Signers.
    recipientSignatureProvider:
      description: |
        An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
      properties:
        sealDocumentsWithTabsOnly:
          description: |-
            By default, electronic seals apply on all documents in an envelope. If any of the documents has a `signHere` tab, then a visual representation of the electronic seal will show up in the final document. If not, the electronic seal will be visible in the metadata but not in the content of the document.

            To apply electronic seals on specific documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter. In this case, Electronic Seal applies only on documents that have `signHere` tabs set for the Electronic Seal recipient. Other documents won't be sealed. 
          type: string
        sealName:
          description: |
            Indicates the name of the electronic seal to apply on documents.
          type: string
        signatureProviderName:
          description: |+
            The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.

            Example: `universalsignaturepen_default`

          type: string
        signatureProviderNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signatureProviderOptions:
          $ref: "#/components/schemas/recipientSignatureProviderOptions"
      type: object
      x-ds-definition-name: recipientSignatureProvider
      x-ms-summary: |
        An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
    recipientSignatureProviderOptions:
      description: Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
      properties:
        cpfNumber:
          description: Reserved for DocuSign.
          type: string
        cpfNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        oneTimePassword:
          description: "A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer's government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field."
          type: string
        oneTimePasswordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signerRole:
          description: "The role or capacity of the signing recipient. Examples: Manager, Approver, etc."
          type: string
        signerRoleMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sms:
          description: "The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234."
          type: string
        smsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: recipientSignatureProviderOptions
      x-ms-summary: Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
    recipientUpdateResponse:
      description: The recipient details that are returned after you update the recipient.
      properties:
        combined:
          description: When you use the query parameter `combine_same_order_recipients` on the PUT Recipients call, the `recipientUpdateResponse` returns this property. When set to **true**, it indicates that the recipient has been combined or merged with a matching recipient. Recipient matching occurs as part of template matching, and is based on Recipient Role and Routing Order.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
      type: object
      x-ds-definition-name: recipientUpdateResponse
      x-ms-summary: The recipient details that are returned after you update the recipient.
    recipientViewRequest:
      description: The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
      properties:
        assertionId:
          description: A unique identifier of the authentication event executed by the client application.
          type: string
        authenticationInstant:
          description: A sender-generated value that indicates the date and time that the signer was authenticated.
          type: string
        authenticationMethod:
          description: |-
            Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer. 

            Choose a value from this list: 
            * Biometric 
            * Email
            * HTTPBasicAuth
            * Kerberos
            * KnowledgeBasedAuth
            * None
            * PaperDocuments
            * Password
            * RSASecureID
            * SingleSignOn_CASiteminder
            * SingleSignOn_InfoCard
            * SingleSignOn_MicrosoftActiveDirectory
            * SingleSignOn_Other
            * SingleSignOn_Passport
            * SingleSignOn_SAML
            * Smartcard
            * SSLMutualAuth
            * X509Certificate

            This information is included in the Certificate of Completion.
          type: string
        clientUserId:
          description: |-
            A sender-created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.

            Use your application's client ID (user ID) for the recipient. Doing so enables the details of your application's authentication of the recipient to be connected to the recipient's signature if the signature is disputed or repudiated.

            Maximum length: 100 characters.
          type: string
        email:
          description: (Required) Specifies the email of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.
          type: string
        frameAncestors:
          description: ""
          items:
            type: string
          type: array
        messageOrigins:
          description: ""
          items:
            type: string
          type: array
        pingFrequency:
          description: Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds.
          type: string
        pingUrl:
          description: The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received.
          type: string
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        returnUrl:
          description: |
            (Required) The URL to which the user should be redirected
            after the signing session has ended.
            DocuSign redirects to the URL
            and includes an `event` query parameter
            that can be used by your application.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.

            Possible `event` parameter values include: 

            * `access_code_failed`: Recipient used incorrect access code.
            * `cancel`: Recipient canceled the signing operation,
              possibly by using the **Finish Later** option.
            * `decline`: Recipient declined to sign.
            * `exception`: A system error occurred during the signing process.
            * `fax_pending`: Recipient has a fax pending.
            * `id_check_failed`: Recipient failed an ID check.
            * `session_timeout`: The session timed out. An account can control this timeout by using the **Signer Session Timeout** option.
            * `signing_complete`: The recipient completed the signing ceremony.
            * `ttl_expired`: The Time To Live token for the envelope has expired.
              After being successfully invoked, these tokens expire
              after 5 minutes or if the envelope is voided.
            * `viewing_complete`: The recipient completed viewing an envelope
              that is in a read-only/terminal state,
              such as completed, declined, or voided.

            Ensure that you include `https://` in the URL to prevent the redirect from failing on certain browsers.
          type: string
        securityDomain:
          description: The domain in which the user authenticated.
          type: string
        userId:
          description: |-
            The user ID of the recipient. You can use either the user ID or email and user name to identify the recipient. 

            If `userId` is used and a `clientUserId` is provided, the value in the `userId` property must match a `recipientId` (which you can retrieve with a GET recipients call) for the envelope. 

            If a `userId` is used and a `clientUserId` is not provided, the `userId` must match the user ID of the authenticating user.
          type: string
        userName:
          description: The username of the recipient. You can use either `email` and `userName` or `userId` to identify the recipient.
          type: string
        xFrameOptions:
          description: |-
            Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.

            Valid values are:

            - `deny`: The page cannot be displayed in a frame.
            - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself.
            - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property.
          type: string
        xFrameOptionsAllowFromUrl:
          description: When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property.
          type: string
      type: object
      x-ds-definition-name: recipientViewRequest
      x-ms-summary: The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
    recipients:
      description: Specifies the envelope recipients.
      properties:
        agents:
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/agent"
          type: array
        carbonCopies:
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/carbonCopy"
          type: array
        certifiedDeliveries:
          description: A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
          items:
            $ref: "#/components/schemas/certifiedDelivery"
          type: array
        currentRoutingOrder:
          description: The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.
          type: string
        editors:
          description: A list of users who can edit the envelope.
          items:
            $ref: "#/components/schemas/editor"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        inPersonSigners:
          description: Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
          items:
            $ref: "#/components/schemas/inPersonSigner"
          type: array
        intermediaries:
          description: Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
          items:
            $ref: "#/components/schemas/intermediary"
          type: array
        notaries:
          description: ""
          items:
            $ref: "#/components/schemas/notaryRecipient"
          type: array
        recipientCount:
          description: The number of recipients in the envelope.
          type: string
        seals:
          description: A list of electronic seals to apply to documents.
          items:
            $ref: "#/components/schemas/sealSign"
          type: array
        signers:
          description: A list of signers on the envelope.
          items:
            $ref: "#/components/schemas/signer"
          type: array
        witnesses:
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: "#/components/schemas/witness"
          type: array
      type: object
      x-ds-definition-name: recipients
      x-ms-summary: Specifies the envelope recipients.
    recipientsUpdateSummary:
      description: This is the response that the API returns after you update recipients.
      properties:
        recipientUpdateResults:
          description: An array of `recipientUpdateResults` objects that contain details about the recipients.
          items:
            $ref: "#/components/schemas/recipientUpdateResponse"
          type: array
      type: object
      x-ds-definition-name: recipientsUpdateSummary
      x-ms-summary: This is the response that the API returns after you update recipients.
    referralInformation:
      description: |-
        A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry

        **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
      properties:
        advertisementId:
          description: |
            A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry.

            **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
          type: string
        enableSupport:
          description: When set to **true**, customer support is provided as part of the account plan.
          type: string
        externalOrgId:
          description: An optional external id for the referral.
          type: string
        groupMemberId:
          description: ""
          type: string
        idType:
          description: ""
          type: string
        includedSeats:
          description: The number of seats (users) included in the plan.
          type: string
        industry:
          description: |-
            The name of the industry associated with the referral. 

            Example: `Accounting`
          type: string
        planStartMonth:
          description: ""
          type: string
        promoCode:
          description: ""
          type: string
        publisherId:
          description: ""
          type: string
        referralCode:
          description: ""
          type: string
        referrerName:
          description: The name of the referrer.
          type: string
        saleDiscountAmount:
          description: Reserved for DocuSign.
          type: string
        saleDiscountFixedAmount:
          description: Reserved for DocuSign.
          type: string
        saleDiscountPercent:
          description: Reserved for DocuSign.
          type: string
        saleDiscountPeriods:
          description: Reserved for DocuSign.
          type: string
        saleDiscountSeatPriceOverride:
          description: Reserved for DocuSign.
          type: string
        shopperId:
          description: ""
          type: string
      type: object
      x-ds-definition-name: referralInformation
      x-ms-summary: |-
        A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry

        **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
    reminders:
      description: A complex element that specifies reminder settings for the envelope.
      properties:
        reminderDelay:
          description: An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.
          type: string
        reminderEnabled:
          description: When set to **true**, reminders are enabled.
          type: string
        reminderFrequency:
          description: An integer specifying the interval in days between reminder emails.
          type: string
      type: object
      x-ds-definition-name: reminders
      x-ms-summary: A complex element that specifies reminder settings for the envelope.
    reportInProductCsvRunRequest:
      description: ""
      properties:
        customFieldFilter:
          description: ""
          type: string
        dateRangeCustomFromDate:
          description: ""
          type: string
        dateRangeCustomToDate:
          description: ""
          type: string
        dateRangeFilter:
          description: ""
          type: string
        envelopeDateTypeFilter:
          description: ""
          type: string
        envelopeRecipientNameContainsFilter:
          description: ""
          type: string
        envelopeStatusFilter:
          description: ""
          type: string
        envelopeSubjectContainsFilter:
          description: ""
          type: string
        fields:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductField"
          type: array
        forDownload:
          description: ""
          type: string
        isDashboard:
          description: ""
          type: string
        newLine:
          description: ""
          type: string
        overrideTimezoneKey:
          description: ""
          type: string
        periodLengthFilter:
          description: ""
          type: string
        quote:
          description: ""
          type: string
        reportCustomizedId:
          description: ""
          type: string
        reportDescription:
          description: ""
          type: string
        reportId:
          description: ""
          type: string
        reportInvocationType:
          description: ""
          type: string
        reportName:
          description: ""
          type: string
        sentByFilter:
          description: ""
          type: string
        sentByIds:
          description: ""
          type: string
        separator:
          description: ""
          type: string
        sortDirection:
          description: ""
          type: string
        sortField:
          description: ""
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
      type: object
      x-ds-definition-name: reportInProductCsvRunRequest
      x-ms-summary: ""
    reportInProductField:
      description: ""
      properties:
        displayOrder:
          description: The position on the page where the display section appears.
          type: string
        fieldVersion:
          description: ""
          type: string
        name:
          description: ""
          type: string
        selected:
          description: When set to **true**, the radio button is selected.
          type: string
      type: object
      x-ds-definition-name: reportInProductField
      x-ms-summary: ""
    reportInProductGet:
      description: ""
      properties:
        customFieldFilter:
          description: ""
          type: string
        dateRangeCustomFromDate:
          description: ""
          type: string
        dateRangeCustomToDate:
          description: ""
          type: string
        dateRangeFilter:
          description: ""
          type: string
        displayOrder:
          description: The position on the page where the display section appears.
          type: string
        envelopeDateTypeFilter:
          description: ""
          type: string
        envelopeRecipientNameContainsFilter:
          description: ""
          type: string
        envelopeStatusFilter:
          description: ""
          type: string
        envelopeSubjectContainsFilter:
          description: ""
          type: string
        fields:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductField"
          type: array
        lastScheduledExecutionDate:
          description: ""
          type: string
        lastScheduledExecutionSuccessDate:
          description: ""
          type: string
        maxDownloadRows:
          description: ""
          type: string
        maxGridRows:
          description: ""
          type: string
        maxScheduledRows:
          description: ""
          type: string
        periodLengthFilter:
          description: ""
          type: string
        reportCustomizedId:
          description: ""
          type: string
        reportDescription:
          description: ""
          type: string
        reportId:
          description: ""
          type: string
        reportName:
          description: ""
          type: string
        reportType:
          description: ""
          type: string
        runUri:
          description: ""
          type: string
        saveUri:
          description: ""
          type: string
        scheduleId:
          description: ""
          type: string
        sentByDetails:
          $ref: "#/components/schemas/reportInProductSentByDetails"
        sentByFilter:
          description: ""
          type: string
        sentByIds:
          description: ""
          type: string
        sortFieldDirection:
          description: ""
          type: string
        sortFieldName:
          description: ""
          type: string
      type: object
      x-ds-definition-name: reportInProductGet
      x-ms-summary: ""
    reportInProductList:
      description: ""
      properties:
        reports:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductListItem"
          type: array
      type: object
      x-ds-definition-name: reportInProductList
      x-ms-summary: ""
    reportInProductListItem:
      description: ""
      properties:
        getUri:
          description: ""
          type: string
        lastScheduledExecutionDate:
          description: ""
          type: string
        lastScheduledExecutionSuccessDate:
          description: ""
          type: string
        reportCustomizedId:
          description: ""
          type: string
        reportDescription:
          description: ""
          type: string
        reportId:
          description: ""
          type: string
        reportName:
          description: ""
          type: string
        reportType:
          description: ""
          type: string
        runUri:
          description: ""
          type: string
        saveUri:
          description: ""
          type: string
        scheduleCreateDate:
          description: ""
          type: string
        scheduleEndDate:
          description: ""
          type: string
        scheduleId:
          description: ""
          type: string
        scheduleRenewDurationDays:
          description: ""
          type: string
      type: object
      x-ds-definition-name: reportInProductListItem
      x-ms-summary: ""
    reportInProductRunRequest:
      description: ""
      properties:
        customFieldFilter:
          description: ""
          type: string
        dateRangeCustomFromDate:
          description: ""
          type: string
        dateRangeCustomToDate:
          description: ""
          type: string
        dateRangeFilter:
          description: ""
          type: string
        envelopeDateTypeFilter:
          description: ""
          type: string
        envelopeRecipientNameContainsFilter:
          description: ""
          type: string
        envelopeStatusFilter:
          description: ""
          type: string
        envelopeSubjectContainsFilter:
          description: ""
          type: string
        fields:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductField"
          type: array
        forDownload:
          description: ""
          type: string
        isDashboard:
          description: ""
          type: string
        periodLengthFilter:
          description: ""
          type: string
        reportCustomizedId:
          description: ""
          type: string
        reportDescription:
          description: ""
          type: string
        reportId:
          description: ""
          type: string
        reportInvocationType:
          description: ""
          type: string
        reportName:
          description: ""
          type: string
        sentByFilter:
          description: ""
          type: string
        sentByIds:
          description: ""
          type: string
        sortDirection:
          description: ""
          type: string
        sortField:
          description: ""
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
      type: object
      x-ds-definition-name: reportInProductRunRequest
      x-ms-summary: ""
    reportInProductRunResponse:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        exceededMaxResults:
          description: ""
          type: string
        lastWarehouseRefreshDateTime:
          description: ""
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        rows:
          description: ""
          items:
            $ref: "#/components/schemas/reportInProductRunResponseRow"
          type: array
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
      type: object
      x-ds-definition-name: reportInProductRunResponse
      x-ms-summary: ""
    reportInProductRunResponseRow:
      description: ""
      properties:
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        fields:
          $ref: "#/components/schemas/reportInProductRunResponseRowFields"
      type: object
      x-ds-definition-name: reportInProductRunResponseRow
      x-ms-summary: ""
    reportInProductRunResponseRowFields:
      description: ""
      properties:
        accessCodeRequired:
          description: ""
          type: string
        accessCodesAttempted:
          description: ""
          type: string
        accessCodesFailed:
          description: ""
          type: string
        accountId:
          description: The account ID associated with the envelope.
          type: string
        authenticationCategory:
          description: ""
          type: string
        authenticationSuccess:
          description: ""
          type: string
        authenticationType:
          description: |-
            Indicates the type of authentication. Valid values are: 

            - `PhoneAuth`
            - `STAN`
            - `ISCheck` 
            - `OFAC`
            - `AccessCode`
            - `AgeVerify`
            - `SSOAuth`
          type: string
        averageTimeToCompleteSeconds:
          description: ""
          type: string
        avgCompleteSeconds:
          description: ""
          type: string
        completed:
          description: ""
          type: string
        completedTs:
          description: ""
          type: string
        createdDate:
          description: The creation date of the account in UTC timedate format.
          type: string
        customField:
          description: ""
          type: string
        declinedDate:
          description: ""
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        deliveredDate:
          description: ""
          type: string
        envelopeCount:
          description: ""
          type: string
        envelopeCreator:
          description: ""
          type: string
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        envelopeInitialSendTs:
          description: ""
          type: string
        envelopeVoidedReason:
          description: ""
          type: string
        envelopesBilled:
          description: ""
          type: string
        envelopesCompleted:
          description: ""
          type: string
        envelopesCompletedCount:
          description: ""
          type: string
        envelopesDeclined:
          description: ""
          type: string
        envelopesSent:
          description: ""
          type: string
        envelopesSentCount:
          description: ""
          type: string
        envelopesVoided:
          description: ""
          type: string
        eodDocumentDescription:
          description: ""
          type: string
        eodDocumentName:
          description: ""
          type: string
        eodDocumentProfileId:
          description: ""
          type: string
        eodTransactionId:
          description: ""
          type: string
        eodTransactionName:
          description: ""
          type: string
        eventDate:
          description: ""
          type: string
        expirationDate:
          description: ""
          type: string
        expiredTs:
          description: ""
          type: string
        failureVendorCode:
          description: ""
          type: string
        failureVendorReason:
          description: ""
          type: string
        failures:
          description: A list of Connect failure logs.
          type: string
        firstSendTs:
          description: ""
          type: string
        groupId:
          description: The ID of the group being accessed.
          type: string
        groupName:
          description: The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
          type: string
        hoursToCompleteEnd:
          description: ""
          type: string
        hoursToCompleteStart:
          description: ""
          type: string
        idChecksAttempted:
          description: ""
          type: string
        idChecksFailed:
          description: ""
          type: string
        initialSendTs:
          description: ""
          type: string
        ipAddress:
          description: ""
          type: string
        lastActivity:
          description: ""
          type: string
        lastActivityDate:
          description: ""
          type: string
        lastSentDate:
          description: ""
          type: string
        notSigned:
          description: ""
          type: string
        numberOfAuthenticatedRecipients:
          description: ""
          type: string
        numberOfCompletedSignatures:
          description: ""
          type: string
        numberOfDocuments:
          description: ""
          type: string
        numberOfPages:
          description: ""
          type: string
        numberOfRecipients:
          description: ""
          type: string
        numberOfSends:
          description: ""
          type: string
        numberOfSigners:
          description: ""
          type: string
        numberOfTotalDocuments:
          description: ""
          type: string
        numberOfTotalPages:
          description: ""
          type: string
        numberOfTotalSigners:
          description: ""
          type: string
        numberOfUniqueSenders:
          description: ""
          type: string
        numberTotalRecipients:
          description: ""
          type: string
        periodEnd:
          description: ""
          type: string
        periodStart:
          description: ""
          type: string
        phoneCallsAttempted:
          description: ""
          type: string
        phoneCallsFailed:
          description: ""
          type: string
        reasonForDeclining:
          description: ""
          type: string
        reasonForVoiding:
          description: ""
          type: string
        reassignReason:
          description: ""
          type: string
        received:
          description: ""
          type: string
        recipient:
          description: ""
          type: string
        recipientAction:
          description: ""
          type: string
        recipientCompanyName:
          description: ""
          type: string
        recipientCountry:
          description: ""
          type: string
        recipientEmail:
          description: ""
          type: string
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientName:
          description: ""
          type: string
        recipientTemplateRoleName:
          description: ""
          type: string
        recipientTitle:
          description: ""
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientUserId:
          description: ""
          type: string
        remainingSignatures:
          description: The number of remaining signatures that need to be applied to this document.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        senderAccountId:
          description: ""
          type: string
        senderCompanyName:
          description: ""
          type: string
        senderCountry:
          description: ""
          type: string
        senderEmail:
          description: The sender's email address.
          type: string
        senderIPAddress:
          description: ""
          type: string
        senderJobTitle:
          description: ""
          type: string
        senderName:
          description: The sender's name.
          type: string
        senderUserId:
          description: The id of the sender.
          type: string
        signDate:
          description: ""
          type: string
        signed:
          description: ""
          type: string
        signedDate:
          description: ""
          type: string
        signedOnMobile:
          description: ""
          type: string
        signedOnPaper:
          description: ""
          type: string
        signerList:
          description: ""
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        statusChangedDate:
          description: ""
          type: string
        statusChangedTs:
          description: ""
          type: string
        subject:
          description: ""
          type: string
        successes:
          description: ""
          type: string
        templatesCreated:
          description: ""
          type: string
        templatesCreatedCount:
          description: ""
          type: string
        terminalStatusDate:
          description: ""
          type: string
        timeToCompleteSeconds:
          description: ""
          type: string
        timeToDeliver:
          description: ""
          type: string
        totalDocuments:
          description: ""
          type: string
        totalEnvelopes:
          description: ""
          type: string
        totalPages:
          description: ""
          type: string
        totalRecipients:
          description: ""
          type: string
        totalSigners:
          description: ""
          type: string
        uniqueSenders:
          description: ""
          type: string
        userAccountEmail:
          description: ""
          type: string
        userAccountName:
          description: ""
          type: string
        userAccountStatus:
          description: ""
          type: string
        userCount:
          description: ""
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        viewDate:
          description: ""
          type: string
        voidedTs:
          description: ""
          type: string
      type: object
      x-ds-definition-name: reportInProductRunResponseRowFields
      x-ms-summary: ""
    reportInProductSaveResponse:
      description: ""
      properties:
        reportCustomizedId:
          description: ""
          type: string
      type: object
      x-ds-definition-name: reportInProductSaveResponse
      x-ms-summary: ""
    reportInProductSentByDetails:
      description: ""
      properties:
        groups:
          description: A collection group objects containing information about the groups.
          items:
            $ref: "#/components/schemas/group"
          type: array
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
      type: object
      x-ds-definition-name: reportInProductSentByDetails
      x-ms-summary: ""
    resourceInformation:
      description: ""
      properties:
        resources:
          description: ""
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-definition-name: resourceInformation
      x-ms-summary: ""
    returnUrlRequest:
      description: The request body for the EnvelopeViews::createSender method.
      properties:
        returnUrl:
          description: |-
            (Optional) The URL to which the user should be redirected after the sending session is complete.

            Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.
          type: string
      type: object
      x-ds-definition-name: returnUrlRequest
      x-ms-summary: The request body for the EnvelopeViews::createSender method.
    seal:
      description: Set of information related to the electronic seal used by the Trust Service Provider (TSP).
      properties:
        configuration:
          additionalProperties:
            type: string
          description: Electronic seal configuration  properties
          type: object
        sealIdentifier:
          description: Electronic Seal identifier
          type: string
      type: object
      x-ds-definition-name: seal
      x-ms-summary: Set of information related to the electronic seal used by the Trust Service Provider (TSP).
    sealIdentifier:
      description: ""
      properties:
        sealDisplayName:
          description: The user-friendly display name for a seal.
          type: string
        sealName:
          description: The name of a seal.
          type: string
      type: object
      x-ds-definition-name: sealIdentifier
      x-ms-summary: ""
    sealSign:
      description: |
        Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.

        Example: 

        ```json
        "recipients": {
              "seals": [
                {
                  "recipientId": "1",
                  "routingOrder" : 1,
                  "recipientSignatureProviders": [
                    {
                      "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
                    }
              	]
            	}
          	]
        	},
            .
            .
            .
        ```
        For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
      properties:
        accessCode:
          description: Not applicable.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Not applicable.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        clientUserId:
          description: Not applicable.
          type: string
        completedCount:
          description: Not applicable.
          type: string
        customFields:
          description: Not applicable.
          items:
            type: string
          type: array
        declinedDateTime:
          description: Not applicable.
          type: string
        declinedReason:
          description: Not applicable.
          type: string
        deliveredDateTime:
          description: Not applicable.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: Not applicable.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: Not applicable.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: Not applicable.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: Not applicable.
          type: string
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: Not applicable.
          type: string
        note:
          description: Not applicable.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        recipientAttachments:
          description: Not applicable.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: |-
            (Required) The `recipientId` used when the envelope or template was created. 

            This is a local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientSignatureProviders:
          description: (Required) Indicates which electronic seal to apply on documents when creating an envelope.
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: Not applicable.
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: |
            (Optional, default: 1) 
            Specifies the routing order of the electronic seal in the envelope.
            The routing order assigned to your electronic seal cannot be shared with another recipient.
            It is recommended that you set a routing order for your electronic seals.
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: Not applicable.
          type: string
        signedDateTime:
          description: Not applicable.
          type: string
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: Not applicable.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: Not applicable.
          type: string
        userId:
          description: Not applicable.
          type: string
      type: object
      x-ds-definition-name: sealSign
      x-ms-summary: |
        Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.

        Example: 

        ```json
        "recipients": {
              "seals": [
                {
                  "recipientId": "1",
                  "routingOrder" : 1,
                  "recipientSignatureProviders": [
                    {
                      "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
                    }
              	]
            	}
          	]
        	},
            .
            .
            .
        ```
        For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
    seatDiscount:
      description: This object contains information about a seat discount.
      properties:
        beginSeatCount:
          description: Reserved for DocuSign.
          type: string
        discountPercent:
          description: |-
            The percent of the discount. 

            Example: `"0.00"`
          type: string
        endSeatCount:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: seatDiscount
      x-ms-summary: This object contains information about a seat discount.
    senderEmailNotifications:
      description: Contains the settings for the email notifications that senders receive about the envelopes that they send.
      properties:
        changedSigner:
          description: When set to **true**, the sender receives an email notification if the signer changes.
          type: string
        commentsOnlyPrivateAndMention:
          description: When set to **true**, the user receives only comments that mention their own user name.
          type: string
        commentsReceiveAll:
          description: When set to **true**, the user receives all comments.
          type: string
        deliveryFailed:
          description: When set to **true**, the sender receives an email notification if envelope delivery fails.
          type: string
        envelopeComplete:
          description: When set to **true**, the user receives an email notification when the envelope has been completed.
          type: string
        offlineSigningFailed:
          description: When set to **true**, the user receives an email notification if offline signing failed.
          type: string
        powerformResponsesLimitNotificationEmail:
          description: ""
          type: string
        purgeDocuments:
          description: When set to **true**, the user receives an email notification when a document purge occurs.
          type: string
        recipientViewed:
          description: When set to **true**, the sender receives notification that a recipient viewed the envelope.
          type: string
        senderEnvelopeDeclined:
          description: When set to **true**, the sender receives notification that the envelope was declined.
          type: string
        withdrawnConsent:
          description: When set to **true**, the user receives an email notification if consent is withdrawn.
          type: string
      type: object
      x-ds-definition-name: senderEmailNotifications
      x-ms-summary: Contains the settings for the email notifications that senders receive about the envelopes that they send.
    serverTemplate:
      description: ""
      properties:
        sequence:
          description: ""
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
      type: object
      x-ds-definition-name: serverTemplate
      x-ms-summary: ""
    serviceInformation:
      description: ""
      properties:
        buildBranch:
          description: "Reserved: TBD"
          type: string
        buildBranchDeployedDateTime:
          description: "Reserved: TBD"
          type: string
        buildSHA:
          description: "Reserved: TBD"
          type: string
        buildVersion:
          description: "Reserved: TBD"
          type: string
        linkedSites:
          description: ""
          items:
            type: string
          type: array
        serviceVersions:
          description: ""
          items:
            $ref: "#/components/schemas/serviceVersion"
          type: array
      type: object
      x-ds-definition-name: serviceInformation
      x-ms-summary: ""
    serviceVersion:
      description: ""
      properties:
        version:
          description: The version of the rest API.
          type: string
        versionUrl:
          description: ""
          type: string
      type: object
      x-ds-definition-name: serviceVersion
      x-ms-summary: ""
    settingsMetadata:
      description: Metadata that indicates whether a property is editable and describes setting-specific options.
      properties:
        is21CFRPart11:
          description: When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES).
          type: string
        options:
          description: An array of option strings supported by this setting.
          items:
            type: string
          type: array
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
        uiHint:
          description: Reserved for DocuSign.
          type: string
        uiOrder:
          description: Reserved for DocuSign.
          type: string
        uiType:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: settingsMetadata
      x-ms-summary: Metadata that indicates whether a property is editable and describes setting-specific options.
    sharedItem:
      description: Information about the shared item.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        shared:
          description: |-
            How the item is shared. One of:

            - `not_shared`
            - `shared_to`
            - `shared_from`
            - `shared_to_and_from`
          type: string
        user:
          $ref: "#/components/schemas/userInfo"
      type: object
      x-ds-definition-name: sharedItem
      x-ms-summary: Information about the shared item.
    signHashDocument: {}
    signHere:
      description: |
        A tab that allows the recipient to sign a document. May be
        optional.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: Not applicable to Sign Here tab.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        isSealSignTab:
          description: When set to **true**,  the tab contains a visual representation for an electronic seal in a document.
          type: string
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        optional:
          description: When set to **true**, the recipient does not need to complete this tab to complete the signing process.
          type: string
        optionalMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: |
            Specifies the page number on which the tab is located.
            Must be 1 for supplemental documents.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        scaleValue:
          description: Scales the size of the tab. This field accepts values from 0.5 to 2.0, where  0.5 is half the normal size, 1.0 is normal size, and 2.0 is twice the normal size.
          type: string
        scaleValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        stamp:
          $ref: "#/components/schemas/stamp"
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        stampTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: Not applicable to Sign Here tab.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+1, -7)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+1, -7)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: signHere
      x-ms-summary: |
        A tab that allows the recipient to sign a document. May be
        optional.
    signatureGroup:
      description: ""
      properties:
        groupId:
          description: The ID of the group being accessed.
          type: string
        groupName:
          description: The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
          type: string
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
      type: object
      x-ds-definition-name: signatureGroup
      x-ms-summary: ""
    signatureGroupDef:
      description: ""
      properties:
        groupId:
          description: The ID of the group being accessed.
          type: string
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
      type: object
      x-ds-definition-name: signatureGroupDef
      x-ms-summary: ""
    signatureProperties:
      description: ""
      properties:
        filter:
          description: Specifies the preferred handler that should be used to validate the signature.
          type: string
        subFilter:
          description: Indicates the format of the data that the stream contains.
          type: string
      type: object
      x-ds-definition-name: signatureProperties
      x-ms-summary: ""
    signatureProviderRequiredOption:
      description: Contains additional information that a specific signature provider requires.
      properties:
        requiredSignatureProviderOptionIds:
          description: Reserved for DocuSign.
          items:
            type: string
          type: array
        signerType:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: signatureProviderRequiredOption
      x-ms-summary: Contains additional information that a specific signature provider requires.
    signatureType:
      description: This object contains information about the type of signature.
      properties:
        isDefault:
          description: When **true**, the signature type is the default type.
          type: string
        type:
          description: |-
            The type of signature. Valid values are:

            - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses.
            - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](https://developers.docusign.com/dsa-api).

            For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
          type: string
      type: object
      x-ds-definition-name: signatureType
      x-ms-summary: This object contains information about the type of signature.
    signatureUser:
      description: ""
      properties:
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        userName:
          description: The name of the user.
          type: string
      type: object
      x-ds-definition-name: signatureUser
      x-ms-summary: ""
    signatureUserDef:
      description: ""
      properties:
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        rights:
          description: |-
            Indicates whether the property is editable. Valid values are:

            - `editable`
            - `read_only`
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: signatureUserDef
      x-ms-summary: ""
    signer:
      description: A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        agentCanEditEmail:
          description: Optional element. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.
          type: string
        agentCanEditName:
          description: Optional. When set to **true**, the agent recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        bulkRecipientsUri:
          description: Reserved for DocuSign.
          type: string
        canSignOffline:
          description: When set to **true**, specifies that the signer can perform the signing ceremony offline.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        creationReason:
          description: The reason why the item was created.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        defaultRecipient:
          description: When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: "The recipient's email address. The system sends notifications about the documents to sign to this address. Maximum length: 100 characters. "
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        isBulkRecipient:
          description: |
            When set to **true**, this signer is a bulk recipient and the recipient information is contained in a bulk recipient file. 

            Note that when this is true the email and name for the recipient becomes bulk@recipient.com and "Bulk Recipient". These fields can not be changed for the bulk recipient. 
          type: string
        isBulkRecipientMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        notaryId:
          description: ""
          type: string
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        proofFile:
          $ref: "#/components/schemas/recipientProofFile"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        recipientSuppliesTabs:
          description: When set to **true**, specifies that the recipient creates the tabs.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireSignOnPaper:
          description: When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
          type: string
        requireSignerCertificate:
          description: "Sets the type of signer certificate required for signing. If left blank, no certificate is required. Only one type of certificate can be set for a signer. The possible values are:


            * docusign_express ÃÂ¢ÃÂÃÂ Requires a DocuSign Express certificate.

            * safe ÃÂ¢ÃÂÃÂ Requires a SAFE-BioPharma certificate.

            * open_trust ÃÂ¢ÃÂÃÂ Requires an OpenTrust certificate.\ 


            **Important**: There are certain rules and restrictions that must be followed when requiring OpenTrust digital signatures. See [ML:OpenTrust Rules and Restrictions] for more information.\ 

            \ "
          type: string
        requireUploadSignature:
          description: When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
          type: string
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signInEachLocation:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signInEachLocationMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signatureInfo:
          $ref: "#/components/schemas/recipientSignatureInformation"
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |
            Specifies the status of the recipient at the time of the request. Read only. Possible values are:

            - `created`: The recipient is in a draft state. This is only associated with draft envelopes (envelopes with a created status).
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `delivered`: The recipient has viewed the documents in an envelope through the DocuSign signing web site. This is not an email delivery of the documents in an envelope.
            - `signed`; The recipient has completed (performed all required interactions, such as signing or entering data) all required tags in an envelope. This is a temporary state during processing, after which the recipient is automatically moved to completed.
            - `declined`: The recipient declined to sign the documents in the envelope.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `faxpending`: The recipient has finished signing and the system is waiting a fax attachment by the recipient before completing their signing step.
            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used by the DocuSign webapp (also known as the DocuSign console) to inform senders about the auto-responded email.
          type: string
        statusCode:
          description: Reserved for DocuSign.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: signer
      x-ms-summary: A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
    signerAttachment:
      description: |
        A tab that allows the recipient to attach supporting
        documents to an envelope.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        optional:
          description: When set to **true**, the recipient does not need to complete this tab to complete the signing process.
          type: string
        optionalMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        scaleValue:
          description: Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
          type: string
        scaleValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+0, -24)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (+0, -24)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: signerAttachment
      x-ms-summary: |
        A tab that allows the recipient to attach supporting
        documents to an envelope.
    signerEmailNotifications:
      description: An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
      properties:
        agentNotification:
          description: When set to **true**, the user receives agent notification emails.
          type: string
        carbonCopyNotification:
          description: When set to **true**, the user receives notifications of carbon copy deliveries.
          type: string
        certifiedDeliveryNotification:
          description: When set to **true**, the user receives notifications of certified deliveries.
          type: string
        commentsOnlyPrivateAndMention:
          description: When set to **true**, the user receives only comments that mention their own user name.
          type: string
        commentsReceiveAll:
          description: When set to **true**, the user receives all comments.
          type: string
        documentMarkupActivation:
          description: When set to **true**, the user receives notification that document markup has been activated.
          type: string
        envelopeActivation:
          description: When set to **true**, the user receives notification that the envelope has been activated.
          type: string
        envelopeComplete:
          description: When set to **true**, the user receives an email notification when the envelope has been completed.
          type: string
        envelopeCorrected:
          description: When set to **true**, the user receives notification that the envelope has been corrected.
          type: string
        envelopeDeclined:
          description: When set to **true**, the user receives notification that the envelope has been declined.
          type: string
        envelopeVoided:
          description: When set to **true**, the user receives notification that the envelope has been voided.
          type: string
        faxReceived:
          description: Reserved for DocuSign.
          type: string
        offlineSigningFailed:
          description: When set to **true**, the user receives an email notification if offline signing failed.
          type: string
        purgeDocuments:
          description: When set to **true**, the user receives an email notification when a document purge occurs.
          type: string
        reassignedSigner:
          description: When set to **true**, the user receives notification that the envelope has been reassigned.
          type: string
        whenSigningGroupMember:
          description: When set to **true**, the user receives notification that he or she is a member of the signing group.
          type: string
      type: object
      x-ds-definition-name: signerEmailNotifications
      x-ms-summary: An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
    signingGroup:
      description: Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
      properties:
        created:
          description: The UTC DateTime when the signing group was created. Read only.
          type: string
        createdBy:
          description: The name of the user who created the signing group.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        groupEmail:
          description: The email address for the signing group. You can use a group email address to email all of the group members at the same time.
          type: string
        groupName:
          description: The name of the group. The search_text provided in the call automatically performs a wild card search on group_name.
          type: string
        groupType:
          description: |-
            The group type. Possible values include:

            - `adminstrators`
            - `everyone`
            - `customGroup`
            - `sharedSigningGroup`

            <!-- More? To do -->
          type: string
        modified:
          description: The UTC DateTime when the signing group was last modified. Read only.
          type: string
        modifiedBy:
          description: The user id (GUID) of the user who last modified this user record.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/signingGroupUser"
          type: array
      type: object
      x-ds-definition-name: signingGroup
      x-ms-summary: Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
    signingGroupInformation:
      description: ""
      properties:
        groups:
          description: A collection group objects containing information about the groups.
          items:
            $ref: "#/components/schemas/signingGroup"
          type: array
      type: object
      x-ds-definition-name: signingGroupInformation
      x-ms-summary: ""
    signingGroupUser:
      description: ""
      properties:
        email:
          description: ""
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        userName:
          description: |-
            The name of the group member. 

            Maximum Length: 100 characters. 
          type: string
      type: object
      x-ds-definition-name: signingGroupUser
      x-ms-summary: ""
    signingGroupUsers:
      description: ""
      properties:
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/signingGroupUser"
          type: array
      type: object
      x-ds-definition-name: signingGroupUsers
      x-ms-summary: ""
    smartContractInformation:
      description: ""
      properties:
        code:
          description: ""
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
      type: object
      x-ds-definition-name: smartContractInformation
      x-ms-summary: ""
    smartSection:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        caseSensitive:
          description: When **true**, the `startAnchor` and `endAnchor` for the Smart Section must match both the case and the content of the strings in the HTML.
          type: boolean
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        displaySettings:
          $ref: "#/components/schemas/smartSectionDisplaySettings"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        endAnchor:
          description: |-
            Specifies the end of the area in the HTML where the display settings will be applied. If you do not specify an end anchor, the end of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
          type: string
        endPosition:
          $ref: "#/components/schemas/smartSectionAnchorPosition"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        overlayType:
          description: |
            The type of overlay to draw on the document. The following overlay types are supported:

            - `line`
            - `outline`
          type: string
        overlayTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        removeEndAnchor:
          description: When **true**, removes the end anchor string for the Smart Section from the HTML, preventing it from displaying.
          type: boolean
        removeStartAnchor:
          description: When **true**, removes the start anchor string for the Smart Section from the HTML, preventing it from displaying.
          type: boolean
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        startAnchor:
          description: |-
            Specifies the beginning of the area in the HTML where the display settings will be applied. If you do not specify a start anchor, the beginning of the document will be used by default.

            **Note**: A start anchor, an end anchor, or both are required.
          type: string
        startPosition:
          $ref: "#/components/schemas/smartSectionAnchorPosition"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: smartSection
      x-ms-summary: ""
    smartSectionAnchorPosition:
      description: ""
      properties:
        pageNumber:
          description: Specifies the page number on which the tab is located.
          format: int32
          type: integer
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          format: double
          type: number
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          format: double
          type: number
      type: object
      x-ds-definition-name: smartSectionAnchorPosition
      x-ms-summary: ""
    smartSectionCollapsibleDisplaySettings:
      description: ""
      properties:
        arrowClosed:
          description: ""
          type: string
        arrowColor:
          description: ""
          type: string
        arrowLocation:
          description: ""
          type: string
        arrowOpen:
          description: ""
          type: string
        arrowSize:
          description: ""
          type: string
        arrowStyle:
          description: ""
          type: string
        containerStyle:
          description: ""
          type: string
        labelStyle:
          description: ""
          type: string
        onlyArrowIsClickable:
          description: ""
          type: boolean
        outerLabelAndArrowStyle:
          description: ""
          type: string
      type: object
      x-ds-definition-name: smartSectionCollapsibleDisplaySettings
      x-ms-summary: ""
    smartSectionDisplaySettings:
      description: These properties define how a Smart Section displays. A Smart Section is a type of display section.
      properties:
        cellStyle:
          description: Specifies the valid CSS-formatted styles to use on responsive table cells. Only valid in display sections of `responsive_table` or `responsive_table_single_column` types.
          type: string
        collapsibleSettings:
          $ref: "#/components/schemas/smartSectionCollapsibleDisplaySettings"
        display:
          description: |-
            Indicates the display type. Must be one of the following enum values:

            - **inline**: Leaves the HTML where it is in the document. This allows for adding a label or presenting on a separate page.
            - **collapsible**: The HTML in the section may be expanded or collapsed. By default, the section is expanded.
            - **collapsed**: The HTML in the section may be expanded or collapsed. By default, the section is collapsed.
            - **responsive_table**: Converts the section into a responsive table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions.
            - **responsive_table_single_column**: Converts the section into a responsive, single-column table. Note that this style is applied only on HTML tables that fall within the `startAnchor` and `endAnchor` positions. The table is converted to a single column in which each column becomes a row and is stacked.
            - **print_only**: Prevents this portion of the HTML from displaying in the responsive signing view.
          type: string
        displayLabel:
          description: The label for the display section.
          type: string
        displayOrder:
          description: The position on the page where the display section appears.
          format: int32
          type: integer
        displayPageNumber:
          description: The number of the page on which the display section appears.
          format: int32
          type: integer
        hideLabelWhenOpened:
          description: When **true**, the `displayLabel` is hidden when the display section is expanded and the display section is no longer collapsible. This property is valid only when the value of the `display` property is `collapsed`.
          type: boolean
        inlineOuterStyle:
          description: Specifies the valid CSS-formatted styles to use on inline display sections. This property is valid only when the value of the `display` property is `inline`.
          type: string
        labelWhenOpened:
          description: The label for the display section when it is expanded from a collapsed state. This label displays only on the first opening and is only valid with the value of the `display` property is `collapsed`.
          type: string
        preLabel:
          description: Enables you to add descriptive text that appears before a collapsed section or continue button.
          type: string
        scrollToTopWhenOpened:
          description: When **true** and the section is expanded, the position of the section close is scrolled to the top of the screen. This property is only valid when the value of the `display` property is `collapsed`.
          type: boolean
        tableStyle:
          description: Specifies the valid CSS-formatted styles to use on responsive tables. This property is valid only when the value of the `display` property is `responsive_table` or `responsive_table_single_column`.
          type: string
      type: object
      x-ds-definition-name: smartSectionDisplaySettings
      x-ms-summary: These properties define how a Smart Section displays. A Smart Section is a type of display section.
    socialAccountInformation:
      description: ""
      properties:
        email:
          description: The users email address.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        provider:
          description: The social account provider (Facebook, Yahoo, etc.)
          type: string
        socialId:
          description: The ID provided by the Socal Account.
          type: string
        userName:
          description: The full user name for the account.
          type: string
      type: object
      x-ds-definition-name: socialAccountInformation
      x-ms-summary: ""
    socialAuthentication:
      description: ""
      properties:
        authentication:
          description: Reserved for DocuSign.
          type: string
      type: object
      x-ds-definition-name: socialAuthentication
      x-ms-summary: ""
    ssn:
      description: |
        A one-line field that allows the recipient to enter a Social
        Security Number. The SSN can be typed with or without
        dashes. It uses the same parameters as a Text tab, with the
        validation message and pattern set for SSN information.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: ssn
      x-ms-summary: |
        A one-line field that allows the recipient to enter a Social
        Security Number. The SSN can be typed with or without
        dashes. It uses the same parameters as a Text tab, with the
        validation message and pattern set for SSN information.
    ssn4InformationInput:
      description: ""
      properties:
        displayLevelCode:
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
          type: string
        receiveInResponse:
          description: A Boolean value that specifies whether the information must be returned in the response.
          type: string
        ssn4:
          description: The last four digits of the recipient's Social Security Number (SSN).
          type: string
      type: object
      x-ds-definition-name: ssn4InformationInput
      x-ms-summary: ""
    ssn9InformationInput:
      description: ""
      properties:
        displayLevelCode:
          description: |-
            Specifies the display level for the recipient. Valid values are:
            * `ReadOnly`
            * `Editable`
            * `DoNotDisplay`
          type: string
        ssn9:
          description: The recipient's full Social Security Number (SSN).
          type: string
      type: object
      x-ds-definition-name: ssn9InformationInput
      x-ms-summary: ""
    stamp:
      description: ""
      properties:
        adoptedDateTime:
          description: The UTC date and time when the user adopted the signature.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customField:
          description: ""
          type: string
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageBase64:
          description: ""
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampImageUri:
          description: The URI for retrieving the image of the user's stamp.
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-definition-name: stamp
      x-ms-summary: ""
    supportedLanguages:
      description: A list of supported languages.
      properties:
        languages:
          description: |-
            A list of languages that you can use for a recipient's language setting. These are the languages that you can set for the standard email format and signing view for each recipient.

            For example, in the recipient's email notification, this setting affects elements such as the standard introductory text describing the request to sign. It also determines the language used for buttons and tabs in both the email notification and the signing experience.

            **Note**: Setting a language for a recipient affects only the DocuSign standard text. Any custom text that you enter for the `emailBody` and `emailSubject` of the notification is not translated, and appears exactly as you enter it.

            Example:

            ```
            {
                "languages": [
                    {
                        "name": "Arabic (ar)",
                        "value": "ar"
                    },
                    {
                        "name": "Bulgarian (bg)",
                        "value": "bg"
                    },
                    .
                    .
                    .
            }
            ```
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
      type: object
      x-ds-definition-name: supportedLanguages
      x-ms-summary: A list of supported languages.
    tabAccountSettings:
      description: ""
      properties:
        allowTabOrder:
          description: |-
            When set to **true**, account users can set a tab order for the signing process.

            **Note**: Only Admin users can change this setting.
          type: string
        allowTabOrderMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        approveDeclineTabsEnabled:
          description: When **true**, approve and decline tabs are enabled.
          type: string
        approveDeclineTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        calculatedFieldsEnabled:
          description: When **true**, [calculated fields](https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields) are enabled for tabs.
          type: string
        calculatedFieldsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkBoxTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        checkboxTabsEnabled:
          description: When **true**, checkbox tabs are enabled.
          type: string
        dataFieldRegexEnabled:
          description: When **true**, regular expressions are enabled for tabs that contain data fields.
          type: string
        dataFieldRegexMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        dataFieldSizeEnabled:
          description: When **true**, setting character limits for input fields is enabled.
          type: string
        dataFieldSizeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        drawTabsEnabled:
          description: ""
          type: string
        drawTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        firstLastEmailTabsEnabled:
          description: Reserved for DocuSign.
          type: string
        firstLastEmailTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        listTabsEnabled:
          description: When **true**, list tabs are enabled.
          type: string
        listTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        noteTabsEnabled:
          description: When **true**, note tabs are enabled.
          type: string
        noteTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        prefillTabsEnabled:
          description: ""
          type: string
        prefillTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        radioTabsEnabled:
          description: When **true**, radio button tabs are enabled.
          type: string
        radioTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        savingCustomTabsEnabled:
          description: When **true**, saving custom tabs is enabled.
          type: string
        savingCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderToChangeTabAssignmentsEnabled:
          description: Reserved for DocuSign.
          type: string
        senderToChangeTabAssignmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sharedCustomTabsEnabled:
          description: When **true**, shared custom tabs are enabled.
          type: string
        sharedCustomTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabDataLabelEnabled:
          description: |
            When set to **true**, [data
            labels](https://support.docusign.com/en/videos/Data-Labels) are enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabDataLabelMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLocationEnabled:
          description: Reserved for DocuSign.
          type: string
        tabLocationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabLockingEnabled:
          description: |
            When set to **true**, tab locking is enabled.

            **Note**: Only Admin users can change this setting.
          type: string
        tabLockingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabScaleEnabled:
          description: Reserved for DocuSign.
          type: string
        tabScaleMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        tabTextFormattingEnabled:
          description: |
            When set to **true**, text formatting (such as font type, font size,
            font color, bold, italic, and underline) is enabled for tabs that
            support formatting.

            **Note**: Only Admin users can change this setting.
          type: string
        tabTextFormattingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        textTabsEnabled:
          description: When **true**, text tabs are enabled.
          type: string
        textTabsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: tabAccountSettings
      x-ms-summary: ""
    tabGroup:
      description: ""
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        groupLabel:
          description: A unique identifier for a tab group. To assign a tab to the `tabGroup`, you assign the `TabGroupLabel` to the `tab.TabGroupLabels` array.
          type: string
        groupLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        groupRule:
          description: |+
            Specifies how `maximumAllowed` and `minimumRequired`
            are interpreted when selecting tabs in a `tabGroup`.

            Possible values are:

            - `SelectAtLeast`
            - `SelectAtMost`
            - `SelectExactly`
            - `SelectARange`

          type: string
        groupRuleMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maximumAllowed:
          description: The maximum number of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.
          type: string
        maximumAllowedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        minimumRequired:
          description: The minimum number of of tabs within the `tabGroup` that should be checked, populated, or signed. This property is used for validation.
          type: string
        minimumRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: Specifies the page number on which the tab is located.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabScope:
          description: |-
            The scope of the tab group. Possible values are:

            - `document`
            - `envelope` (default)
          type: string
        tabScopeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: tabGroup
      x-ms-summary: ""
    tabMetadata:
      description: ""
      properties:
        anchor:
          description: An optional string that is used to auto-match tabs to strings located in the documents of an envelope.
          type: string
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        collaborative:
          description: ""
          type: string
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        createdByDisplayName:
          description: The user name of the DocuSign user who created this object.
          type: string
        createdByUserId:
          description: The userId of the DocuSign user who created this object.
          type: string
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        editable:
          description: When set to **true**, the custom tab is editable. Otherwise the custom tab cannot be modified.
          type: string
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        height:
          description: The height of the tab in pixels.
          type: string
        includedInEmail:
          description: When set to **true**, the tab is included in e-mails related to the envelope on which it exists. This applies to only specific tabs.
          type: string
        initialValue:
          description: The original value of the tab.
          type: string
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        items:
          description: If the tab is a list, this represents the values that are possible for the tab.
          items:
            type: string
          type: array
        lastModified:
          description: The UTC DateTime this object was last modified. This is in ISO8601 format.
          type: string
        lastModifiedByDisplayName:
          description: The User Name of the DocuSign user who last modified this object.
          type: string
        lastModifiedByUserId:
          description: The userId of the DocuSign user who last modified this object.
          type: string
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        maximumLength:
          description: The maximum number of entry characters supported by the custom tab.
          type: string
        mergeField:
          $ref: "#/components/schemas/mergeField"
        name:
          description: ""
          type: string
        paymentItemCode:
          description: |-
            If the custom tab is for a payment request, this is the external code for the item associated with the charge. For example, this might be your product id.

            Example: `SHAK1`

            Maximum Length: 100 characters.
          type: string
        paymentItemDescription:
          description: |-
            If the custom tab is for a payment request, this is the description of the item associated with the charge.

            Example: `The Danish play by Shakespeare`

            Maximum Length: 100 characters.
          type: string
        paymentItemName:
          description: |-
            If the custom tab is for a payment request, this is the name of the item associated with the charge.

            Maximum Length: 100 characters.

            Example: `Hamlet`
          type: string
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        scaleValue:
          description: Sets the size of the tab. This field accepts values from `0.5` to `1.0`, where `1.0` represents full size and `0.5` is 50% of full size.
          type: string
        selected:
          description: When set to **true**, the radio button is selected.
          type: string
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        stampTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        type:
          description: "The type of this tab. Values are: Approve, CheckBox, Company, Date, DateSigned,\tDecline, Email,\tEmailAddress, EnvelopeId, FirstName, Formula, FullName,\tInitialHere, InitialHereOptional, LastName, List, Note, Number,\tRadio, SignerAttachment, SignHere, SignHereOptional, Ssn, Text, Title, Zip5, or Zip5Dash4."
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        width:
          description: The width of the tab in pixels.
          type: string
      type: object
      x-ds-definition-name: tabMetadata
      x-ms-summary: ""
    tabMetadataList:
      description: ""
      properties:
        tabs:
          description: A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.
          items:
            $ref: "#/components/schemas/tabMetadata"
          type: array
      type: object
      x-ds-definition-name: tabMetadataList
      x-ms-summary: ""
    tabs:
      description: Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-definition-name: tabs
      x-ms-summary: Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
    templateCustomFields:
      description: ""
      properties:
        listCustomFields:
          description: An array of list custom fields.
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        textCustomFields:
          description: An array of text custom fields.
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-definition-name: templateCustomFields
      x-ms-summary: ""
    templateDocumentVisibilityList:
      description: A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
      properties:
        documentVisibility:
          description: An array of `documentVisibility` objects that specifies which documents are visible to which recipients.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
      type: object
      x-ds-definition-name: templateDocumentVisibilityList
      x-ms-summary: A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
    templateDocumentsResult:
      description: ""
      properties:
        templateDocuments:
          description: An array of document objects that contain information about the documents associated with the template.
          items:
            $ref: "#/components/schemas/envelopeDocument"
          type: array
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
      type: object
      x-ds-definition-name: templateDocumentsResult
      x-ms-summary: ""
    templateInformation:
      description: ""
      properties:
        templates:
          description: An array of `templateSummary` objects that contain information about templates.
          items:
            $ref: "#/components/schemas/templateSummary"
          type: array
      type: object
      x-ds-definition-name: templateInformation
      x-ms-summary: ""
    templateMatch:
      description: ""
      properties:
        documentEndPage:
          description: ""
          type: string
        documentStartPage:
          description: ""
          type: string
        matchPercentage:
          description: ""
          type: string
      type: object
      x-ds-definition-name: templateMatch
      x-ms-summary: ""
    templateNotificationRequest:
      description: ""
      properties:
        expirations:
          $ref: "#/components/schemas/expirations"
        password:
          description: The user's encrypted password hash.
          type: string
        reminders:
          $ref: "#/components/schemas/reminders"
        useAccountDefaults:
          description: When set to **true**, the account default notification settings are used for the envelope, overriding the reminders and expirations settings. When set to **false**, the reminders and expirations settings specified in this request are used.
          type: string
      type: object
      x-ds-definition-name: templateNotificationRequest
      x-ms-summary: ""
    templateRecipients:
      description: ""
      properties:
        agents:
          description: A list of agent recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/agent"
          type: array
        carbonCopies:
          description: A list of carbon copy recipients assigned to the documents.
          items:
            $ref: "#/components/schemas/carbonCopy"
          type: array
        certifiedDeliveries:
          description: A complex type containing information on a recipient the must receive the completed documents for the envelope to be completed, but the recipient does not need to sign, initial, date, or add information to any of the documents.
          items:
            $ref: "#/components/schemas/certifiedDelivery"
          type: array
        currentRoutingOrder:
          description: The routing order of the current recipient. If this value equals a particular signer's routing order, it indicates that the envelope has been sent to that recipient, but he or she has not completed the required actions.
          type: string
        editors:
          description: A list of users who can edit the envelope.
          items:
            $ref: "#/components/schemas/editor"
          type: array
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        inPersonSigners:
          description: Specifies a signer that is in the same physical location as a DocuSign user who will act as a Signing Host for the transaction. The recipient added is the Signing Host and new separate Signer Name field appears after Sign in person is selected.
          items:
            $ref: "#/components/schemas/inPersonSigner"
          type: array
        intermediaries:
          description: Identifies a recipient that can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order (until subsequent Agents, Editors or Intermediaries recipient types are added).
          items:
            $ref: "#/components/schemas/intermediary"
          type: array
        notaries:
          description: ""
          items:
            $ref: "#/components/schemas/notaryRecipient"
          type: array
        recipientCount:
          description: |-
            The list of recipient event statuses that will trigger Connect to send updates to the url. It can be a two-part list with:

            * recipientEventStatusCode - The recipient status, this can be Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
            * includeDocuments - When set to **true**, the envelope time zone information is included in the message.
          type: string
        seals:
          description: Specifies one or more electronic seals to apply on documents. For more information on Electronic Seals , see https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals
          items:
            $ref: "#/components/schemas/sealSign"
          type: array
        signers:
          description: A list of signers on the envelope.
          items:
            $ref: "#/components/schemas/signer"
          type: array
        witnesses:
          description: A list of signers who act as witnesses on the envelope.
          items:
            $ref: "#/components/schemas/witness"
          type: array
      type: object
      x-ds-definition-name: templateRecipients
      x-ms-summary: ""
    templateRole:
      description: ""
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        defaultRecipient:
          description: When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
          type: string
        email:
          description: Specifies the email associated with a role name.
          type: string
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        inPersonSignerName:
          description: |-
            Specifies the full legal name of the signer in person signer template roles.

            Maximum Length: 100 characters.
          type: string
        name:
          description: Specifies the recipient's name.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
      type: object
      x-ds-definition-name: templateRole
      x-ms-summary: ""
    templateSharedItem:
      description: Information about shared templates.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        owner:
          $ref: "#/components/schemas/userInfo"
        password:
          description: The user's encrypted password hash.
          type: string
        shared:
          description: |
            How the template is shared. One of:

            - `not_shared`
            - `shared_to`
          type: string
        sharedGroups:
          description: List of groups that share the template.
          items:
            $ref: "#/components/schemas/memberGroupSharedItem"
          type: array
        sharedUsers:
          description: List of users that share the template.
          items:
            $ref: "#/components/schemas/userSharedItem"
          type: array
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
        templateName:
          description: The name of the shared template.
          type: string
      type: object
      x-ds-definition-name: templateSharedItem
      x-ms-summary: Information about shared templates.
    templateSummary:
      description: Summary of a template request.
      properties:
        applied:
          description: Reserved for DocuSign.
          type: string
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing document's id attribute.
          type: string
        documentName:
          description: The name of the document.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        name:
          description: The name of the template.
          type: string
        templateId:
          description: "The unique identifier of the template. If this is not provided, DocuSign will generate a value. "
          type: string
        templateMatch:
          $ref: "#/components/schemas/templateMatch"
        uri:
          description: A URI containing the user ID.
          type: string
      type: object
      x-ds-definition-name: templateSummary
      x-ms-summary: Summary of a template request.
    templateTabs:
      description: ""
      properties:
        approveTabs:
          description: |
            A list of
            [Approve tabs][approve].

            An Approve tab enables
            the recipient to approve documents without
            placing a signature or initials on the document. If the
            recipient clicks the tab during the signing process, the
            recipient is considered to have signed the document. No
            information is shown on the document of the approval, but it
            is recorded as a signature in the envelope history.
            The value of an approve tab can't be set.

            [approve]:		      https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/approve"
          type: array
        checkboxTabs:
          description: |
            A list of
            [Checkbox tabs][checkbox].


            A Checkbox tab enables the recipient to select a yes/no (on/off) option. This value can be set.


            [checkbox]:  https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/checkbox"
          type: array
        commentThreadTabs:
          description: An array of tabs that represents a collection of comments in a comment thread. For example, if a recipient has questions about the content of a document, they can add a comment to the document and control who else can see the comment. This value can't be set.
          items:
            $ref: "#/components/schemas/commentThread"
          type: array
        commissionCountyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionCounty"
          type: array
        commissionExpirationTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionExpiration"
          type: array
        commissionNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionNumber"
          type: array
        commissionStateTabs:
          description: ""
          items:
            $ref: "#/components/schemas/commissionState"
          type: array
        companyTabs:
          description: |
            A list of
            [Company tabs][company].


            A Company tab displays a field for the name of the recipient's company. This value can't be set.



            [company]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/company
          items:
            $ref: "#/components/schemas/company"
          type: array
        currencyTabs:
          description: ""
          items:
            $ref: "#/components/schemas/currency"
          type: array
        dateSignedTabs:
          description: |
            A list of
            [Date Signed tabs][dateSigned].


            A Date Signed tab displays the date that the recipient signed the document. This value can't be set.

            [dateSigned]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/dateSigned"
          type: array
        dateTabs:
          description: |
            A list of
            [Date tabs][date].

            A Date tab enables the recipient to enter a date. This value can't be set. The tooltip for this tab recommends the date format MM/DD/YYYY, but this format is not enforced. The system retains the format that the recipient enters.

            **Note**: If you need to enforce a specific date format, we recommend that you use a Text tab with a validation pattern and validation message.


            [date]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/date"
          type: array
        declineTabs:
          description: |
            A list of
            [Decline tabs][decline].

            A Decline tab enables the recipient to decline the envelope. If the recipient clicks the tab during the signing process, the envelope is voided. The value of this tab can't be set.


            [decline]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/decline"
          type: array
        drawTabs:
          description: ""
          items:
            $ref: "#/components/schemas/draw"
          type: array
        emailAddressTabs:
          description: |
            A list of
            [Email Address tabs][emailAddress].

            An Email Address tab displays the recipient's email as entered in the recipient information. This value can't be set.


            [emailAddress]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/emailAddress"
          type: array
        emailTabs:
          description: |
            A list of
            [Email tabs][email].

            An Email tab enables the recipient to enter an email address.
            This is a one-line field that checks that a valid email
            address is entered. It uses the same parameters as a Text
            tab, with the validation message and pattern set for email
            information. This value can be set.

            When getting information that includes
            this tab type, the original value of the tab when the
            associated envelope was sent is included in the response.

            [email]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/email"
          type: array
        envelopeIdTabs:
          description: |
            A list of
            [Envelope ID tabs][envelopeId].

            An Envelope ID tab  displays the envelope ID. Recipients cannot enter or change the information in this tab. This value can't be set.


            [envelopeId]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/envelopeId
          items:
            $ref: "#/components/schemas/envelopeId"
          type: array
        firstNameTabs:
          description: |
            A list of
            [First Name tabs][firstName].

            A First Name tab displays the recipient's first name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [firstName]: https://developers.docusign.com/docs/esign-rest-api/reference/EnvelopeRecipientTabs/create/#/definitions/firstName
          items:
            $ref: "#/components/schemas/firstName"
          type: array
        formulaTabs:
          description: |
            A list of [Formula tabs][formulaTab].

            The value of a Formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the Formula tab calculates and displays the result. This value can be set.

            The `formula` property of the tab contains the references to the underlying tabs. To learn more about formulas, see [Calculated Fields][calculatedfields].

            If a Formula tab contains a `paymentDetails` property, the tab is considered a payment item. To learn more about payments, see [Requesting Payments Along with Signatures][paymentguide].

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
            [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
            [formulaTab]:	    	https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/formulaTab"
          type: array
        fullNameTabs:
          description: |
            A list of
            [Full Name tabs][fullName].

            A Full Name tab displays the recipient's full name. This value can't be set.


            [fullName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/fullName"
          type: array
        initialHereTabs:
          description: |
            A list of
            [Initial Here tabs][initialHere].

            This type of tab enables the recipient to initial the document. May be optional. This value can't be set.

            [initialHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/initialHere"
          type: array
        lastNameTabs:
          description: |
            A list of
            [Last Name tabs][lastName].

            A Last Name tab displays the recipient's last name. The system automatically populates this field by splitting the name in the recipient information on spaces. This value can't be set.


            [lastName]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/lastName"
          type: array
        listTabs:
          description: |
            An array of List tabs.

            A List tab enables the recipient to choose from a list of options. You specify the options in the `listItems` property. This value can't be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/list"
          type: array
        notarizeTabs:
          description: |
            A list of  [Notarize tabs][notarize].

            A Notarize tab alerts notary recipients that they must take action on the page. This value can be set.

            **Note**: Only one notarize tab can appear on a page.

            [notarize]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/notarize"
          type: array
        notarySealTabs:
          description: ""
          items:
            $ref: "#/components/schemas/notarySeal"
          type: array
        noteTabs:
          description: |
            A list of
            [Note tabs][note].

            A Note tab displays additional information to the recipient in the form of a note. This value can be set.

            [note]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/note"
          type: array
        numberTabs:
          description: |
            A list of
            [Number tabs][number].

            A Number tab enables the recipient to enter numbers and decimal points (.). This value can be set.



            [number]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/number"
          type: array
        phoneNumberTabs:
          description: ""
          items:
            $ref: "#/components/schemas/phoneNumber"
          type: array
        polyLineOverlayTabs:
          description: "This type of tab enables the recipient to strike through document text. This value can't be set
          items:
            $ref: "#/components/schemas/polyLineOverlay"
          type: array
        prefillTabs:
          $ref: "#/components/schemas/prefillTabs"
        radioGroupTabs:
          description: |
            A list of [Radio Group tabs][radioGroup].

            A Radio Group tab places a group of radio buttons on a document. The `radios` property is used to add and place the radio
            buttons associated with the group. Only one radio button can be selected in a group. This value can be set.


            [radioGroup]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/radioGroup"
          type: array
        signHereTabs:
          description: |
            A list of
            [Sign Here tabs][signHere].

            This type of tab enables the recipient to sign a document. May be optional. This value can't be set.

            [signHere]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signHere"
          type: array
        signerAttachmentTabs:
          description: |
            A list of
            [Signer Attachment tabs][signerAttachment].

            This type of tab enables the recipient to attach supporting documents to an envelope. This value can't be set.


            [signerAttachment]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/signerAttachment"
          type: array
        smartSectionTabs:
          description: |-
            A list of [Smart Section](https://www.docusign.com/blog/dsdev-deep-dive-responsive-smart-sections/) tabs.

            Smart Section tabs enhance responsive signing on mobile devices by enabling collapsible sections, page breaks, custom formatting options, and other advanced functionality.

            **Note**: Smart Sections are a premium feature. Responsive signing must also be enabled for your account.
          items:
            $ref: "#/components/schemas/smartSection"
          type: array
        ssnTabs:
          description: |
            A list of
            [SSN tabs][ssn].

            An SSN tab contains a one-line field that enables the recipient to enter a Social Security Number (SSN) with or without
            dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information. This value can be set.


            [ssn]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/ssn"
          type: array
        tabGroups:
          description: An array of `tabGroup` items that contain information about tab groups. To assign a tab to a `tabGroup`, you assign the `tabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            $ref: "#/components/schemas/tabGroup"
          type: array
        textTabs:
          description: |
            A list of
            Text tabs.

            A text tab enables the recipient to enter free text. This value can be set.

            Find descriptions of all tab types in
            the [EnvelopeRecipientTabs Resource][ert].

            [ert]: https://developers.docusign.com/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/
          items:
            $ref: "#/components/schemas/text"
          type: array
        titleTabs:
          description: |
            A list of
            [Title tabs][title].

            A Title tab displays the recipient's title.  This value can't be set.


            [title]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/title"
          type: array
        viewTabs:
          description: |
            A list of
            [View tabs][view].

            A View tab is used with an Approve tab to handle supplemental documents.  This value can be set.

            [view]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/view"
          type: array
        zipTabs:
          description: |
            A list of
            [Zip tabs][zip].

            A Zip tab enables the recipient to enter a ZIP code. The ZIP code can be five digits or nine digits ( in ZIP+4 format), and can be entered with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  This value can be set.


            [zip]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/
          items:
            $ref: "#/components/schemas/zip"
          type: array
      type: object
      x-ds-definition-name: templateTabs
      x-ms-summary: ""
    templateUpdateSummary:
      description: ""
      properties:
        bulkEnvelopeStatus:
          $ref: "#/components/schemas/bulkEnvelopeStatus"
        envelopeId:
          description: The envelope ID of the envelope status that failed to post.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        listCustomFieldUpdateResults:
          description: ""
          items:
            $ref: "#/components/schemas/listCustomField"
          type: array
        lockInformation:
          $ref: "#/components/schemas/EnvelopeLocks"
        purgeState:
          description: |+
            Shows the current purge state for the envelope. The possible values are:

            * `unpurged`: There has been no successful request to purge documents.
            * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged.
            * `documents_dequeued`: The envelope documents have been taken out of the purge queue.
            * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged.
            * `documents_purged`: The envelope documents have been successfully purged.
            * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.

          type: string
        recipientUpdateResults:
          description: An array of `recipientUpdateResults` objects that contain details about the recipients.
          items:
            $ref: "#/components/schemas/recipientUpdateResponse"
          type: array
        tabUpdateResults:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        textCustomFieldUpdateResults:
          description: ""
          items:
            $ref: "#/components/schemas/textCustomField"
          type: array
      type: object
      x-ds-definition-name: templateUpdateSummary
      x-ms-summary: ""
    text:
      description: |
        A tab that allows the recipient to enter any type of text.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formula:
          description: |
            Contains the formula
            for calculating the value of
            this tab.

            Use a tab's `tabLabel`,
            enclosed in brackets,
            to refer to it.

            For example,
            you want to present the total cost
            of two items, tax included.

            The cost of each item is stored
            in number tabs labeled Item1 and Item2.
            The tax rate is in a number tab
            labeled TaxRate.

            The formula string for this property
            would be:
            `([Item1] + [Item2]) * (1 + [TaxRate])`

            See [Calculated Fields][calculatedfields]
            in the DocuSign Support Center
            to learn more about formulas.

            Maximum Length: 2000 characters

            [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
          type: string
        formulaMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: text
      x-ms-summary: |
        A tab that allows the recipient to enter any type of text.
    textCustomField:
      description: This object represents a free text custom field where envelope creators and senders can enter custom data.
      properties:
        configurationType:
          description: If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        fieldId:
          description: The id of the custom field.
          type: string
        name:
          description: The name of the custom field.
          type: string
        required:
          description: When set to **true**, senders are required to enter or select information for the field before they can send the envelope.
          type: string
        show:
          description: When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope.
          type: string
        value:
          description: "The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters."
          type: string
      type: object
      x-ds-definition-name: textCustomField
      x-ms-summary: This object represents a free text custom field where envelope creators and senders can enter custom data.
    title:
      description: |
        A tab that displays the recipient's title.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: title
      x-ms-summary: |
        A tab that displays the recipient's title.
    usageHistory:
      description: |-
        A complex element consisting of: 

        * lastSentDateTime - the date and time the user last sent an envelope. 
        * lastSignedDateTime - the date and time the user last signed an envelope.
        * sentCount - the number of envelopes the user has sent.
        * signedCount - the number of envelopes the user has signed.
      properties:
        lastSentDateTime:
          description: "The date and time the user last sent an envelope. "
          type: string
        lastSignedDateTime:
          description: The date and time the user last signed an envelope.
          type: string
        sentCount:
          description: "The number of envelopes the user has sent. "
          type: string
        signedCount:
          description: "The number of envelopes the user has signed. "
          type: string
      type: object
      x-ds-definition-name: usageHistory
      x-ms-summary: |-
        A complex element consisting of: 

        * lastSentDateTime - the date and time the user last sent an envelope. 
        * lastSignedDateTime - the date and time the user last signed an envelope.
        * sentCount - the number of envelopes the user has sent.
        * signedCount - the number of envelopes the user has signed.
    userAccountManagementGranularInformation:
      description: Describes which account management capabilities a user has.
      properties:
        canManageAccountSecuritySettings:
          description: "**True** if the user can manage account security settings."
          type: string
        canManageAccountSecuritySettingsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageAccountSettings:
          description: "**True** if the user can manage account settings."
          type: string
        canManageAccountSettingsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageAdmins:
          description: "**True** if the user can manage administrators."
          type: string
        canManageAdminsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageEnvelopeTransfer:
          description: ""
          type: string
        canManageEnvelopeTransferMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageReporting:
          description: "**True** if the user can manage reporting."
          type: string
        canManageReportingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageSharing:
          description: "**True** if the user can manage sharing."
          type: string
        canManageSharingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageSigningGroups:
          description: "**True** if the user can manage signing groups."
          type: string
        canManageSigningGroupsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageUsers:
          description: "**True** if the user can manage users."
          type: string
        canManageUsersMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canViewUsers:
          description: ""
          type: string
      type: object
      x-ds-definition-name: userAccountManagementGranularInformation
      x-ms-summary: Describes which account management capabilities a user has.
    userInfo:
      description: ""
      properties:
        accountId:
          description: The account ID associated with the envelope.
          type: string
        accountName:
          description: The name on the account.
          type: string
        activationAccessCode:
          description: Access code provided to the user to activate the account.
          type: string
        email:
          description: The user's email address.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        loginStatus:
          description: When set to **true**, indicates that the user is logged in. This is a read-only property.
          type: string
        membershipId:
          description: The user's membership ID.
          type: string
        sendActivationEmail:
          description: When set to **true**, specifies that an activation email will be sent to the user.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        userName:
          description: The name of the user.
          type: string
        userStatus:
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
          type: string
        userType:
          description: The type of user, for example `CompanyUser`.
          type: string
      type: object
      x-ds-definition-name: userInfo
      x-ms-summary: ""
    userInfoList:
      description: ""
      properties:
        users:
          description: An array of `userInfo` objects containing information about the users in the group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
      type: object
      x-ds-definition-name: userInfoList
      x-ms-summary: ""
    userInformation:
      description: User information.
      properties:
        activationAccessCode:
          description: Access code provided to the user to activate the account.
          type: string
        company:
          description: The name of the user's company.
          type: string
        connectConfigurations:
          description: Object representing the user's custom Connect configuration.
          items:
            $ref: "#/components/schemas/connectUserObject"
          type: array
        countryCode:
          description: The three-letter code for the user's country.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customSettings:
          description: The name/value pair information for the user custom setting.
          items:
            $ref: "#/components/schemas/nameValue"
          type: array
        defaultAccountId:
          description: The default account ID associated with the user.
          type: string
        email:
          description: The user's email address.
          type: string
        enableConnectForUser:
          description: Boolean value that specifies whether the user is enabled for updates from DocuSign Connect.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        firstName:
          description: |-
            The user's first name. 
            Maximum Length: 50 characters.
          type: string
        forgottenPasswordInfo:
          $ref: "#/components/schemas/forgottenPasswordInformation"
        groupList:
          description: |
            A list of the group information for groups to add the user to.
            Use [UserGroups::listGroups](https://developers.docusign.com/docs/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.

            When setting a user's group, only the `groupId` is required.
          items:
            $ref: "#/components/schemas/group"
          type: array
        hasRemoteNotary:
          description: ""
          type: boolean
        homeAddress:
          $ref: "#/components/schemas/addressInformation"
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isAdmin:
          description: Determines if the feature set is actively set as part of the plan.
          type: string
        isNAREnabled:
          description: When set to **true**, National Association of Realtors (NAR) signature logos are enabled for the user.
          type: string
        jobTitle:
          description: The user's job title.
          type: string
        lastLogin:
          description: The date and time when the user last logged in to the system.
          type: string
        lastName:
          description: |-
            The user's last name. 
            Maximum Length: 50 characters.
          type: string
        loginStatus:
          description: Boolean value that indicates whether the user is currently logged in or not.
          type: string
        middleName:
          description: |-
            The user's middle name. 
            Limit: 50 characters.
          type: string
        password:
          description: The user's encrypted password hash.
          type: string
        passwordExpiration:
          description: If password expiration is enabled, the date-time when the user's password expires.
          type: string
        permissionProfileId:
          description: |-
            The ID of the permission profile. Possible values include:

            - `2301416` (for the `DocuSign Viewer` profile)
            - `2301415` (for the `DocuSign Sender` profile)
            - `2301414` (for the `Account Administrator` profile)

            In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`.
          type: string
        permissionProfileName:
          description: |-
            The name of the account permission profile. 

            Example: `Account Administrator`
          type: string
        profileImageUri:
          description: The URL for retrieving the user's profile image.
          type: string
        sendActivationEmail:
          description: When set to **true**, specifies that an activation email will be sent to the user.
          type: string
        sendActivationOnInvalidLogin:
          description: When set to **true**, specifies that an additional activation email be sent if user's log on fails before the account is activated.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        subscribe:
          description: ""
          type: string
        suffixName:
          description: |-
            The suffix for the user's name, such as Jr, IV, PhD, etc.

            Limit: 50 characters. 
          type: string
        title:
          description: The title of the user.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userAddedToAccountDateTime:
          description: The date and time that the user was added to the account.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        userName:
          description: The name of the user.
          type: string
        userProfileLastModifiedDate:
          description: The date and time that the user's profile was last modified.
          type: string
        userSettings:
          $ref: "#/components/schemas/userSettingsInformation"
        userStatus:
          description: |
            Status of the user's account. One of:

            - `ActivationRequired`
            - `ActivationSent`
            - `Active`
            - `Closed`
            - `Disabled`
          type: string
        userType:
          description: The type of user, for example `CompanyUser`.
          type: string
        workAddress:
          $ref: "#/components/schemas/addressInformation"
      type: object
      x-ds-definition-name: userInformation
      x-ms-summary: User information.
    userInformationList:
      description: Contains a list of account users.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/userInformation"
          type: array
      type: object
      x-ds-definition-name: userInformationList
      x-ms-summary: Contains a list of account users.
    userPasswordInformation:
      description: ""
      properties:
        currentPassword:
          description: The user's current password to be changed.
          type: string
        email:
          description: The user's email address for the associated account.
          type: string
        forgottenPasswordInfo:
          $ref: "#/components/schemas/forgottenPasswordInformation"
        newPassword:
          description: The user's new password.
          type: string
      type: object
      x-ds-definition-name: userPasswordInformation
      x-ms-summary: ""
    userPasswordRules:
      description: Contains details about the password rules for a user.
      properties:
        passwordRules:
          $ref: "#/components/schemas/accountPasswordRules"
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: userPasswordRules
      x-ms-summary: Contains details about the password rules for a user.
    userProfile:
      description: ""
      properties:
        address:
          $ref: "#/components/schemas/addressInformation"
        authenticationMethods:
          description: "Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation. "
          items:
            $ref: "#/components/schemas/authenticationMethod"
          type: array
        companyName:
          description: The name of the user's company.
          type: string
        displayOrganizationInfo:
          description: " When set to **true**, the user's company and title information display on the ID card. "
          type: string
        displayPersonalInfo:
          description: When set to **true**, the user's address and phone number display on the ID card.
          type: string
        displayProfile:
          description: When set to **true**, the user's ID card can be viewed from signed documents and envelope history.
          type: string
        displayUsageHistory:
          description: When set to **true**, the user's usage information displays on the ID card.
          type: string
        profileImageUri:
          description: The URL for retrieving the user's profile image.
          type: string
        title:
          description: The title of the user.
          type: string
        usageHistory:
          $ref: "#/components/schemas/usageHistory"
        userDetails:
          $ref: "#/components/schemas/userInformation"
        userProfileLastModifiedDate:
          description: The date and time that the user's profile was last modified.
          type: string
      type: object
      x-ds-definition-name: userProfile
      x-ms-summary: ""
    userSettingsInformation:
      description: |-
        Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
        - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
        - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
        - `options`: The values supported for this setting (not all settings have this element)
      properties:
        accountManagementGranular:
          $ref: "#/components/schemas/userAccountManagementGranularInformation"
        adminOnly:
          description: Reserved for DocuSign.
          type: string
        adminOnlyMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowAutoTagging:
          description: When set to **true**, the API returns suggested tabs for documents for this user.
          type: string
        allowEnvelopeTransferTo:
          description: When set to **true**, this user can participate in envelope transfers on the account.
          type: string
        allowEnvelopeTransferToMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowEsealRecipients:
          description: |-
            When set to **true**, this user can create [electronic seal recipients][eseal].

            [eseal]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients/#seal-recipient
          type: string
        allowEsealRecipientsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowPowerFormsAdminToAccessAllPowerFormEnvelope:
          description: When set to **true** and this user is an administrator, they can view all of the envelopes generated from PowerForms. The default value is **false**.
          type: string
        allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowRecipientLanguageSelection:
          description: When set to **true**, this user can set the language used in the standard email format for a recipient when creating an envelope.
          type: string
        allowRecipientLanguageSelectionMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSendOnBehalfOf:
          description: When set to **true**, this user can send envelopes "on behalf of" other users through the API.
          type: string
        allowSendOnBehalfOfMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        allowSupplementalDocuments:
          description: When **true**, this user can include supplemental documents.
          type: string
        allowSupplementalDocumentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        anchorTagVersionedPlacementEnabled:
          description: |
            Reserved for DocuSign.
          type: string
        apiAccountWideAccess:
          description: When **true**, indicates that this user can send envelope-specific API requests on the account.
          type: string
        apiAccountWideAccessMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        apiCanExportAC:
          description: When **true**, this user can export authoritative copy for the account.
          type: string
        apiCanExportACMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        bulkSend:
          description: When **true**, this user can use the bulk send feature for the account.
          type: string
        bulkSendMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canChargeAccount:
          description: Reserved for DocuSign.
          type: string
        canChargeAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canEditSharedAddressbook:
          description: When true, this user can edit the shared address book for the account.
          type: string
        canEditSharedAddressbookMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canLockEnvelopes:
          description: When set to **true**, this user can lock envelopes.
          type: string
        canLockEnvelopesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageAccount:
          description: When **true**, this user is an administrator for the account.
          type: string
        canManageAccountMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageDistributor:
          description: Reserved for DocuSign.
          type: string
        canManageDistributorMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canManageTemplates:
          description: When **true**, this user can manage templates for the account.
          type: string
        canManageTemplatesMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canSendAPIRequests:
          description: When **true**, this user can send API requests on the account.
          type: string
        canSendAPIRequestsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canSendEnvelope:
          description: When **true**, this user can send envelopes on the account.
          type: string
        canSendEnvelopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canSignEnvelope:
          description: When **true**, this user can sign envelopes.
          type: string
        canSignEnvelopeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canUseScratchpad:
          description: When set to **true**, this user can use a scratchpad to edit information.
          type: string
        canUseScratchpadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        canUseSmartContracts:
          description: Reserved for DocuSign.
          type: string
        canUseSmartContractsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableDocumentUpload:
          description: When **true**, this user is prohibited from uploading documents during sending.
          type: string
        disableDocumentUploadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        disableOtherActions:
          description: When **true**, this user can access the **Other Actions** menu.
          type: string
        disableOtherActionsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableDSPro:
          description: Reserved for DocuSign.
          type: string
        enableDSProMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSequentialSigningAPI:
          description: |-
            When set to **true**, the account can define the routing
            order of recipients for envelopes sent by using the eSignature API.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableSequentialSigningAPIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSequentialSigningUI:
          description: |
            When set to **true**, the account can define the routing order
            of recipients for envelopes sent by using the DocuSign application.

            **Note**: Only SysAdmin users can change this setting.
          type: string
        enableSequentialSigningUIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignOnPaperOverride:
          description: |-
            When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.

            **Note**: Only Admin users can change this setting.
          type: string
        enableSignOnPaperOverrideMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableSignerAttachments:
          description: When **true**, this user can use the signing attachments feature.
          type: string
        enableSignerAttachmentsMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableTransactionPoint:
          description: Reserved for DocuSign.
          type: string
        enableTransactionPointMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        enableVaulting:
          description: When set to **true**, Vaulting is enabled for the account.
          type: string
        enableVaultingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        expressSendOnly:
          description: When set to **false**, this user can apply tabs to documents during the sending experience.
          type: string
        locale:
          description: |-
            The user's locale code. Valid values are:
            - `zh_CN`
            - `zh_TW`
            - `nl`
            - `en`
            - `fr`
            - `de`
            - `it`
            - `ja`
            - `ko`
            - `pt`
            - `pt_BR`
            - `ru`
            - `es`
          type: string
        localeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicy"
        manageClickwrapsMode:
          description: When set to **true**, this user can create and manage [Clickwraps](https://developers.docusign.com/click-api).
          type: string
        manageClickwrapsModeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        modifiedBy:
          description: The user id (GUID) of the user who last modified this user record.
          type: string
        modifiedByMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        modifiedDate:
          description: The date on which this user record was last modified.
          type: string
        modifiedDateMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        modifiedPage:
          description: Note referencing the page that modified this user record.
          type: string
        modifiedPageMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        newSendUI:
          description: Reserved for DocuSign.
          type: string
        newSendUIMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        powerFormMode:
          description: |-
            Indicates the Power Form mode setting for the user:
            - `none`
            - `admin`
            - `user`
          type: string
        powerFormModeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        recipientViewedNotification:
          description: When **true**, this user receives notifications when envelopes are viewed.
          type: string
        recipientViewedNotificationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        sealIdentifiers:
          description: Information about the seals associated with this user.
          items:
            $ref: "#/components/schemas/sealIdentifier"
          type: array
        selfSignedRecipientEmailDocument:
          description: |
            Sets how self-signed documents are presented to the email recipients.
            Valid values are:

            - `include_pdf`: A PDF of the completed document is attached to the email.
            - `include_link`: A secure link to the self-signed documents is included
               in the email.

            **Note**: Only Admin users can change this setting.
          type: string
        selfSignedRecipientEmailDocumentMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        senderEmailNotifications:
          $ref: "#/components/schemas/senderEmailNotifications"
        signerEmailNotifications:
          $ref: "#/components/schemas/signerEmailNotifications"
        supplementalDocumentIncludeInDownload:
          description: When **true**, this user gets supplemental documents when downloading documents.
          type: string
        supplementalDocumentsMustAccept:
          description: When **true**, this user must accept supplemental documents.
          type: string
        supplementalDocumentsMustAcceptMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustRead:
          description: When **true**, this user must both view and accept supplemental documents.
          type: string
        supplementalDocumentsMustReadMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        supplementalDocumentsMustView:
          description: When **true**, this user must view supplemental documents.
          type: string
        supplementalDocumentsMustViewMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        templateActiveCreation:
          description: When set to **true**, a new template is created each time the user sends an envelope.
          type: string
        templateActiveCreationMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        templateApplyNotify:
          description: When set to **true**, the system notifies this user before applying a matching template.
          type: string
        templateApplyNotifyMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        templateAutoMatching:
          description: When set to **true**, the system automatically applies a matching template to a document if only one template matches. If there are multiple matches, it displays a list of matches to select from.
          type: string
        templateAutoMatchingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        templateMatchingSensitivity:
          description: Percentage used when matching templates.
          type: string
        templateMatchingSensitivityMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        templatePageLevelMatching:
          description: When **true**, users see template matching functionality.
          type: string
        templatePageLevelMatchingMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneDST:
          description: When true, daylight savings time is in effect for this user's time zone.
          type: string
        timezoneDSTMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneMask:
          description: The custom DateTime format setting for this user.
          type: string
        timezoneMaskMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneOffset:
          description: |-
            The timezone offset for the user. Valid values:
            - `tz_01_afghanistan`
            - `tz_02_alaskan`
            - `tz_03_arab`
            - `tz_04_arabian`
            - `tz_05_arabic`
            - `tz_06_argentina`
            - `tz_07_atlantic`
            - `tz_08_aus_central`
            - `tz_09_aus_eastern`
            - `tz_10_azerbaijan`
            - `tz_11_azores`
            - `tz_12_bangladesh`
            - `tz_13_canada_central`
            - `tz_14_cape_verde`
            - `tz_15_caucasus`
            - `tz_16_central_australia`
            - `tz_17_central_america`
            - `tz_18_central_asia`
            - `tz_19_central_brazilian`
            - `tz_20_central_europe`
            - `tz_21_central_european`
            - `tz_22_central_pacific`
            - `tz_23_central`
            - `tz_24_central_mexico`
            - `tz_25_china`
            - `tz_26_dateline`
            - `tz_27_east_africa`
            - `tz_28_east_australia`
            - `tz_29_east_europe`
            - `tz_30_east_south_america`
            - `tz_31_eastern`
            - `tz_32_egypt`
            - `tz_33_ekaterinburg`
            - `tz_34_fiji`
            - `tz_35_fli`
            - `tz_36_georgian`
            - `tz_37_gmt`
            - `tz_38_greenland`
            - `tz_39_greenwich`
            - `tz_40_gtb`
            - `tz_41_hawaiian`
            - `tz_42_india`
            - `tz_43_iran`
            - `tz_44_israel`
            - `tz_45_jordan`
            - `tz_46_kaliningrad`
            - `tz_47_kamchatka`
            - `tz_48_korea`
            - `tz_49_magadan`
            - `tz_50_mauritius`
            - `tz_51_mid_atlantic`
            - `tz_52_middle_east`
            - `tz_53_montevideo`
            - `tz_54_morocco`
            - `tz_55_mountain`
            - `tz_56_mountain_mexico`
            - `tz_57_myanmar`
            - `tz_58_north_central_asia`
            - `tz_59_namibia`
            - `tz_60_nepal`
            - `tz_61_new_zealand`
            - `tz_62_new_foundland`
            - `tz_63_north_asia_east`
            - `tz_64_north_asia`
            - `tz_65_pacific_sa`
            - `tz_66_pacific`
            - `tz_67_pacific_mexico`
            - `tz_68_pakistan`
            - `tz_69_paraguay`
            - `tz_70_romance`
            - `tz_71_russian`
            - `tz_72_sa_eastern`
            - `tz_73_sa_pacific`
            - `tz_74_sa_western`
            - `tz_75_samoa`
            - `tz_76_se_asia`
            - `tz_77_singapore`
            - `tz_78_south_africa`
            - `tz_79_sriLanka`
            - `tz_80_syria`
            - `tz_81_taipei`
            - `tz_82_tasmania`
            - `tz_83_tokyo`
            - `tz_84_tonga`
            - `tz_85_turkey`
            - `tz_86_ulaanbaatar`
            - `tz_87_us_eastern`
            - `tz_88_us_mountain`
            - `tz_89_venezuela`
            - `tz_90_vladivostok`
            - `tz_91_west_australia`
            - `tz_92_west_central_africa`
            - `tz_93_west_europe`
            - `tz_94_west_asia`
            - `tz_95_west_pacific`
            - `tz_96_yakutsk`
          type: string
        timezoneOffsetMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneSendingPref:
          description: Reserved for DocuSign.
          type: string
        timezoneSendingPrefMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        timezoneSigningPref:
          description: Reserved for DocuSign.
          type: string
        timezoneSigningPrefMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        transactionPointSiteNameURL:
          description: Reserved for DocuSign.
          type: string
        transactionPointSiteNameURLMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        transactionPointUserName:
          description: Reserved for DocuSign.
          type: string
        transactionPointUserNameMetadata:
          $ref: "#/components/schemas/settingsMetadata"
        vaultingMode:
          description: |-
            Indicates the specified Vaulting mode:
            - `none`
            - `estored`
            - `electronic_original`
          type: string
        vaultingModeMetadata:
          $ref: "#/components/schemas/settingsMetadata"
      type: object
      x-ds-definition-name: userSettingsInformation
      x-ms-summary: |-
        Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
        - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
        - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
        - `options`: The values supported for this setting (not all settings have this element)
    userSharedItem:
      description: Information about a shared item.
      properties:
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        shared:
          description: |
            How the item is shared. One of:

            - `not_shared`
            - `shared_to`
            - `shared_from`
            - `shared_to_and_from`
          type: string
        user:
          $ref: "#/components/schemas/userInfo"
      type: object
      x-ds-definition-name: userSharedItem
      x-ms-summary: Information about a shared item.
    userSignature:
      description: ""
      properties:
        adoptedDateTime:
          description: The date and time the user adopted their signature.
          type: string
        createdDateTime:
          description: The UTC DateTime when the item was created.
          type: string
        customField:
          description: ""
          type: string
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageBase64:
          description: A Base64-encoded representation of the signature image.
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        initials150ImageId:
          description: The ID of the user's initials image.
          type: string
        initialsImageUri:
          description: The URI for retrieving the image of the user's initials.
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        lastModifiedDateTime:
          description: The date and time that the item was last modified.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        nrdsStatus:
          description: |-
            The realtor's NAR membership status. The value `active` verifies that the user is a current NAR member. Valid values are:

            - `Active`
            - `Inactive`
            - `Terminate`
            - `Provisional`
            - `Deceased`
            - `Suspend`
            - `Unknown`
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signature150ImageId:
          description: The ID of the user's signature image.
          type: string
        signatureFont:
          description: |
            The font type for the signature, if the signature is not drawn. The supported font types are:

            "7_DocuSign", "1_DocuSign", "6_DocuSign", "8_DocuSign", "3_DocuSign", "Mistral", "4_DocuSign", "2_DocuSign", "5_DocuSign", "Rage Italic"
          type: string
        signatureId:
          description: Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
          type: string
        signatureImageUri:
          description: An endpoint URI that you can use to retrieve the user's signature image.
          type: string
        signatureInitials:
          description: " The initials associated with the signature."
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        signatureRights:
          description: |-
            The rights that the user has to the signature. Valid values are:

            - `none`
            - `read`
            - `admin`
          type: string
        signatureType:
          description: Specifies the type of signature.
          type: string
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampImageUri:
          description: The URI for retrieving the image of the user's stamp.
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
        stampType:
          description: |-
            The type of stamp. Valid values are:

            - `signature`: A signature image. This is the default value.
            - `stamp`: A stamp image.
            - null
          type: string
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
      type: object
      x-ds-definition-name: userSignature
      x-ms-summary: ""
    userSignatureDefinition:
      description: ""
      properties:
        dateStampProperties:
          $ref: "#/components/schemas/dateStampProperties"
        disallowUserResizeStamp:
          description: When set to **true**, users may not resize the stamp.
          type: string
        externalID:
          description: Optionally specify an external identifier for the user's signature.
          type: string
        imageType:
          description: |-
            Specificies the type of image. Valid values are:

            - `signature_image`
            - `initials_image`
          type: string
        isDefault:
          description: Boolean that specifies whether the signature is the default signature for the user.
          type: string
        nrdsId:
          description: The National Association of Realtors (NAR) membership ID for a user who is a realtor.
          type: string
        nrdsLastName:
          description: The realtor's last name.
          type: string
        phoneticName:
          description: The phonetic spelling of the `signatureName`.
          type: string
        signatureFont:
          description: |
            The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.

            - `"1_DocuSign"`
            - `"2_DocuSign"`
            - `"3_DocuSign"`
            - `"4_DocuSign"`
            - `"5_DocuSign"`
            - `"6_DocuSign"`
            - `"7_DocuSign"`
            - `"8_DocuSign"`
            - `"Mistral"`
            - `"Rage Italic"`
          type: string
        signatureId:
          description: Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as "&", "<", ">") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.
          type: string
        signatureInitials:
          description: Specifies the user's signature in initials format.
          type: string
        signatureName:
          description: Specifies the user's signature name.
          type: string
        stampFormat:
          description: |-
            The format of a stamp. Valid values are:

            - `NameHanko`: The stamp represents only the signer's name.
            - `NameDateHanko`: The stamp represents the signer's name and the date. 
          type: string
        stampSizeMM:
          description: The physical height of the stamp image (in millimeters) that the stamp vendor recommends for displaying the image in PDF documents.
          type: string
      type: object
      x-ds-definition-name: userSignatureDefinition
      x-ms-summary: ""
    userSignaturesInformation:
      description: ""
      properties:
        userSignatures:
          description: An array of  `userSignature` objects.
          items:
            $ref: "#/components/schemas/userSignature"
          type: array
      type: object
      x-ds-definition-name: userSignaturesInformation
      x-ms-summary: ""
    userSocialIdResult:
      description: ""
      properties:
        socialAccountInformation:
          description: Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.
          items:
            $ref: "#/components/schemas/socialAccountInformation"
          type: array
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
      type: object
      x-ds-definition-name: userSocialIdResult
      x-ms-summary: ""
    usersResponse:
      description: ""
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        nextUri:
          description: "The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search. "
          type: string
        previousUri:
          description: "The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        users:
          description: User management information.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
      type: object
      x-ds-definition-name: usersResponse
      x-ms-summary: ""
    view:
      description: This tab is used with the Approve tab to handle supplemental documents.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        buttonText:
          description: The text to display on the button.
          type: string
        buttonTextMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the recipient must click the **View** button for the supporting document prior to completing the signing process.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requiredRead:
          description: When set to **true**, the recipient must read through the document.
          type: string
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |-
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |+
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |+
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: view
      x-ms-summary: This tab is used with the Approve tab to handle supplemental documents.
    viewUrl:
      description: ""
      properties:
        url:
          description: URL to the Review ID page.
          type: string
      type: object
      x-ds-definition-name: viewUrl
      x-ms-summary: ""
    watermark:
      description: ""
      properties:
        displayAngle:
          description: ""
          type: string
        enabled:
          description: ""
          type: string
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        imageBase64:
          description: ""
          type: string
        transparency:
          description: ""
          type: string
        watermarkText:
          description: ""
          type: string
      type: object
      x-ds-definition-name: watermark
      x-ms-summary: ""
    witness:
      description: A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
      properties:
        accessCode:
          description: |-
            If a value is provided, the recipient must enter the value as the access code to view and sign the envelope. 

            Maximum Length: 50 characters and it must conform to the account's access code format setting.

            If blank, but the signer `accessCode` property is set in the envelope, then that value is used.

            If blank and the signer `accessCode` property is not set, then the access code is not required.
          type: string
        accessCodeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        addAccessCodeToEmail:
          description: Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient.
          type: string
        additionalNotifications:
          description: An array of additional notification objects.
          items:
            $ref: "#/components/schemas/recipientAdditionalNotification"
          type: array
        agentCanEditEmail:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated email address. This element is only active if enabled for the account.
          type: string
        agentCanEditName:
          description: Optional element. When set to **true**, the agents recipient associated with this recipient can change the recipient's pre-populated name. This element is only active if enabled for the account.
          type: string
        allowSystemOverrideForLockedRecipient:
          description: ""
          type: string
        autoNavigation:
          description: |
            When set to **true**, autonavigation is set for the recipient.
          type: string
        bulkRecipientsUri:
          description: Reserved for DocuSign.
          type: string
        canSignOffline:
          description: When set to **true**, specifies that the signer can perform the signing ceremony offline.
          type: string
        clientUserId:
          description: |-
            Specifies whether the recipient is embedded or remote. 

            If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.

            Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending. 

            Maximum length: 100 characters. 
          type: string
        completedCount:
          description: Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only.
          type: string
        creationReason:
          description: The reason why the recipient was created (for example, `sender`). Read only.
          type: string
        customFields:
          description: An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
          items:
            type: string
          type: array
        declinedDateTime:
          description: The date and time the recipient declined the document. Read only.
          type: string
        declinedReason:
          description: The reason the recipient declined the document. Read only.
          type: string
        defaultRecipient:
          description: When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient.
          type: string
        deliveredDateTime:
          description: The date and time that the envelope was delivered to the recipient. Read only.
          type: string
        deliveryMethod:
          description: Reserved for DocuSign.
          type: string
        deliveryMethodMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        designatorId:
          description: ""
          type: string
        designatorIdGuid:
          description: ""
          type: string
        documentVisibility:
          description: A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**.
          items:
            $ref: "#/components/schemas/documentVisibility"
          type: array
        email:
          description: The recipient's email address.
          type: string
        emailMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        emailNotification:
          $ref: "#/components/schemas/recipientEmailNotification"
        embeddedRecipientStartURL:
          description: |-
            Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session. 

            If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.

            It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.

            If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets. 

            *Example*: 

            `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]` 
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        excludedDocuments:
          description: |-
            Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true** for the envelope to use this.

            When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
          items:
            type: string
          type: array
        faxNumber:
          description: Reserved for DocuSign.
          type: string
        faxNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        firstName:
          description: "The recipient's first name. Maximum Length: 50 characters."
          type: string
        firstNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fullName:
          description: Reserved for DocuSign.
          type: string
        fullNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckConfigurationName:
          description: |-
            The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:

            - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object.
            - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object.
            - `ID Check $`: The  recipient must answer detailed security questions. 

            **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node.
          type: string
        idCheckConfigurationNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        idCheckInformationInput:
          $ref: "#/components/schemas/idCheckInformationInput"
        identityVerification:
          $ref: "#/components/schemas/recipientIdentityVerification"
        inheritEmailNotificationConfiguration:
          description: "When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account. "
          type: string
        isBulkRecipient:
          description: |
            Reserved for DocuSign.
          type: string
        isBulkRecipientMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lastName:
          description: The recipient's last name.
          type: string
        lastNameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        lockedRecipientPhoneAuthEditable:
          description: Reserved for DocuSign.
          type: string
        lockedRecipientSmsEditable:
          description: Reserved for DocuSign.
          type: string
        name:
          description: |-
            The full legal name of the recipient. Maximum Length: 100 characters.

            **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        notaryId:
          description: ""
          type: string
        note:
          description: |
            A note sent to the recipient in the signing email.
            This note is unique to this recipient.
            In the user interface,
            it appears near the upper left corner
            of the document
            on the signing screen.

            Maximum Length: 1000 characters.
          type: string
        noteMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        offlineAttributes:
          $ref: "#/components/schemas/offlineAttributes"
        phoneAuthentication:
          $ref: "#/components/schemas/recipientPhoneAuthentication"
        proofFile:
          $ref: "#/components/schemas/recipientProofFile"
        recipientAttachments:
          description: Reserved for DocuSign.
          items:
            $ref: "#/components/schemas/recipientAttachment"
          type: array
        recipientAuthenticationStatus:
          $ref: "#/components/schemas/authenticationStatus"
        recipientFeatureMetadata:
          description: Metadata about the features that are supported for the recipient type. Read only.
          items:
            $ref: "#/components/schemas/featureAvailableMetadata"
          type: array
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientSignatureProviders:
          description: The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
          items:
            $ref: "#/components/schemas/recipientSignatureProvider"
          type: array
        recipientSuppliesTabs:
          description: When set to **true**, specifies that the recipient creates the tabs.
          type: string
        recipientType:
          description: |-
            The recipient type, as specified by the following values:
            - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order.
            - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order.
            - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents.
            - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients.
            - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer.
            - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order.
            - `seal`: Electronic seal recipients represent legal entities.
            - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope.
            - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
          type: string
        recipientTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireIdLookup:
          description: "When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. "
          type: string
        requireIdLookupMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireSignOnPaper:
          description: When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
          type: string
        requireSignerCertificate:
          description: |-
            By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.

            This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the `recipientSignatureProviders` parameter for other types of digital certificates. 

            Set this parameter to `safe` to use a SAFE-BioPharma certificate.

            The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
          type: string
        requireUploadSignature:
          description: When set to **true**, the signer is required to upload a new signature, even if they have a pre-adopted signature in their personal DocuSign account.
          type: string
        roleName:
          description: Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients.
          type: string
        routingOrder:
          description: "Specifies the routing order of the recipient in the envelope. "
          type: string
        routingOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        sentDateTime:
          description: The UTC DateTime when the envelope was sent. Read only.
          type: string
        signInEachLocation:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab (instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signInEachLocationMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signatureInfo:
          $ref: "#/components/schemas/recipientSignatureInformation"
        signedDateTime:
          description: Reserved for DocuSign.
          type: string
        signingGroupId:
          description: When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
          type: string
        signingGroupIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        signingGroupName:
          description: |-
            Optional. The name of the signing group. 

            Maximum Length: 100 characters. 
          type: string
        signingGroupUsers:
          description: A complex type that contains information about users in the signing group.
          items:
            $ref: "#/components/schemas/userInfo"
          type: array
        smsAuthentication:
          $ref: "#/components/schemas/recipientSMSAuthentication"
        socialAuthentications:
          description: Deprecated.
          items:
            $ref: "#/components/schemas/socialAuthentication"
          type: array
        status:
          description: |-
            The recipient's status. Read only. 

            Possible values:

            - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account.
            - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope.
            - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`).
            - `declined`: The recipient declined to sign the document(s) in the envelope.
            - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope.
            - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step.
            - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope.
            - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.
          type: string
        statusCode:
          description: The code associated with the recipient's status. Read only.
          type: string
        suppressEmails:
          description: When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox.
          type: string
        tabs:
          $ref: "#/components/schemas/EnvelopeRecipientTabs"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        totalTabCount:
          description: The total number of tabs in the documents. Read only.
          type: string
        userId:
          description: |
            The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.
          type: string
        witnessFor:
          description: The person or party for whom the recipient is a witness.
          type: string
        witnessForGuid:
          description: The GUID of the person or party for whom the recipient is a witness.
          type: string
      type: object
      x-ds-definition-name: witness
      x-ms-summary: A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
    workflow:
      description: Describes the workflow for an envelope.
      properties:
        currentWorkflowStepId:
          description: |-
            The `workflowStepId` of the current step.
            This is not an index into the `workflowSteps` array in this object.
            See the `workflowStep` object.
          type: string
        workflowStatus:
          description: |-
            The status of the workflow:

            - `paused` if the workflow is paused
            - `in_progress` if the workflow is in progress
          type: string
        workflowSteps:
          description: An array of workflow steps.
          items:
            $ref: "#/components/schemas/workflowStep"
          type: array
      type: object
      x-ds-definition-name: workflow
      x-ms-summary: Describes the workflow for an envelope.
    workflowStep:
      description: Describes a single step in a workflow.
      properties:
        action:
          description: |
            Indicates the action to perform.

            - `pause_before`: The workflow should pause before the trigger described by `triggerOnItem` is reached.

            <!--
            - `pause_after`: The workflow should pause after the trigger described by `triggerOnItem` is processed.
            -->
          type: string
        completedDate:
          description: The timestamp of when the workflow step transitioned to `completed` status.
          type: string
        itemId:
          description: The unique ID of the item being triggered.
          type: string
        recipientRouting:
          $ref: "#/components/schemas/recipientRouting"
        status:
          description: |-
            The status of the step. One of:

            - `inactive`
            - `in_progress`
            - `paused`
            - `pending`
            - `completed`

            This is a read-only property.
          type: string
        triggerOnItem:
          description: The type of item that triggers this workflow step. Currently, only `routing_order`, is the only supported value.
          type: string
        triggeredDate:
          description: The timestamp of when the workflow step transitioned to `in_progress` status.
          type: string
        workflowStepId:
          description: |-
            A unique identifier for this workflow step.
            This value is available from the `currentWorkflowStepId` property of the `workflow` object,
          type: string
      type: object
      x-ds-definition-name: workflowStep
      x-ms-summary: Describes a single step in a workflow.
    workspace:
      description: A DocuSign workspace is a collaboration area for sharing files and data.
      properties:
        billableAccountId:
          description: The id of the account to bill.
          type: string
        callerInformation:
          $ref: "#/components/schemas/workspaceUser"
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdByInformation:
          $ref: "#/components/schemas/workspaceUser"
        lastModified:
          description: Utc date and time the comment was last updated (can only be done by creator.)
          type: string
        lastModifiedByInformation:
          $ref: "#/components/schemas/workspaceUser"
        settings:
          $ref: "#/components/schemas/workspaceSettings"
        status:
          description: |-
            Indicates the envelope status. Valid values are:

            * sent - The envelope is sent to the recipients. 
            * created - The envelope is saved as a draft and can be modified and sent later.
          type: string
        workspaceBaseUrl:
          description: The relative URL for accessing the workspace.
          type: string
        workspaceDescription:
          description: Text describing the purpose of the workspace.
          type: string
        workspaceId:
          description: The id of the workspace, always populated.
          type: string
        workspaceName:
          description: The name of the workspace.
          type: string
        workspaceUri:
          description: The relative URI for accessing the workspace.
          type: string
      type: object
      x-ds-definition-name: workspace
      x-ms-summary: A DocuSign workspace is a collaboration area for sharing files and data.
    workspaceFolderContents:
      description: This object's properties describe the contents of a workspace folder.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        folder:
          $ref: "#/components/schemas/workspaceItem"
        items:
          description: A list of workspace items.
          items:
            $ref: "#/components/schemas/workspaceItem"
          type: array
        parentFolders:
          description: ""
          items:
            $ref: "#/components/schemas/workspaceItem"
          type: array
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        workspaceId:
          description: The id of the workspace, always populated.
          type: string
      type: object
      x-ds-definition-name: workspaceFolderContents
      x-ms-summary: This object's properties describe the contents of a workspace folder.
    workspaceItem:
      description: This object represents an item in a workspace, which can be either a file or folder.
      properties:
        callerAuthorization:
          $ref: "#/components/schemas/workspaceUserAuthorization"
        contentType:
          description: If the item is a file, this property specifies the content type of the file.
          type: string
        created:
          description: The UTC DateTime when the workspace item was created.
          type: string
        createdById:
          description: The id of the user who created the workspace item.
          type: string
        createdByInformation:
          $ref: "#/components/schemas/workspaceUser"
        extension:
          description: The file extension of a file item.
          type: string
        fileSize:
          description: The size of the file in bytes.
          type: string
        fileUri:
          description: The URI for retrieving the file.
          type: string
        id:
          description: A unique ID for the Salesforce object.
          type: string
        isPublic:
          description: " When **true**, the item is public."
          type: string
        lastModified:
          description: |-
            The UTC date and time that the comment was last updated.

            **Note**: This can only be done by the creator.
          type: string
        lastModifiedById:
          description: The id of the user who last modified the item.
          type: string
        lastModifiedByInformation:
          $ref: "#/components/schemas/workspaceUser"
        name:
          description: The name of the file or folder.
          type: string
        pageCount:
          description: The number of pages in a file.
          type: string
        parentFolderId:
          description: The id of the parent folder, or the special value `root` for the root folder.
          type: string
        parentFolderUri:
          description: The URI of the parent folder.
          type: string
        sha256:
          description: A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content of a file. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the upload is refused.
          type: string
        thumbHeight:
          description: The height of the thumbnail image.
          type: string
        thumbWidth:
          description: The width of the thumbnail image.
          type: string
        thumbnail:
          $ref: "#/components/schemas/page"
        type:
          description: The type of the workspace item. Valid values are file, folder.
          type: string
        uri:
          description: A URI containing the user ID.
          type: string
        userAuthorization:
          $ref: "#/components/schemas/workspaceUserAuthorization"
      type: object
      x-ds-definition-name: workspaceItem
      x-ms-summary: This object represents an item in a workspace, which can be either a file or folder.
    workspaceItemList:
      description: An array of objects that describe the items in a workspace.
      properties:
        items:
          description: A list of workspace items.
          items:
            $ref: "#/components/schemas/workspaceItem"
          type: array
      type: object
      x-ds-definition-name: workspaceItemList
      x-ms-summary: An array of objects that describe the items in a workspace.
    workspaceList:
      description: This object contains a list of available workspaces.
      properties:
        endPosition:
          description: "The last index position in the result set. "
          type: string
        resultSetSize:
          description: The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`.
          type: string
        startPosition:
          description: The starting index position of the current result set.
          type: string
        totalSetSize:
          description: The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`.
          type: string
        workspaces:
          description: A list of workspaces.
          items:
            $ref: "#/components/schemas/workspace"
          type: array
      type: object
      x-ds-definition-name: workspaceList
      x-ms-summary: This object contains a list of available workspaces.
    workspaceSettings:
      description: This object provides information about the settings for the workspace.
      properties:
        commentsAllowed:
          description: When **true**, commenting on the documents in the workspace is allowed.
          type: string
      type: object
      x-ds-definition-name: workspaceSettings
      x-ms-summary: This object provides information about the settings for the workspace.
    workspaceUser:
      description: "This object represents the workspace user. This property is only returned in response to user specific GET call. "
      properties:
        accountId:
          description: The account ID associated with the workspace user.
          type: string
        accountName:
          description: The name of the account that the workspace user belongs to.
          type: string
        activeSince:
          description: The UTC DateTime when the user joined the workspace.
          type: string
        created:
          description: The UTC DateTime when the workspace user was created.
          type: string
        createdById:
          description: The id of the user who created this workspace user.
          type: string
        email:
          description: The workspace user's email address.
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        invitationEmailBlurb:
          description: The text of the workspace invitation email message sent to the user.
          type: string
        invitationEmailSubject:
          description: The subject line of the workspace invitation email message sent to the user.
          type: string
        lastModified:
          description: The UTC DateTime that the workspace user was last modified.
          type: string
        lastModifiedById:
          description: The id of the user who last modified the workspace user.
          type: string
        status:
          description: |-
            Filters the results by user status.
            You can specify a comma-separated
            list of the following statuses:

            * ActivationRequired 
            * ActivationSent 
            * Active
            * Closed 
            * Disabled
          type: string
        type:
          description: "Type of the user. Valid values: type_owner, type_participant."
          type: string
        userId:
          description: The id of the workspace user.
          type: string
        userName:
          description: The name of workspace user.
          type: string
        workspaceId:
          description: The id of the workspace.
          type: string
        workspaceUserBaseUrl:
          description: The URL for accessing the workspace user.
          type: string
        workspaceUserId:
          description: The id of the workspace user.
          type: string
        workspaceUserUri:
          description: The URI for accessing the workspace user.
          type: string
      type: object
      x-ds-definition-name: workspaceUser
      x-ms-summary: "This object represents the workspace user. This property is only returned in response to user specific GET call. "
    workspaceUserAuthorization:
      description: Provides properties that describe user authorization to a workspace.
      properties:
        canDelete:
          description: When set to **true**, the workspace user can delete items from the workspace.
          type: string
        canMove:
          description: When set to **true**, the workspace user can move the items in the workspace.
          type: string
        canTransact:
          description: When set to **true**, the workspace user can create transactions from the workspace.
          type: string
        canView:
          description: When set to **true**, the workspace user can view the items in the workspace.
          type: string
        created:
          description: The UTC DateTime when the workspace user authorization was created.
          type: string
        createdById:
          description: "The id of the user who created the workspace user authorization. "
          type: string
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        modified:
          description: The UTC DateTime when the workspace user authorization was last modified.
          type: string
        modifiedById:
          description: The id of the user who last modified the workspace user authorization.
          type: string
        workspaceUserId:
          description: The id of the workspace user.
          type: string
        workspaceUserInformation:
          $ref: "#/components/schemas/workspaceUser"
      type: object
      x-ds-definition-name: workspaceUserAuthorization
      x-ms-summary: Provides properties that describe user authorization to a workspace.
    zip:
      description: |
        A tab that allows the recipient to enter a ZIP code. The ZIP
        code can be five digits or nine digits in the ZIP+4 format.
        The zip code can be typed with or without dashes. It uses
        the same parameters as a Text tab, with the validation
        message and pattern set for ZIP code information.
      properties:
        anchorAllowWhiteSpaceInCharacters:
          description: ""
          type: string
        anchorAllowWhiteSpaceInCharactersMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorCaseSensitive:
          description: |-
            This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.

            For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorCaseSensitiveMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorHorizontalAlignment:
          description: |
            This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :

            - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value.
            - `right`: Aligns the tab’s left side with the last character of the matching anchor word.

            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTabs]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorHorizontalAlignmentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorIgnoreIfNotPresent:
          description: When set to **true**, this tab is ignored if the `anchorString` is not found in the document.
          type: string
        anchorIgnoreIfNotPresentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorMatchWholeWord:
          description: |
            When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.

            For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.

            This functionality uses the following rules:

            - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:

              $~><|^+=

              For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`

            - Strings embedded in other strings are ignored during the matching process.

            - In words that have dashes, the parts separated by dashes are treated as distinct words.

              Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.

            - Letters with accent marks are treated as distinct characters from their unaccented counterparts.

            - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.

              Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.

            - Unlike punctuation, numbers are not ignored when finding anchor words.

              Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).


            **Note**: You can only specify the value of this property in POST requests.

            [AnchorTab]: https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/tabs/auto-place
          type: string
        anchorMatchWholeWordMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorString:
          description: Specifies the string to find in the document and use as the basis for tab placement.
          type: string
        anchorStringMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorTabProcessorVersion:
          description: Reserved for DocuSign.
          type: string
        anchorTabProcessorVersionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorUnits:
          description: |
            Specifies units of the
            `anchorXOffset` and
            `anchorYOffset`.
            Valid units are:

            - `pixels`
            - `inches`
            - `mms`
            - `cms`
          type: string
        anchorUnitsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorXOffset:
          description: |
            Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorXOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        anchorYOffset:
          description: |
            Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.
          type: string
        anchorYOffsetMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        bold:
          description: When set to **true**, the information in the tab is bold.
          type: string
        boldMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        concealValueOnDocument:
          description: |-
            When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.

            When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.

            This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
          type: string
        concealValueOnDocumentMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentLabel:
          description: For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility.
          type: string
        conditionalParentLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        conditionalParentValue:
          description: |
            For conditional fields, this is the value of the parent tab that controls the tab's visibility.

            If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use "on" as the value to show that the parent tab is active.
          type: string
        conditionalParentValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        customTabId:
          description: The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
          type: string
        customTabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        disableAutoSize:
          description: When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
          type: string
        disableAutoSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        documentId:
          description: Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.
          type: string
        documentIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        errorDetails:
          $ref: "#/components/schemas/errorDetails"
        font:
          description: |
            The font to be used for the tab value. Supported fonts include:

            - Default
            - Arial
            - ArialNarrow
            - Calibri
            - CourierNew
            - Garamond
            - Georgia
            - Helvetica
            - LucidaConsole
            - MSGothic
            - MSMincho
            - OCR-A
            - Tahoma
            - TimesNewRoman
            - Trebuchet
            - Verdana
          type: string
        fontColor:
          description: |
            The font color to use for the information in the tab. Possible values are: 

            - Black
            - BrightBlue
            - BrightRed
            - DarkGreen
            - DarkRed
            - Gold
            - Green
            - NavyBlue
            - Purple
            - White
          type: string
        fontColorMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        fontSize:
          description: |-
            The font size used for the information in the tab. Possible values are:

            - Size7
            - Size8
            - Size9
            - Size10
            - Size11
            - Size12
            - Size14
            - Size16
            - Size18
            - Size20
            - Size22
            - Size24
            - Size26
            - Size28
            - Size36
            - Size48
            - Size72
          type: string
        fontSizeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formOrder:
          description: An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block.
          type: string
        formOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageLabel:
          description: A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience.
          type: string
        formPageLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        formPageNumber:
          description: An integer specifying the order in which to present the guided form pages.
          type: string
        formPageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        height:
          description: The height of the tab in pixels.
          type: string
        heightMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        italic:
          description: When set to **true**, the information in the tab is italic.
          type: string
        italicMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        localePolicy:
          $ref: "#/components/schemas/localePolicyTab"
        locked:
          description: When set to **true**, the signer cannot change the data of the custom tab.
          type: string
        lockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        maxLength:
          description: An optional value that describes the maximum length of the property when the property is a string.
          type: string
        maxLengthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        mergeField:
          $ref: "#/components/schemas/mergeField"
        mergeFieldXml:
          description: ""
          type: string
        name:
          description: The name of the tab. For example, `Sign Here` or `Initial Here`.
          type: string
        nameMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        originalValue:
          description: "The initial value of the tab when it was sent to the recipient. "
          type: string
        originalValueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        pageNumber:
          description: The page number on which the tab is located. For supplemental documents, this value must be `1`.
          type: string
        pageNumberMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientId:
          description: Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
          type: string
        recipientIdGuid:
          description: The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only.
          type: string
        recipientIdGuidMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        recipientIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireAll:
          description: "When set to **true** and shared is true, information must be entered in this field to complete the envelope. "
          type: string
        requireAllMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        requireInitialOnSharedChange:
          description: Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
          type: string
        requireInitialOnSharedChangeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        required:
          description: When set to **true**, the signer is required to fill out this tab.
          type: string
        requiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        senderRequired:
          description: |-
            When set to **true**, the sender must populate the tab before an envelope can be sent using the template. 

            This value tab can only be changed by modifying (PUT) the template. 

            Tabs with a `senderRequired` value of true cannot be deleted from an envelope.
          type: string
        senderRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        shared:
          description: When set to **true**, this custom tab is shared.
          type: string
        sharedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        smartContractInformation:
          $ref: "#/components/schemas/smartContractInformation"
        status:
          description: |
            The status of the tab. Possible values are:

            - `active`: The tab is active, but the recipient has not yet interacted with it.
            - `signed`: The recipient signed the tab.
            - `declined`: The recipient declined the envelope.
            - `na`: Used when the `status` property is not applicable to the tab type. (For example, a tab that has the `tabType` `SignerAttachmentOptional`).
          type: string
        statusMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabGroupLabels:
          description: An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array.
          items:
            type: string
          type: array
        tabGroupLabelsMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabId:
          description: The unique identifier for the tab.
          type: string
        tabIdMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabLabel:
          description: |
            The label associated with the tab. This value may be an empty string.
            If no value is provided, the tab type is used as the value.

            Maximum Length: 500 characters.
          type: string
        tabLabelMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabOrder:
          description: |-
            A positive integer that sets the order the tab is navigated to during signing.

            Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used.
          type: string
        tabOrderMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tabType:
          description: Indicates the type of tab (for example, `signHere` or `initialHere`).
          type: string
        tabTypeMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateLocked:
          description: "When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. "
          type: string
        templateLockedMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        templateRequired:
          description: When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
          type: string
        templateRequiredMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        toolTipMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        tooltip:
          description: The text of a tooltip that appears when a user hovers over a form field or tab.
          type: string
        underline:
          description: When set to **true**, the information in the tab is underlined.
          type: string
        underlineMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        useDash4:
          description: When set to **true**, ZIP+4 format is used.
          type: string
        useDash4Metadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationMessage:
          description: The message displayed if the custom tab fails input validation (either custom of embedded).
          type: string
        validationMessageMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        validationPattern:
          description: A regular expression used to validate input for the tab.
          type: string
        validationPatternMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        value:
          description: "Specifies the value of the tab. "
          type: string
        valueMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        width:
          description: The width of the tab in pixels.
          type: string
        widthMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        xPosition:
          description: |
            This property indicates the horizontal offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        xPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
        yPosition:
          description: |
            This property indicates the vertical offset of the object on the page.
            DocuSign uses 72 DPI when determining position.
            Required. May be zero.

            To improve the tab's position on the document,
            DocuSign recommends
            adjusting `xPosition`
            and `yPosition`
            coordinates
            by (-3, -2)
          type: string
        yPositionMetadata:
          $ref: "#/components/schemas/propertyMetadata"
      type: object
      x-ds-definition-name: zip
      x-ms-summary: |
        A tab that allows the recipient to enter a ZIP code. The ZIP
        code can be five digits or nine digits in the ZIP+4 format.
        The zip code can be typed with or without dashes. It uses
        the same parameters as a Text tab, with the validation
        message and pattern set for ZIP code information.
x-ds-allow-editing: false
x-ds-categories:
  - description: |
      The eSignature API Envelope category includes the resources and methods for sending and managing envelopes and envelope data.

      Envelopes are the key objects in the DocuSign platform. As a result, they are complex data structures with few required fields. See the [How-to guides](https://developers.docusign.com/docs/esign-rest-api/how-to/) for examples and solutions.

      To learn more about envelopes, see [Envelopes](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/envelopes/).
    name: Envelopes
    summary: This section shows you how to create and send envelopes.
  - description: |-
      The Connect service enables your application to be called via HTTPS when an event of interest occurs.

      Use the Connect service to "end the polling madness." With Connect, there is no need for your application to poll DocuSign every 15 minutes to learn the latest about your envelopes.

      Instead, you register your interest in one or more types of envelope or recipient events. Then, when an interesting event occurs, the DocuSign platform will contact your application with the event's details and data. You can register interest in envelopes sent by particular users in your account, or for envelopes sent by any user.

      Connect can empower your organization to manage document actions as they occur, and allows you to track their changes within your own systems. Upon completion, envelope information, including document content, can be stored in your own databases or CMS systems, and these events can be triggered via webhooks delivering messages to your application.

      ## Incoming Connect Calls

      To use the Connect service, your application needs to provide an HTTPS URL that can be called from the public Internet. If your application runs on a server behind your organization's firewall, then you will need to create a "pinhole" in the firewall to allow the incoming Connect calls from DocuSign to reach your application. You can also use other techniques such as proxy servers and DMZ networking for receiving the incoming calls.

      Connect delivers events over HTTP requests in the form of XML. DocuSign sends an XML object to the secure URL entered on the configuration page for every event and user selected. 

      If your application is not configured to accept post messages, DocuSign will NOT return an additional post error response to your listener application. If you've enabled logging on your configuration, it will be logged in Admin under the configuration failure log.

      ## Per-envelope Connect Configuration
      Instead of registering a general Connect configuration and listener, an individual envelope can have its own Connect configuration. See the `eventNotification` field for envelopes.

      ## Categories
      Use the Connect category for:

      * Programmatically creating Connect configurations. Connect configurations can be created manually by using the DocuSign web service, or programmatically via the API. Configurations created via the API can be seen and updated from the web service.
      * Retrieving and managing the event log for your Connect configurations. 
      * Requesting that an event be re-published to the listener.
    name: Connect
    summary: |-
      DocuSign Connect is the DocuSign platform notification service. The service uses webhooks to proactively notify your application when an event occurs that your application wants to know about. DocuSign recommends that all applications use Connect instead of polling the DocuSign Signature Service. This section provides information about Connect configuration and logging. 

      For more information about Connect, see [DocuSign Connect](https://developers.docusign.com/esign-rest-api/guides/connect) and [Custom Connect Configuration](https://support.docusign.com/guides/ndse-admin-guide-custom-connect-configuration-htm).
  - description: |-
      Use the Templates category to manage your account's templates.

      This section shows you how to perform the following tasks:

      * Create, list, get, update, and delete templates.
      * Manage the notification and group sharing settings for templates.
      * Fetch and rotate pages from a document used by a template.

      You can create templates either programmatically or through the DocuSign web interface and then used by your application.
    name: Templates
    summary: Template creation and management
  - description: |-
      Use the Signing Group category to manage signing groups that allow anyone in the group to sign a document. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.

      This category shows account administrators how to create a signing group and manage the users in the group.

      **Note**: To create and manage signing groups, you must be an account administrator.

      For more information about this topic, see [Signing Groups](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).
    name: SigningGroups
    summary: Send a signing request to a group of potential signers.
  - description: |-
      Use the Folders category to manage envelopes in your folders. 

      You can list the folder contents and move envelopes between folders.
    name: Folders
    summary: Folders for completed envelopes
  - description: |
      Custom Tabs enable accounts to have one or more pre-configured (custom) tabs. Custom tabs save time when users are tagging documents since the users don't have to manually set the tabs' parameters.

      This category enables custom tabs to be managed programmatically, including creation, deletion, etc. 
    name: CustomTabs
    summary: Custom tabs
  - description: |-
      Use the Cloud Storage category to list the user's cloud storage document contents.

      It is also used to manage the user's authentication/accounts with cloud storage service providers.
    name: CloudStorage
    summary: This section shows you how to manage your cloud storage providers and users.
  - description: |-
      Use the Users category to manage the users in your accounts.

      You can:

      * Set custom user settings.
      * Manage a users profile.
      * Add delete users.
      * Add and delete the intials and signature images for a user.
    name: Users
    summary: User management
  - description: |-
      Use the User Groups category to manage your permissions groups.

      You can:

      * Create and delete groups.
      * Add users to, and delete users from, your groups.
      * Manage the brand information associated with a group.
    name: UserGroups
    summary: Group users for common permissions and branding
  - description: Use the BulkEnvelopes category to manage the sending of envelopes to multiple recipients.
    name: BulkEnvelopes
    summary: Bulk envelopes
  - description: |+
      Use the Account category for various account management tasks including:

      * Programmatically creating and deleting accounts.
      * Getting information about an account and its capabilities.
      * Branding the account with custom colors, message text, and more.
      * Account charges.

      The Accounts category also includes end points for listing the recipient names associated with an email address that was used by the account. For example, a single email address is often shared by multiple members of a family.


    name: Accounts
    summary: Account management
  - description: |-
      Use the Billing category to manage the following billing related tasks:

      * Retrieve and update billing plan information.
      * Retrieve invoices.
      * Retrieve and update payment information.
    name: Billing
    summary: Invoices
  - description: |-
      The Diagnostics category provides miscellaneous end points.

      They include:
      * Requesting and managing the API call-logging feature. (Perfect for debugging your app!)
      * Getting information on the API's resources and versions.
    name: Diagnostics
    summary: Diagnostics and request logging
  - description: The PowerForms category enables you to create and manage PowerForms that you can use for self service and email forms.
    name: PowerForms
    summary: The PowerForms category provides methods that enable you to create and manage fillable forms.
  - description: |-
      A workspace is a collaborative space for sharing documents and managing workflows. A workspace has a single owner who must be a DocuSign user. The owner can invite others to the workspace as collaborators. Individuals who are not DocuSign users must create a DocuSign account to join a workspace as a collaborator.
       
      You can create an envelope directly from a workspace.

      Workspaces store the following information:

      - **Files**: Files uploaded to a workspace for storage or reuse.
      - **Documents**: A document is a component of a transaction, template, or workspace. When a file is added to a transaction, template, or workspace, it is copied as a document. Each document in a workspace has a single owner.
      - **Templates**: A set of documents that you can use to create a transaction or a workspace.
      - **Transactions**: A transaction is a series of workflow events related to one or more documents. These events route the documents to one or more individuals for the purposes of doing business. Each transaction has a single owner (the sender).

      **Note**: Documents in a template are not individually listed as files.
    name: Workspaces
    summary: A DocuSign workspace is a collaboration area for sharing files and data.
  - description: This category includes resources for managing payment gateways. Payment information is added to envelopes via methods in the Envelopes category.
    name: Payments
    summary: Manage Payments
  - description: |-
      Email archives enable DocuSign partners and other multi-account customers to easily archive emails sent through DocuSign. The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.

      For more information, see [Email Archive Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-email-archive-configuration).

      **Note**: This feature is only available for certain account plans and must be enabled by DocuSign.
    name: EmailArchive
    summary: This section shows you how to set and manage the BCC email addresses that you want to use to archive the emails that DocSign sends.
  - description: |
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.
    name: Notary
    summary: |
      DocuSign eNotary makes the notarization process fully digital
      for senders, signers, and notaries.
      It enables a notary public to act as an in-person witness
      to electronic signing of documents.
