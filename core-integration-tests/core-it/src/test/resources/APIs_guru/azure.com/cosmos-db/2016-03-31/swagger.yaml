swagger: '2.0'
schemes:
  - https
host: management.azure.com
info:
  description: Azure Cosmos DB Database Service Resource Provider REST API
  title: Cosmos DB
  version: '2016-03-31'
  x-apisguru-categories:
    - cloud
  x-logo:
    url: 'https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png'
  x-origin:
    - format: swagger
      url: 'https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2016-03-31/cosmos-db.json'
      version: '2.0'
  x-preferred: false
  x-providerName: azure.com
  x-serviceName: cosmos-db
  x-tags:
    - Azure
    - Microsoft
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  azure_auth:
    authorizationUrl: 'https://login.microsoftonline.com/common/oauth2/authorize'
    description: Azure Active Directory OAuth2 Flow
    flow: implicit
    scopes:
      user_impersonation: Impersonate your user account
    type: oauth2
security:
  - azure_auth:
      - user_impersonation
parameters:
  accountNameParameter:
    description: Cosmos DB database account name.
    in: path
    maxLength: 50
    minLength: 3
    name: accountName
    pattern: '^[a-z0-9]+(-[a-z0-9]+)*'
    required: true
    type: string
    x-ms-parameter-location: method
  apiVersionParameter:
    description: Version of the API to be used with the client request. The current version is 2015-04-08.
    in: query
    name: api-version
    required: true
    type: string
  collectionNameParameter:
    description: Cosmos DB collection name.
    in: path
    name: collectionName
    required: true
    type: string
    x-ms-parameter-location: method
  collectionRidParameter:
    description: Cosmos DB collection rid.
    in: path
    name: collectionRid
    required: true
    type: string
    x-ms-parameter-location: method
  containerNameParameter:
    description: Cosmos DB container name.
    in: path
    name: containerName
    required: true
    type: string
    x-ms-parameter-location: method
  databaseNameParameter:
    description: Cosmos DB database name.
    in: path
    name: databaseName
    required: true
    type: string
    x-ms-parameter-location: method
  databaseRidParameter:
    description: Cosmos DB database rid.
    in: path
    name: databaseRid
    required: true
    type: string
    x-ms-parameter-location: method
  filterParameter:
    description: 'An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.'
    in: query
    name: $filter
    required: true
    type: string
    x-ms-parameter-location: method
  graphNameParameter:
    description: Cosmos DB graph name.
    in: path
    name: graphName
    required: true
    type: string
    x-ms-parameter-location: method
  keyspaceNameParameter:
    description: Cosmos DB keyspace name.
    in: path
    name: keyspaceName
    required: true
    type: string
    x-ms-parameter-location: method
  partitionKeyRangeIdParameter:
    description: Partition Key Range Id for which to get data.
    in: path
    name: partitionKeyRangeId
    required: true
    type: string
    x-ms-parameter-location: method
  regionParameter:
    description: 'Cosmos DB region, with spaces between words and each word capitalized.'
    in: path
    name: region
    required: true
    type: string
    x-ms-parameter-location: method
  resourceGroupNameParameter:
    description: Name of an Azure resource group.
    in: path
    maxLength: 90
    minLength: 1
    name: resourceGroupName
    pattern: '^[-\w\._\(\)]+$'
    required: true
    type: string
    x-ms-parameter-location: method
  sourceRegionParameter:
    description: 'Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.'
    in: path
    name: sourceRegion
    required: true
    type: string
    x-ms-parameter-location: method
  subscriptionIdParameter:
    description: Azure subscription ID.
    in: path
    name: subscriptionId
    required: true
    type: string
  tableNameParameter:
    description: Cosmos DB table name.
    in: path
    name: tableName
    required: true
    type: string
    x-ms-parameter-location: method
  targetRegionParameter:
    description: 'Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.'
    in: path
    name: targetRegion
    required: true
    type: string
    x-ms-parameter-location: method
  usageFilterParameter:
    description: 'An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).'
    in: query
    name: $filter
    required: false
    type: string
    x-ms-parameter-location: method
paths:
  '/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}':
    head:
      description: 'Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the ''-'' character, and must be between 3 and 50 characters.'
      operationId: DatabaseAccounts_CheckNameExists
      parameters:
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: OK. The account name is valid but is already in use.
        '404':
          description: Not Found. The account name is available and valid.
      x-ms-examples:
        CosmosDBDatabaseAccountCheckNameExists:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
          responses:
            '200': {}
            '404': {}
  /providers/Microsoft.DocumentDB/operations:
    get:
      description: Lists all of the available Cosmos DB Resource Provider operations.
      operationId: Operations_List
      parameters:
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OperationListResult'
      tags:
        - Operations
      x-ms-examples:
        CosmosDBOperationsList:
          parameters:
            api-version: '2016-03-31'
          responses:
            '200':
              body:
                value:
                  - display:
                      Description: description
                      Operation: operationName
                      Provider: providerName
                      Resource: resourceName
                    name: operationName
      x-ms-pageable:
        nextLinkName: nextLink
  '/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts':
    get:
      description: Lists all the Azure Cosmos DB database accounts available under the subscription.
      operationId: DatabaseAccounts_List
      parameters:
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/subscriptionIdParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountsListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountList:
          parameters:
            api-version: '2016-03-31'
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                    kind: GlobalDocumentDB
                    location: West US
                    name: ddb1
                    properties:
                      consistencyPolicy:
                        defaultConsistencyLevel: Session
                        maxIntervalInSeconds: 5
                        maxStalenessPrefix: 100
                      databaseAccountOfferType: Standard
                      documentEndpoint: 'https://ddb1.documents.azure.com:443/'
                      failoverPolicies:
                        - failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                      ipRangeFilter: ''
                      provisioningState: Succeeded
                      readLocations:
                        - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                          failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                          provisioningState: Succeeded
                      writeLocations:
                        - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                          failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                          provisioningState: Succeeded
                    tags: {}
                    type: Microsoft.DocumentDB/databaseAccounts
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts':
    get:
      description: Lists all the Azure Cosmos DB database accounts available under the given resource group.
      operationId: DatabaseAccounts_ListByResourceGroup
      parameters:
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/subscriptionIdParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountsListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountListByResourceGroup:
          parameters:
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                    kind: GlobalDocumentDB
                    location: West US
                    name: ddb1
                    properties:
                      consistencyPolicy:
                        defaultConsistencyLevel: Session
                        maxIntervalInSeconds: 5
                        maxStalenessPrefix: 100
                      databaseAccountOfferType: Standard
                      documentEndpoint: 'https://ddb1.documents.azure.com:443/'
                      failoverPolicies:
                        - failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                      ipRangeFilter: ''
                      provisioningState: Succeeded
                      readLocations:
                        - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                          failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                          provisioningState: Succeeded
                      writeLocations:
                        - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                          failoverPriority: 0
                          id: ddb1-eastus
                          locationName: East US
                          provisioningState: Succeeded
                    tags: {}
                    type: Microsoft.DocumentDB/databaseAccounts
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}':
    delete:
      description: Deletes an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Delete
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The database account delete operation will complete asynchronously.
        '204':
          description: The specified account does not exist in the subscription.
      x-ms-examples:
        CosmosDBDatabaseAccountDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Retrieves the properties of an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Get
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The database account properties were retrieved successfully.
          schema:
            $ref: '#/definitions/DatabaseAccount'
      x-ms-examples:
        CosmosDBDatabaseAccountGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                kind: GlobalDocumentDB
                location: West US
                name: ddb1
                properties:
                  consistencyPolicy:
                    defaultConsistencyLevel: Session
                    maxIntervalInSeconds: 5
                    maxStalenessPrefix: 100
                  databaseAccountOfferType: Standard
                  documentEndpoint: 'https://ddb1.documents.azure.com:443/'
                  failoverPolicies:
                    - failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                  ipRangeFilter: ''
                  isVirtualNetworkFilterEnabled: false
                  provisioningState: Succeeded
                  readLocations:
                    - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                      failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                      provisioningState: Succeeded
                  virtualNetworkRules: []
                  writeLocations:
                    - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                      failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                      provisioningState: Succeeded
                tags: {}
                type: Microsoft.DocumentDB/databaseAccounts
    patch:
      description: Patches the properties of an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Patch
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The tags parameter to patch for the current database account.
          in: body
          name: updateParameters
          required: true
          schema:
            $ref: '#/definitions/DatabaseAccountPatchParameters'
      responses:
        '200':
          description: The properties of the database account were patched successfully.
          schema:
            $ref: '#/definitions/DatabaseAccount'
      x-ms-examples:
        CosmosDBDatabaseAccountPatch:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            updateParameters:
              tags:
                dept: finance
          responses:
            '200':
              body:
                id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                kind: GlobalDocumentDB
                location: West US
                name: ddb1
                properties:
                  consistencyPolicy:
                    defaultConsistencyLevel: Session
                    maxIntervalInSeconds: 5
                    maxStalenessPrefix: 100
                  databaseAccountOfferType: Standard
                  documentEndpoint: 'https://ddb1.documents.azure.com:443/'
                  failoverPolicies:
                    - failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                  ipRangeFilter: ''
                  provisioningState: Succeeded
                  readLocations:
                    - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                      failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                      provisioningState: Succeeded
                  writeLocations:
                    - documentEndpoint: 'https://ddb1-eastus.documents.azure.com:443/'
                      failoverPriority: 0
                      id: ddb1-eastus
                      locationName: East US
                      provisioningState: Succeeded
                tags: {}
                type: Microsoft.DocumentDB/databaseAccounts
      x-ms-long-running-operation: true
    put:
      description: Creates or updates an Azure Cosmos DB database account.
      operationId: DatabaseAccounts_CreateOrUpdate
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current database account.
          in: body
          name: createUpdateParameters
          required: true
          schema:
            $ref: '#/definitions/DatabaseAccountCreateUpdateParameters'
      responses:
        '200':
          description: The database account create or update operation will complete asynchronously.
          schema:
            $ref: '#/definitions/DatabaseAccount'
      x-ms-examples:
        CosmosDBDatabaseAccountCreateMax:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateParameters:
              kind: GlobalDocumentDB
              location: westus
              properties:
                consistencyPolicy:
                  defaultConsistencyLevel: BoundedStaleness
                  maxIntervalInSeconds: 10
                  maxStalenessPrefix: 200
                databaseAccountOfferType: Standard
                ipRangeFilter: 10.10.10.10
                isVirtualNetworkFilterEnabled: true
                locations:
                  - failoverPriority: 0
                    isZoneRedundant: false
                    locationName: southcentralus
                  - failoverPriority: 1
                    isZoneRedundant: false
                    locationName: eastus
                virtualNetworkRules:
                  - id: /subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1
                    ignoreMissingVNetServiceEndpoint: false
              tags: {}
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                kind: GlobalDocumentDB
                location: West US
                name: ddb1
                properties:
                  consistencyPolicy:
                    defaultConsistencyLevel: BoundedStaleness
                    maxIntervalInSeconds: 10
                    maxStalenessPrefix: 200
                  databaseAccountOfferType: Standard
                  failoverPolicies:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      locationName: South Central US
                    - failoverPriority: 1
                      id: ddb1-eastus
                      locationName: East US
                  ipRangeFilter: 10.10.10.10
                  isVirtualNetworkFilterEnabled: true
                  provisioningState: Initializing
                  readLocations:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      isZoneRedundant: false
                      locationName: South Central US
                      provisioningState: Initializing
                    - failoverPriority: 1
                      id: ddb1-eastus
                      isZoneRedundant: false
                      locationName: East US
                      provisioningState: Initializing
                  virtualNetworkRules:
                    - id: /subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1
                  writeLocations:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      isZoneRedundant: false
                      locationName: South Central US
                      provisioningState: Initializing
                tags: {}
                type: Microsoft.DocumentDB/databaseAccounts
        CosmosDBDatabaseAccountCreateMin:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateParameters:
              location: westus
              properties:
                databaseAccountOfferType: Standard
                locations:
                  - failoverPriority: 0
                    isZoneRedundant: false
                    locationName: southcentralus
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                kind: GlobalDocumentDB
                location: West US
                name: ddb1
                properties:
                  consistencyPolicy:
                    defaultConsistencyLevel: Session
                    maxIntervalInSeconds: 5
                    maxStalenessPrefix: 100
                  databaseAccountOfferType: Standard
                  failoverPolicies:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      locationName: South Central US
                  ipRangeFilter: ''
                  provisioningState: Initializing
                  readLocations:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      isZoneRedundant: false
                      locationName: South Central US
                      provisioningState: Initializing
                  writeLocations:
                    - failoverPriority: 0
                      id: ddb1-southcentralus
                      isZoneRedundant: false
                      locationName: South Central US
                      provisioningState: Initializing
                tags: {}
                type: Microsoft.DocumentDB/databaseAccounts
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces':
    get:
      description: Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListCassandraKeyspaces
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Cassandra keyspace properties were retrieved successfully.
          schema:
            $ref: '#/definitions/CassandraKeyspaceListResult'
      x-ms-examples:
        CosmosDBCassandraKeyspaceList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: keyspaceName
                    name: keyspaceName
                    properties:
                      id: keyspaceName
                    type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}':
    delete:
      description: Deletes an existing Azure Cosmos DB Cassandra keyspace.
      operationId: DatabaseAccounts_DeleteCassandraKeyspace
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The Cassandra keyspace delete operation will complete asynchronously.
        '204':
          description: The Cassandra keyspace delete operation was completed successfully.
      x-ms-examples:
        CosmosDBCassandraKeyspaceDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetCassandraKeyspace
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Cassandra keyspace property was retrieved successfully.
          schema:
            $ref: '#/definitions/CassandraKeyspace'
      x-ms-examples:
        CosmosDBCassandraKeyspaceGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: keyspaceName
                name: keyspaceName
                properties:
                  id: keyspaceName
                type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces
    put:
      description: Create or update an Azure Cosmos DB Cassandra keyspace
      operationId: DatabaseAccounts_CreateUpdateCassandraKeyspace
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current Cassandra keyspace.
          in: body
          name: createUpdateCassandraKeyspaceParameters
          required: true
          schema:
            $ref: '#/definitions/CassandraKeyspaceCreateUpdateParameters'
      responses:
        '200':
          description: The Cassandra keyspace create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/CassandraKeyspace'
        '202':
          description: The Cassandra keyspace create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBCassandraKeyspaceCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateCassandraKeyspaceParameters:
              properties:
                options: {}
                resource:
                  id: keyspaceName
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: keyspaceName
                name: keyspaceName
                properties:
                  id: keyspaceName
                type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/settings/throughput':
    get:
      description: Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetCassandraKeyspaceThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the Cassandra Keyspace was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBCassandraKeyspaceThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
      operationId: DatabaseAccounts_UpdateCassandraKeyspaceThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current Cassandra Keyspace.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the Cassandra Keyspace update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the Cassandra Keyspace update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBCassandraKeyspaceThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables':
    get:
      description: Lists the Cassandra table under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListCassandraTables
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Cassandra table properties were retrieved successfully.
          schema:
            $ref: '#/definitions/CassandraTableListResult'
      x-ms-examples:
        CosmosDBCassandraTableList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: tableName
                    name: tableName
                    properties:
                      defaultTtl: 100
                      id: tableName
                      schema:
                        clusterKeys:
                          - name: columnA
                            orderBy: Asc
                        columns:
                          - name: columnA
                            type: Ascii
                        partitionKeys:
                          - name: columnA
                    type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces/tables
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}':
    delete:
      description: Deletes an existing Azure Cosmos DB Cassandra table.
      operationId: DatabaseAccounts_DeleteCassandraTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The Cassandra table delete operation will complete asynchronously.
        '204':
          description: The Cassandra table delete operation was completed successfully.
      x-ms-examples:
        CosmosDBCassandraTableDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the Cassandra table under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetCassandraTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Cassandra table property was retrieved successfully.
          schema:
            $ref: '#/definitions/CassandraTable'
      x-ms-examples:
        CosmosDBCassandraTableGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                id: tableName
                name: tableName
                properties:
                  defaultTtl: 100
                  id: tableName
                  schema:
                    clusterKeys:
                      - name: columnA
                        orderBy: Asc
                    columns:
                      - name: columnA
                        type: Ascii
                    partitionKeys:
                      - name: columnA
                type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces/tables
    put:
      description: Create or update an Azure Cosmos DB Cassandra Table
      operationId: DatabaseAccounts_CreateUpdateCassandraTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current Cassandra Table.
          in: body
          name: createUpdateCassandraTableParameters
          required: true
          schema:
            $ref: '#/definitions/CassandraTableCreateUpdateParameters'
      responses:
        '200':
          description: The Cassandra Table create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/CassandraTable'
        '202':
          description: The Cassandra Table create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBCassandraTableCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateCassandraTableParameters:
              properties:
                options: {}
                resource:
                  defaultTtl: 100
                  id: tableName
                  schema:
                    clusterKeys:
                      - name: columnA
                        orderBy: Asc
                    columns:
                      - name: columnA
                        type: Ascii
                    partitionKeys:
                      - name: columnA
            keyspaceName: tableName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                id: tableName
                name: tableName
                properties:
                  defaultTtl: 100
                  id: tableName
                  schema:
                    clusterKeys:
                      - name: columnA
                        orderBy: Asc
                    columns:
                      - name: columnA
                        type: Ascii
                    partitionKeys:
                      - name: columnA
                type: Microsoft.DocumentDB/databaseAccounts/apis/keyspaces/tables
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/cassandra/keyspaces/{keyspaceName}/tables/{tableName}/settings/throughput':
    get:
      description: Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetCassandraTableThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the Cassandra table was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBCassandraTableThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB Cassandra table
      operationId: DatabaseAccounts_UpdateCassandraTableThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/keyspaceNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current Cassandra table.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the Cassandra table update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the Cassandra table update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBCassandraTableThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyspaceName: keyspaceName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases':
    get:
      description: Lists the Gremlin databases under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListGremlinDatabases
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Gremlin database properties were retrieved successfully.
          schema:
            $ref: '#/definitions/GremlinDatabaseListResult'
      x-ms-examples:
        CosmosDBGremlinDatabaseList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: databaseName
                    name: databaseName
                    properties:
                      _etag: '"00000a00-0000-0000-0000-56672f920000"'
                      _rid: CqNBAA==
                      _ts: 1449602962
                      id: databaseName
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}':
    delete:
      description: Deletes an existing Azure Cosmos DB Gremlin database.
      operationId: DatabaseAccounts_DeleteGremlinDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The Gremlin database delete operation will complete asynchronously.
        '204':
          description: The Gremlin database delete operation was completed successfully.
      x-ms-examples:
        CosmosDBGremlinDatabaseDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetGremlinDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Gremlin database property was retrieved successfully.
          schema:
            $ref: '#/definitions/GremlinDatabase'
      x-ms-examples:
        CosmosDBGremlinDatabaseGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: databaseName
                name: databaseName
                properties:
                  _etag: '"00000a00-0000-0000-0000-56672f920000"'
                  _rid: CqNBAA==
                  _ts: 1449602962
                  id: databaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
    put:
      description: Create or update an Azure Cosmos DB Gremlin database
      operationId: DatabaseAccounts_CreateUpdateGremlinDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current Gremlin database.
          in: body
          name: createUpdateGremlinDatabaseParameters
          required: true
          schema:
            $ref: '#/definitions/GremlinDatabaseCreateUpdateParameters'
      responses:
        '200':
          description: The Gremlin database create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/GremlinDatabase'
        '202':
          description: The Gremlin database create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBGremlinDatabaseCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateGremlinDatabaseParameters:
              properties:
                options: {}
                resource:
                  id: databaseName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: databaseName
                name: databaseName
                properties:
                  _etag: '"00000a00-0000-0000-0000-56672f920000"'
                  _rid: CqNBAA==
                  _ts: 1449602962
                  id: databaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs':
    get:
      description: Lists the Gremlin graph under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListGremlinGraphs
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Gremlin graph properties were retrieved successfully.
          schema:
            $ref: '#/definitions/GremlinGraphListResult'
      x-ms-examples:
        CosmosDBGremlinGraphList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: testgrf
                    name: testgrf
                    properties:
                      _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                      _rid: PD5DALigDgw=
                      _ts: 1459200611
                      conflictResolutionPolicy:
                        conflictResolutionPath: /path
                        mode: LastWriterWins
                      defaultTtl: 100
                      id: testgrf
                      indexingPolicy:
                        automatic: true
                        excludedPaths: []
                        includedPaths:
                          - indexes:
                              - dataType: String
                                kind: Range
                                precision: -1
                              - dataType: Number
                                kind: Range
                                precision: -1
                            path: /*
                        indexingMode: Consistent
                      partitionKey:
                        kind: Hash
                        paths:
                          - /AccountNumber
                      uniqueKeyPolicy:
                        uniqueKeys:
                          - paths:
                              - /testPath
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}':
    delete:
      description: Deletes an existing Azure Cosmos DB Gremlin graph.
      operationId: DatabaseAccounts_DeleteGremlinGraph
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/graphNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The Gremlin graph delete operation will complete asynchronously.
        '204':
          description: The Gremlin graph delete operation was completed successfully.
      x-ms-examples:
        CosmosDBGremlinGraphDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            graphName: graphName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the Gremlin graph under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetGremlinGraph
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/graphNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Gremlin graph property was retrieved successfully.
          schema:
            $ref: '#/definitions/GremlinGraph'
      x-ms-examples:
        CosmosDBGremlinGraphGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            graphName: graphName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                id: graphName
                name: graphName
                properties:
                  _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                  _rid: PD5DALigDgw=
                  _ts: 1459200611
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: graphName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs
    put:
      description: Create or update an Azure Cosmos DB Gremlin graph
      operationId: DatabaseAccounts_CreateUpdateGremlinGraph
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/graphNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current Gremlin graph.
          in: body
          name: createUpdateGremlinGraphParameters
          required: true
          schema:
            $ref: '#/definitions/GremlinGraphCreateUpdateParameters'
      responses:
        '200':
          description: The Gremlin graph create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/GremlinGraph'
        '202':
          description: The Gremlin graph create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBGremlinGraphCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateGremlinGraphParameters:
              properties:
                options: {}
                resource:
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: graphName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
            databaseName: databaseName
            graphName: graphName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: graphName
                name: graphName
                properties:
                  _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                  _rid: PD5DALigDgw=
                  _ts: 1459200611
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: graphName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/graphs/{graphName}/settings/throughput':
    get:
      description: Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetGremlinGraphThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/graphNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the Gremlin graph was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBGremlinGraphThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            graphName: graphName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB Gremlin graph
      operationId: DatabaseAccounts_UpdateGremlinGraphThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/graphNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current Gremlin graph.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the Gremlin graph update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the Gremlin graph update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBGremlinGraphThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            graphName: graphName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/gremlin/databases/{databaseName}/settings/throughput':
    get:
      description: Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetGremlinDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the Gremlin database was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBGremlinDatabaseThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB Gremlin database
      operationId: DatabaseAccounts_UpdateGremlinDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current Gremlin database.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the Gremlin database update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the Gremlin database update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBGremlinDatabaseThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases':
    get:
      description: Lists the MongoDB databases under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListMongoDBDatabases
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The MongoDB database properties were retrieved successfully.
          schema:
            $ref: '#/definitions/MongoDBDatabaseListResult'
      x-ms-examples:
        CosmosDBMongoDBDatabaseList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: databaseName
                    name: databaseName
                    properties:
                      id: databaseName
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}':
    delete:
      description: Deletes an existing Azure Cosmos DB MongoDB database.
      operationId: DatabaseAccounts_DeleteMongoDBDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The MongoDB database delete operation will complete asynchronously.
        '204':
          description: The MongoDB database delete operation was completed successfully.
      x-ms-examples:
        CosmosDBMongoDBDatabaseDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetMongoDBDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The MongoDB database property was retrieved successfully.
          schema:
            $ref: '#/definitions/MongoDBDatabase'
      x-ms-examples:
        CosmosDBMongoDBDatabaseGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: databaseName
                name: databaseName
                properties:
                  id: databaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
    put:
      description: Create or updates Azure Cosmos DB MongoDB database
      operationId: DatabaseAccounts_CreateUpdateMongoDBDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current MongoDB database.
          in: body
          name: createUpdateMongoDBDatabaseParameters
          required: true
          schema:
            $ref: '#/definitions/MongoDBDatabaseCreateUpdateParameters'
      responses:
        '200':
          description: The MongoDB database create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/MongoDBDatabase'
        '202':
          description: The MongoDB database create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBMongoDBDatabaseCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateMongoDBDatabaseParameters:
              properties:
                options: {}
                resource:
                  id: updatedDatabaseName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: updatedDatabaseName
                name: updatedDatabaseName
                properties:
                  id: updatedDatabaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections':
    get:
      description: Lists the MongoDB collection under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListMongoDBCollections
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The MongoDB collection properties were retrieved successfully.
          schema:
            $ref: '#/definitions/MongoDBCollectionListResult'
      x-ms-examples:
        CosmosDBMongoDBCollectionList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: testcoll
                    name: testcoll
                    properties:
                      id: testcoll
                      indexes:
                        - key:
                            keys:
                              - testKey
                          options:
                            expireAfterSeconds: 100
                            unique: true
                      shardKey:
                        testKey: Hash
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases/collections
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}':
    delete:
      description: Deletes an existing Azure Cosmos DB MongoDB Collection.
      operationId: DatabaseAccounts_DeleteMongoDBCollection
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/collectionNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The MongoDB collection delete operation will complete asynchronously.
        '204':
          description: The MongoDB collection delete operation was completed successfully.
      x-ms-examples:
        CosmosDBMongoDBCollectionDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionName: collectionName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the MongoDB collection under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetMongoDBCollection
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/collectionNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The MongoDB collection property was retrieved successfully.
          schema:
            $ref: '#/definitions/MongoDBCollection'
      x-ms-examples:
        CosmosDBMongoDBCollectionGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionName: collectionName
            databaseName: databaseName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                id: collectionName
                name: collectionName
                properties:
                  id: testcoll
                  indexes:
                    - key:
                        keys:
                          - testKey
                      options:
                        expireAfterSeconds: 100
                        unique: true
                  shardKey:
                    testKey: Hash
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases/collections
    put:
      description: Create or update an Azure Cosmos DB MongoDB Collection
      operationId: DatabaseAccounts_CreateUpdateMongoDBCollection
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/collectionNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current MongoDB Collection.
          in: body
          name: createUpdateMongoDBCollectionParameters
          required: true
          schema:
            $ref: '#/definitions/MongoDBCollectionCreateUpdateParameters'
      responses:
        '200':
          description: The MongoDB Collection create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/MongoDBCollection'
        '202':
          description: The MongoDB Collection create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBMongoDBCollectionCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionName: collectionName
            createUpdateMongoDBCollectionParameters:
              properties:
                options: {}
                resource:
                  id: testcoll
                  indexes:
                    - key:
                        keys:
                          - testKey
                      options:
                        expireAfterSeconds: 100
                        unique: true
                  shardKey:
                    testKey: Hash
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: collectionName
                name: collectionName
                properties:
                  id: testcoll
                  indexes:
                    - key:
                        keys:
                          - testKey
                      options:
                        expireAfterSeconds: 100
                        unique: true
                  shardKey:
                    testKey: Hash
                type: Microsoft.DocumentDB/databaseAccounts/apis/collection
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/collections/{collectionName}/settings/throughput':
    get:
      description: Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetMongoDBCollectionThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/collectionNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the MongoDB collection was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBMongoDBCollectionThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionName: collectionName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update the RUs per second of an Azure Cosmos DB MongoDB collection
      operationId: DatabaseAccounts_UpdateMongoDBCollectionThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/collectionNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current MongoDB collection.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the MongoDB collection update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the MongoDB collection update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBMongoDBCollectionThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionName: collectionName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases/{databaseName}/settings/throughput':
    get:
      description: Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetMongoDBDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the MongoDB database was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBMongoDBDatabaseThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of the an Azure Cosmos DB MongoDB database
      operationId: DatabaseAccounts_UpdateMongoDBDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The RUs per second of the parameters to provide for the current MongoDB database.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the MongoDB database update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the MongoDB database update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBMongoDBDatabaseThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases':
    get:
      description: Lists the SQL databases under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListSqlDatabases
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The SQL database properties were retrieved successfully.
          schema:
            $ref: '#/definitions/SqlDatabaseListResult'
      x-ms-examples:
        CosmosDBSqlDatabaseList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: databaseName
                    name: databaseName
                    properties:
                      _colls: colls/
                      _etag: '"00000a00-0000-0000-0000-56672f920000"'
                      _rid: CqNBAA==
                      _ts: 1449602962
                      _users: users/
                      id: databaseName
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}':
    delete:
      description: Deletes an existing Azure Cosmos DB SQL database.
      operationId: DatabaseAccounts_DeleteSqlDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The SQL database delete operation will complete asynchronously.
        '204':
          description: The SQL database delete operation was completed successfully.
      x-ms-examples:
        CosmosDBSqlDatabaseDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetSqlDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The SQL database property was retrieved successfully.
          schema:
            $ref: '#/definitions/SqlDatabase'
      x-ms-examples:
        CosmosDBSqlDatabaseGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: databaseName
                name: databaseName
                properties:
                  _colls: colls/
                  _etag: '"00000a00-0000-0000-0000-56672f920000"'
                  _rid: CqNBAA==
                  _ts: 1449602962
                  _users: users/
                  id: databaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
    put:
      description: Create or update an Azure Cosmos DB SQL database
      operationId: DatabaseAccounts_CreateUpdateSqlDatabase
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current SQL database.
          in: body
          name: createUpdateSqlDatabaseParameters
          required: true
          schema:
            $ref: '#/definitions/SqlDatabaseCreateUpdateParameters'
      responses:
        '200':
          description: The SQL database create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/SqlDatabase'
        '202':
          description: The SQL database create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBSqlDatabaseCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateSqlDatabaseParameters:
              properties:
                options: {}
                resource:
                  id: databaseName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: databaseName
                name: databaseName
                properties:
                  _etag: '"00000a00-0000-0000-0000-56672f920000"'
                  _rid: CqNBAA==
                  _ts: 1449602962
                  id: databaseName
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers':
    get:
      description: Lists the SQL container under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListSqlContainers
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The SQL container properties were retrieved successfully.
          schema:
            $ref: '#/definitions/SqlContainerListResult'
      x-ms-examples:
        CosmosDBSqlContainerList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: testctn
                    name: testctn
                    properties:
                      _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                      _rid: PD5DALigDgw=
                      _ts: 1459200611
                      conflictResolutionPolicy:
                        conflictResolutionPath: /path
                        mode: LastWriterWins
                      defaultTtl: 100
                      id: testctn
                      indexingPolicy:
                        automatic: true
                        excludedPaths: []
                        includedPaths:
                          - indexes:
                              - dataType: String
                                kind: Range
                                precision: -1
                              - dataType: Number
                                kind: Range
                                precision: -1
                            path: /*
                        indexingMode: Consistent
                      partitionKey:
                        kind: Hash
                        paths:
                          - /AccountNumber
                      uniqueKeyPolicy:
                        uniqueKeys:
                          - paths:
                              - /testPath
                    type: Microsoft.DocumentDB/databaseAccounts/apis/databases/containers
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}':
    delete:
      description: Deletes an existing Azure Cosmos DB SQL container.
      operationId: DatabaseAccounts_DeleteSqlContainer
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/containerNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The SQL container delete operation will complete asynchronously.
        '204':
          description: The SQL container delete operation was completed successfully.
      x-ms-examples:
        CosmosDBSqlContainerDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            containerName: containerName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL container under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetSqlContainer
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/containerNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The SQL container property was retrieved successfully.
          schema:
            $ref: '#/definitions/SqlContainer'
      x-ms-examples:
        CosmosDBSqlContainerGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            containerName: containerName
            databaseName: databaseName
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                id: containerName
                name: containerName
                properties:
                  _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                  _rid: PD5DALigDgw=
                  _ts: 1459200611
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: containerName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases/containers
    put:
      description: Create or update an Azure Cosmos DB SQL container
      operationId: DatabaseAccounts_CreateUpdateSqlContainer
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/containerNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current SQL container.
          in: body
          name: createUpdateSqlContainerParameters
          required: true
          schema:
            $ref: '#/definitions/SqlContainerCreateUpdateParameters'
      responses:
        '200':
          description: The SQL container create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/SqlContainer'
        '202':
          description: The SQL container create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBSqlContainerCreateUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            containerName: containerName
            createUpdateSqlContainerParameters:
              properties:
                options: {}
                resource:
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: containerName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                id: containerName
                name: containerName
                properties:
                  _etag: '"00005900-0000-0000-0000-56f9a2630000"'
                  _rid: PD5DALigDgw=
                  _ts: 1459200611
                  conflictResolutionPolicy:
                    conflictResolutionPath: /path
                    mode: LastWriterWins
                  defaultTtl: 100
                  id: containerName
                  indexingPolicy:
                    automatic: true
                    excludedPaths: []
                    includedPaths:
                      - indexes:
                          - dataType: String
                            kind: Range
                            precision: -1
                          - dataType: Number
                            kind: Range
                            precision: -1
                        path: /*
                    indexingMode: Consistent
                  partitionKey:
                    kind: Hash
                    paths:
                      - /AccountNumber
                  uniqueKeyPolicy:
                    uniqueKeys:
                      - paths:
                          - /testPath
                type: Microsoft.DocumentDB/databaseAccounts/apis/databases/containers
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/containers/{containerName}/settings/throughput':
    get:
      description: Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetSqlContainerThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/containerNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the SQL container was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBSqlContainerThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            containerName: containerName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB SQL container
      operationId: DatabaseAccounts_UpdateSqlContainerThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/containerNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the RUs per second of the current SQL container.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the SQL container update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the SQL container update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBSqlContainerThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            containerName: containerName
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/sql/databases/{databaseName}/settings/throughput':
    get:
      description: Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetSqlDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the SQL database was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBSqlDatabaseThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB SQL database
      operationId: DatabaseAccounts_UpdateSqlDatabaseThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the RUs per second of the current SQL database.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the SQL database update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the SQL database update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBSqlDatabaseThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseName: databaseName
            resourceGroupName: rg1
            subscriptionId: subid
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables':
    get:
      description: Lists the Tables under an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListTables
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Table properties were retrieved successfully.
          schema:
            $ref: '#/definitions/TableListResult'
      x-ms-examples:
        CosmosDBTableList:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rgName
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - id: tableName
                    name: tableName
                    properties:
                      id: tableName
                    type: Microsoft.DocumentDB/databaseAccounts/apis/tables
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}':
    delete:
      description: Deletes an existing Azure Cosmos DB Table.
      operationId: DatabaseAccounts_DeleteTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '202':
          description: The Table delete operation will complete asynchronously.
        '204':
          description: The Table delete operation was completed successfully.
      x-ms-examples:
        CosmosDBTableDelete:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
    get:
      description: Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The Table property was retrieved successfully.
          schema:
            $ref: '#/definitions/Table'
      x-ms-examples:
        CosmosDBTableGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                id: tableName
                name: tableName
                properties:
                  id: tableName
                type: Microsoft.DocumentDB/databaseAccounts/apis/tables
    put:
      description: Create or update an Azure Cosmos DB Table
      operationId: DatabaseAccounts_CreateUpdateTable
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the current Table.
          in: body
          name: createUpdateTableParameters
          required: true
          schema:
            $ref: '#/definitions/TableCreateUpdateParameters'
      responses:
        '200':
          description: The Table create or update operation was completed successfully.
          schema:
            $ref: '#/definitions/Table'
        '202':
          description: The Table create or update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBTableReplace:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            createUpdateTableParameters:
              properties:
                options: {}
                resource:
                  id: tableName
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                id: tableName
                name: tableName
                properties:
                  id: tableName
                type: Microsoft.DocumentDB/databaseAccounts/apis/tables
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/table/tables/{tableName}/settings/throughput':
    get:
      description: Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
      operationId: DatabaseAccounts_GetTableThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The RUs per second of the Table was retrieved successfully.
          schema:
            $ref: '#/definitions/Throughput'
      x-ms-examples:
        CosmosDBTableThroughputGet:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
          responses:
            '200':
              body:
                properties:
                  throughput: 400
    put:
      description: Update RUs per second of an Azure Cosmos DB Table
      operationId: DatabaseAccounts_UpdateTableThroughput
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/tableNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The parameters to provide for the RUs per second of the current Table.
          in: body
          name: updateThroughputParameters
          required: true
          schema:
            $ref: '#/definitions/ThroughputUpdateParameters'
      responses:
        '200':
          description: The RUs per second of the Table update operation was completed successfully.
          schema:
            $ref: '#/definitions/Throughput'
        '202':
          description: The RUs per second of the Table update operation will complete asynchronously.
      x-ms-examples:
        CosmosDBTableThroughputUpdate:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            tableName: tableName
            updateThroughputParameters:
              properties:
                resource:
                  throughput: 400
          responses:
            '200':
              body:
                properties:
                  throughput: 400
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions':
    get:
      description: Retrieves metric definitions for the given collection.
      operationId: Collection_ListMetricDefinitions
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The metric definitions for the collection were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricDefinitionsListResult'
      x-ms-examples:
        CosmosDBCollectionGetMetricDefinitions:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - metricAvailabilities:
                      - retention: P2D
                        timeGrain: PT5M
                      - retention: P14D
                        timeGrain: PT1H
                      - retention: P60D
                        timeGrain: P1D
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    primaryAggregationType: Total
                    resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given database account and collection.
      operationId: Collection_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The metrics for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricListResult'
      x-ms-examples:
        CosmosDBCollectionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Total Requests'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:03:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:08:55.2780000Z'
                        total: 0
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given partition key range id.
      operationId: PartitionKeyRangeId_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/partitionKeyRangeIdParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The partition-level metrics for the partition key range id were retrieved successfully.
          schema:
            $ref: '#/definitions/PartitionMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Max RUs Per Second'') and timeGrain eq duration''PT1M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T23:58:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            partitionKeyRangeId: '0'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T23:58:55.2780000Z'
                    metricValues:
                      - maximum: 5
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:54:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:55:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:56:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:57:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                    name:
                      localizedValue: Max RUs Per Second
                      value: Max RUs Per Second
                    partitionId: 00000000-0000-0000-0000-000000000000
                    partitionKeyRangeId: '0'
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT1M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics':
    get:
      description: 'Retrieves the metrics determined by the given filter for the given collection, split by partition.'
      operationId: CollectionPartition_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The partition-level metrics for the collection were retrieved successfully.
          schema:
            $ref: '#/definitions/PartitionMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Max RUs Per Second'') and timeGrain eq duration''PT1M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T23:58:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T23:58:55.2780000Z'
                    metricValues:
                      - maximum: 5
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:54:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:55:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:56:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:57:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                    name:
                      localizedValue: Max RUs Per Second
                      value: Max RUs Per Second
                    partitionId: 00000000-0000-0000-0000-000000000000
                    partitionKeyRangeId: '0'
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT1M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages':
    get:
      description: 'Retrieves the usages (most recent storage data) for the given collection, split by partition.'
      operationId: CollectionPartition_ListUsages
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/usageFilterParameter'
      responses:
        '200':
          description: 'The usages for the collection, per partition were retrieved successfully.'
          schema:
            $ref: '#/definitions/PartitionUsagesResult'
      x-ms-examples:
        CosmosDBCollectionGetUsages:
          parameters:
            $filter: $filter=name.value eq 'Partition Storage'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - currentValue: 0
                    limit: 10737418240
                    name:
                      localizedValue: Storage
                      value: Storage
                    partitionId: 00000000-0000-0000-0000-000000000000
                    partitionKeyRangeId: '0'
                    quotaPeriod: P1D
                    unit: Bytes
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages':
    get:
      description: Retrieves the usages (most recent storage data) for the given collection.
      operationId: Collection_ListUsages
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/usageFilterParameter'
      responses:
        '200':
          description: The usages for the collection were retrieved successfully.
          schema:
            $ref: '#/definitions/UsagesResult'
      x-ms-examples:
        CosmosDBCollectionGetUsages:
          parameters:
            $filter: $filter=name.value eq 'Storage'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - currentValue: 0
                    limit: 10737418240
                    name:
                      localizedValue: Storage
                      value: Storage
                    quotaPeriod: P1D
                    unit: Bytes
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions':
    get:
      description: Retrieves metric definitions for the given database.
      operationId: Database_ListMetricDefinitions
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The metric definitions for the database were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricDefinitionsListResult'
      x-ms-examples:
        CosmosDBDatabaseGetMetricDefinitions:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - metricAvailabilities:
                      - retention: P2D
                        timeGrain: PT5M
                      - retention: P14D
                        timeGrain: PT1H
                      - retention: P60D
                        timeGrain: P1D
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    primaryAggregationType: Total
                    resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given database account and database.
      operationId: Database_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The metrics for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricListResult'
      x-ms-examples:
        CosmosDBDatabaseGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Total Requests'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            databaseRid: rid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:03:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:08:55.2780000Z'
                        total: 0
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages':
    get:
      description: Retrieves the usages (most recent data) for the given database.
      operationId: Database_ListUsages
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/usageFilterParameter'
      responses:
        '200':
          description: The usages for the database were retrieved successfully.
          schema:
            $ref: '#/definitions/UsagesResult'
      x-ms-examples:
        CosmosDBDatabaseGetUsages:
          parameters:
            $filter: $filter=name.value eq 'Storage'
            accountName: ddb1
            api-version: '2016-03-31'
            databaseRid: databaseRid
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - currentValue: 0
                    limit: 10737418240
                    name:
                      localizedValue: Storage
                      value: Storage
                    quotaPeriod: P1D
                    unit: Bytes
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange':
    post:
      description: Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
      operationId: DatabaseAccounts_FailoverPriorityChange
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The new failover policies for the database account.
          in: body
          name: failoverParameters
          required: true
          schema:
            $ref: '#/definitions/FailoverPolicies'
      responses:
        '202':
          description: Accepted. The failover policy change operation will complete asynchronously.
        '204':
          description: No Content
      x-ms-examples:
        CosmosDBDatabaseAccountFailoverPriorityChange:
          parameters:
            accountName: ddb1-failover
            api-version: '2016-03-31'
            failoverParameters:
              failoverPolicies:
                - failoverPriority: 0
                  locationName: eastus
                - failoverPriority: 1
                  locationName: westus
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '202': {}
            '204': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings':
    post:
      description: Lists the connection strings for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListConnectionStrings
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountListConnectionStringsResult'
      x-ms-examples:
        CosmosDBDatabaseAccountListConnectionStrings:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body: {}
        CosmosDBDatabaseAccountListConnectionStringsMongo:
          parameters:
            accountName: mongo-ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                connectionStrings:
                  - connectionString: connection-string
                    description: Name of the connection string
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys':
    post:
      description: Lists the access keys for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListKeys
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountListKeysResult'
      x-ms-examples:
        CosmosDBDatabaseAccountListKeys:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                primaryMasterKey: primaryMasterKey
                primaryReadonlyMasterKey: primaryReadonlyMasterKey
                secondaryMasterKey: secondaryMasterKey
                secondaryReadonlyMasterKey: secondaryReadonlyMasterKey
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions':
    get:
      description: Retrieves metric definitions for the given database account.
      operationId: DatabaseAccounts_ListMetricDefinitions
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The metric definitions for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricDefinitionsListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountGetMetricDefinitions:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - metricAvailabilities:
                      - retention: P2D
                        timeGrain: PT5M
                      - retention: P14D
                        timeGrain: PT1H
                      - retention: P60D
                        timeGrain: P1D
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    primaryAggregationType: Total
                    resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given database account.
      operationId: DatabaseAccounts_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The metrics for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Total Requests'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:03:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:08:55.2780000Z'
                        total: 0
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion':
    post:
      description: Offline the specified region for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_OfflineRegion
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: Cosmos DB region to offline for the database account.
          in: body
          name: regionParameterForOffline
          required: true
          schema:
            $ref: '#/definitions/RegionForOnlineOffline'
      responses:
        '200':
          description: The offline region operation is completed successfully.
        '202':
          description: Accepted. The offline region operation will complete asynchronously.
        default:
          description: Error response describing why the operation failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
      x-ms-examples:
        CosmosDBDatabaseAccountOfflineRegion:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            region: North Europe
            regionParameterForOffline:
              - region: North Europe
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200': {}
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion':
    post:
      description: Online the specified region for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_OnlineRegion
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: Cosmos DB region to online for the database account.
          in: body
          name: regionParameterForOnline
          required: true
          schema:
            $ref: '#/definitions/RegionForOnlineOffline'
      responses:
        '200':
          description: The online region operation is completed successfully.
        '202':
          description: Accepted. The online region operation will complete asynchronously.
        default:
          description: Error response describing why the operation failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
      x-ms-examples:
        CosmosDBDatabaseAccountOnlineRegion:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            region: North Europe
            regionParameterForOnline:
              - region: North Europe
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200': {}
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
      operationId: Percentile_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The percentile metrics for the account were retrieved successfully.
          schema:
            $ref: '#/definitions/PercentileMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Probabilistic Bounded Staleness'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - P10: 1.11
                        P25: 2.5
                        P50: 4.34
                        P75: 5.2
                        P90: 6.77
                        P95: 7.1
                        P99: 8.3
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                    name:
                      localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-East US
                      value: Probabilistic Bounded Staleness-S-West Central US-T-East US
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Milliseconds
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - P10: 1.11
                        P25: 2.5
                        P50: 4.34
                        P75: 5.2
                        P90: 6.77
                        P95: 7.1
                        P99: 8.3
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                    name:
                      localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-West US
                      value: Probabilistic Bounded Staleness-S-West Central US-T-West US
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Milliseconds
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys':
    get:
      description: Lists the read-only access keys for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_GetReadOnlyKeys
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountListReadOnlyKeysResult'
      x-ms-examples:
        CosmosDBDatabaseAccountListReadOnlyKeys:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                primaryReadonlyMasterKey: primaryReadonlyMasterKey
                secondaryReadonlyMasterKey: secondaryReadonlyMasterKey
    post:
      description: Lists the read-only access keys for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListReadOnlyKeys
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
      responses:
        '200':
          description: The operation completed successfully.
          schema:
            $ref: '#/definitions/DatabaseAccountListReadOnlyKeysResult'
      x-ms-examples:
        CosmosDBDatabaseAccountListReadOnlyKeys:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                primaryReadonlyMasterKey: primaryReadonlyMasterKey
                secondaryReadonlyMasterKey: secondaryReadonlyMasterKey
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey':
    post:
      description: Regenerates an access key for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_RegenerateKey
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - description: The name of the key to regenerate.
          in: body
          name: keyToRegenerate
          required: true
          schema:
            $ref: '#/definitions/DatabaseAccountRegenerateKeyParameters'
      responses:
        '200':
          description: OK
        '202':
          description: Accepted. The regenerate key operation will complete asynchronously.
      x-ms-examples:
        CosmosDBDatabaseAccountRegenerateKey:
          parameters:
            accountName: ddb1
            api-version: '2016-03-31'
            keyToRegenerate:
              keyKind: primary
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200': {}
            '202': {}
      x-ms-long-running-operation: true
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics':
    get:
      description: 'Retrieves the metrics determined by the given filter for the given database account, collection and region.'
      operationId: CollectionRegion_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/regionParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The metrics for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricListResult'
      x-ms-examples:
        CosmosDBRegionCollectionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Total Requests'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            region: North Europe
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:03:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:08:55.2780000Z'
                        total: 0
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given partition key range id and region.
      operationId: PartitionKeyRangeIdRegion_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/regionParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/partitionKeyRangeIdParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The partition-level metrics for the partition key range id and region were retrieved successfully.
          schema:
            $ref: '#/definitions/PartitionMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Max RUs Per Second'') and timeGrain eq duration''PT1M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T23:58:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            partitionKeyRangeId: '0'
            region: West US
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T23:58:55.2780000Z'
                    metricValues:
                      - maximum: 5
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:54:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:55:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:56:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:57:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                    name:
                      localizedValue: Max RUs Per Second
                      value: Max RUs Per Second
                    partitionId: 00000000-0000-0000-0000-000000000000
                    partitionKeyRangeId: '0'
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT1M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics':
    get:
      description: 'Retrieves the metrics determined by the given filter for the given collection and region, split by partition.'
      operationId: CollectionPartitionRegion_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/regionParameter'
        - $ref: '#/parameters/databaseRidParameter'
        - $ref: '#/parameters/collectionRidParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The partition-level metrics for the collection and region were retrieved successfully.
          schema:
            $ref: '#/definitions/PartitionMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Max RUs Per Second'') and timeGrain eq duration''PT1M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T23:58:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            collectionRid: collectionRid
            databaseRid: databaseRid
            region: North Europe
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T23:58:55.2780000Z'
                    metricValues:
                      - maximum: 5
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:54:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:55:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:56:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:57:55.2780000Z'
                      - maximum: 5
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                    name:
                      localizedValue: Max RUs Per Second
                      value: Max RUs Per Second
                    partitionId: 00000000-0000-0000-0000-000000000000
                    partitionKeyRangeId: '0'
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT1M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given database account and region.
      operationId: DatabaseAccountRegion_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/regionParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The metrics for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/MetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Total Requests'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            region: North Europe
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-19T23:58:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:03:55.2780000Z'
                        total: 0
                      - _count: 0
                        average: 0
                        timestamp: '2017-11-20T00:08:55.2780000Z'
                        total: 0
                    name:
                      localizedValue: Total Requests
                      value: Total Requests
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Count
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics':
    get:
      description: 'Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data'
      operationId: PercentileSourceTarget_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/sourceRegionParameter'
        - $ref: '#/parameters/targetRegionParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: 'The percentile metrics for the account, source and target regions were retrieved successfully.'
          schema:
            $ref: '#/definitions/PercentileMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Probabilistic Bounded Staleness'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            sourceRegion: West Central US
            subscriptionId: subid
            targetRegion: East US
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - P10: 1.11
                        P25: 2.5
                        P50: 4.34
                        P75: 5.2
                        P90: 6.77
                        P95: 7.1
                        P99: 8.3
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                    name:
                      localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-East US
                      value: Probabilistic Bounded Staleness-S-West Central US-T-East US
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Milliseconds
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics':
    get:
      description: Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
      operationId: PercentileTarget_ListMetrics
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/targetRegionParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/filterParameter'
      responses:
        '200':
          description: The percentile metrics for the account and target regions were retrieved successfully.
          schema:
            $ref: '#/definitions/PercentileMetricListResult'
      x-ms-examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          parameters:
            $filter: '$filter=(name.value eq ''Probabilistic Bounded Staleness'') and timeGrain eq duration''PT5M'' and startTime eq ''2017-11-19T23:53:55.2780000Z'' and endTime eq ''2017-11-20T00:13:55.2780000Z'
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
            targetRegion: East US
          responses:
            '200':
              body:
                value:
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - P10: 1.11
                        P25: 2.5
                        P50: 4.34
                        P75: 5.2
                        P90: 6.77
                        P95: 7.1
                        P99: 8.3
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                    name:
                      localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-East US
                      value: Probabilistic Bounded Staleness-S-West Central US-T-East US
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Milliseconds
                  - endTime: '2017-11-20T00:13:55.2780000Z'
                    metricValues:
                      - P10: 1.11
                        P25: 2.5
                        P50: 4.34
                        P75: 5.2
                        P90: 6.77
                        P95: 7.1
                        P99: 8.3
                        timestamp: '2017-11-19T23:53:55.2780000Z'
                    name:
                      localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-West US
                      value: Probabilistic Bounded Staleness-S-West US-T-East US
                    startTime: '2017-11-19T23:53:55.2780000Z'
                    timeGrain: PT5M
                    unit: Milliseconds
      x-ms-pageable:
        nextLinkName: null
  '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages':
    get:
      description: Retrieves the usages (most recent data) for the given database account.
      operationId: DatabaseAccounts_ListUsages
      parameters:
        - $ref: '#/parameters/subscriptionIdParameter'
        - $ref: '#/parameters/resourceGroupNameParameter'
        - $ref: '#/parameters/accountNameParameter'
        - $ref: '#/parameters/apiVersionParameter'
        - $ref: '#/parameters/usageFilterParameter'
      responses:
        '200':
          description: The usages for the database account were retrieved successfully.
          schema:
            $ref: '#/definitions/UsagesResult'
      x-ms-examples:
        CosmosDBDatabaseAccountGetUsages:
          parameters:
            $filter: $filter=name.value eq 'Storage'
            accountName: ddb1
            api-version: '2016-03-31'
            resourceGroupName: rg1
            subscriptionId: subid
          responses:
            '200':
              body:
                value:
                  - currentValue: 0
                    limit: 10737418240
                    name:
                      localizedValue: Storage
                      value: Storage
                    quotaPeriod: P1D
                    unit: Bytes
      x-ms-pageable:
        nextLinkName: null
definitions:
  Capability:
    description: Cosmos DB capability object
    properties:
      name:
        description: 'Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".'
        type: string
    type: object
  CassandraKeyspace:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB Cassandra keyspace.
    properties:
      properties:
        $ref: '#/definitions/CassandraKeyspaceProperties'
        description: The properties of an Azure Cosmos DB Cassandra keyspace
        x-ms-client-flatten: true
    type: object
  CassandraKeyspaceCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB Cassandra keyspace.
    properties:
      properties:
        $ref: '#/definitions/CassandraKeyspaceCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB Cassandra keyspace.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  CassandraKeyspaceCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB Cassandra keyspace.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/CassandraKeyspaceResource'
        description: The standard JSON format of a Cassandra keyspace
    required:
      - resource
      - options
    type: object
  CassandraKeyspaceListResult:
    description: 'The List operation response, that contains the Cassandra keyspaces and their properties.'
    properties:
      value:
        description: List of Cassandra keyspaces and their properties.
        items:
          $ref: '#/definitions/CassandraKeyspace'
        readOnly: true
        type: array
  CassandraKeyspaceProperties:
    allOf:
      - $ref: '#/definitions/CassandraKeyspaceResource'
    description: The properties of an Azure Cosmos DB Cassandra keyspace
    type: object
  CassandraKeyspaceResource:
    description: Cosmos DB Cassandra keyspace id object
    properties:
      id:
        description: Name of the Cosmos DB Cassandra keyspace
        type: string
    required:
      - id
    type: object
  CassandraPartitionKey:
    description: Cosmos DB Cassandra table partition key
    properties:
      name:
        description: Name of the Cosmos DB Cassandra table partition key
        type: string
    type: object
  CassandraSchema:
    description: Cosmos DB Cassandra table schema
    properties:
      clusterKeys:
        description: List of cluster key.
        items:
          $ref: '#/definitions/ClusterKey'
        type: array
      columns:
        description: List of Cassandra table columns.
        items:
          $ref: '#/definitions/Column'
        type: array
      partitionKeys:
        description: List of partition key.
        items:
          $ref: '#/definitions/CassandraPartitionKey'
        type: array
    type: object
  CassandraTable:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB Cassandra table.
    properties:
      properties:
        $ref: '#/definitions/CassandraTableProperties'
        description: The properties of an Azure Cosmos DB Cassandra table
        x-ms-client-flatten: true
    type: object
  CassandraTableCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB Cassandra table.
    properties:
      properties:
        $ref: '#/definitions/CassandraTableCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB Cassandra table.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  CassandraTableCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB Cassandra table.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/CassandraTableResource'
        description: The standard JSON format of a Cassandra table
    required:
      - resource
      - options
    type: object
  CassandraTableListResult:
    description: 'The List operation response, that contains the Cassandra tables and their properties.'
    properties:
      value:
        description: List of Cassandra tables and their properties.
        items:
          $ref: '#/definitions/CassandraTable'
        readOnly: true
        type: array
  CassandraTableProperties:
    allOf:
      - $ref: '#/definitions/CassandraTableResource'
    description: The properties of an Azure Cosmos DB Cassandra table
    type: object
  CassandraTableResource:
    description: Cosmos DB Cassandra table id object
    properties:
      defaultTtl:
        description: Time to live of the Cosmos DB Cassandra table
        type: integer
      id:
        description: Name of the Cosmos DB Cassandra table
        type: string
      schema:
        $ref: '#/definitions/CassandraSchema'
        description: Schema of the Cosmos DB Cassandra table
    required:
      - id
    type: object
  ClusterKey:
    description: Cosmos DB Cassandra table cluster key
    properties:
      name:
        description: Name of the Cosmos DB Cassandra table cluster key
        type: string
      orderBy:
        description: 'Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"'
        type: string
    type: object
  Column:
    description: Cosmos DB Cassandra table column
    properties:
      name:
        description: Name of the Cosmos DB Cassandra table column
        type: string
      type:
        description: Type of the Cosmos DB Cassandra table column
        type: string
    type: object
  ConflictResolutionPolicy:
    description: The conflict resolution policy for the container.
    properties:
      conflictResolutionPath:
        description: The conflict resolution path in the case of LastWriterWins mode.
        type: string
      conflictResolutionProcedure:
        description: The procedure to resolve conflicts in the case of custom mode.
        type: string
      mode:
        default: LastWriterWins
        description: Indicates the conflict resolution mode.
        enum:
          - LastWriterWins
          - Custom
        type: string
        x-ms-enum:
          modelAsString: true
          name: ConflictResolutionMode
    type: object
  ConnectorOffer:
    description: The cassandra connector offer type for the Cosmos DB C* database account.
    enum:
      - Small
    type: string
    x-ms-enum:
      modelAsString: true
      name: ConnectorOffer
  ConsistencyPolicy:
    description: The consistency policy for the Cosmos DB database account.
    properties:
      defaultConsistencyLevel:
        description: The default consistency level and configuration settings of the Cosmos DB account.
        enum:
          - Eventual
          - Session
          - BoundedStaleness
          - Strong
          - ConsistentPrefix
        type: string
        x-ms-enum:
          modelAsString: false
          name: DefaultConsistencyLevel
      maxIntervalInSeconds:
        description: 'When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to ''BoundedStaleness''.'
        format: int32
        maximum: 86400
        minimum: 5
        type: integer
      maxStalenessPrefix:
        description: 'When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to ''BoundedStaleness''.'
        format: int64
        maximum: 2147483647
        minimum: 1
        type: integer
    required:
      - defaultConsistencyLevel
    type: object
  ContainerPartitionKey:
    description: The configuration of the partition key to be used for partitioning data into multiple partitions
    properties:
      kind:
        default: Hash
        description: Indicates the kind of algorithm used for partitioning
        enum:
          - Hash
          - Range
        type: string
        x-ms-enum:
          modelAsString: true
          name: PartitionKind
      paths:
        description: List of paths using which data within the container can be partitioned
        items:
          $ref: '#/definitions/Path'
        type: array
    type: object
  CreateUpdateOptions:
    additionalProperties:
      type: string
    description: 'CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"'
    type: object
  DatabaseAccount:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB database account.
    properties:
      kind:
        default: GlobalDocumentDB
        description: Indicates the type of database account. This can only be set at database account creation.
        enum:
          - GlobalDocumentDB
          - MongoDB
          - Parse
        type: string
        x-ms-enum:
          modelAsString: true
          name: DatabaseAccountKind
      properties:
        $ref: '#/definitions/DatabaseAccountProperties'
        x-ms-client-flatten: true
    type: object
  DatabaseAccountConnectionString:
    description: Connection string for the Cosmos DB account
    properties:
      connectionString:
        description: Value of the connection string
        readOnly: true
        type: string
      description:
        description: Description of the connection string
        readOnly: true
        type: string
  DatabaseAccountCreateUpdateParameters:
    allOf:
      - $ref: '#/definitions/Resource'
    description: Parameters to create and update Cosmos DB database accounts.
    properties:
      kind:
        default: GlobalDocumentDB
        description: Indicates the type of database account. This can only be set at database account creation.
        enum:
          - GlobalDocumentDB
          - MongoDB
          - Parse
        type: string
        x-ms-enum:
          modelAsString: true
          name: DatabaseAccountKind
      properties:
        $ref: '#/definitions/DatabaseAccountCreateUpdateProperties'
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  DatabaseAccountCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB database accounts.
    properties:
      capabilities:
        description: List of Cosmos DB capabilities for the account
        items:
          $ref: '#/definitions/Capability'
        type: array
      connectorOffer:
        $ref: '#/definitions/ConnectorOffer'
        description: The cassandra connector offer type for the Cosmos DB database C* account.
      consistencyPolicy:
        $ref: '#/definitions/ConsistencyPolicy'
        description: The consistency policy for the Cosmos DB account.
      databaseAccountOfferType:
        $ref: '#/definitions/DatabaseAccountOfferType'
        description: The offer type for the database
      enableAutomaticFailover:
        description: Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        type: boolean
      enableCassandraConnector:
        description: Enables the cassandra connector on the Cosmos DB C* account
        type: boolean
      enableMultipleWriteLocations:
        description: Enables the account to write in multiple locations
        type: boolean
      ipRangeFilter:
        $ref: '#/definitions/IPRangeFilter'
        description: 'Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.'
      isVirtualNetworkFilterEnabled:
        description: Flag to indicate whether to enable/disable Virtual Network ACL rules.
        type: boolean
      locations:
        description: An array that contains the georeplication locations enabled for the Cosmos DB account.
        items:
          $ref: '#/definitions/Location'
        type: array
      virtualNetworkRules:
        description: List of Virtual Network ACL rules configured for the Cosmos DB account.
        items:
          $ref: '#/definitions/VirtualNetworkRule'
        type: array
    required:
      - locations
      - databaseAccountOfferType
    type: object
  DatabaseAccountListConnectionStringsResult:
    description: The connection strings for the given database account.
    properties:
      connectionStrings:
        description: An array that contains the connection strings for the Cosmos DB account.
        items:
          $ref: '#/definitions/DatabaseAccountConnectionString'
        type: array
  DatabaseAccountListKeysResult:
    allOf:
      - $ref: '#/definitions/DatabaseAccountListReadOnlyKeysResult'
    description: The access keys for the given database account.
    properties:
      primaryMasterKey:
        description: Base 64 encoded value of the primary read-write key.
        readOnly: true
        type: string
      secondaryMasterKey:
        description: Base 64 encoded value of the secondary read-write key.
        readOnly: true
        type: string
  DatabaseAccountListReadOnlyKeysResult:
    description: The read-only access keys for the given database account.
    properties:
      primaryReadonlyMasterKey:
        description: Base 64 encoded value of the primary read-only key.
        readOnly: true
        type: string
      secondaryReadonlyMasterKey:
        description: Base 64 encoded value of the secondary read-only key.
        readOnly: true
        type: string
  DatabaseAccountOfferType:
    description: The offer type for the Cosmos DB database account.
    enum:
      - Standard
    type: string
    x-ms-enum:
      modelAsString: false
      name: DatabaseAccountOfferType
  DatabaseAccountPatchParameters:
    description: Parameters for patching Azure Cosmos DB database account properties.
    properties:
      properties:
        $ref: '#/definitions/DatabaseAccountPatchProperties'
        x-ms-client-flatten: true
      tags:
        $ref: '#/definitions/Tags'
    type: object
  DatabaseAccountPatchProperties:
    description: Properties to update Azure Cosmos DB database accounts.
    properties:
      capabilities:
        description: List of Cosmos DB capabilities for the account
        items:
          $ref: '#/definitions/Capability'
        type: array
    type: object
  DatabaseAccountProperties:
    description: Properties for the database account.
    properties:
      capabilities:
        description: List of Cosmos DB capabilities for the account
        items:
          $ref: '#/definitions/Capability'
        type: array
      connectorOffer:
        $ref: '#/definitions/ConnectorOffer'
        description: The cassandra connector offer type for the Cosmos DB database C* account.
      consistencyPolicy:
        $ref: '#/definitions/ConsistencyPolicy'
        description: The consistency policy for the Cosmos DB database account.
      databaseAccountOfferType:
        $ref: '#/definitions/DatabaseAccountOfferType'
        description: 'The offer type for the Cosmos DB database account. Default value: Standard.'
        readOnly: true
      documentEndpoint:
        description: The connection endpoint for the Cosmos DB database account.
        readOnly: true
        type: string
      enableAutomaticFailover:
        description: Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        type: boolean
      enableCassandraConnector:
        description: Enables the cassandra connector on the Cosmos DB C* account
        type: boolean
      enableMultipleWriteLocations:
        description: Enables the account to write in multiple locations
        type: boolean
      failoverPolicies:
        description: An array that contains the regions ordered by their failover priorities.
        items:
          $ref: '#/definitions/FailoverPolicy'
        readOnly: true
        type: array
      ipRangeFilter:
        $ref: '#/definitions/IPRangeFilter'
        description: 'Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.'
      isVirtualNetworkFilterEnabled:
        description: Flag to indicate whether to enable/disable Virtual Network ACL rules.
        type: boolean
      provisioningState:
        $ref: '#/definitions/ProvisioningState'
      readLocations:
        description: An array that contains of the read locations enabled for the Cosmos DB account.
        items:
          $ref: '#/definitions/Location'
        readOnly: true
        type: array
      virtualNetworkRules:
        description: List of Virtual Network ACL rules configured for the Cosmos DB account.
        items:
          $ref: '#/definitions/VirtualNetworkRule'
        type: array
      writeLocations:
        description: An array that contains the write location for the Cosmos DB account.
        items:
          $ref: '#/definitions/Location'
        readOnly: true
        type: array
    type: object
  DatabaseAccountRegenerateKeyParameters:
    description: Parameters to regenerate the keys within the database account.
    properties:
      keyKind:
        description: The access key to regenerate.
        enum:
          - primary
          - secondary
          - primaryReadonly
          - secondaryReadonly
        type: string
        x-ms-enum:
          modelAsString: true
          name: KeyKind
    required:
      - keyKind
    type: object
  DatabaseAccountsListResult:
    description: 'The List operation response, that contains the database accounts and their properties.'
    properties:
      value:
        description: List of database account and their properties.
        items:
          $ref: '#/definitions/DatabaseAccount'
        readOnly: true
        type: array
  ErrorResponse:
    description: Error Response.
    properties:
      code:
        description: Error code.
        type: string
      message:
        description: Error message indicating why the operation failed.
        type: string
  ExcludedPath:
    properties:
      path:
        description: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
        type: string
    type: object
  ExtendedResourceProperties:
    description: The system generated resource properties associated with SQL databases and SQL containers.
    properties:
      _etag:
        description: A system generated property representing the resource etag required for optimistic concurrency control.
        type: string
      _rid:
        description: A system generated property. A unique identifier.
        type: string
      _ts:
        description: A system generated property that denotes the last updated timestamp of the resource.
    type: object
  FailoverPolicies:
    description: The list of new failover policies for the failover priority change.
    properties:
      failoverPolicies:
        description: List of failover policies.
        items:
          $ref: '#/definitions/FailoverPolicy'
        type: array
    required:
      - failoverPolicies
  FailoverPolicy:
    description: The failover policy for a given region of a database account.
    properties:
      failoverPriority:
        description: The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
        format: int32
        minimum: 0
        type: integer
      id:
        description: 'The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.'
        readOnly: true
        type: string
      locationName:
        description: The name of the region in which the database account exists.
        type: string
    type: object
  GremlinDatabase:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB Gremlin database.
    properties:
      properties:
        $ref: '#/definitions/GremlinDatabaseProperties'
        description: The properties of an Azure Cosmos DB SQL database
        x-ms-client-flatten: true
    type: object
  GremlinDatabaseCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB Gremlin database.
    properties:
      properties:
        $ref: '#/definitions/GremlinDatabaseCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB Gremlin database.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  GremlinDatabaseCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB Gremlin database.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/GremlinDatabaseResource'
        description: The standard JSON format of a Gremlin database
    required:
      - resource
      - options
    type: object
  GremlinDatabaseListResult:
    description: 'The List operation response, that contains the Gremlin databases and their properties.'
    properties:
      value:
        description: List of Gremlin databases and their properties.
        items:
          $ref: '#/definitions/GremlinDatabase'
        readOnly: true
        type: array
  GremlinDatabaseProperties:
    allOf:
      - $ref: '#/definitions/GremlinDatabaseResource'
    description: The properties of an Azure Cosmos DB SQL database
    properties:
      _etag:
        description: A system generated property representing the resource etag required for optimistic concurrency control.
        type: string
      _rid:
        description: A system generated property. A unique identifier.
        type: string
      _ts:
        description: A system generated property that denotes the last updated timestamp of the resource.
    type: object
  GremlinDatabaseResource:
    description: Cosmos DB Gremlin database id object
    properties:
      id:
        description: Name of the Cosmos DB Gremlin database
        type: string
    required:
      - id
    type: object
  GremlinGraph:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB Gremlin graph.
    properties:
      properties:
        $ref: '#/definitions/GremlinGraphProperties'
        description: The properties of an Azure Cosmos DB Gremlin graph
        x-ms-client-flatten: true
    type: object
  GremlinGraphCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB Gremlin graph.
    properties:
      properties:
        $ref: '#/definitions/GremlinGraphCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB Gremlin graph.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  GremlinGraphCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB Gremlin graph.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/GremlinGraphResource'
        description: The standard JSON format of a Gremlin graph
    required:
      - resource
      - options
    type: object
  GremlinGraphListResult:
    description: 'The List operation response, that contains the graphs and their properties.'
    properties:
      value:
        description: List of graphs and their properties.
        items:
          $ref: '#/definitions/GremlinGraph'
        readOnly: true
        type: array
  GremlinGraphProperties:
    allOf:
      - $ref: '#/definitions/GremlinGraphResource'
      - $ref: '#/definitions/ExtendedResourceProperties'
    description: The properties of an Azure Cosmos DB Gremlin graph
    type: object
  GremlinGraphResource:
    description: Cosmos DB Gremlin graph resource object
    properties:
      conflictResolutionPolicy:
        $ref: '#/definitions/ConflictResolutionPolicy'
        description: The conflict resolution policy for the graph.
      defaultTtl:
        description: Default time to live
        type: integer
      id:
        description: Name of the Cosmos DB Gremlin graph
        type: string
      indexingPolicy:
        $ref: '#/definitions/IndexingPolicy'
        description: 'The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph'
      partitionKey:
        $ref: '#/definitions/ContainerPartitionKey'
        description: The configuration of the partition key to be used for partitioning data into multiple partitions
      uniqueKeyPolicy:
        $ref: '#/definitions/UniqueKeyPolicy'
        description: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
    required:
      - id
    type: object
  IPRangeFilter:
    description: 'Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.'
    type: string
  IncludedPath:
    description: The paths that are included in indexing
    properties:
      indexes:
        description: List of indexes for this path
        items:
          $ref: '#/definitions/Indexes'
        type: array
      path:
        description: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
        type: string
    type: object
  Indexes:
    description: The indexes for the path.
    properties:
      dataType:
        default: String
        description: The datatype for which the indexing behavior is applied to.
        enum:
          - String
          - Number
          - Point
          - Polygon
          - LineString
          - MultiPolygon
        type: string
        x-ms-enum:
          modelAsString: true
          name: DataType
      kind:
        default: Hash
        description: Indicates the type of index.
        enum:
          - Hash
          - Range
          - Spatial
        type: string
        x-ms-enum:
          modelAsString: true
          name: IndexKind
      precision:
        description: The precision of the index. -1 is maximum precision.
        type: integer
    type: object
  IndexingPolicy:
    description: Cosmos DB indexing policy
    properties:
      automatic:
        description: Indicates if the indexing policy is automatic
        type: boolean
      excludedPaths:
        description: List of paths to exclude from indexing
        items:
          $ref: '#/definitions/ExcludedPath'
        type: array
      includedPaths:
        description: List of paths to include in the indexing
        items:
          $ref: '#/definitions/IncludedPath'
        type: array
      indexingMode:
        default: Consistent
        description: Indicates the indexing mode.
        enum:
          - Consistent
          - Lazy
          - None
        type: string
        x-ms-enum:
          modelAsString: true
          name: IndexingMode
    type: object
  Key:
    description: A Key.
    type: string
  Location:
    description: A region in which the Azure Cosmos DB database account is deployed.
    properties:
      documentEndpoint:
        description: 'The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/'
        readOnly: true
        type: string
      failoverPriority:
        description: The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
        format: int32
        minimum: 0
        type: integer
      id:
        description: 'The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.'
        readOnly: true
        type: string
      isZoneRedundant:
        description: Flag to indicate whether or not this region is an AvailabilityZone region
        type: boolean
      locationName:
        description: The name of the region.
        type: string
      provisioningState:
        $ref: '#/definitions/ProvisioningState'
    type: object
  Metric:
    description: Metric data
    properties:
      endTime:
        description: The end time for the metric (ISO-8601 format).
        format: date-time
        readOnly: true
        type: string
      metricValues:
        description: The metric values for the specified time window and timestep.
        items:
          $ref: '#/definitions/MetricValue'
        readOnly: true
        type: array
      name:
        $ref: '#/definitions/MetricName'
        description: The name information for the metric.
        readOnly: true
      startTime:
        description: The start time for the metric (ISO-8601 format).
        format: date-time
        readOnly: true
        type: string
      timeGrain:
        description: The time grain to be used to summarize the metric values.
        readOnly: true
        type: string
      unit:
        $ref: '#/definitions/UnitType'
        description: The unit of the metric.
  MetricAvailability:
    description: The availability of the metric.
    properties:
      retention:
        description: The retention for the metric values.
        readOnly: true
        type: string
      timeGrain:
        description: The time grain to be used to summarize the metric values.
        readOnly: true
        type: string
  MetricDefinition:
    description: The definition of a metric.
    properties:
      metricAvailabilities:
        description: The list of metric availabilities for the account.
        items:
          $ref: '#/definitions/MetricAvailability'
        readOnly: true
        type: array
      name:
        $ref: '#/definitions/MetricName'
        description: The name information for the metric.
        readOnly: true
      primaryAggregationType:
        description: The primary aggregation type of the metric.
        enum:
          - None
          - Average
          - Total
          - Minimum
          - Maximum
          - Last
        readOnly: true
        type: string
        x-ms-enum:
          modelAsString: true
          name: PrimaryAggregationType
      resourceUri:
        description: The resource uri of the database.
        readOnly: true
        type: string
      unit:
        $ref: '#/definitions/UnitType'
        description: The unit of the metric.
  MetricDefinitionsListResult:
    description: The response to a list metric definitions request.
    properties:
      value:
        description: The list of metric definitions for the account.
        items:
          $ref: '#/definitions/MetricDefinition'
        readOnly: true
        type: array
  MetricListResult:
    description: The response to a list metrics request.
    properties:
      value:
        description: The list of metrics for the account.
        items:
          $ref: '#/definitions/Metric'
        readOnly: true
        type: array
  MetricName:
    description: A metric name.
    properties:
      localizedValue:
        description: The friendly name of the metric.
        readOnly: true
        type: string
      value:
        description: The name of the metric.
        readOnly: true
        type: string
  MetricValue:
    description: Represents metrics values.
    properties:
      _count:
        description: The number of values for the metric.
        format: int32
        readOnly: true
        type: number
      average:
        description: The average value of the metric.
        format: double
        readOnly: true
        type: number
      maximum:
        description: The max value of the metric.
        format: double
        readOnly: true
        type: number
      minimum:
        description: The min value of the metric.
        format: double
        readOnly: true
        type: number
      timestamp:
        description: The metric timestamp (ISO-8601 format).
        format: date-time
        readOnly: true
        type: string
      total:
        description: The total value of the metric.
        format: double
        readOnly: true
        type: number
  MongoDBCollection:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB MongoDB collection.
    properties:
      properties:
        $ref: '#/definitions/MongoDBCollectionProperties'
        description: The properties of an Azure Cosmos DB MongoDB collection
        x-ms-client-flatten: true
    type: object
  MongoDBCollectionCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB MongoDB collection.
    properties:
      properties:
        $ref: '#/definitions/MongoDBCollectionCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB MongoDB collection.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  MongoDBCollectionCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB MongoDB collection.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/MongoDBCollectionResource'
        description: The standard JSON format of a MongoDB collection
    required:
      - resource
      - options
    type: object
  MongoDBCollectionListResult:
    description: 'The List operation response, that contains the MongoDB collections and their properties.'
    properties:
      value:
        description: List of MongoDB collections and their properties.
        items:
          $ref: '#/definitions/MongoDBCollection'
        readOnly: true
        type: array
  MongoDBCollectionProperties:
    allOf:
      - $ref: '#/definitions/MongoDBCollectionResource'
    description: The properties of an Azure Cosmos DB MongoDB collection
    type: object
  MongoDBCollectionResource:
    description: Cosmos DB MongoDB collection resource object
    properties:
      id:
        description: Name of the Cosmos DB MongoDB collection
        type: string
      indexes:
        description: List of index keys
        items:
          $ref: '#/definitions/MongoIndex'
        type: array
      shardKey:
        $ref: '#/definitions/ShardKeys'
        description: A key-value pair of shard keys to be applied for the request.
    required:
      - id
    type: object
  MongoDBDatabase:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB MongoDB database.
    properties:
      properties:
        $ref: '#/definitions/MongoDBDatabaseProperties'
        description: The properties of an Azure Cosmos DB MongoDB database
        x-ms-client-flatten: true
    type: object
  MongoDBDatabaseCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB MongoDB database.
    properties:
      properties:
        $ref: '#/definitions/MongoDBDatabaseCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB MongoDB database.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  MongoDBDatabaseCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB MongoDB database.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/MongoDBDatabaseResource'
        description: The standard JSON format of a MongoDB database
    required:
      - resource
      - options
    type: object
  MongoDBDatabaseListResult:
    description: 'The List operation response, that contains the MongoDB databases and their properties.'
    properties:
      value:
        description: List of MongoDB databases and their properties.
        items:
          $ref: '#/definitions/MongoDBDatabase'
        readOnly: true
        type: array
  MongoDBDatabaseProperties:
    allOf:
      - $ref: '#/definitions/MongoDBDatabaseResource'
    description: The properties of an Azure Cosmos DB MongoDB database
    type: object
  MongoDBDatabaseResource:
    description: Cosmos DB MongoDB database id object
    properties:
      id:
        description: Name of the Cosmos DB MongoDB database
        type: string
    required:
      - id
    type: object
  MongoIndex:
    description: Cosmos DB MongoDB collection index key
    properties:
      key:
        $ref: '#/definitions/MongoIndexKeys'
        description: Cosmos DB MongoDB collection index keys
      options:
        $ref: '#/definitions/MongoIndexOptions'
        description: Cosmos DB MongoDB collection index key options
    type: object
  MongoIndexKeys:
    description: Cosmos DB MongoDB collection resource object
    properties:
      keys:
        description: List of keys for each MongoDB collection in the Azure Cosmos DB service
        items:
          $ref: '#/definitions/Key'
        type: array
    type: object
  MongoIndexOptions:
    description: Cosmos DB MongoDB collection index options
    properties:
      expireAfterSeconds:
        description: Expire after seconds
        type: integer
      unique:
        description: Is unique or not
        type: boolean
    type: object
  Operation:
    description: REST API operation
    properties:
      display:
        description: The object that represents the operation.
        properties:
          Description:
            description: Description of operation
            type: string
          Operation:
            description: 'Operation type: Read, write, delete, etc.'
            type: string
          Provider:
            description: 'Service provider: Microsoft.ResourceProvider'
            type: string
          Resource:
            description: 'Resource on which the operation is performed: Profile, endpoint, etc.'
            type: string
      name:
        description: 'Operation name: {provider}/{resource}/{operation}'
        type: string
    type: object
  OperationListResult:
    description: Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.
    properties:
      nextLink:
        description: URL to get the next set of operation list results if there are any.
        type: string
      value:
        description: List of operations supported by the Resource Provider.
        items:
          $ref: '#/definitions/Operation'
        type: array
  PartitionMetric:
    allOf:
      - $ref: '#/definitions/Metric'
    description: The metric values for a single partition.
    properties:
      partitionId:
        description: The partition id (GUID identifier) of the metric values.
        readOnly: true
        type: string
      partitionKeyRangeId:
        description: The partition key range id (integer identifier) of the metric values.
        readOnly: true
        type: string
  PartitionMetricListResult:
    description: The response to a list partition metrics request.
    properties:
      value:
        description: The list of partition-level metrics for the account.
        items:
          $ref: '#/definitions/PartitionMetric'
        readOnly: true
        type: array
  PartitionUsage:
    allOf:
      - $ref: '#/definitions/Usage'
    description: The partition level usage data for a usage request.
    properties:
      partitionId:
        description: The partition id (GUID identifier) of the usages.
        readOnly: true
        type: string
      partitionKeyRangeId:
        description: The partition key range id (integer identifier) of the usages.
        readOnly: true
        type: string
  PartitionUsagesResult:
    description: The response to a list partition level usage request.
    properties:
      value:
        description: The list of partition-level usages for the database. A usage is a point in time metric
        items:
          $ref: '#/definitions/PartitionUsage'
        readOnly: true
        type: array
  Path:
    description: A path. These typically start with root (/path)
    type: string
  PercentileMetric:
    description: Percentile Metric data
    properties:
      endTime:
        description: The end time for the metric (ISO-8601 format).
        format: date-time
        readOnly: true
        type: string
      metricValues:
        description: The percentile metric values for the specified time window and timestep.
        items:
          $ref: '#/definitions/PercentileMetricValue'
        readOnly: true
        type: array
      name:
        $ref: '#/definitions/MetricName'
        description: The name information for the metric.
        readOnly: true
      startTime:
        description: The start time for the metric (ISO-8601 format).
        format: date-time
        readOnly: true
        type: string
      timeGrain:
        description: The time grain to be used to summarize the metric values.
        readOnly: true
        type: string
      unit:
        $ref: '#/definitions/UnitType'
        description: The unit of the metric.
  PercentileMetricListResult:
    description: The response to a list percentile metrics request.
    properties:
      value:
        description: The list of percentile metrics for the account.
        items:
          $ref: '#/definitions/PercentileMetric'
        readOnly: true
        type: array
  PercentileMetricValue:
    allOf:
      - $ref: '#/definitions/MetricValue'
    description: Represents percentile metrics values.
    properties:
      P10:
        description: The 10th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P25:
        description: The 25th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P50:
        description: The 50th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P75:
        description: The 75th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P90:
        description: The 90th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P95:
        description: The 95th percentile value for the metric.
        format: double
        readOnly: true
        type: number
      P99:
        description: The 99th percentile value for the metric.
        format: double
        readOnly: true
        type: number
  ProvisioningState:
    description: 'The status of the Cosmos DB account at the time the operation was called. The status can be one of following. ''Creating'' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. ''Succeeded'' – the Cosmos DB account is active for use. ''Updating'' – the Cosmos DB account is being updated. ''Deleting'' – the Cosmos DB account is being deleted. ''Failed'' – the Cosmos DB account failed creation.'
    readOnly: true
    type: string
  RegionForOnlineOffline:
    description: Cosmos DB region to online or offline.
    properties:
      region:
        description: 'Cosmos DB region, with spaces between words and each word capitalized.'
        type: string
    required:
      - region
  Resource:
    description: The core properties of ARM resources.
    properties:
      id:
        description: The unique resource identifier of the database account.
        readOnly: true
        type: string
      location:
        description: The location of the resource group to which the resource belongs.
        type: string
      name:
        description: The name of the database account.
        readOnly: true
        type: string
      tags:
        $ref: '#/definitions/Tags'
      type:
        description: The type of Azure resource.
        readOnly: true
        type: string
    type: object
    x-ms-azure-resource: true
  ShardKeys:
    additionalProperties:
      type: string
    description: 'The shard key and partition kind pair, only support "Hash" partition kind'
    type: object
  SqlContainer:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB container.
    properties:
      properties:
        $ref: '#/definitions/SqlContainerProperties'
        description: The properties of an Azure Cosmos DB container
        x-ms-client-flatten: true
    type: object
  SqlContainerCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB container.
    properties:
      properties:
        $ref: '#/definitions/SqlContainerCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB container.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  SqlContainerCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB container.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/SqlContainerResource'
        description: The standard JSON format of a container
    required:
      - resource
      - options
    type: object
  SqlContainerListResult:
    description: 'The List operation response, that contains the containers and their properties.'
    properties:
      value:
        description: List of containers and their properties.
        items:
          $ref: '#/definitions/SqlContainer'
        readOnly: true
        type: array
  SqlContainerProperties:
    allOf:
      - $ref: '#/definitions/SqlContainerResource'
      - $ref: '#/definitions/ExtendedResourceProperties'
    description: The properties of an Azure Cosmos DB container
    type: object
  SqlContainerResource:
    description: Cosmos DB SQL container resource object
    properties:
      conflictResolutionPolicy:
        $ref: '#/definitions/ConflictResolutionPolicy'
        description: The conflict resolution policy for the container.
      defaultTtl:
        description: Default time to live
        type: integer
      id:
        description: Name of the Cosmos DB SQL container
        type: string
      indexingPolicy:
        $ref: '#/definitions/IndexingPolicy'
        description: 'The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container'
      partitionKey:
        $ref: '#/definitions/ContainerPartitionKey'
        description: The configuration of the partition key to be used for partitioning data into multiple partitions
      uniqueKeyPolicy:
        $ref: '#/definitions/UniqueKeyPolicy'
        description: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
    required:
      - id
    type: object
  SqlDatabase:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB SQL database.
    properties:
      properties:
        $ref: '#/definitions/SqlDatabaseProperties'
        description: The properties of an Azure Cosmos DB SQL database
        x-ms-client-flatten: true
    type: object
  SqlDatabaseCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB SQL database.
    properties:
      properties:
        $ref: '#/definitions/SqlDatabaseCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB SQL database.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  SqlDatabaseCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB SQL database.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/SqlDatabaseResource'
        description: The standard JSON format of a SQL database
    required:
      - resource
      - options
    type: object
  SqlDatabaseListResult:
    description: 'The List operation response, that contains the SQL databases and their properties.'
    properties:
      value:
        description: List of SQL databases and their properties.
        items:
          $ref: '#/definitions/SqlDatabase'
        readOnly: true
        type: array
  SqlDatabaseProperties:
    allOf:
      - $ref: '#/definitions/SqlDatabaseResource'
      - $ref: '#/definitions/ExtendedResourceProperties'
    description: The properties of an Azure Cosmos DB SQL database
    properties:
      _colls:
        description: A system generated property that specified the addressable path of the collections resource.
        type: string
      _users:
        description: A system generated property that specifies the addressable path of the users resource.
        type: string
    type: object
  SqlDatabaseResource:
    description: Cosmos DB SQL database id object
    properties:
      id:
        description: Name of the Cosmos DB SQL database
        type: string
    required:
      - id
    type: object
  Table:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB Table.
    properties:
      properties:
        $ref: '#/definitions/TableProperties'
        description: The properties of an Azure Cosmos DB Table
        x-ms-client-flatten: true
    type: object
  TableCreateUpdateParameters:
    description: Parameters to create and update Cosmos DB Table.
    properties:
      properties:
        $ref: '#/definitions/TableCreateUpdateProperties'
        description: Properties to create and update Azure Cosmos DB Table.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  TableCreateUpdateProperties:
    description: Properties to create and update Azure Cosmos DB Table.
    properties:
      options:
        $ref: '#/definitions/CreateUpdateOptions'
        description: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
      resource:
        $ref: '#/definitions/TableResource'
        description: The standard JSON format of a Table
    required:
      - resource
      - options
    type: object
  TableListResult:
    description: 'The List operation response, that contains the Table and their properties.'
    properties:
      value:
        description: List of Table and their properties.
        items:
          $ref: '#/definitions/Table'
        readOnly: true
        type: array
  TableProperties:
    allOf:
      - $ref: '#/definitions/TableResource'
    description: The properties of an Azure Cosmos Table
    type: object
  TableResource:
    description: Cosmos DB table id object
    properties:
      id:
        description: Name of the Cosmos DB table
        type: string
    required:
      - id
    type: object
  Tags:
    additionalProperties:
      type: string
    description: 'Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".'
    type: object
  Throughput:
    allOf:
      - $ref: '#/definitions/Resource'
    description: An Azure Cosmos DB resource throughput.
    properties:
      properties:
        $ref: '#/definitions/ThroughputProperties'
        description: The properties of an Azure Cosmos DB resource throughput
        x-ms-client-flatten: true
    type: object
  ThroughputProperties:
    allOf:
      - $ref: '#/definitions/ThroughputResource'
    description: The properties of an Azure Cosmos DB resource throughput
    type: object
  ThroughputResource:
    description: Cosmos DB resource throughput object
    properties:
      throughput:
        description: Value of the Cosmos DB resource throughput
        type: integer
    required:
      - throughput
    type: object
  ThroughputUpdateParameters:
    description: Parameters to update Cosmos DB resource throughput.
    properties:
      properties:
        $ref: '#/definitions/ThroughputUpdateProperties'
        description: Properties to update Azure Cosmos DB resource throughput.
        x-ms-client-flatten: true
    required:
      - properties
    type: object
  ThroughputUpdateProperties:
    description: Properties to update Azure Cosmos DB resource throughput.
    properties:
      resource:
        $ref: '#/definitions/ThroughputResource'
        description: The standard JSON format of a resource throughput
    required:
      - resource
    type: object
  UniqueKey:
    description: The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
    properties:
      paths:
        description: List of paths must be unique for each document in the Azure Cosmos DB service
        items:
          $ref: '#/definitions/Path'
        type: array
    type: object
  UniqueKeyPolicy:
    description: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
    properties:
      uniqueKeys:
        description: List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
        items:
          $ref: '#/definitions/UniqueKey'
        type: array
    type: object
  UnitType:
    description: The unit of the metric.
    enum:
      - Count
      - Bytes
      - Seconds
      - Percent
      - CountPerSecond
      - BytesPerSecond
      - Milliseconds
    readOnly: true
    type: string
    x-ms-enum:
      modelAsString: true
      name: UnitType
  Usage:
    description: The usage data for a usage request.
    properties:
      currentValue:
        description: Current value for this metric
        format: int64
        readOnly: true
        type: integer
      limit:
        description: Maximum value for this metric
        format: int64
        readOnly: true
        type: integer
      name:
        $ref: '#/definitions/MetricName'
        description: The name information for the metric.
        readOnly: true
      quotaPeriod:
        description: The quota period used to summarize the usage values.
        readOnly: true
        type: string
      unit:
        $ref: '#/definitions/UnitType'
        description: The unit of the metric.
  UsagesResult:
    description: The response to a list usage request.
    properties:
      value:
        description: The list of usages for the database. A usage is a point in time metric
        items:
          $ref: '#/definitions/Usage'
        readOnly: true
        type: array
  VirtualNetworkRule:
    description: Virtual Network ACL Rule object
    properties:
      id:
        description: 'Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.'
        type: string
      ignoreMissingVNetServiceEndpoint:
        description: Create firewall rule before the virtual network has vnet service endpoint enabled.
        type: boolean
    type: object
