package org.evomaster.client.java.controller.internal.db.sql.h2;

import io.restassured.http.ContentType;
import org.evomaster.client.java.controller.DatabaseTestTemplate;
import org.evomaster.client.java.controller.InstrumentedSutStarter;
import org.evomaster.client.java.controller.api.dto.database.schema.*;
import org.evomaster.client.java.sql.SqlScriptRunner;
import org.evomaster.client.java.controller.internal.SutController;
import org.evomaster.client.java.sql.DbInfoExtractor;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.util.Optional;

import static io.restassured.RestAssured.given;
import static org.evomaster.client.java.controller.api.ControllerConstants.BASE_PATH;
import static org.evomaster.client.java.controller.api.ControllerConstants.INFO_SUT_PATH;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.jupiter.api.Assertions.*;

public class H2SchemaExtractorTest extends DatabaseH2TestInit implements DatabaseTestTemplate {


    @Test
    public void testBasic() throws Exception {

        SqlScriptRunner.execCommand(getConnection(), "CREATE TABLE Foo(x INT)");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertNotNull(schema);

        assertAll(() -> assertEquals("db_test", schema.name.toLowerCase()),
                () -> assertEquals(DatabaseType.H2, schema.databaseType),
                () -> assertEquals(1, schema.tables.size()),
                () -> assertEquals("foo", schema.tables.get(0).name.toLowerCase()),
                () -> assertEquals(1, schema.tables.get(0).columns.size())
        );
    }

    @Test
    public void testTwoTables() throws Exception {
        SqlScriptRunner.execCommand(getConnection(), "CREATE TABLE Foo(x INT); CREATE TABLE Bar(y INT)");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertNotNull(schema);

        assertEquals(2, schema.tables.size());
        assertTrue(schema.tables.stream().map(t -> t.name.toLowerCase()).anyMatch(n -> n.equals("foo")));
        assertTrue(schema.tables.stream().map(t -> t.name.toLowerCase()).anyMatch(n -> n.equals("bar")));
    }


    @Test
    public void testIdentity() throws Exception {
        SqlScriptRunner.execCommand(getConnection(), "CREATE TABLE Foo(" +
                "  id bigint generated by default as identity " +
                ", x int" +
                ", primary key (id) " +
                ");");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        TableDto table = schema.tables.get(0);
        assertEquals(2, table.columns.size());

        Optional<ColumnDto> findAnyId = table.columns.stream()
                .filter(c -> c.name.equalsIgnoreCase("id"))
                .findAny();

        assertTrue(findAnyId.isPresent());
        ColumnDto id = findAnyId.get();

        ColumnDto x = table.columns.stream()
                .filter(c -> c.name.equalsIgnoreCase("x"))
                .findAny().get();

        assertEquals("integer", x.type.toLowerCase());
        assertEquals("bigint", id.type.toLowerCase());

        assertFalse(x.autoIncrement);
        assertTrue(id.autoIncrement);
    }


    @Test
    public void testBasicConstraints() throws Exception {

        SqlScriptRunner.execCommand(getConnection(), "CREATE TABLE Foo(" +
                "  id bigint generated by default as identity " +
                ", name varchar(128) not null " +
                ", surname varchar(255) " +
                ", primary key (id) " +
                ");");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        TableDto table = schema.tables.get(0);
        assertEquals(3, table.columns.size());

        ColumnDto id = table.columns.stream()
                .filter(c -> c.name.equalsIgnoreCase("id"))
                .findAny().get();
        assertTrue(id.autoIncrement);

        ColumnDto name = table.columns.stream()
                .filter(c -> c.name.equalsIgnoreCase("name"))
                .findAny().get();
        assertFalse(name.autoIncrement);
        assertFalse(name.nullable);
        assertEquals(128, name.size);

        ColumnDto surname = table.columns.stream()
                .filter(c -> c.name.equalsIgnoreCase("surname"))
                .findAny().get();
        assertFalse(surname.autoIncrement);
        assertTrue(surname.nullable);
        assertEquals(255, surname.size);
    }


    @Test
    public void testBasicForeignKey() throws Exception {

        SqlScriptRunner.execCommand(getConnection(),
                " CREATE TABLE Bar(id bigint generated by default as identity primary key);"
                        +
                        "CREATE TABLE Foo(" +
                        "  id bigint generated by default as identity " +
                        ", barId bigint not null " +
                        ");"
                        +
                        " ALTER TABLE Foo add constraint barIdKey foreign key (barId) references Bar;\n"
        );

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(2, schema.tables.size());

        TableDto bar = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Bar")).findAny().get();
        TableDto foo = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(0, bar.foreignKeys.size());
        assertEquals(1, foo.foreignKeys.size());

        ForeignKeyDto foreignKey = foo.foreignKeys.get(0);

        assertEquals(1, foreignKey.sourceColumns.size());
        assertTrue(foreignKey.sourceColumns.stream().anyMatch(c -> c.equalsIgnoreCase("barId")));
        assertTrue(foreignKey.targetTable.equalsIgnoreCase("Bar"));
    }

    @Test
    public void testQuizGame() throws Exception {

        SqlScriptRunner.runScriptFromResourceFile(getConnection(), "/db_schemas/quizgame.sql");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(6, schema.tables.size());

        //TODO test all of its content
    }

    @Test
    public void testRetrieveSchema() throws Exception {

        SqlScriptRunner.execCommand(getConnection(), "CREATE TABLE Foo(x INT); CREATE TABLE Bar(y INT)");

        InstrumentedSutStarter starter = getInstrumentedSutStarter();

        String url = start(starter);

        given().accept(ContentType.JSON)
                .get(url + BASE_PATH + INFO_SUT_PATH)
                .then()
                .statusCode(200)
                .body("data.sqlSchemaDto.tables.size()", is(2));
    }

    @Test
    public void testColumnUpperBoundConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (fooId INT, age_max integer check (age_max<=100));";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(2, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("fooId")));
        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("age_max")));

        // TODO check that the column constraint is actually extracted
        ColumnDto columnDto = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("age_max")).findFirst().get();

        assertEquals("INTEGER", columnDto.type);

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"AGE_MAX\" <= 100)", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testTableConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (fooId INT, age_max integer);"
                + "ALTER TABLE FOO ADD CONSTRAINT CHK_AGE_MAX CHECK (age_max<=100);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(2, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("fooId")));
        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("age_max")));

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"AGE_MAX\" <= 100)", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testPrimaryKey() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (id INT, "
                + "primary key (id));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("id")));

        assertTrue(fooTable.columns.get(0).primaryKey);
        assertFalse(fooTable.columns.get(0).unique);

    }

    @Test
    public void testEnumStringConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (fooId INT, status varchar(1));"
                + "ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in ('A', 'B'));";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(2, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("fooId")));
        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN('A', 'B'))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }

    @Test
    public void testEnumBooleanConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status BOOLEAN);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (true, false));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(TRUE, FALSE))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }

    @Test
    public void testEnumIntegerConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status INT);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (42, 77));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(42, 77))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testEnumTinyIntConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status TINYINT);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (42, 77));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(42, 77))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }

    @Test
    public void testEnumSmallIntConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status SMALLINT);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (42, 77));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(42, 77))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testEnumBigIntConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status BIGINT);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (42, 77));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(42, 77))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }

    @Test
    public void testEnumDoubleConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status DOUBLE);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (1.0, 2.5));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(1.0, 2.5))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }


    @Test
    public void testEnumRealConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status REAL);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (1.0, 2.5));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(1.0, 2.5))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }

    @Test
    public void testEnumDecimalConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status DECIMAL);\n" +
                "            ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in (1.0, 2.5));";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN(1.0, 2.5))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);
    }

    @Test
    public void testEnumCharConstraint() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (status CHAR);"
                + "ALTER TABLE FOO ADD CONSTRAINT CHK_STATUS CHECK (status in ('A', 'B'));";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("status")));

        ColumnDto statusColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("status")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"STATUS\" IN('A', 'B'))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testEnumLikeConstraint() throws Exception {
        SqlScriptRunner.execCommand(connection, "CREATE TABLE FOO (f_id TEXT NOT NULL);\n"
                + "ALTER TABLE FOO ADD CONSTRAINT check_f_id_1 CHECK (f_id LIKE 'hi' OR f_id LIKE 'low');\n");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());

        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("f_id")));

        ColumnDto f_idColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("f_id")).findFirst().get();

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"F_ID\" IN(CAST('hi' AS CHARACTER LARGE OBJECT(2)), CAST('low' AS CHARACTER LARGE OBJECT(3))))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testCreateEnumIntColumn() throws Exception {
        SqlScriptRunner.execCommand(connection, "CREATE TYPE enumType as ENUM (10, 20, 30);");
        SqlScriptRunner.execCommand(connection, "CREATE TABLE FOO (enumTypeColumn enumType NOT NULL);");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("enumTypeColumn")));

        ColumnDto enumTypeColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("enumTypeColumn")).findFirst().get();

        assertTrue("enumTypeColumn".equalsIgnoreCase(enumTypeColumn.name));
        assertFalse(enumTypeColumn.isEnumeratedType);
        assertTrue("varchar".equalsIgnoreCase(enumTypeColumn.type));

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"ENUMTYPECOLUMN\" IN ('10', '20', '30'))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testCreateEnumColumn() throws Exception {
        SqlScriptRunner.execCommand(connection, "CREATE TYPE cardsuit as ENUM ('clubs', 'diamonds', 'hearts', 'spades');");
        SqlScriptRunner.execCommand(connection, "CREATE TABLE FOO (cardsuitColumn cardsuit NOT NULL);");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("cardsuitColumn")));

        ColumnDto cardsuitColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("cardsuitColumn")).findFirst().get();

        assertTrue("cardsuitColumn".equalsIgnoreCase(cardsuitColumn.name));
        assertFalse(cardsuitColumn.isEnumeratedType);
        assertTrue("varchar".equalsIgnoreCase(cardsuitColumn.type));

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"CARDSUITCOLUMN\" IN ('clubs', 'diamonds', 'hearts', 'spades'))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);


    }

    @Test
    public void testEnumColumn() throws Exception {
        SqlScriptRunner.execCommand(connection, "CREATE TABLE FOO (enumColumn ENUM('clubs', 'diamonds', 'hearts', 'spades') NOT NULL);");

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        TableDto fooTable = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("Foo")).findAny().get();

        assertEquals(1, fooTable.columns.size());

        assertTrue(fooTable.columns.stream().anyMatch(c -> c.name.equalsIgnoreCase("enumColumn")));

        ColumnDto enumColumn = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("enumColumn")).findFirst().get();

        assertTrue("enumColumn".equalsIgnoreCase(enumColumn.name));
        assertFalse(enumColumn.isEnumeratedType);
        assertTrue("varchar".equalsIgnoreCase(enumColumn.type));

        assertEquals(1, fooTable.tableCheckExpressions.size());
        assertEquals("(\"ENUMCOLUMN\" IN ('clubs', 'diamonds', 'hearts', 'spades'))", fooTable.tableCheckExpressions.get(0).sqlCheckExpression);

    }


    @Test
    public void testArray() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (booleanArrayColumn BOOLEAN ARRAY NOT NULL);";

        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> booleanArrayColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("booleanArrayColumn")).findAny();
        assertTrue(booleanArrayColumnOptional.isPresent());

        ColumnDto booleanArrayColumn = booleanArrayColumnOptional.get();

        assertEquals(1, booleanArrayColumn.numberOfDimensions);
        assertEquals("BOOLEAN", booleanArrayColumn.type);
    }

    @Test
    public void testMultidimensionalArrayOfTwoDimensions() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (booleanArrayColumn BOOLEAN ARRAY ARRAY NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);

        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> booleanArrayColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("booleanArrayColumn")).findAny();
        assertTrue(booleanArrayColumnOptional.isPresent());

        ColumnDto booleanArrayColumn = booleanArrayColumnOptional.get();

        assertEquals(2, booleanArrayColumn.numberOfDimensions);
        assertEquals("BOOLEAN", booleanArrayColumn.type);

    }

    @Test
    public void testMultidimensionalArrayOfThreeDimensions() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (booleanArrayColumn BOOLEAN ARRAY ARRAY ARRAY NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);
        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> booleanArrayColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("booleanArrayColumn")).findAny();
        assertTrue(booleanArrayColumnOptional.isPresent());

        ColumnDto booleanArrayColumn = booleanArrayColumnOptional.get();

        assertEquals(3, booleanArrayColumn.numberOfDimensions);
        assertEquals("BOOLEAN", booleanArrayColumn.type);

    }

    @Test
    public void testBooleanNonlArray() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (booleanColumn BOOLEAN NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);
        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> booleanArrayColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("booleanColumn")).findAny();
        assertTrue(booleanArrayColumnOptional.isPresent());

        ColumnDto booleanArrayColumn = booleanArrayColumnOptional.get();

        assertEquals(0, booleanArrayColumn.numberOfDimensions);
        assertEquals("BOOLEAN", booleanArrayColumn.type);

    }

    @Test
    public void testVarCharArray() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (varCharArrayColumn VARCHAR ARRAY NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);
        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> varcharArrayColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("varCharArrayColumn")).findAny();
        assertTrue(varcharArrayColumnOptional.isPresent());

        ColumnDto varcharArrayColumn = varcharArrayColumnOptional.get();

        assertEquals(1, varcharArrayColumn.numberOfDimensions);
        assertEquals("CHARACTER VARYING", varcharArrayColumn.type);

    }


    @Test
    public void testIntegerArrayWithMaxLengthColumn() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (integerArrayWithMaxLengthColumn INTEGER ARRAY[10] NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);
        DbInfoDto schema = DbInfoExtractor.extract(getConnection());
        assertEquals(1, schema.tables.size());

        Optional<TableDto> fooTableOptional = schema.tables.stream().filter(t -> t.name.equalsIgnoreCase("foo")).findAny();
        assertTrue(fooTableOptional.isPresent());
        TableDto fooTable = fooTableOptional.get();

        assertEquals(1, fooTable.columns.size());

        Optional<ColumnDto> integerArrayWithMaxLengthColumnOptional = fooTable.columns.stream().filter(c -> c.name.equalsIgnoreCase("integerArrayWithMaxLengthColumn")).findAny();
        assertTrue(integerArrayWithMaxLengthColumnOptional.isPresent());

        ColumnDto integerArrayWithMaxLengthColumn = integerArrayWithMaxLengthColumnOptional.get();

        assertEquals(1, integerArrayWithMaxLengthColumn.numberOfDimensions);
        assertEquals("INTEGER", integerArrayWithMaxLengthColumn.type);
        assertEquals(10, integerArrayWithMaxLengthColumn.size);

    }
    @Test
    public void testMultidimensionalArrayOfThreeDimensionsWithMaxLength() throws Exception {
        String sqlCommand = "CREATE TABLE FOO (booleanArrayColumn BOOLEAN ARRAY[3] ARRAY[2] ARRAY[5] NOT NULL);";
        SqlScriptRunner.execCommand(getConnection(), sqlCommand);
        assertThrows(RuntimeException.class, () -> {
            DbInfoExtractor.extract(getConnection());
        });
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public SutController getSutController() {
        return new DatabaseFakeH2SutController(connection);
    }


}
