<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.evomaster</groupId>
        <artifactId>evomaster-client-java</artifactId>
        <version>3.4.1-SNAPSHOT</version>
    </parent>

    <artifactId>evomaster-client-java-controller</artifactId>
    <packaging>jar</packaging>


    <dependencies>
        <!--
            It is paramount that this compiled jar has no third-party libraries (apart from javax.*).
            We want to avoid users of EM having version conflicts if importing same kind of libraries.
            This means that, each time we use a dependency, we need to make sure that we "shade" it.
            Not only we need to shade the used libraries, but also recursively all of their third-party
            libraries imported transitively.

            TODO: should have an integration test that analyze the content of the packaged jar file
        -->
        <dependency>
            <groupId>org.evomaster</groupId>
            <artifactId>evomaster-client-java-util</artifactId>
        </dependency>
        <dependency>
            <groupId>org.evomaster</groupId>
            <artifactId>evomaster-client-java-controller-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.evomaster</groupId>
            <artifactId>evomaster-client-java-instrumentation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.evomaster</groupId>
            <artifactId>evomaster-client-java-sql</artifactId>
        </dependency>

        <dependency>
            <groupId>org.evomaster</groupId>
            <artifactId>evomaster-ci-utils</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <!--
            javax.* libraries.
            This is a bit tricky.
            We do not want to shade them, as that can lead to a lot of problems.
            But, still, they need to be part of the dependencies, otherwise
            the driver will fail at runtime.
            So, we creat an half-uber jar, where the only compile dependencies are
            these javax.* ones, which must be declared here, although indirectly
            imported by the other third-party libraries we shade.
        -->
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.1.0.Final</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>net.java.dev.jna</groupId>-->
<!--            <artifactId>jna-platform</artifactId>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.ea.agentloader</groupId>
            <artifactId>ea-agent-loader</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-jetty-http</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.jsqlparser</groupId>
            <artifactId>jsqlparser</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <scope>test</scope>
        </dependency>

        <!--https://docs.microsoft.com/en-us/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server?view=sql-server-ver15-->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <scope>test</scope>
        </dependency>

        <!--thrift RPC test-->
        <dependency>
            <groupId>org.apache.thrift</groupId>
            <artifactId>libthrift</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>bson</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongodb-driver-sync</artifactId>
            <scope>test</scope>
        </dependency>

        <!--gRPC RPC test-->
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-protobuf</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>

        <extensions>
            <extension>
                <!--     use to generate various useful platform-dependent project properties that is needed for grpc -->
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>${kr.motd.maven.version}</version>
            </extension>
        </extensions>

        <plugins>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <configuration>
                    <protocArtifact>com.google.protobuf:protoc:${com.google.protobuf.protoc.version}:exe:${os.detected.classifier}</protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:${io.grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-compile</goal>
                            <goal>test-compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <!--
                As this library is going to be used and imported by the SUTs,
                need to shade its dependencies to avoid the "Jar Hell".
                This is particularly true for Jetty and Jersey.
                Note: besides changing .class files, here we also need to
                modify the content of META-INF/services, as that is used
                for reflection by Jetty/Jersey.
              -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>false</shadedArtifactAttached>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                            <!--<createSourcesJar>true</createSourcesJar>-->
                            <minimizeJar>false</minimizeJar>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                            </transformers>
                            <artifactSet>
                                <!--
                                    Shading javax.* libraries can give a lot of problems :(
                                    But, still, they must not be part of the uber jar.
                                -->
                                <excludes>
                                    <exclude>javax.annotation:javax.annotation-api</exclude>
                                    <exclude>javax.inject:javax.inject</exclude>
                                    <exclude>org.glassfish.hk2.external:javax.inject</exclude>
                                    <exclude>javax.validation:validation-api</exclude>
                                    <exclude>javax.servlet:javax.servlet-api</exclude>
                                    <exclude>javax.ws.rs:javax.ws.rs-api</exclude>
                                </excludes>
                            </artifactSet>
                            <relocations>
                                <relocation>
                                    <pattern>com.fasterxml</pattern>
                                    <shadedPattern>shaded.com.fasterxml</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>com.ea</pattern>
                                    <shadedPattern>shaded.com.ea</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>javassist</pattern>
                                    <shadedPattern>shaded.javassist</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>jersey</pattern>
                                    <shadedPattern>shaded.jersey</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.aopalliance</pattern>
                                    <shadedPattern>shaded.org.aopalliance</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.eclipse</pattern>
                                    <shadedPattern>shaded.org.eclipse</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.glassfish</pattern>
                                    <shadedPattern>shaded.org.glassfish</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.jvnet</pattern>
                                    <shadedPattern>shaded.org.jvnet</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.objectweb</pattern>
                                    <shadedPattern>shaded.org.objectweb</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>net.sf.jsqlparser</pattern>
                                    <shadedPattern>shaded.net.sf.jsqlparser</shadedPattern>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
