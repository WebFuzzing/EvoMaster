package org.evomaster.core.solver

import net.sf.jsqlparser.JSQLParserException
import org.evomaster.client.java.controller.api.dto.database.schema.DbInfoDto
import org.evomaster.client.java.sql.DbInfoExtractor
import org.evomaster.client.java.sql.SqlScriptRunner
import org.evomaster.core.search.gene.Gene
import org.evomaster.core.search.gene.numeric.IntegerGene
import org.evomaster.core.search.gene.sql.SqlPrimaryKeyGene
import org.evomaster.core.search.gene.string.StringGene
import org.evomaster.solver.smtlib.*
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import java.sql.Connection
import java.sql.DriverManager
import java.sql.SQLException


class SMTLibZ3DbConstraintSolverTest {

    companion object {
        private lateinit var solver: SMTLibZ3DbConstraintSolver
        private lateinit var connection: Connection
        private lateinit var schemaDto: DbInfoDto

        @JvmStatic
        @BeforeAll
        fun setup() {
            connection = DriverManager.getConnection("jdbc:h2:mem:constraint_test", "sa", "")
            SqlScriptRunner.execCommand(connection, "CREATE TABLE users(id bigint generated by default as identity primary key, name varchar(255), age int, points int);\n")
            schemaDto = DbInfoExtractor.extract(connection)
            solver = SMTLibZ3DbConstraintSolver()
            solver.initializeExecutor()
        }

        @JvmStatic
        @AfterAll
        @Throws(SQLException::class)
        fun closeConnection() {
            connection.close()
            if (this::solver.isInitialized) {
                solver.close()
            }
        }
    }

    /**
     * Test the generation of SMT from a simple select statement and a database schema
     * @throws JSQLParserException if the statement is not valid
     */
    @Test
    @Throws(JSQLParserException::class)
    fun selectFromUsers() {

        val newActions = solver.solve(schemaDto, "SELECT * FROM Users;", 2)

        assertEquals(2, newActions.size)

        val genesInsert1: List<Gene> = newActions.get(0).seeTopGenes()

        assertEquals(4, genesInsert1.size)

        for (gene in genesInsert1) {
            when (gene.name) {
                "ID" -> {
                    assertTrue(gene is SqlPrimaryKeyGene)
                    val child = gene.getViewOfChildren().first()
                    assertEquals(0, (child as IntegerGene).value)
                }
                "NAME" -> {
                    assertTrue(gene is StringGene)
                    assertEquals("", (gene as StringGene).value)
                }
                "AGE" -> {
                    assertTrue(gene is IntegerGene)
                    assertEquals(0, (gene as IntegerGene).value)
                }
                "POINTS" -> {
                    assertTrue(gene is IntegerGene)
                    assertEquals(0, (gene as IntegerGene).value)
                }
                else -> {
                    fail("Unexpected gene: $gene")
                }
            }
        }

        val genesInsert2: List<Gene> = newActions.get(1).seeTopGenes()

        assertEquals(4, genesInsert2.size)

        for (gene in genesInsert2) {
            when (gene.name) {
                "ID" -> {
                    assertTrue(gene is SqlPrimaryKeyGene)
                    val child = gene.getViewOfChildren().first()
                    assertEquals(1, (child as IntegerGene).value)
                }
                "NAME" -> {
                    assertTrue(gene is StringGene)
                    assertEquals("", (gene as StringGene).value)
                }
                "AGE" -> {
                    assertTrue(gene is IntegerGene)
                    assertEquals(0, (gene as IntegerGene).value)
                }
                "POINTS" -> {
                    assertTrue(gene is IntegerGene)
                    assertEquals(0, (gene as IntegerGene).value)
                }
                else -> {
                    fail("Unexpected gene: $gene")
                }
            }
        }
    }
}