openapi: 3.0.0
info:
  version: '2017-11-28'
  x-release: v4
  title: Amazon GuardDuty
  description: '<p>Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC Flow Logs, AWS CloudTrail event logs, and DNS logs. It uses threat intelligence feeds (such as lists of malicious IPs and domains) and machine learning to identify unexpected, potentially unauthorized, and malicious activity within your AWS environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances that serve malware or mine bitcoin. </p> <p>GuardDuty also monitors AWS account access behavior for signs of compromise. Some examples of this are unauthorized infrastructure deployments such as EC2 instances deployed in a Region that has never been used, or unusual API calls like a password policy change to reduce password strength. </p> <p>GuardDuty informs you of the status of your AWS environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see the <i> <a href="https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html">Amazon GuardDuty User Guide</a> </i>. </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: guardduty
  x-aws-signingName: guardduty
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/guardduty-2017-11-28.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/guardduty/'
servers:
  - url: 'http://guardduty.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon GuardDuty multi-region endpoint
  - url: 'https://guardduty.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon GuardDuty multi-region endpoint
  - url: 'http://guardduty.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon GuardDuty endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://guardduty.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon GuardDuty endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/detector/{detectorId}/master':
    post:
      operationId: AcceptInvitation
      description: Accepts the invitation to be monitored by a GuardDuty administrator account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - masterId
                - invitationId
              properties:
                masterId:
                  description: The account ID of the GuardDuty administrator account whose invitation you're accepting.
                  type: string
                invitationId:
                  description: The value that is used to validate the administrator account to the member account.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetMasterAccount
      description: Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMasterAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
  '/detector/{detectorId}/findings/archive':
    post:
      operationId: ArchiveFindings
      description: <p>Archives GuardDuty findings that are specified by the list of finding IDs.</p> <note> <p>Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to archive.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings that you want to archive.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /detector:
    post:
      operationId: CreateDetector
      description: 'Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enable
              properties:
                enable:
                  description: A Boolean value that specifies whether the detector is to be enabled.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                findingPublishingFrequency:
                  description: A value that specifies how frequently updated findings are exported.
                  type: string
                  enum:
                    - FIFTEEN_MINUTES
                    - ONE_HOUR
                    - SIX_HOURS
                dataSources:
                  description: Contains information about which data sources are enabled.
                  type: object
                  properties:
                    S3Logs:
                      allOf:
                        - $ref: '#/components/schemas/S3LogsConfiguration'
                        - xml:
                            name: s3Logs
                          description: Describes whether S3 data event logs are enabled as a data source.
                tags:
                  description: The tags to be added to a new detector resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDetectors
      description: Lists detectorIds of all the existing Amazon GuardDuty detector resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDetectorsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/filter':
    post:
      operationId: CreateFilter
      description: Creates a filter using the specified finding criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector belonging to the GuardDuty account that you want to create a filter for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - findingCriteria
              properties:
                name:
                  description: 'The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.'
                  type: string
                  minLength: 3
                  maxLength: 64
                description:
                  description: The description of the filter.
                  type: string
                  minLength: 0
                  maxLength: 512
                action:
                  description: Specifies the action that is to be applied to the findings that match the filter.
                  type: string
                  enum:
                    - NOOP
                    - ARCHIVE
                  minLength: 1
                  maxLength: 300
                rank:
                  description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
                  type: integer
                  minimum: 1
                  maximum: 100
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      allOf:
                        - $ref: '#/components/schemas/Criterion'
                        - xml:
                            name: criterion
                          description: Represents a map of finding properties that match specified conditions and values when querying findings.
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new filter resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListFilters
      description: Returns a paginated list of the current filters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFiltersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/ipset':
    post:
      operationId: CreateIPSet
      description: 'Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn''t generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - format
                - location
                - activate
              properties:
                name:
                  description: '<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>'
                  type: string
                  minLength: 1
                  maxLength: 300
                format:
                  description: The format of the file that contains the IPSet.
                  type: string
                  enum:
                    - TXT
                    - STIX
                    - OTX_CSV
                    - ALIEN_VAULT
                    - PROOF_POINT
                    - FIRE_EYE
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new IP set resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListIPSets
      description: 'Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIPSetsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the IPSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/member':
    post:
      operationId: CreateMembers
      description: '<p>Creates member accounts of the current AWS account by specifying a list of AWS account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization.</p> <p>When using <code>Create Members</code> as an organizations delegated administrator this action will enable GuardDuty in the added member accounts, with the exception of the organization delegated administrator account, which must enable GuardDuty prior to being added as a member.</p> <p>If you are adding accounts by invitation use this action after GuardDuty has been enabled in potential member accounts and before using <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html"> <code>Invite Members</code> </a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to associate member accounts with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountDetails
              properties:
                accountDetails:
                  description: A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountDetail'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMembers
      description: Lists details about all member accounts for the current GuardDuty administrator account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector the member is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: onlyAssociated
          in: query
          required: false
          description: Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated).
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/publishingDestination':
    post:
      operationId: CreatePublishingDestination
      description: Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the GuardDuty detector associated with the publishing destination.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destinationType
                - destinationProperties
              properties:
                destinationType:
                  description: The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
                  type: string
                  enum:
                    - S3
                  minLength: 1
                  maxLength: 300
                destinationProperties:
                  description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
                  type: object
                  properties:
                    DestinationArn:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: destinationArn
                          description: The ARN of the resource to publish to.
                    KmsKeyArn:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: kmsKeyArn
                          description: The ARN of the KMS key to use for encryption.
                clientToken:
                  description: The idempotency token for the request.
                  type: string
                  minLength: 0
                  maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListPublishingDestinations
      description: Returns a list of publishing destinations associated with the specified <code>dectectorId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPublishingDestinationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to retrieve publishing destinations for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in the response.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/findings/create':
    post:
      operationId: CreateSampleFindings
      description: 'Generates example findings of types specified by the list of finding types. If ''NULL'' is specified for <code>findingTypes</code>, the API generates example findings of all supported finding types.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSampleFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to create sample findings for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                findingTypes:
                  description: The types of sample findings to generate.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingType'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/threatintelset':
    post:
      operationId: CreateThreatIntelSet
      description: Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - format
                - location
                - activate
              properties:
                name:
                  description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
                  type: string
                  minLength: 1
                  maxLength: 300
                format:
                  description: The format of the file that contains the ThreatIntelSet.
                  type: string
                  enum:
                    - TXT
                    - STIX
                    - OTX_CSV
                    - ALIEN_VAULT
                    - PROOF_POINT
                    - FIRE_EYE
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new threat list resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListThreatIntelSets
      description: 'Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListThreatIntelSetsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /invitation/decline:
    post:
      operationId: DeclineInvitations
      description: Declines invitations sent to the current member account by AWS accounts specified by their account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeclineInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}':
    delete:
      operationId: DeleteDetector
      description: Deletes an Amazon GuardDuty detector that is specified by the detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDetector
      description: Retrieves an Amazon GuardDuty detector specified by the detectorId.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that you want to get.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    post:
      operationId: UpdateDetector
      description: Updates the Amazon GuardDuty detector specified by the detectorId.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  description: Specifies whether the detector is enabled or not enabled.
                  type: boolean
                findingPublishingFrequency:
                  description: 'An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.'
                  type: string
                  enum:
                    - FIFTEEN_MINUTES
                    - ONE_HOUR
                    - SIX_HOURS
                dataSources:
                  description: Contains information about which data sources are enabled.
                  type: object
                  properties:
                    S3Logs:
                      allOf:
                        - $ref: '#/components/schemas/S3LogsConfiguration'
                        - xml:
                            name: s3Logs
                          description: Describes whether S3 data event logs are enabled as a data source.
  '/detector/{detectorId}/filter/{filterName}':
    delete:
      operationId: DeleteFilter
      description: Deletes the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter that you want to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFilter
      description: Returns the details of the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter you want to get.
          schema:
            type: string
    post:
      operationId: UpdateFilter
      description: Updates the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the filter.
                  type: string
                  minLength: 0
                  maxLength: 512
                action:
                  description: Specifies the action that is to be applied to the findings that match the filter.
                  type: string
                  enum:
                    - NOOP
                    - ARCHIVE
                  minLength: 1
                  maxLength: 300
                rank:
                  description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
                  type: integer
                  minimum: 1
                  maximum: 100
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      allOf:
                        - $ref: '#/components/schemas/Criterion'
                        - xml:
                            name: criterion
                          description: Represents a map of finding properties that match specified conditions and values when querying findings.
  '/detector/{detectorId}/ipset/{ipSetId}':
    delete:
      operationId: DeleteIPSet
      description: Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP lists in the console user interface.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the IPSet.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID of the IPSet to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIPSet
      description: Retrieves the IPSet specified by the <code>ipSetId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the IPSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID of the IPSet to retrieve.
          schema:
            type: string
    post:
      operationId: UpdateIPSet
      description: Updates the IPSet specified by the IPSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detectorID that specifies the GuardDuty service whose IPSet you want to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID that specifies the IPSet that you want to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The unique ID that specifies the IPSet that you want to update.
                  type: string
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: The updated Boolean value that specifies whether the IPSet is active or not.
                  type: boolean
  /invitation/delete:
    post:
      operationId: DeleteInvitations
      description: Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/delete':
    post:
      operationId: DeleteMembers
      description: Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to delete.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/publishingDestination/{destinationId}':
    delete:
      operationId: DeletePublishingDestination
      description: Deletes the publishing definition with the specified <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the publishing destination to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribePublishingDestination
      description: Returns information about the publishing destination specified by the provided <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the publishing destination to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to retrieve.
          schema:
            type: string
    post:
      operationId: UpdatePublishingDestination
      description: Updates information about the publishing destination specified by the <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the publishing destinations to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationProperties:
                  description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
                  type: object
                  properties:
                    DestinationArn:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: destinationArn
                          description: The ARN of the resource to publish to.
                    KmsKeyArn:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: kmsKeyArn
                          description: The ARN of the KMS key to use for encryption.
  '/detector/{detectorId}/threatintelset/{threatIntelSetId}':
    delete:
      operationId: DeleteThreatIntelSet
      description: Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID of the threatIntelSet that you want to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetThreatIntelSet
      description: Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID of the threatIntelSet that you want to get.
          schema:
            type: string
    post:
      operationId: UpdateThreatIntelSet
      description: Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID that specifies the ThreatIntelSet that you want to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The unique ID that specifies the ThreatIntelSet that you want to update.
                  type: string
                  minLength: 1
                  maxLength: 300
                location:
                  description: The updated URI of the file that contains the ThreateIntelSet.
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
                  type: boolean
  '/detector/{detectorId}/admin':
    get:
      operationId: DescribeOrganizationConfiguration
      description: Returns information about the account selected as the delegated administrator for GuardDuty.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeOrganizationConfigurationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to retrieve information about the delegated administrator from.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateOrganizationConfiguration
      description: Updates the delegated administrator account with the values provided.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationConfigurationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to update the delegated administrator for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - autoEnable
              properties:
                autoEnable:
                  description: Indicates whether to automatically enable member accounts in the organization.
                  type: boolean
                dataSources:
                  description: An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.
                  type: object
                  properties:
                    S3Logs:
                      allOf:
                        - $ref: '#/components/schemas/OrganizationS3LogsConfiguration'
                        - xml:
                            name: s3Logs
                          description: Describes whether S3 data event logs are enabled for new members of the organization.
  /admin/disable:
    post:
      operationId: DisableOrganizationAdminAccount
      description: Disables an AWS account within the Organization as the GuardDuty delegated administrator.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableOrganizationAdminAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - adminAccountId
              properties:
                adminAccountId:
                  description: The AWS Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/master/disassociate':
    post:
      operationId: DisassociateFromMasterAccount
      description: Disassociates the current GuardDuty member account from its administrator account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateFromMasterAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/disassociate':
    post:
      operationId: DisassociateMembers
      description: Disassociates GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the administrator account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /admin/enable:
    post:
      operationId: EnableOrganizationAdminAccount
      description: Enables an AWS account within the organization as the GuardDuty delegated administrator.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableOrganizationAdminAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - adminAccountId
              properties:
                adminAccountId:
                  description: The AWS Account ID for the organization account to be enabled as a GuardDuty delegated administrator.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/get':
    post:
      operationId: GetFindings
      description: Describes Amazon GuardDuty findings specified by finding IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings that you want to retrieve.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
                sortCriteria:
                  description: Contains information about the criteria used for sorting findings.
                  type: object
                  properties:
                    AttributeName:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: attributeName
                          description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
                    OrderBy:
                      allOf:
                        - $ref: '#/components/schemas/OrderBy'
                        - xml:
                            name: orderBy
                          description: The order by which the sorted findings are to be displayed.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/statistics':
    post:
      operationId: GetFindingsStatistics
      description: Lists Amazon GuardDuty findings statistics for the specified detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindingsStatisticsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingStatisticTypes
              properties:
                findingStatisticTypes:
                  description: The types of finding statistics to retrieve.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingStatisticType'
                  minItems: 0
                  maxItems: 10
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      allOf:
                        - $ref: '#/components/schemas/Criterion'
                        - xml:
                            name: criterion
                          description: Represents a map of finding properties that match specified conditions and values when querying findings.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /invitation/count:
    get:
      operationId: GetInvitationsCount
      description: Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInvitationsCountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/detector/get':
    post:
      operationId: GetMemberDetectors
      description: Describes which data sources are enabled for the member account's detector.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMemberDetectorsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detector ID for the administrator account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: The account ID of the member account.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/get':
    post:
      operationId: GetMembers
      description: Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to describe.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/usage/statistics':
    post:
      operationId: GetUsageStatistics
      description: 'Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources the cost returned will include only the usage so far under 30 days, this may differ from the cost metrics in the console, which projects usage over 30 days to provide a monthly cost estimate. For more information see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations">Understanding How Usage Costs are Calculated</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsageStatisticsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usageStatisticsType
                - usageCriteria
              properties:
                usageStatisticsType:
                  description: The type of usage statistics to retrieve.
                  type: string
                  enum:
                    - SUM_BY_ACCOUNT
                    - SUM_BY_DATA_SOURCE
                    - SUM_BY_RESOURCE
                    - TOP_RESOURCES
                usageCriteria:
                  description: Contains information about the criteria used to query usage statistics.
                  type: object
                  properties:
                    AccountIds:
                      allOf:
                        - $ref: '#/components/schemas/AccountIds'
                        - xml:
                            name: accountIds
                          description: The account IDs to aggregate usage statistics from.
                    DataSources:
                      allOf:
                        - $ref: '#/components/schemas/DataSourceList'
                        - xml:
                            name: dataSources
                          description: The data sources to aggregate usage statistics from.
                    Resources:
                      allOf:
                        - $ref: '#/components/schemas/ResourceList'
                        - xml:
                            name: resources
                          description: The resources to aggregate usage statistics from. Only accepts exact resource names.
                unit:
                  description: The currency unit you would like to view your usage statistics in. Current valid values are USD.
                  type: string
                maxResults:
                  description: The maximum number of results to return in the response.
                  type: integer
                  minimum: 1
                  maximum: 50
                nextToken:
                  description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/invite':
    post:
      operationId: InviteMembers
      description: 'Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts'' findings on their behalf as the GuardDuty administrator account.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to invite members with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the accounts that you want to invite to GuardDuty as members.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
                disableEmailNotification:
                  description: A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.
                  type: boolean
                message:
                  description: The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings':
    post:
      operationId: ListFindings
      description: Lists Amazon GuardDuty findings for the specified detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to list.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      allOf:
                        - $ref: '#/components/schemas/Criterion'
                        - xml:
                            name: criterion
                          description: Represents a map of finding properties that match specified conditions and values when querying findings.
                sortCriteria:
                  description: Contains information about the criteria used for sorting findings.
                  type: object
                  properties:
                    AttributeName:
                      allOf:
                        - $ref: '#/components/schemas/String'
                        - xml:
                            name: attributeName
                          description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
                    OrderBy:
                      allOf:
                        - $ref: '#/components/schemas/OrderBy'
                        - xml:
                            name: orderBy
                          description: The order by which the sorted findings are to be displayed.
                maxResults:
                  description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
                  type: integer
                  minimum: 1
                  maximum: 50
                nextToken:
                  description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /invitation:
    get:
      operationId: ListInvitations
      description: Lists all GuardDuty membership invitations that were sent to the current AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /admin:
    get:
      operationId: ListOrganizationAdminAccounts
      description: Lists the accounts configured as GuardDuty delegated administrators.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationAdminAccountsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in the response.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: 'Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The Amazon Resource Name (ARN) for the given GuardDuty resource. '
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Adds tags to a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The tags to be added to a resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/detector/{detectorId}/member/start':
    post:
      operationId: StartMonitoringMembers
      description: Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <code>StopMonitoringMembers</code> operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartMonitoringMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty administrator account associated with the member accounts to monitor.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts to start monitoring.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/stop':
    post:
      operationId: StopMonitoringMembers
      description: Stops GuardDuty monitoring for the specified member accounts. Use the <code>StartMonitoringMembers</code> operation to restart monitoring for those accounts.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopMonitoringMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the GuardDuty administrator account that is monitoring member accounts.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs for the member accounts to stop monitoring.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/unarchive':
    post:
      operationId: UnarchiveFindings
      description: Unarchives GuardDuty findings specified by the <code>findingIds</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnarchiveFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the findings to unarchive.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings to unarchive.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes tags from a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) for the resource to remove tags from.
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
        - name: tagKeys
          in: query
          required: true
          description: The tag keys to remove from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/feedback':
    post:
      operationId: UpdateFindingsFeedback
      description: Marks the specified GuardDuty findings as useful or not useful.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFindingsFeedbackResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the findings to update feedback for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
                - feedback
              properties:
                findingIds:
                  description: The IDs of the findings that you want to mark as useful or not useful.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
                feedback:
                  description: The feedback for the finding.
                  type: string
                  enum:
                    - USEFUL
                    - NOT_USEFUL
                comments:
                  description: Additional feedback about the GuardDuty findings.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/detector/update':
    post:
      operationId: UpdateMemberDetectors
      description: Contains information on member accounts to be updated.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMemberDetectorsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detector ID of the administrator account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of member account IDs to be updated.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
                dataSources:
                  description: Contains information about which data sources are enabled.
                  type: object
                  properties:
                    S3Logs:
                      allOf:
                        - $ref: '#/components/schemas/S3LogsConfiguration'
                        - xml:
                            name: s3Logs
                          description: Describes whether S3 data event logs are enabled as a data source.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AcceptInvitationResponse:
      type: object
      properties: {}
    BadRequestException: {}
    InternalServerErrorException: {}
    ArchiveFindingsResponse:
      type: object
      properties: {}
    FindingId:
      type: string
      minLength: 1
      maxLength: 300
    CreateDetectorResponse:
      type: object
      properties:
        DetectorId:
          allOf:
            - $ref: '#/components/schemas/DetectorId'
            - xml:
                name: detectorId
              description: The unique ID of the created detector.
    S3LogsConfiguration:
      type: object
      required:
        - Enable
      properties:
        Enable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: enable
              description: ' The status of S3 data event logs as a data source.'
      description: Describes whether S3 data event logs will be enabled as a data source.
    TagValue:
      type: string
      maxLength: 256
    CreateFilterResponse:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/FilterName'
            - xml:
                name: name
              description: The name of the successfully created filter.
    Criterion:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Condition'
    CreateIPSetResponse:
      type: object
      required:
        - IpSetId
      properties:
        IpSetId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: ipSetId
              description: The ID of the IPSet resource.
    CreateMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.
    AccountDetail:
      type: object
      required:
        - AccountId
        - Email
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The member account ID.
        Email:
          allOf:
            - $ref: '#/components/schemas/Email'
            - xml:
                name: email
              description: The email address of the member account.
      description: Contains information about the account.
    CreatePublishingDestinationResponse:
      type: object
      required:
        - DestinationId
      properties:
        DestinationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: destinationId
              description: The ID of the publishing destination that is created.
    String:
      type: string
    CreateSampleFindingsResponse:
      type: object
      properties: {}
    FindingType:
      type: string
      minLength: 1
      maxLength: 50
    CreateThreatIntelSetResponse:
      type: object
      required:
        - ThreatIntelSetId
      properties:
        ThreatIntelSetId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: threatIntelSetId
              description: The ID of the ThreatIntelSet resource.
    DeclineInvitationsResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    AccountId:
      type: string
      minLength: 12
      maxLength: 12
    DeleteDetectorResponse:
      type: object
      properties: {}
    DeleteFilterResponse:
      type: object
      properties: {}
    DeleteIPSetResponse:
      type: object
      properties: {}
    DeleteInvitationsResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    DeleteMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: The accounts that could not be processed.
    DeletePublishingDestinationResponse:
      type: object
      properties: {}
    DeleteThreatIntelSetResponse:
      type: object
      properties: {}
    DescribeOrganizationConfigurationResponse:
      type: object
      required:
        - AutoEnable
        - MemberAccountLimitReached
      properties:
        AutoEnable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: autoEnable
              description: Indicates whether GuardDuty is automatically enabled for accounts added to the organization.
        MemberAccountLimitReached:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: memberAccountLimitReached
              description: Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/OrganizationDataSourceConfigurationsResult'
            - xml:
                name: dataSources
              description: Describes which data sources are enabled automatically for member accounts.
    DescribePublishingDestinationResponse:
      type: object
      required:
        - DestinationId
        - DestinationType
        - Status
        - PublishingFailureStartTimestamp
        - DestinationProperties
      properties:
        DestinationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: destinationId
              description: The ID of the publishing destination.
        DestinationType:
          allOf:
            - $ref: '#/components/schemas/DestinationType'
            - xml:
                name: destinationType
              description: 'The type of publishing destination. Currently, only Amazon S3 buckets are supported.'
        Status:
          allOf:
            - $ref: '#/components/schemas/PublishingStatus'
            - xml:
                name: status
              description: The status of the publishing destination.
        PublishingFailureStartTimestamp:
          allOf:
            - $ref: '#/components/schemas/Long'
            - xml:
                name: publishingFailureStartTimestamp
              description: 'The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.'
        DestinationProperties:
          allOf:
            - $ref: '#/components/schemas/DestinationProperties'
            - xml:
                name: destinationProperties
              description: A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.
    DisableOrganizationAdminAccountResponse:
      type: object
      properties: {}
    DisassociateFromMasterAccountResponse:
      type: object
      properties: {}
    DisassociateMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    EnableOrganizationAdminAccountResponse:
      type: object
      properties: {}
    GetDetectorResponse:
      type: object
      required:
        - ServiceRole
        - Status
      properties:
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: createdAt
              description: The timestamp of when the detector was created.
        FindingPublishingFrequency:
          allOf:
            - $ref: '#/components/schemas/FindingPublishingFrequency'
            - xml:
                name: findingPublishingFrequency
              description: The publishing frequency of the finding.
        ServiceRole:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: serviceRole
              description: The GuardDuty service role.
        Status:
          allOf:
            - $ref: '#/components/schemas/DetectorStatus'
            - xml:
                name: status
              description: The detector status.
        UpdatedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: updatedAt
              description: The last-updated timestamp for the detector.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceConfigurationsResult'
            - xml:
                name: dataSources
              description: Describes which data sources are enabled for the detector.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags of the detector resource.
    GetFilterResponse:
      type: object
      required:
        - Name
        - Action
        - FindingCriteria
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/FilterName'
            - xml:
                name: name
              description: The name of the filter.
        Description:
          allOf:
            - $ref: '#/components/schemas/FilterDescription'
            - xml:
                name: description
              description: The description of the filter.
        Action:
          allOf:
            - $ref: '#/components/schemas/FilterAction'
            - xml:
                name: action
              description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          allOf:
            - $ref: '#/components/schemas/FilterRank'
            - xml:
                name: rank
              description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          allOf:
            - $ref: '#/components/schemas/FindingCriteria'
            - xml:
                name: findingCriteria
              description: Represents the criteria to be used in the filter for querying findings.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags of the filter resource.
    GetFindingsResponse:
      type: object
      required:
        - Findings
      properties:
        Findings:
          allOf:
            - $ref: '#/components/schemas/Findings'
            - xml:
                name: findings
              description: A list of findings.
    OrderBy:
      type: string
      enum:
        - ASC
        - DESC
    GetFindingsStatisticsResponse:
      type: object
      required:
        - FindingStatistics
      properties:
        FindingStatistics:
          allOf:
            - $ref: '#/components/schemas/FindingStatistics'
            - xml:
                name: findingStatistics
              description: The finding statistics object.
    FindingStatisticType:
      type: string
      enum:
        - COUNT_BY_SEVERITY
    GetIPSetResponse:
      type: object
      required:
        - Name
        - Format
        - Location
        - Status
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: The user-friendly name for the IPSet.
        Format:
          allOf:
            - $ref: '#/components/schemas/IpSetFormat'
            - xml:
                name: format
              description: The format of the file that contains the IPSet.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Status:
          allOf:
            - $ref: '#/components/schemas/IpSetStatus'
            - xml:
                name: status
              description: The status of IPSet file that was uploaded.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags of the IPSet resource.
    GetInvitationsCountResponse:
      type: object
      properties:
        InvitationsCount:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - xml:
                name: invitationsCount
              description: The number of received invitations.
    GetMasterAccountResponse:
      type: object
      required:
        - Master
      properties:
        Master:
          allOf:
            - $ref: '#/components/schemas/Master'
            - xml:
                name: master
              description: The administrator account details.
    GetMemberDetectorsResponse:
      type: object
      required:
        - MemberDataSourceConfigurations
        - UnprocessedAccounts
      properties:
        MemberDataSourceConfigurations:
          allOf:
            - $ref: '#/components/schemas/MemberDataSourceConfigurations'
            - xml:
                name: members
              description: An object that describes which data sources are enabled for a member account.
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.
    GetMembersResponse:
      type: object
      required:
        - Members
        - UnprocessedAccounts
      properties:
        Members:
          allOf:
            - $ref: '#/components/schemas/Members'
            - xml:
                name: members
              description: A list of members.
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    GetThreatIntelSetResponse:
      type: object
      required:
        - Name
        - Format
        - Location
        - Status
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
        Format:
          allOf:
            - $ref: '#/components/schemas/ThreatIntelSetFormat'
            - xml:
                name: format
              description: The format of the threatIntelSet.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Status:
          allOf:
            - $ref: '#/components/schemas/ThreatIntelSetStatus'
            - xml:
                name: status
              description: The status of threatIntelSet file uploaded.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags of the threat list resource.
    GetUsageStatisticsResponse:
      type: object
      properties:
        UsageStatistics:
          allOf:
            - $ref: '#/components/schemas/UsageStatistics'
            - xml:
                name: usageStatistics
              description: 'The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.'
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    AccountIds:
      type: array
      items:
        $ref: '#/components/schemas/AccountId'
      minItems: 1
      maxItems: 50
    DataSourceList:
      type: array
      items:
        $ref: '#/components/schemas/DataSource'
    ResourceList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    InviteMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    ListDetectorsResponse:
      type: object
      required:
        - DetectorIds
      properties:
        DetectorIds:
          allOf:
            - $ref: '#/components/schemas/DetectorIds'
            - xml:
                name: detectorIds
              description: A list of detector IDs.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListFiltersResponse:
      type: object
      required:
        - FilterNames
      properties:
        FilterNames:
          allOf:
            - $ref: '#/components/schemas/FilterNames'
            - xml:
                name: filterNames
              description: A list of filter names.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListFindingsResponse:
      type: object
      required:
        - FindingIds
      properties:
        FindingIds:
          allOf:
            - $ref: '#/components/schemas/FindingIds'
            - xml:
                name: findingIds
              description: The IDs of the findings that you're listing.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListIPSetsResponse:
      type: object
      required:
        - IpSetIds
      properties:
        IpSetIds:
          allOf:
            - $ref: '#/components/schemas/IpSetIds'
            - xml:
                name: ipSetIds
              description: The IDs of the IPSet resources.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListInvitationsResponse:
      type: object
      properties:
        Invitations:
          allOf:
            - $ref: '#/components/schemas/Invitations'
            - xml:
                name: invitations
              description: A list of invitation descriptions.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListMembersResponse:
      type: object
      properties:
        Members:
          allOf:
            - $ref: '#/components/schemas/Members'
            - xml:
                name: members
              description: A list of members.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListOrganizationAdminAccountsResponse:
      type: object
      properties:
        AdminAccounts:
          allOf:
            - $ref: '#/components/schemas/AdminAccounts'
            - xml:
                name: adminAccounts
              description: A list of accounts configured as GuardDuty delegated administrators.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListPublishingDestinationsResponse:
      type: object
      required:
        - Destinations
      properties:
        Destinations:
          allOf:
            - $ref: '#/components/schemas/Destinations'
            - xml:
                name: destinations
              description: A <code>Destinations</code> object that includes information about each publishing destination returned.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags associated with the resource.
    ListThreatIntelSetsResponse:
      type: object
      required:
        - ThreatIntelSetIds
      properties:
        ThreatIntelSetIds:
          allOf:
            - $ref: '#/components/schemas/ThreatIntelSetIds'
            - xml:
                name: threatIntelSetIds
              description: The IDs of the ThreatIntelSet resources.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: The pagination parameter to be used on the next list operation to retrieve more items.
    StartMonitoringMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    StopMonitoringMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: 'A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. '
    TagResourceResponse:
      type: object
      properties: {}
    UnarchiveFindingsResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
      minLength: 1
      maxLength: 128
    UpdateDetectorResponse:
      type: object
      properties: {}
    UpdateFilterResponse:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/FilterName'
            - xml:
                name: name
              description: The name of the filter.
    UpdateFindingsFeedbackResponse:
      type: object
      properties: {}
    UpdateIPSetResponse:
      type: object
      properties: {}
    UpdateMemberDetectorsResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          allOf:
            - $ref: '#/components/schemas/UnprocessedAccounts'
            - xml:
                name: unprocessedAccounts
              description: A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.
    UpdateOrganizationConfigurationResponse:
      type: object
      properties: {}
    OrganizationS3LogsConfiguration:
      type: object
      required:
        - AutoEnable
      properties:
        AutoEnable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: autoEnable
              description: A value that contains information on whether S3 data event logs will be enabled automatically as a data source for the organization.
      description: Describes whether S3 data event logs will be automatically enabled for new members of the organization.
    UpdatePublishingDestinationResponse:
      type: object
      properties: {}
    UpdateThreatIntelSetResponse:
      type: object
      properties: {}
    DetectorId:
      type: string
      minLength: 1
      maxLength: 300
    AcceptInvitationRequest:
      type: object
      required:
        - MasterId
        - InvitationId
      title: AcceptInvitationRequest
      properties:
        MasterId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: masterId
              description: The account ID of the GuardDuty administrator account whose invitation you're accepting.
        InvitationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitationId
              description: The value that is used to validate the administrator account to the member account.
    Boolean:
      type: boolean
    AccessControlList:
      type: object
      properties:
        AllowsPublicReadAccess:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: allowsPublicReadAccess
              description: A value that indicates whether public read access for the bucket is enabled through an Access Control List (ACL).
        AllowsPublicWriteAccess:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: allowsPublicWriteAccess
              description: A value that indicates whether public write access for the bucket is enabled through an Access Control List (ACL).
      description: Contains information on the current access control policies for the bucket.
    AccessKeyDetails:
      type: object
      properties:
        AccessKeyId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: accessKeyId
              description: The access key ID of the user.
        PrincipalId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: principalId
              description: The principal ID of the user.
        UserName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: userName
              description: The name of the user.
        UserType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: userType
              description: The type of the user.
      description: Contains information about the access keys.
    Email:
      type: string
      minLength: 1
      maxLength: 64
    AccountDetails:
      type: array
      items:
        $ref: '#/components/schemas/AccountDetail'
      minItems: 1
      maxItems: 50
    BlockPublicAccess:
      type: object
      properties:
        IgnorePublicAcls:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: ignorePublicAcls
              description: Indicates if S3 Block Public Access is set to <code>IgnorePublicAcls</code>.
        RestrictPublicBuckets:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: restrictPublicBuckets
              description: Indicates if S3 Block Public Access is set to <code>RestrictPublicBuckets</code>.
        BlockPublicAcls:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: blockPublicAcls
              description: Indicates if S3 Block Public Access is set to <code>BlockPublicAcls</code>.
        BlockPublicPolicy:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: blockPublicPolicy
              description: Indicates if S3 Block Public Access is set to <code>BlockPublicPolicy</code>.
      description: 'Contains information on how the bucker owner''s S3 Block Public Access settings are being applied to the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">S3 Block Public Access</a> for more information. '
    AccountLevelPermissions:
      type: object
      properties:
        BlockPublicAccess:
          allOf:
            - $ref: '#/components/schemas/BlockPublicAccess'
            - xml:
                name: blockPublicAccess
              description: Describes the S3 Block Public Access settings of the bucket's parent account.
      description: Contains information about the account level permissions on the S3 bucket.
    AwsApiCallAction:
      type: object
      properties:
        Api:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: api
              description: The AWS API name.
        CallerType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: callerType
              description: The AWS API caller type.
        DomainDetails:
          allOf:
            - $ref: '#/components/schemas/DomainDetails'
            - xml:
                name: domainDetails
              description: The domain information for the AWS API call.
        ErrorCode:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: errorCode
              description: The error code of the failed AWS API action.
        RemoteIpDetails:
          allOf:
            - $ref: '#/components/schemas/RemoteIpDetails'
            - xml:
                name: remoteIpDetails
              description: The remote IP information of the connection that initiated the AWS API call.
        ServiceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: serviceName
              description: The AWS service name whose API was invoked.
      description: Contains information about the API action.
    DnsRequestAction:
      type: object
      properties:
        Domain:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: domain
              description: The domain information for the API request.
      description: Contains information about the DNS_REQUEST action described in this finding.
    NetworkConnectionAction:
      type: object
      properties:
        Blocked:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: blocked
              description: Indicates whether EC2 blocked the network connection to your instance.
        ConnectionDirection:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: connectionDirection
              description: The network connection direction.
        LocalPortDetails:
          allOf:
            - $ref: '#/components/schemas/LocalPortDetails'
            - xml:
                name: localPortDetails
              description: The local port information of the connection.
        Protocol:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: protocol
              description: The network connection protocol.
        LocalIpDetails:
          allOf:
            - $ref: '#/components/schemas/LocalIpDetails'
            - xml:
                name: localIpDetails
              description: The local IP information of the connection.
        RemoteIpDetails:
          allOf:
            - $ref: '#/components/schemas/RemoteIpDetails'
            - xml:
                name: remoteIpDetails
              description: The remote IP information of the connection.
        RemotePortDetails:
          allOf:
            - $ref: '#/components/schemas/RemotePortDetails'
            - xml:
                name: remotePortDetails
              description: The remote port information of the connection.
      description: Contains information about the NETWORK_CONNECTION action described in the finding.
    PortProbeAction:
      type: object
      properties:
        Blocked:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: blocked
              description: 'Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.'
        PortProbeDetails:
          allOf:
            - $ref: '#/components/schemas/PortProbeDetails'
            - xml:
                name: portProbeDetails
              description: A list of objects related to port probe details.
      description: Contains information about the PORT_PROBE action described in the finding.
    Action:
      type: object
      properties:
        ActionType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: actionType
              description: The GuardDuty finding activity type.
        AwsApiCallAction:
          allOf:
            - $ref: '#/components/schemas/AwsApiCallAction'
            - xml:
                name: awsApiCallAction
              description: Information about the AWS_API_CALL action described in this finding.
        DnsRequestAction:
          allOf:
            - $ref: '#/components/schemas/DnsRequestAction'
            - xml:
                name: dnsRequestAction
              description: Information about the DNS_REQUEST action described in this finding.
        NetworkConnectionAction:
          allOf:
            - $ref: '#/components/schemas/NetworkConnectionAction'
            - xml:
                name: networkConnectionAction
              description: Information about the NETWORK_CONNECTION action described in this finding.
        PortProbeAction:
          allOf:
            - $ref: '#/components/schemas/PortProbeAction'
            - xml:
                name: portProbeAction
              description: Information about the PORT_PROBE action described in this finding.
      description: Contains information about actions.
    AdminStatus:
      type: string
      enum:
        - ENABLED
        - DISABLE_IN_PROGRESS
      minLength: 1
      maxLength: 300
    AdminAccount:
      type: object
      properties:
        AdminAccountId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: adminAccountId
              description: The AWS account ID for the account.
        AdminStatus:
          allOf:
            - $ref: '#/components/schemas/AdminStatus'
            - xml:
                name: adminStatus
              description: Indicates whether the account is enabled as the delegated administrator.
      description: The account within the organization specified as the GuardDuty delegated administrator.
    AdminAccounts:
      type: array
      items:
        $ref: '#/components/schemas/AdminAccount'
      minItems: 0
      maxItems: 1
    FindingIds:
      type: array
      items:
        $ref: '#/components/schemas/FindingId'
      minItems: 0
      maxItems: 50
    ArchiveFindingsRequest:
      type: object
      required:
        - FindingIds
      title: ArchiveFindingsRequest
      properties:
        FindingIds:
          allOf:
            - $ref: '#/components/schemas/FindingIds'
            - xml:
                name: findingIds
              description: The IDs of the findings that you want to archive.
    DomainDetails:
      type: object
      properties:
        Domain:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: domain
              description: The domain information for the AWS API call.
      description: Contains information about the domain.
    RemoteIpDetails:
      type: object
      properties:
        City:
          allOf:
            - $ref: '#/components/schemas/City'
            - xml:
                name: city
              description: The city information of the remote IP address.
        Country:
          allOf:
            - $ref: '#/components/schemas/Country'
            - xml:
                name: country
              description: The country code of the remote IP address.
        GeoLocation:
          allOf:
            - $ref: '#/components/schemas/GeoLocation'
            - xml:
                name: geoLocation
              description: The location information of the remote IP address.
        IpAddressV4:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: ipAddressV4
              description: The IPv4 remote address of the connection.
        Organization:
          allOf:
            - $ref: '#/components/schemas/Organization'
            - xml:
                name: organization
              description: The ISP organization information of the remote IP address.
      description: Contains information about the remote IP address of the connection.
    BucketPolicy:
      type: object
      properties:
        AllowsPublicReadAccess:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: allowsPublicReadAccess
              description: A value that indicates whether public read access for the bucket is enabled through a bucket policy.
        AllowsPublicWriteAccess:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: allowsPublicWriteAccess
              description: A value that indicates whether public write access for the bucket is enabled through a bucket policy.
      description: Contains information on the current bucket policies for the S3 bucket.
    BucketLevelPermissions:
      type: object
      properties:
        AccessControlList:
          allOf:
            - $ref: '#/components/schemas/AccessControlList'
            - xml:
                name: accessControlList
              description: Contains information on how Access Control Policies are applied to the bucket.
        BucketPolicy:
          allOf:
            - $ref: '#/components/schemas/BucketPolicy'
            - xml:
                name: bucketPolicy
              description: Contains information on the bucket policies for the S3 bucket.
        BlockPublicAccess:
          allOf:
            - $ref: '#/components/schemas/BlockPublicAccess'
            - xml:
                name: blockPublicAccess
              description: Contains information on which account level S3 Block Public Access settings are applied to the S3 bucket.
      description: Contains information about the bucket level permissions for the S3 bucket.
    City:
      type: object
      properties:
        CityName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: cityName
              description: The city name of the remote IP address.
      description: Contains information about the city associated with the IP address.
    ClientToken:
      type: string
      minLength: 0
      maxLength: 64
    DataSourceStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
      minLength: 1
      maxLength: 300
    CloudTrailConfigurationResult:
      type: object
      required:
        - Status
      properties:
        Status:
          allOf:
            - $ref: '#/components/schemas/DataSourceStatus'
            - xml:
                name: status
              description: Describes whether CloudTrail is enabled as a data source for the detector.
      description: Contains information on the status of CloudTrail as a data source for the detector.
    Eq:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Neq:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Integer:
      type: integer
    Equals:
      type: array
      items:
        $ref: '#/components/schemas/String'
    NotEquals:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Long:
      type: integer
    Condition:
      type: object
      properties:
        Eq:
          allOf:
            - $ref: '#/components/schemas/Eq'
            - deprecated: true
              xml:
                name: eq
              description: Represents the <i>equal</i> condition to be applied to a single field when querying for findings.
        Neq:
          allOf:
            - $ref: '#/components/schemas/Neq'
            - deprecated: true
              xml:
                name: neq
              description: Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.
        Gt:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - deprecated: true
              xml:
                name: gt
              description: Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.
        Gte:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - deprecated: true
              xml:
                name: gte
              description: Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.
        Lt:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - deprecated: true
              xml:
                name: lt
              description: Represents a <i>less than</i> condition to be applied to a single field when querying for findings.
        Lte:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - deprecated: true
              xml:
                name: lte
              description: Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.
        Equals:
          allOf:
            - $ref: '#/components/schemas/Equals'
            - xml:
                name: equals
              description: Represents an <i>equal</i> <b/> condition to be applied to a single field when querying for findings.
        NotEquals:
          allOf:
            - $ref: '#/components/schemas/NotEquals'
            - xml:
                name: notEquals
              description: Represents a <i>not equal</i> <b/> condition to be applied to a single field when querying for findings.
        GreaterThan:
          allOf:
            - $ref: '#/components/schemas/Long'
            - xml:
                name: greaterThan
              description: Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.
        GreaterThanOrEqual:
          allOf:
            - $ref: '#/components/schemas/Long'
            - xml:
                name: greaterThanOrEqual
              description: Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.
        LessThan:
          allOf:
            - $ref: '#/components/schemas/Long'
            - xml:
                name: lessThan
              description: Represents a <i>less than</i> condition to be applied to a single field when querying for findings.
        LessThanOrEqual:
          allOf:
            - $ref: '#/components/schemas/Long'
            - xml:
                name: lessThanOrEqual
              description: Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.
      description: Contains information about the condition.
    CountBySeverity:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Integer'
    Country:
      type: object
      properties:
        CountryCode:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: countryCode
              description: The country code of the remote IP address.
        CountryName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: countryName
              description: The country name of the remote IP address.
      description: Contains information about the country where the remote IP address is located.
    FindingPublishingFrequency:
      type: string
      enum:
        - FIFTEEN_MINUTES
        - ONE_HOUR
        - SIX_HOURS
    DataSourceConfigurations:
      type: object
      properties:
        S3Logs:
          allOf:
            - $ref: '#/components/schemas/S3LogsConfiguration'
            - xml:
                name: s3Logs
              description: Describes whether S3 data event logs are enabled as a data source.
      description: Contains information about which data sources are enabled.
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 200
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateDetectorRequest:
      type: object
      required:
        - Enable
      title: CreateDetectorRequest
      properties:
        Enable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: enable
              description: A Boolean value that specifies whether the detector is to be enabled.
        ClientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - xml:
                name: clientToken
              description: The idempotency token for the create request.
        FindingPublishingFrequency:
          allOf:
            - $ref: '#/components/schemas/FindingPublishingFrequency'
            - xml:
                name: findingPublishingFrequency
              description: A value that specifies how frequently updated findings are exported.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceConfigurations'
            - xml:
                name: dataSources
              description: Describes which data sources will be enabled for the detector.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags to be added to a new detector resource.
    FilterName:
      type: string
      minLength: 3
      maxLength: 64
    FilterDescription:
      type: string
      minLength: 0
      maxLength: 512
    FilterAction:
      type: string
      enum:
        - NOOP
        - ARCHIVE
      minLength: 1
      maxLength: 300
    FilterRank:
      type: integer
      minimum: 1
      maximum: 100
    FindingCriteria:
      type: object
      properties:
        Criterion:
          allOf:
            - $ref: '#/components/schemas/Criterion'
            - xml:
                name: criterion
              description: Represents a map of finding properties that match specified conditions and values when querying findings.
      description: Contains information about the criteria used for querying findings.
    CreateFilterRequest:
      type: object
      required:
        - Name
        - FindingCriteria
      title: CreateFilterRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/FilterName'
            - xml:
                name: name
              description: 'The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.'
        Description:
          allOf:
            - $ref: '#/components/schemas/FilterDescription'
            - xml:
                name: description
              description: The description of the filter.
        Action:
          allOf:
            - $ref: '#/components/schemas/FilterAction'
            - xml:
                name: action
              description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          allOf:
            - $ref: '#/components/schemas/FilterRank'
            - xml:
                name: rank
              description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          allOf:
            - $ref: '#/components/schemas/FindingCriteria'
            - xml:
                name: findingCriteria
              description: '<p>Represents the criteria to be used in the filter for querying findings.</p> <p>You can only use the following attributes to query findings:</p> <ul> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.outpostArn</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.errorCode</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.localIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to TRUE, only archived findings are listed. When it''s set to FALSE, only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.</p> </li> </ul>'
        ClientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - xml:
                name: clientToken
              description: The idempotency token for the create request.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags to be added to a new filter resource.
    Name:
      type: string
      minLength: 1
      maxLength: 300
    IpSetFormat:
      type: string
      enum:
        - TXT
        - STIX
        - OTX_CSV
        - ALIEN_VAULT
        - PROOF_POINT
        - FIRE_EYE
      minLength: 1
      maxLength: 300
    Location:
      type: string
      minLength: 1
      maxLength: 300
    CreateIPSetRequest:
      type: object
      required:
        - Name
        - Format
        - Location
        - Activate
      title: CreateIPSetRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: '<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>'
        Format:
          allOf:
            - $ref: '#/components/schemas/IpSetFormat'
            - xml:
                name: format
              description: The format of the file that contains the IPSet.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: activate
              description: A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
        ClientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - xml:
                name: clientToken
              description: The idempotency token for the create request.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags to be added to a new IP set resource.
    CreateMembersRequest:
      type: object
      required:
        - AccountDetails
      title: CreateMembersRequest
      properties:
        AccountDetails:
          allOf:
            - $ref: '#/components/schemas/AccountDetails'
            - xml:
                name: accountDetails
              description: A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.
    UnprocessedAccounts:
      type: array
      items:
        $ref: '#/components/schemas/UnprocessedAccount'
      minItems: 0
      maxItems: 50
    DestinationType:
      type: string
      enum:
        - S3
      minLength: 1
      maxLength: 300
    DestinationProperties:
      type: object
      properties:
        DestinationArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: destinationArn
              description: The ARN of the resource to publish to.
        KmsKeyArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: kmsKeyArn
              description: The ARN of the KMS key to use for encryption.
      description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
    CreatePublishingDestinationRequest:
      type: object
      required:
        - DestinationType
        - DestinationProperties
      title: CreatePublishingDestinationRequest
      properties:
        DestinationType:
          allOf:
            - $ref: '#/components/schemas/DestinationType'
            - xml:
                name: destinationType
              description: The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
        DestinationProperties:
          allOf:
            - $ref: '#/components/schemas/DestinationProperties'
            - xml:
                name: destinationProperties
              description: 'The properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.'
        ClientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - xml:
                name: clientToken
              description: The idempotency token for the request.
    FindingTypes:
      type: array
      items:
        $ref: '#/components/schemas/FindingType'
      minItems: 0
      maxItems: 50
    CreateSampleFindingsRequest:
      type: object
      title: CreateSampleFindingsRequest
      properties:
        FindingTypes:
          allOf:
            - $ref: '#/components/schemas/FindingTypes'
            - xml:
                name: findingTypes
              description: The types of sample findings to generate.
    ThreatIntelSetFormat:
      type: string
      enum:
        - TXT
        - STIX
        - OTX_CSV
        - ALIEN_VAULT
        - PROOF_POINT
        - FIRE_EYE
      minLength: 1
      maxLength: 300
    CreateThreatIntelSetRequest:
      type: object
      required:
        - Name
        - Format
        - Location
        - Activate
      title: CreateThreatIntelSetRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
        Format:
          allOf:
            - $ref: '#/components/schemas/ThreatIntelSetFormat'
            - xml:
                name: format
              description: The format of the file that contains the ThreatIntelSet.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: activate
              description: A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
        ClientToken:
          allOf:
            - $ref: '#/components/schemas/ClientToken'
            - xml:
                name: clientToken
              description: The idempotency token for the create request.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags to be added to a new threat list resource.
    DNSLogsConfigurationResult:
      type: object
      required:
        - Status
      properties:
        Status:
          allOf:
            - $ref: '#/components/schemas/DataSourceStatus'
            - xml:
                name: status
              description: Denotes whether DNS logs is enabled as a data source.
      description: Contains information on the status of DNS logs as a data source.
    DataSource:
      type: string
      enum:
        - FLOW_LOGS
        - CLOUD_TRAIL
        - DNS_LOGS
        - S3_LOGS
    FlowLogsConfigurationResult:
      type: object
      required:
        - Status
      properties:
        Status:
          allOf:
            - $ref: '#/components/schemas/DataSourceStatus'
            - xml:
                name: status
              description: Denotes whether VPC flow logs is enabled as a data source.
      description: Contains information on the status of VPC flow logs as a data source.
    S3LogsConfigurationResult:
      type: object
      required:
        - Status
      properties:
        Status:
          allOf:
            - $ref: '#/components/schemas/DataSourceStatus'
            - xml:
                name: status
              description: A value that describes whether S3 data event logs are automatically enabled for new members of the organization.
      description: Describes whether S3 data event logs will be enabled as a data source.
    DataSourceConfigurationsResult:
      type: object
      required:
        - CloudTrail
        - DNSLogs
        - FlowLogs
        - S3Logs
      properties:
        CloudTrail:
          allOf:
            - $ref: '#/components/schemas/CloudTrailConfigurationResult'
            - xml:
                name: cloudTrail
              description: An object that contains information on the status of CloudTrail as a data source.
        DNSLogs:
          allOf:
            - $ref: '#/components/schemas/DNSLogsConfigurationResult'
            - xml:
                name: dnsLogs
              description: An object that contains information on the status of DNS logs as a data source.
        FlowLogs:
          allOf:
            - $ref: '#/components/schemas/FlowLogsConfigurationResult'
            - xml:
                name: flowLogs
              description: An object that contains information on the status of VPC flow logs as a data source.
        S3Logs:
          allOf:
            - $ref: '#/components/schemas/S3LogsConfigurationResult'
            - xml:
                name: s3Logs
              description: An object that contains information on the status of S3 Data event logs as a data source.
      description: Contains information on the status of data sources for the detector.
    DeclineInvitationsRequest:
      type: object
      required:
        - AccountIds
      title: DeclineInvitationsRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
    DefaultServerSideEncryption:
      type: object
      properties:
        EncryptionType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: encryptionType
              description: The type of encryption used for objects within the S3 bucket.
        KmsMasterKeyArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: kmsMasterKeyArn
              description: 'The Amazon Resource Name (ARN) of the KMS encryption key. Only available if the bucket <code>EncryptionType</code> is <code>aws:kms</code>.'
      description: 'Contains information on the server side encryption method used in the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">S3 Server-Side Encryption</a> for more information.'
    DeleteDetectorRequest:
      type: object
      title: DeleteDetectorRequest
      properties: {}
    DeleteFilterRequest:
      type: object
      title: DeleteFilterRequest
      properties: {}
    DeleteIPSetRequest:
      type: object
      title: DeleteIPSetRequest
      properties: {}
    DeleteInvitationsRequest:
      type: object
      required:
        - AccountIds
      title: DeleteInvitationsRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
    DeleteMembersRequest:
      type: object
      required:
        - AccountIds
      title: DeleteMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the GuardDuty member accounts that you want to delete.
    DeletePublishingDestinationRequest:
      type: object
      title: DeletePublishingDestinationRequest
      properties: {}
    DeleteThreatIntelSetRequest:
      type: object
      title: DeleteThreatIntelSetRequest
      properties: {}
    DescribeOrganizationConfigurationRequest:
      type: object
      title: DescribeOrganizationConfigurationRequest
      properties: {}
    OrganizationDataSourceConfigurationsResult:
      type: object
      required:
        - S3Logs
      properties:
        S3Logs:
          allOf:
            - $ref: '#/components/schemas/OrganizationS3LogsConfigurationResult'
            - xml:
                name: s3Logs
              description: Describes whether S3 data event logs are enabled as a data source.
      description: An object that contains information on which data sources are automatically enabled for new members within the organization.
    DescribePublishingDestinationRequest:
      type: object
      title: DescribePublishingDestinationRequest
      properties: {}
    PublishingStatus:
      type: string
      enum:
        - PENDING_VERIFICATION
        - PUBLISHING
        - UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY
        - STOPPED
      minLength: 1
      maxLength: 300
    Destination:
      type: object
      required:
        - DestinationId
        - DestinationType
        - Status
      properties:
        DestinationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: destinationId
              description: The unique ID of the publishing destination.
        DestinationType:
          allOf:
            - $ref: '#/components/schemas/DestinationType'
            - xml:
                name: destinationType
              description: 'The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.'
        Status:
          allOf:
            - $ref: '#/components/schemas/PublishingStatus'
            - xml:
                name: status
              description: The status of the publishing destination.
      description: 'Contains information about the publishing destination, including the ID, type, and status.'
    Destinations:
      type: array
      items:
        $ref: '#/components/schemas/Destination'
    DetectorIds:
      type: array
      items:
        $ref: '#/components/schemas/DetectorId'
      minItems: 0
      maxItems: 50
    DetectorStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
      minLength: 1
      maxLength: 300
    DisableOrganizationAdminAccountRequest:
      type: object
      required:
        - AdminAccountId
      title: DisableOrganizationAdminAccountRequest
      properties:
        AdminAccountId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: adminAccountId
              description: The AWS Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.
    DisassociateFromMasterAccountRequest:
      type: object
      title: DisassociateFromMasterAccountRequest
      properties: {}
    DisassociateMembersRequest:
      type: object
      required:
        - AccountIds
      title: DisassociateMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.
    Double:
      type: number
      format: double
    EnableOrganizationAdminAccountRequest:
      type: object
      required:
        - AdminAccountId
      title: EnableOrganizationAdminAccountRequest
      properties:
        AdminAccountId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: adminAccountId
              description: The AWS Account ID for the organization account to be enabled as a GuardDuty delegated administrator.
    ThreatIntelligenceDetails:
      type: array
      items:
        $ref: '#/components/schemas/ThreatIntelligenceDetail'
    Evidence:
      type: object
      properties:
        ThreatIntelligenceDetails:
          allOf:
            - $ref: '#/components/schemas/ThreatIntelligenceDetails'
            - xml:
                name: threatIntelligenceDetails
              description: A list of threat intelligence details related to the evidence.
      description: Contains information about the reason that the finding was generated.
    Feedback:
      type: string
      enum:
        - USEFUL
        - NOT_USEFUL
    FilterNames:
      type: array
      items:
        $ref: '#/components/schemas/FilterName'
      minItems: 0
      maxItems: 50
    Resource:
      type: object
      properties:
        AccessKeyDetails:
          allOf:
            - $ref: '#/components/schemas/AccessKeyDetails'
            - xml:
                name: accessKeyDetails
              description: The IAM access key details (IAM user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding.
        S3BucketDetails:
          allOf:
            - $ref: '#/components/schemas/S3BucketDetails'
            - xml:
                name: s3BucketDetails
              description: Contains information on the S3 bucket.
        InstanceDetails:
          allOf:
            - $ref: '#/components/schemas/InstanceDetails'
            - xml:
                name: instanceDetails
              description: The information about the EC2 instance associated with the activity that prompted GuardDuty to generate a finding.
        ResourceType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: resourceType
              description: The type of AWS resource.
      description: Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.
    Service:
      type: object
      properties:
        Action:
          allOf:
            - $ref: '#/components/schemas/Action'
            - xml:
                name: action
              description: Information about the activity that is described in a finding.
        Evidence:
          allOf:
            - $ref: '#/components/schemas/Evidence'
            - xml:
                name: evidence
              description: An evidence object associated with the service.
        Archived:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: archived
              description: Indicates whether this finding is archived.
        Count:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - xml:
                name: count
              description: The total count of the occurrences of this finding type.
        DetectorId:
          allOf:
            - $ref: '#/components/schemas/DetectorId'
            - xml:
                name: detectorId
              description: The detector ID for the GuardDuty service.
        EventFirstSeen:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: eventFirstSeen
              description: The first-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        EventLastSeen:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: eventLastSeen
              description: The last-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        ResourceRole:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: resourceRole
              description: The resource role information for this finding.
        ServiceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: serviceName
              description: The name of the AWS service (GuardDuty) that generated a finding.
        UserFeedback:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: userFeedback
              description: Feedback that was submitted about the finding.
      description: Contains additional information about the generated finding.
    Finding:
      type: object
      required:
        - AccountId
        - Arn
        - CreatedAt
        - Id
        - Region
        - Resource
        - SchemaVersion
        - Severity
        - Type
        - UpdatedAt
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: accountId
              description: The ID of the account in which the finding was generated.
        Arn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: arn
              description: The ARN of the finding.
        Confidence:
          allOf:
            - $ref: '#/components/schemas/Double'
            - xml:
                name: confidence
              description: The confidence score for the finding.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: createdAt
              description: The time and date when the finding was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: description
              description: The description of the finding.
        Id:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: id
              description: The ID of the finding.
        Partition:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: partition
              description: The partition associated with the finding.
        Region:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: region
              description: The Region where the finding was generated.
        Resource:
          allOf:
            - $ref: '#/components/schemas/Resource'
            - xml:
                name: resource
        SchemaVersion:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: schemaVersion
              description: The version of the schema used for the finding.
        Service:
          allOf:
            - $ref: '#/components/schemas/Service'
            - xml:
                name: service
        Severity:
          allOf:
            - $ref: '#/components/schemas/Double'
            - xml:
                name: severity
              description: The severity of the finding.
        Title:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: title
              description: The title of the finding.
        Type:
          allOf:
            - $ref: '#/components/schemas/FindingType'
            - xml:
                name: type
              description: The type of finding.
        UpdatedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: updatedAt
              description: The time and date when the finding was last updated.
      description: 'Contains information about the finding, which is generated when abnormal or suspicious activity is detected.'
    FindingStatisticTypes:
      type: array
      items:
        $ref: '#/components/schemas/FindingStatisticType'
      minItems: 0
      maxItems: 10
    FindingStatistics:
      type: object
      properties:
        CountBySeverity:
          allOf:
            - $ref: '#/components/schemas/CountBySeverity'
            - xml:
                name: countBySeverity
              description: Represents a map of severity to count statistics for a set of findings.
      description: Contains information about finding statistics.
    Findings:
      type: array
      items:
        $ref: '#/components/schemas/Finding'
      minItems: 0
      maxItems: 50
    GeoLocation:
      type: object
      properties:
        Lat:
          allOf:
            - $ref: '#/components/schemas/Double'
            - xml:
                name: lat
              description: The latitude information of the remote IP address.
        Lon:
          allOf:
            - $ref: '#/components/schemas/Double'
            - xml:
                name: lon
              description: The longitude information of the remote IP address.
      description: Contains information about the location of the remote IP address.
    GetDetectorRequest:
      type: object
      title: GetDetectorRequest
      properties: {}
    GetFilterRequest:
      type: object
      title: GetFilterRequest
      properties: {}
    SortCriteria:
      type: object
      properties:
        AttributeName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: attributeName
              description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
        OrderBy:
          allOf:
            - $ref: '#/components/schemas/OrderBy'
            - xml:
                name: orderBy
              description: The order by which the sorted findings are to be displayed.
      description: Contains information about the criteria used for sorting findings.
    GetFindingsRequest:
      type: object
      required:
        - FindingIds
      title: GetFindingsRequest
      properties:
        FindingIds:
          allOf:
            - $ref: '#/components/schemas/FindingIds'
            - xml:
                name: findingIds
              description: The IDs of the findings that you want to retrieve.
        SortCriteria:
          allOf:
            - $ref: '#/components/schemas/SortCriteria'
            - xml:
                name: sortCriteria
              description: Represents the criteria used for sorting findings.
    GetFindingsStatisticsRequest:
      type: object
      required:
        - FindingStatisticTypes
      title: GetFindingsStatisticsRequest
      properties:
        FindingStatisticTypes:
          allOf:
            - $ref: '#/components/schemas/FindingStatisticTypes'
            - xml:
                name: findingStatisticTypes
              description: The types of finding statistics to retrieve.
        FindingCriteria:
          allOf:
            - $ref: '#/components/schemas/FindingCriteria'
            - xml:
                name: findingCriteria
              description: Represents the criteria that is used for querying findings.
    GetIPSetRequest:
      type: object
      title: GetIPSetRequest
      properties: {}
    IpSetStatus:
      type: string
      enum:
        - INACTIVE
        - ACTIVATING
        - ACTIVE
        - DEACTIVATING
        - ERROR
        - DELETE_PENDING
        - DELETED
      minLength: 1
      maxLength: 300
    GetInvitationsCountRequest:
      type: object
      title: GetInvitationsCountRequest
      properties: {}
    GetMasterAccountRequest:
      type: object
      title: GetMasterAccountRequest
      properties: {}
    Master:
      type: object
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The ID of the account used as the administrator account.
        InvitationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitationId
              description: The value used to validate the administrator account to the member account.
        RelationshipStatus:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: relationshipStatus
              description: The status of the relationship between the administrator and member accounts.
        InvitedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitedAt
              description: The timestamp when the invitation was sent.
      description: Contains information about the administrator account and invitation.
    GetMemberDetectorsRequest:
      type: object
      required:
        - AccountIds
      title: GetMemberDetectorsRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: The account ID of the member account.
    MemberDataSourceConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/MemberDataSourceConfiguration'
      minItems: 1
      maxItems: 50
    GetMembersRequest:
      type: object
      required:
        - AccountIds
      title: GetMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the GuardDuty member accounts that you want to describe.
    Members:
      type: array
      items:
        $ref: '#/components/schemas/Member'
      minItems: 0
      maxItems: 50
    GetThreatIntelSetRequest:
      type: object
      title: GetThreatIntelSetRequest
      properties: {}
    ThreatIntelSetStatus:
      type: string
      enum:
        - INACTIVE
        - ACTIVATING
        - ACTIVE
        - DEACTIVATING
        - ERROR
        - DELETE_PENDING
        - DELETED
      minLength: 1
      maxLength: 300
    UsageStatisticType:
      type: string
      enum:
        - SUM_BY_ACCOUNT
        - SUM_BY_DATA_SOURCE
        - SUM_BY_RESOURCE
        - TOP_RESOURCES
    UsageCriteria:
      type: object
      required:
        - DataSources
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: The account IDs to aggregate usage statistics from.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceList'
            - xml:
                name: dataSources
              description: The data sources to aggregate usage statistics from.
        Resources:
          allOf:
            - $ref: '#/components/schemas/ResourceList'
            - xml:
                name: resources
              description: The resources to aggregate usage statistics from. Only accepts exact resource names.
      description: Contains information about the criteria used to query usage statistics.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    GetUsageStatisticsRequest:
      type: object
      required:
        - UsageStatisticType
        - UsageCriteria
      title: GetUsageStatisticsRequest
      properties:
        UsageStatisticType:
          allOf:
            - $ref: '#/components/schemas/UsageStatisticType'
            - xml:
                name: usageStatisticsType
              description: The type of usage statistics to retrieve.
        UsageCriteria:
          allOf:
            - $ref: '#/components/schemas/UsageCriteria'
            - xml:
                name: usageCriteria
              description: Represents the criteria used for querying usage.
        Unit:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: unit
              description: The currency unit you would like to view your usage statistics in. Current valid values are USD.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - xml:
                name: maxResults
              description: The maximum number of results to return in the response.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.'
    UsageStatistics:
      type: object
      properties:
        SumByAccount:
          allOf:
            - $ref: '#/components/schemas/UsageAccountResultList'
            - xml:
                name: sumByAccount
              description: The usage statistic sum organized by account ID.
        SumByDataSource:
          allOf:
            - $ref: '#/components/schemas/UsageDataSourceResultList'
            - xml:
                name: sumByDataSource
              description: The usage statistic sum organized by on data source.
        SumByResource:
          allOf:
            - $ref: '#/components/schemas/UsageResourceResultList'
            - xml:
                name: sumByResource
              description: The usage statistic sum organized by resource.
        TopResources:
          allOf:
            - $ref: '#/components/schemas/UsageResourceResultList'
            - xml:
                name: topResources
              description: 'Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.'
      description: 'Contains the result of GuardDuty usage. If a UsageStatisticType is provided the result for other types will be null. '
    GuardDutyArn:
      type: string
      pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
    IamInstanceProfile:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: arn
              description: The profile ARN of the EC2 instance.
        Id:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: id
              description: The profile ID of the EC2 instance.
      description: Contains information about the EC2 instance profile.
    NetworkInterfaces:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    ProductCodes:
      type: array
      items:
        $ref: '#/components/schemas/ProductCode'
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    InstanceDetails:
      type: object
      properties:
        AvailabilityZone:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: availabilityZone
              description: The Availability Zone of the EC2 instance.
        IamInstanceProfile:
          allOf:
            - $ref: '#/components/schemas/IamInstanceProfile'
            - xml:
                name: iamInstanceProfile
              description: The profile information of the EC2 instance.
        ImageDescription:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: imageDescription
              description: The image description of the EC2 instance.
        ImageId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: imageId
              description: The image ID of the EC2 instance.
        InstanceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: instanceId
              description: The ID of the EC2 instance.
        InstanceState:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: instanceState
              description: The state of the EC2 instance.
        InstanceType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: instanceType
              description: The type of the EC2 instance.
        OutpostArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: outpostArn
              description: The Amazon Resource Name (ARN) of the AWS Outpost. Only applicable to AWS Outposts instances.
        LaunchTime:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: launchTime
              description: The launch time of the EC2 instance.
        NetworkInterfaces:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaces'
            - xml:
                name: networkInterfaces
              description: The elastic network interface information of the EC2 instance.
        Platform:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: platform
              description: The platform of the EC2 instance.
        ProductCodes:
          allOf:
            - $ref: '#/components/schemas/ProductCodes'
            - xml:
                name: productCodes
              description: The product code of the EC2 instance.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The tags of the EC2 instance.
      description: Contains information about the details of an instance.
    Invitation:
      type: object
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The ID of the account that the invitation was sent from.
        InvitationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitationId
              description: The ID of the invitation. This value is used to validate the inviter account to the member account.
        RelationshipStatus:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: relationshipStatus
              description: The status of the relationship between the inviter and invitee accounts.
        InvitedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitedAt
              description: The timestamp when the invitation was sent.
      description: Contains information about the invitation to become a member account.
    Invitations:
      type: array
      items:
        $ref: '#/components/schemas/Invitation'
      minItems: 0
      maxItems: 50
    InviteMembersRequest:
      type: object
      required:
        - AccountIds
      title: InviteMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the accounts that you want to invite to GuardDuty as members.
        DisableEmailNotification:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: disableEmailNotification
              description: A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.
        Message:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: message
              description: The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
    IpSetIds:
      type: array
      items:
        $ref: '#/components/schemas/String'
      minItems: 0
      maxItems: 50
    Ipv6Addresses:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ListDetectorsRequest:
      type: object
      title: ListDetectorsRequest
      properties: {}
    ListFiltersRequest:
      type: object
      title: ListFiltersRequest
      properties: {}
    ListFindingsRequest:
      type: object
      title: ListFindingsRequest
      properties:
        FindingCriteria:
          allOf:
            - $ref: '#/components/schemas/FindingCriteria'
            - xml:
                name: findingCriteria
              description: '<p>Represents the criteria used for querying findings. Valid values include:</p> <ul> <li> <p>JSON field name</p> </li> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to ''true'', only archived findings are listed. When it''s set to ''false'', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p> </li> </ul>'
        SortCriteria:
          allOf:
            - $ref: '#/components/schemas/SortCriteria'
            - xml:
                name: sortCriteria
              description: Represents the criteria used for sorting findings.
        MaxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - xml:
                name: maxResults
              description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: nextToken
              description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
    ListIPSetsRequest:
      type: object
      title: ListIPSetsRequest
      properties: {}
    ListInvitationsRequest:
      type: object
      title: ListInvitationsRequest
      properties: {}
    ListMembersRequest:
      type: object
      title: ListMembersRequest
      properties: {}
    ListOrganizationAdminAccountsRequest:
      type: object
      title: ListOrganizationAdminAccountsRequest
      properties: {}
    ListPublishingDestinationsRequest:
      type: object
      title: ListPublishingDestinationsRequest
      properties: {}
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListThreatIntelSetsRequest:
      type: object
      title: ListThreatIntelSetsRequest
      properties: {}
    ThreatIntelSetIds:
      type: array
      items:
        $ref: '#/components/schemas/String'
      minItems: 0
      maxItems: 50
    LocalIpDetails:
      type: object
      properties:
        IpAddressV4:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: ipAddressV4
              description: The IPv4 local address of the connection.
      description: Contains information about the local IP address of the connection.
    LocalPortDetails:
      type: object
      properties:
        Port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - xml:
                name: port
              description: The port number of the local connection.
        PortName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: portName
              description: The port name of the local connection.
      description: Contains information about the port for the local connection.
    Member:
      type: object
      required:
        - AccountId
        - MasterId
        - Email
        - RelationshipStatus
        - UpdatedAt
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The ID of the member account.
        DetectorId:
          allOf:
            - $ref: '#/components/schemas/DetectorId'
            - xml:
                name: detectorId
              description: The detector ID of the member account.
        MasterId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: masterId
              description: The administrator account ID.
        Email:
          allOf:
            - $ref: '#/components/schemas/Email'
            - xml:
                name: email
              description: The email address of the member account.
        RelationshipStatus:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: relationshipStatus
              description: The status of the relationship between the member and the administrator.
        InvitedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: invitedAt
              description: The timestamp when the invitation was sent.
        UpdatedAt:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: updatedAt
              description: The last-updated timestamp of the member.
      description: 'Contains information about the member account. '
    MemberDataSourceConfiguration:
      type: object
      required:
        - AccountId
        - DataSources
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The account ID for the member account.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceConfigurationsResult'
            - xml:
                name: dataSources
              description: Contains information on the status of data sources for the account.
      description: Contains information on which data sources are enabled for a member account.
    RemotePortDetails:
      type: object
      properties:
        Port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - xml:
                name: port
              description: The port number of the remote connection.
        PortName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: portName
              description: The port name of the remote connection.
      description: Contains information about the remote port.
    PrivateIpAddresses:
      type: array
      items:
        $ref: '#/components/schemas/PrivateIpAddressDetails'
    SecurityGroups:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroup'
    NetworkInterface:
      type: object
      properties:
        Ipv6Addresses:
          allOf:
            - $ref: '#/components/schemas/Ipv6Addresses'
            - xml:
                name: ipv6Addresses
              description: A list of IPv6 addresses for the EC2 instance.
        NetworkInterfaceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: networkInterfaceId
              description: The ID of the network interface.
        PrivateDnsName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: privateDnsName
              description: The private DNS name of the EC2 instance.
        PrivateIpAddress:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: privateIpAddress
              description: The private IP address of the EC2 instance.
        PrivateIpAddresses:
          allOf:
            - $ref: '#/components/schemas/PrivateIpAddresses'
            - xml:
                name: privateIpAddresses
              description: Other private IP address information of the EC2 instance.
        PublicDnsName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: publicDnsName
              description: The public DNS name of the EC2 instance.
        PublicIp:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: publicIp
              description: The public IP address of the EC2 instance.
        SecurityGroups:
          allOf:
            - $ref: '#/components/schemas/SecurityGroups'
            - xml:
                name: securityGroups
              description: The security groups associated with the EC2 instance.
        SubnetId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: subnetId
              description: The subnet ID of the EC2 instance.
        VpcId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: vpcId
              description: The VPC ID of the EC2 instance.
      description: Contains information about the elastic network interface of the EC2 instance.
    Organization:
      type: object
      properties:
        Asn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: asn
              description: The Autonomous System Number (ASN) of the internet provider of the remote IP address.
        AsnOrg:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: asnOrg
              description: The organization that registered this ASN.
        Isp:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: isp
              description: The ISP information for the internet provider.
        Org:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: org
              description: The name of the internet provider.
      description: Contains information about the ISP organization of the remote IP address.
    OrganizationDataSourceConfigurations:
      type: object
      properties:
        S3Logs:
          allOf:
            - $ref: '#/components/schemas/OrganizationS3LogsConfiguration'
            - xml:
                name: s3Logs
              description: Describes whether S3 data event logs are enabled for new members of the organization.
      description: An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.
    OrganizationS3LogsConfigurationResult:
      type: object
      required:
        - AutoEnable
      properties:
        AutoEnable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: autoEnable
              description: A value that describes whether S3 data event logs are automatically enabled for new members of the organization.
      description: The current configuration of S3 data event logs as a data source for the organization.
    Owner:
      type: object
      properties:
        Id:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: id
              description: 'The canonical user ID of the bucket owner. For information about locating your canonical user ID see <a href="https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId">Finding Your Account Canonical User ID.</a> '
      description: Contains information on the owner of the bucket.
    PermissionConfiguration:
      type: object
      properties:
        BucketLevelPermissions:
          allOf:
            - $ref: '#/components/schemas/BucketLevelPermissions'
            - xml:
                name: bucketLevelPermissions
              description: Contains information about the bucket level permissions for the S3 bucket.
        AccountLevelPermissions:
          allOf:
            - $ref: '#/components/schemas/AccountLevelPermissions'
            - xml:
                name: accountLevelPermissions
              description: Contains information about the account level permissions on the S3 bucket.
      description: Contains information about how permissions are configured for the S3 bucket.
    PortProbeDetails:
      type: array
      items:
        $ref: '#/components/schemas/PortProbeDetail'
    PortProbeDetail:
      type: object
      properties:
        LocalPortDetails:
          allOf:
            - $ref: '#/components/schemas/LocalPortDetails'
            - xml:
                name: localPortDetails
              description: The local port information of the connection.
        LocalIpDetails:
          allOf:
            - $ref: '#/components/schemas/LocalIpDetails'
            - xml:
                name: localIpDetails
              description: The local IP information of the connection.
        RemoteIpDetails:
          allOf:
            - $ref: '#/components/schemas/RemoteIpDetails'
            - xml:
                name: remoteIpDetails
              description: The remote IP information of the connection.
      description: Contains information about the port probe details.
    PrivateIpAddressDetails:
      type: object
      properties:
        PrivateDnsName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: privateDnsName
              description: The private DNS name of the EC2 instance.
        PrivateIpAddress:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: privateIpAddress
              description: The private IP address of the EC2 instance.
      description: Contains other private IP address information of the EC2 instance.
    ProductCode:
      type: object
      properties:
        Code:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: code
              description: The product code information.
        ProductType:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: productType
              description: The product code type.
      description: Contains information about the product code for the EC2 instance.
    PublicAccess:
      type: object
      properties:
        PermissionConfiguration:
          allOf:
            - $ref: '#/components/schemas/PermissionConfiguration'
            - xml:
                name: permissionConfiguration
              description: Contains information about how permissions are configured for the S3 bucket.
        EffectivePermission:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: effectivePermission
              description: Describes the effective permission on this bucket after factoring all attached policies.
      description: Describes the public access policies that apply to the S3 bucket.
    S3BucketDetails:
      type: array
      items:
        $ref: '#/components/schemas/S3BucketDetail'
    Timestamp:
      type: string
      format: date-time
    S3BucketDetail:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: arn
              description: The Amazon Resource Name (ARN) of the S3 bucket.
        Name:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: name
              description: The name of the S3 bucket.
        Type:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: type
              description: Describes whether the bucket is a source or destination bucket.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - xml:
                name: createdAt
              description: The date and time the bucket was created at.
        Owner:
          allOf:
            - $ref: '#/components/schemas/Owner'
            - xml:
                name: owner
              description: The owner of the S3 bucket.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: All tags attached to the S3 bucket
        DefaultServerSideEncryption:
          allOf:
            - $ref: '#/components/schemas/DefaultServerSideEncryption'
            - xml:
                name: defaultServerSideEncryption
              description: Describes the server side encryption method used in the S3 bucket.
        PublicAccess:
          allOf:
            - $ref: '#/components/schemas/PublicAccess'
            - xml:
                name: publicAccess
              description: Describes the public access policies that apply to the S3 bucket.
      description: Contains information on the S3 bucket.
    SecurityGroup:
      type: object
      properties:
        GroupId:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: groupId
              description: The security group ID of the EC2 instance.
        GroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: groupName
              description: The security group name of the EC2 instance.
      description: Contains information about the security groups associated with the EC2 instance.
    StartMonitoringMembersRequest:
      type: object
      required:
        - AccountIds
      title: StartMonitoringMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs of the GuardDuty member accounts to start monitoring.
    StopMonitoringMembersRequest:
      type: object
      required:
        - AccountIds
      title: StopMonitoringMembersRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of account IDs for the member accounts to stop monitoring.
    Tag:
      type: object
      properties:
        Key:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: key
              description: The EC2 instance tag key.
        Value:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: value
              description: The EC2 instance tag value.
      description: Contains information about a tag associated with the EC2 instance.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - Tags
      title: TagResourceRequest
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - xml:
                name: tags
              description: The tags to be added to a resource.
    ThreatNames:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ThreatIntelligenceDetail:
      type: object
      properties:
        ThreatListName:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: threatListName
              description: The name of the threat intelligence list that triggered the finding.
        ThreatNames:
          allOf:
            - $ref: '#/components/schemas/ThreatNames'
            - xml:
                name: threatNames
              description: A list of names of the threats in the threat intelligence list that triggered the finding.
      description: An instance of a threat intelligence detail that constitutes evidence for the finding.
    Total:
      type: object
      properties:
        Amount:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: amount
              description: The total usage.
        Unit:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: unit
              description: The currency unit that the amount is given in.
      description: Contains the total usage with the corresponding currency unit for that value.
    UnarchiveFindingsRequest:
      type: object
      required:
        - FindingIds
      title: UnarchiveFindingsRequest
      properties:
        FindingIds:
          allOf:
            - $ref: '#/components/schemas/FindingIds'
            - xml:
                name: findingIds
              description: The IDs of the findings to unarchive.
    UnprocessedAccount:
      type: object
      required:
        - AccountId
        - Result
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The AWS account ID.
        Result:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: result
              description: A reason why the account hasn't been processed.
      description: Contains information about the accounts that weren't processed.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateDetectorRequest:
      type: object
      title: UpdateDetectorRequest
      properties:
        Enable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: enable
              description: Specifies whether the detector is enabled or not enabled.
        FindingPublishingFrequency:
          allOf:
            - $ref: '#/components/schemas/FindingPublishingFrequency'
            - xml:
                name: findingPublishingFrequency
              description: 'An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.'
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceConfigurations'
            - xml:
                name: dataSources
              description: Describes which data sources will be updated.
    UpdateFilterRequest:
      type: object
      title: UpdateFilterRequest
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/FilterDescription'
            - xml:
                name: description
              description: The description of the filter.
        Action:
          allOf:
            - $ref: '#/components/schemas/FilterAction'
            - xml:
                name: action
              description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          allOf:
            - $ref: '#/components/schemas/FilterRank'
            - xml:
                name: rank
              description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          allOf:
            - $ref: '#/components/schemas/FindingCriteria'
            - xml:
                name: findingCriteria
              description: Represents the criteria to be used in the filter for querying findings.
    UpdateFindingsFeedbackRequest:
      type: object
      required:
        - FindingIds
        - Feedback
      title: UpdateFindingsFeedbackRequest
      properties:
        FindingIds:
          allOf:
            - $ref: '#/components/schemas/FindingIds'
            - xml:
                name: findingIds
              description: The IDs of the findings that you want to mark as useful or not useful.
        Feedback:
          allOf:
            - $ref: '#/components/schemas/Feedback'
            - xml:
                name: feedback
              description: The feedback for the finding.
        Comments:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: comments
              description: Additional feedback about the GuardDuty findings.
    UpdateIPSetRequest:
      type: object
      title: UpdateIPSetRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: The unique ID that specifies the IPSet that you want to update.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: 'The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: activate
              description: The updated Boolean value that specifies whether the IPSet is active or not.
    UpdateMemberDetectorsRequest:
      type: object
      required:
        - AccountIds
      title: UpdateMemberDetectorsRequest
      properties:
        AccountIds:
          allOf:
            - $ref: '#/components/schemas/AccountIds'
            - xml:
                name: accountIds
              description: A list of member account IDs to be updated.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/DataSourceConfigurations'
            - xml:
                name: dataSources
              description: Describes which data sources will be updated.
    UpdateOrganizationConfigurationRequest:
      type: object
      required:
        - AutoEnable
      title: UpdateOrganizationConfigurationRequest
      properties:
        AutoEnable:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: autoEnable
              description: Indicates whether to automatically enable member accounts in the organization.
        DataSources:
          allOf:
            - $ref: '#/components/schemas/OrganizationDataSourceConfigurations'
            - xml:
                name: dataSources
              description: Describes which data sources will be updated.
    UpdatePublishingDestinationRequest:
      type: object
      title: UpdatePublishingDestinationRequest
      properties:
        DestinationProperties:
          allOf:
            - $ref: '#/components/schemas/DestinationProperties'
            - xml:
                name: destinationProperties
              description: A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.
    UpdateThreatIntelSetRequest:
      type: object
      title: UpdateThreatIntelSetRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/Name'
            - xml:
                name: name
              description: The unique ID that specifies the ThreatIntelSet that you want to update.
        Location:
          allOf:
            - $ref: '#/components/schemas/Location'
            - xml:
                name: location
              description: The updated URI of the file that contains the ThreateIntelSet.
        Activate:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - xml:
                name: activate
              description: The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
    UsageAccountResult:
      type: object
      properties:
        AccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
            - xml:
                name: accountId
              description: The Account ID that generated usage.
        Total:
          allOf:
            - $ref: '#/components/schemas/Total'
            - xml:
                name: total
              description: Represents the total of usage for the Account ID.
      description: Contains information on the total of usage based on account IDs.
    UsageAccountResultList:
      type: array
      items:
        $ref: '#/components/schemas/UsageAccountResult'
    UsageDataSourceResult:
      type: object
      properties:
        DataSource:
          allOf:
            - $ref: '#/components/schemas/DataSource'
            - xml:
                name: dataSource
              description: The data source type that generated usage.
        Total:
          allOf:
            - $ref: '#/components/schemas/Total'
            - xml:
                name: total
              description: Represents the total of usage for the specified data source.
      description: Contains information on the result of usage based on data source type.
    UsageDataSourceResultList:
      type: array
      items:
        $ref: '#/components/schemas/UsageDataSourceResult'
    UsageResourceResult:
      type: object
      properties:
        Resource:
          allOf:
            - $ref: '#/components/schemas/String'
            - xml:
                name: resource
              description: The AWS resource that generated usage.
        Total:
          allOf:
            - $ref: '#/components/schemas/Total'
            - xml:
                name: total
              description: Represents the sum total of usage for the specified resource type.
      description: Contains information on the sum of usage based on an AWS resource.
    UsageResourceResultList:
      type: array
      items:
        $ref: '#/components/schemas/UsageResourceResult'
security:
  - hmac: []
