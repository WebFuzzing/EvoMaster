openapi: 3.0.0
servers:
  - url: https://api.spoonacular.com
    variables: {}
info:
  contact:
    email: david@spoonacular.com
    name: David Urbansky
    url: https://spoonacular.com/contact
  description: |-
    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as "gluten free brownies without sugar" or "low fat vegan cupcakes." You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.

    Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
  license:
    name: spoonacular API Terms
    url: https://spoonacular.com/food-api/terms
  termsOfService: https://spoonacular.com/food-api/terms
  title: spoonacular API
  version: "1.0"
  x-apisguru-categories:
    - social
  x-codegen-settings:
    AllowSkippingSSLCertVerification: false
    AndroidUseAppManifest: true
    AppendContentHeaders: true
    ApplyCustomizations: []
    ArraySerialization: Indexed
    BodySerialization: 0
    CollectParameters: false
    DisableDocs: false
    DisableLinting: false
    DoNotSplitWords: []
    EnableAdditionalModelProperties: false
    EnableGlobalUserAgent: true
    EnableHttpCache: false
    EnableLogging: false
    EnablePHPComposerVersionString: false
    ForceKeywordArgsInRuby: false
    GenerateAdvancedDocs: false
    GenerateAppveyorConfig: false
    GenerateAsyncCode: true
    GenerateCircleConfig: false
    GenerateExceptions: true
    GenerateInterfaces: false
    GenerateJenkinsConfig: false
    GenerateModels: true
    GenerateTravisConfig: false
    IgnoreIfNullJson: false
    JavaHttpClient: JAVA_OK
    JavaUsePropertiesConfig: false
    LiftParameterDescriptionFromCustomType: false
    ModelSerializationScheme: Json
    NodeHttpClient: NODE_REQUEST
    Nullify404: false
    ParameterArrayFormat: ParamArrayWithIndex
    PreserveParameterOrder: false
    ResponseMapping:
      Type: Simple
    Retries: 0
    RetryInterval: 1
    ReturnCompleteHttpResponse: false
    RunscopeEnabled: false
    SecurityProtocols:
      - Ssl3
      - Tls
    SortResources: false
    StoreTimezoneInformation: false
    SymbolizeHashKeysInRuby: false
    ThrowForHttpErrorStatusCodes: true
    Timeout: 0
    UnderscoreNumbers: true
    UseCommonSDKLibrary: false
    UseConstructorsForConfig: true
    UseControllerPrefix: true
    UseEnumPostfix: true
    UseExceptionPrefix: true
    UseMethodPrefix: true
    UseModelPostfix: false
    UseSingletonPattern: true
    ValidateRequiredParameters: false
    iOSGenerateCoreData: false
    iOSUseAppInfoPlist: true
  x-origin:
    - format: openapi
      url: https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json
      version: "3.0"
  x-providerName: spoonacular.com
  x-server-configuration:
    default-environment: production
    default-server: default
    environments:
      - name: production
        servers:
          - name: default
            url: https://api.spoonacular.com
    parameters: []
externalDocs:
  description: The official documentation.
  url: https://spoonacular.com/food-api/docs
security:
  - apiKeyScheme: []
tags: []
paths:
  /food/converse:
    get:
      deprecated: false
      description: This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the "Get Conversation Suggests" endpoint to show your user what he or she can say.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Talk-to-Chatbot
      operationId: talkToChatbot
      parameters:
        - description: The request / question / answer from the user to the chatbot.
          explode: false
          in: query
          name: text
          required: true
          schema:
            example: donut recipes
            type: string
          style: form
        - description: An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
          explode: false
          in: query
          name: contextId
          required: false
          schema:
            example: "342938"
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Talk to Chatbot
  /food/converse/suggest:
    get:
      deprecated: false
      description: This endpoint returns suggestions for things the user can say or ask the chatbot.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Conversation-Suggests
      operationId: getConversationSuggests
      parameters:
        - description: A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: tell
            type: string
          style: form
        - description: The number of suggestions to return (between 1 and 25).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 5
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Conversation Suggests
  /food/customFoods/search:
    get:
      deprecated: false
      description: Search custom foods in a user's account.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Custom-Foods
      operationId: searchCustomFoods
      parameters:
        - description: The search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: brat
            type: string
          style: form
        - description: The username.
          explode: false
          in: query
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: form
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
        - description: The number of results to skip (between 0 and 990).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Custom Foods
  /food/detect:
    post:
      deprecated: false
      description: Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Detect-Food-in-Text
      operationId: detectFoodInText
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                text:
                  description: The text in which food items, such as dish names and ingredients, should be detected in.
                  example: I like to eat delicious tacos. The only thing better is a cheeseburger with cheddar. But then again, pizza with pepperoni, mushrooms, and tomatoes is so good too!
                  type: string
              required:
                - text
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Detect Food in Text
  /food/images/analyze:
    get:
      deprecated: false
      description: Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Image-Analysis-by-URL
      operationId: imageAnalysisByURL
      parameters:
        - description: The URL of the image to be analyzed.
          explode: false
          in: query
          name: imageUrl
          required: true
          schema:
            example: https://spoonacular.com/recipeImages/635350-240x150.jpg
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Image Analysis by URL
  /food/images/classify:
    get:
      deprecated: false
      description: Classify a food image. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Image-Classification-by-URL
      operationId: imageClassificationByURL
      parameters:
        - description: The URL of the image to be classified.
          explode: false
          in: query
          name: imageUrl
          required: true
          schema:
            example: https://spoonacular.com/recipeImages/635350-240x150.jpg
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Image Classification by URL
  /food/ingredients/autocomplete:
    get:
      deprecated: false
      description: Autocomplete the entry of an ingredient.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search
      operationId: autocompleteIngredientSearch
      parameters:
        - description: The partial or full ingredient name.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: appl
            type: string
          style: form
        - description: The number of results to return (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: Whether to return more meta information about the ingredients.
          explode: false
          in: query
          name: metaInformation
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
          explode: false
          in: query
          name: intolerances
          required: false
          schema:
            example: egg
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Autocomplete Ingredient Search
  /food/ingredients/glycemicLoad:
    post:
      deprecated: false
      description: Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Compute-Glycemic-Load
      operationId: computeGlycemicLoad
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Compute Glycemic Load
  /food/ingredients/map:
    post:
      deprecated: false
      description: Map a set of ingredients to products you can buy in the grocery store.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products
      operationId: mapIngredientsToGroceryProducts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Map Ingredients to Grocery Products
  /food/ingredients/search:
    get:
      deprecated: false
      description: Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Ingredient-Search
      operationId: ingredientSearch
      parameters:
        - description: The partial or full ingredient name.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: apple
            type: string
          style: form
        - description: Whether to add children of found foods.
          explode: false
          in: query
          name: addChildren
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: The minimum percentage of protein the food must have (between 0 and 100).
          explode: false
          in: query
          name: minProteinPercent
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum percentage of protein the food can have (between 0 and 100).
          explode: false
          in: query
          name: maxProteinPercent
          required: false
          schema:
            example: 90
            type: number
          style: form
        - description: The minimum percentage of fat the food must have (between 0 and 100).
          explode: false
          in: query
          name: minFatPercent
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum percentage of fat the food can have (between 0 and 100).
          explode: false
          in: query
          name: maxFatPercent
          required: false
          schema:
            example: 90
            type: number
          style: form
        - description: The minimum percentage of carbs the food must have (between 0 and 100).
          explode: false
          in: query
          name: minCarbsPercent
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum percentage of carbs the food can have (between 0 and 100).
          explode: false
          in: query
          name: maxCarbsPercent
          required: false
          schema:
            example: 90
            type: number
          style: form
        - description: Whether to return more meta information about the ingredients.
          explode: false
          in: query
          name: metaInformation
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
          explode: false
          in: query
          name: intolerances
          required: false
          schema:
            example: egg
            type: string
          style: form
        - description: The strategy to sort recipes by. See a full list of supported sorting options.
          explode: false
          in: query
          name: sort
          required: false
          schema:
            example: calories
            type: string
          style: form
        - description: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
          explode: false
          in: query
          name: sortDirection
          required: false
          schema:
            example: asc
            type: string
          style: form
        - description: The number of results to skip (between 0 and 990).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Ingredient Search
  /food/ingredients/substitutes:
    get:
      deprecated: false
      description: Search for substitutes for a given ingredient.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes
      operationId: getIngredientSubstitutes
      parameters:
        - description: The name of the ingredient you want to replace.
          explode: false
          in: query
          name: ingredientName
          required: true
          schema:
            example: butter
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Ingredient Substitutes
  "/food/ingredients/{id}/information":
    get:
      deprecated: false
      description: Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Information
      operationId: getIngredientInformation
      parameters:
        - description: The ingredient id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 9266
            type: number
          style: simple
        - description: The amount of this ingredient.
          explode: false
          in: query
          name: amount
          required: false
          schema:
            example: 150
            type: number
          style: form
        - description: The unit for the given amount.
          explode: false
          in: query
          name: unit
          required: false
          schema:
            example: grams
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Ingredient Information
  "/food/ingredients/{id}/substitutes":
    get:
      deprecated: false
      description: Search for substitutes for a given ingredient.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID
      operationId: getIngredientSubstitutesByID
      parameters:
        - description: The id of the ingredient you want substitutes for.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1001
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Ingredient Substitutes by ID
  /food/jokes/random:
    get:
      deprecated: false
      description: "Get a random joke that is related to food. Caution: this is an endpoint for adults!"
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke
      operationId: getARandomFoodJoke
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get a Random Food Joke
  /food/menuItems/search:
    get:
      deprecated: false
      description: Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Menu-Items
      operationId: searchMenuItems
      parameters:
        - description: The search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: snickers
            type: string
          style: form
        - description: The minimum amount of calories the menu item must have.
          explode: false
          in: query
          name: minCalories
          required: false
          schema:
            example: 50
            type: number
          style: form
        - description: The maximum amount of calories the menu item can have.
          explode: false
          in: query
          name: maxCalories
          required: false
          schema:
            example: 800
            type: number
          style: form
        - description: The minimum amount of carbohydrates in grams the menu item must have.
          explode: false
          in: query
          name: minCarbs
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of carbohydrates in grams the menu item can have.
          explode: false
          in: query
          name: maxCarbs
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of protein in grams the menu item must have.
          explode: false
          in: query
          name: minProtein
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of protein in grams the menu item can have.
          explode: false
          in: query
          name: maxProtein
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fat in grams the menu item must have.
          explode: false
          in: query
          name: minFat
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: The maximum amount of fat in grams the menu item can have.
          explode: false
          in: query
          name: maxFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The offset number for paging (between 0 and 990).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 10).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 100
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Menu Items
  /food/menuItems/suggest:
    get:
      deprecated: false
      description: Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search
      operationId: autocompleteMenuItemSearch
      parameters:
        - description: The (partial) search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: chicke
            type: string
          style: form
        - description: The number of results to return (between 1 and 25).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Autocomplete Menu Item Search
  "/food/menuItems/{id}":
    get:
      deprecated: false
      description: Use a menu item id to get all available information about a menu item, such as nutrition.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Menu-Item-Information
      operationId: getMenuItemInformation
      parameters:
        - description: The menu item id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 424571
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Menu Item Information
  "/food/menuItems/{id}/nutritionWidget":
    get:
      deprecated: false
      description: Visualize a menu item's nutritional information as HTML including CSS.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID
      operationId: visualizeMenuItemNutritionByID
      parameters:
        - description: The menu item id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1003464
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Menu Item Nutrition by ID
  /food/products/classify:
    post:
      deprecated: false
      description: This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product
      operationId: classifyGroceryProduct
      parameters:
        - description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
          explode: false
          in: query
          name: locale
          required: false
          schema:
            example: en_US
            type: string
          style: form
      requestBody:
        content:
          application/json:
            schema:
              properties:
                locale:
                  description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
                  example: en_US
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Classify Grocery Product
  /food/products/classifyBatch:
    post:
      deprecated: false
      description: Provide a set of product jsons, get back classified products.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk
      operationId: classifyGroceryProductBulk
      parameters:
        - description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
          explode: false
          in: query
          name: locale
          required: false
          schema:
            example: en_US
            type: string
          style: form
      requestBody:
        content:
          application/json:
            schema:
              items: {}
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Classify Grocery Product Bulk
  /food/products/search:
    get:
      deprecated: false
      description: Search packaged food products, such as frozen pizza or Greek yogurt.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Grocery-Products
      operationId: searchGroceryProducts
      parameters:
        - description: The search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: greek yogurt
            type: string
          style: form
        - description: The minimum amount of calories the product must have.
          explode: false
          in: query
          name: minCalories
          required: false
          schema:
            example: 50
            type: number
          style: form
        - description: The maximum amount of calories the product can have.
          explode: false
          in: query
          name: maxCalories
          required: false
          schema:
            example: 800
            type: number
          style: form
        - description: The minimum amount of carbohydrates in grams the product must have.
          explode: false
          in: query
          name: minCarbs
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of carbohydrates in grams the product can have.
          explode: false
          in: query
          name: maxCarbs
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of protein in grams the product must have.
          explode: false
          in: query
          name: minProtein
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of protein in grams the product can have.
          explode: false
          in: query
          name: maxProtein
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fat in grams the product must have.
          explode: false
          in: query
          name: minFat
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: The maximum amount of fat in grams the product can have.
          explode: false
          in: query
          name: maxFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The number of results to skip (between 0 and 990).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Grocery Products
  /food/products/suggest:
    get:
      deprecated: false
      description: Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Autocomplete-Product-Search
      operationId: autocompleteProductSearch
      parameters:
        - description: The (partial) search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: chicke
            type: string
          style: form
        - description: The number of results to return (between 1 and 25).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Autocomplete Product Search
  "/food/products/upc/{upc}":
    get:
      deprecated: false
      description: Get information about a packaged food using its UPC.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC
      operationId: searchGroceryProductsByUPC
      parameters:
        - description: The product's UPC.
          explode: false
          in: path
          name: upc
          required: true
          schema:
            example: 41631000564
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Grocery Products by UPC
  "/food/products/upc/{upc}/comparable":
    get:
      deprecated: false
      description: Find comparable products to the given one.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Comparable-Products
      operationId: getComparableProducts
      parameters:
        - description: The UPC of the product for which you want to find comparable products.
          explode: false
          in: path
          name: upc
          required: true
          schema:
            example: 33698816271
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Comparable Products
  "/food/products/{id}":
    get:
      deprecated: false
      description: Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Product-Information
      operationId: getProductInformation
      parameters:
        - description: The id of the packaged food.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 22347
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Product Information
  "/food/products/{id}/nutritionWidget":
    get:
      deprecated: false
      description: Visualize a product's nutritional information as HTML including CSS.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID
      operationId: visualizeProductNutritionByID
      parameters:
        - description: The id of the product.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 7657
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Product Nutrition by ID
  /food/search:
    get:
      deprecated: false
      description: Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-All-Food
      operationId: searchAllFood
      parameters:
        - description: The search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: apple
            type: string
          style: form
        - description: The number of results to skip (between 0 and 990).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search All Food
  /food/site/search:
    get:
      deprecated: false
      description: Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Site-Content
      operationId: searchSiteContent
      parameters:
        - description: The query to search for. You can also use partial queries such as "spagh" to already find spaghetti recipes, articles, grocery products, and other content.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: past
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Site Content
  /food/trivia/random:
    get:
      deprecated: false
      description: Returns random food trivia.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia
      operationId: getRandomFoodTrivia
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Random Food Trivia
  /food/videos/search:
    get:
      deprecated: false
      description: Find recipe and other food related videos.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Food-Videos
      operationId: searchFoodVideos
      parameters:
        - description: The search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: chicken soup
            type: string
          style: form
        - description: The type of the recipes. See a full list of supported meal types.
          explode: false
          in: query
          name: type
          required: false
          schema:
            example: main course
            type: string
          style: form
        - description: The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
          explode: false
          in: query
          name: cuisine
          required: false
          schema:
            example: italian
            type: string
          style: form
        - description: The diet for which the recipes must be suitable. See a full list of supported diets.
          explode: false
          in: query
          name: diet
          required: false
          schema:
            example: vegetarian
            type: string
          style: form
        - description: A comma-separated list of ingredients that the recipes should contain.
          explode: false
          in: query
          name: includeIngredients
          required: false
          schema:
            example: tomato,cheese
            type: string
          style: form
        - description: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
          explode: false
          in: query
          name: excludeIngredients
          required: false
          schema:
            example: eggs
            type: string
          style: form
        - description: Minimum video length in seconds.
          explode: false
          in: query
          name: minLength
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: Maximum video length in seconds.
          explode: false
          in: query
          name: maxLength
          required: false
          schema:
            example: 999
            type: number
          style: form
        - description: The number of results to skip (between 0 and 900).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of results to return (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Food Videos
  /food/wine/description:
    get:
      deprecated: false
      description: Get a simple description of a certain wine, e.g. "malbec", "riesling", or "merlot".
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Wine-Description
      operationId: getWineDescription
      parameters:
        - description: The name of the wine that should be paired, e.g. "merlot", "riesling", or "malbec".
          explode: false
          in: query
          name: wine
          required: true
          schema:
            example: merlot
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Wine Description
  /food/wine/dishes:
    get:
      deprecated: false
      description: Find a dish that goes well with a given wine.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine
      operationId: getDishPairingForWine
      parameters:
        - description: The type of wine that should be paired, e.g. "merlot", "riesling", or "malbec".
          explode: false
          in: query
          name: wine
          required: true
          schema:
            example: malbec
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Dish Pairing for Wine
  /food/wine/pairing:
    get:
      deprecated: false
      description: Find a wine that goes well with a food. Food can be a dish name ("steak"), an ingredient name ("salmon"), or a cuisine ("italian").
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Wine-Pairing
      operationId: getWinePairing
      parameters:
        - description: The food to get a pairing for. This can be a dish ("steak"), an ingredient ("salmon"), or a cuisine ("italian").
          explode: false
          in: query
          name: food
          required: true
          schema:
            example: steak
            type: string
          style: form
        - description: The maximum price for the specific wine recommendation in USD.
          explode: false
          in: query
          name: maxPrice
          required: false
          schema:
            example: 50
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Wine Pairing
  /food/wine/recommendation:
    get:
      deprecated: false
      description: Get a specific wine recommendation (concrete product) for a given wine type, e.g. "merlot".
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Wine-Recommendation
      operationId: getWineRecommendation
      parameters:
        - description: The type of wine to get a specific product recommendation for.
          explode: false
          in: query
          name: wine
          required: true
          schema:
            example: merlot
            type: string
          style: form
        - description: The maximum price for the specific wine recommendation in USD.
          explode: false
          in: query
          name: maxPrice
          required: false
          schema:
            example: 50
            type: number
          style: form
        - description: The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
          explode: false
          in: query
          name: minRating
          required: false
          schema:
            example: 0.7
            type: number
          style: form
        - description: The number of wine recommendations expected (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 3
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Wine Recommendation
  /mealplanner/generate:
    get:
      deprecated: false
      description: Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Generate-Meal-Plan
      operationId: generateMealPlan
      parameters:
        - description: Either for one "day" or an entire "week".
          explode: false
          in: query
          name: timeFrame
          required: false
          schema:
            example: day
            type: string
          style: form
        - description: What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
          explode: false
          in: query
          name: targetCalories
          required: false
          schema:
            example: 2000
            type: number
          style: form
        - description: Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
          explode: false
          in: query
          name: diet
          required: false
          schema:
            example: vegetarian
            type: string
          style: form
        - description: A comma-separated list of allergens or ingredients that must be excluded.
          explode: false
          in: query
          name: exclude
          required: false
          schema:
            example: shellfish, olives
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Generate Meal Plan
  "/mealplanner/{username}/day/{date}":
    delete:
      deprecated: false
      description: Delete all planned items from the user's meal plan for a specific day.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day
      operationId: clearMealPlanDay
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The date in the format yyyy-mm-dd.
          explode: false
          in: path
          name: date
          required: true
          schema:
            example: 2020-06-01
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                date:
                  description: The date in the format yyyy-mm-dd.
                  example: 2020-06-01
                  type: string
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - date
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Clear Meal Plan Day
  "/mealplanner/{username}/items":
    post:
      deprecated: false
      description: Add an item to the user's meal plan.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Add-to-Meal-Plan
      operationId: addToMealPlan
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Add to Meal Plan
  "/mealplanner/{username}/items/{id}":
    delete:
      deprecated: false
      description: Delete an item from the user's meal plan.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan
      operationId: deleteFromMealPlan
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The shopping list item id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 15678
            type: number
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                id:
                  description: The shopping list item id.
                  example: 15678
                  type: number
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - id
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete from Meal Plan
  "/mealplanner/{username}/shopping-list":
    get:
      deprecated: false
      description: Get the current shopping list for the given user.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Shopping-List
      operationId: getShoppingList
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Shopping List
  "/mealplanner/{username}/shopping-list/items":
    post:
      deprecated: false
      description: Add an item to the current shopping list of a user.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Add-to-Shopping-List
      operationId: addToShoppingList
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Add to Shopping List
  "/mealplanner/{username}/shopping-list/items/{id}":
    delete:
      deprecated: false
      description: Delete an item from the current shopping list of the user.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Delete-from-Shopping-List
      operationId: deleteFromShoppingList
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The shopping list item id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 15678
            type: number
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                id:
                  description: The shopping list item id.
                  example: 15678
                  type: number
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - id
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete from Shopping List
  "/mealplanner/{username}/shopping-list/{start-date}/{end-date}":
    post:
      deprecated: false
      description: Generate the shopping list for a user from the meal planner in a given time frame.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Generate-Shopping-List
      operationId: generateShoppingList
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The start date in the format yyyy-mm-dd.
          explode: false
          in: path
          name: start-date
          required: true
          schema:
            example: 2020-06-01
            type: string
          style: simple
        - description: The end date in the format yyyy-mm-dd.
          explode: false
          in: path
          name: end-date
          required: true
          schema:
            example: 2020-06-07
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      requestBody:
        content:
          "":
            schema:
              properties:
                end-date:
                  description: The end date in the format yyyy-mm-dd.
                  example: 2020-06-07
                  type: string
                hash:
                  description: The private hash for the username.
                  example: 4b5v4398573406
                  type: string
                start-date:
                  description: The start date in the format yyyy-mm-dd.
                  example: 2020-06-01
                  type: string
                username:
                  description: The username.
                  example: dsky
                  type: string
              required:
                - username
                - start-date
                - end-date
                - hash
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Generate Shopping List
  "/mealplanner/{username}/templates":
    get:
      deprecated: false
      description: Get meal plan templates from user or public ones.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates
      operationId: getMealPlanTemplates
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Meal Plan Templates
  "/mealplanner/{username}/templates/{id}":
    get:
      deprecated: false
      description: Get information about a meal plan template.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template
      operationId: getMealPlanTemplate
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The shopping list item id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 15678
            type: number
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Meal Plan Template
  "/mealplanner/{username}/week/{start-date}":
    get:
      deprecated: false
      description: Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week
      operationId: getMealPlanWeek
      parameters:
        - description: The username.
          explode: false
          in: path
          name: username
          required: true
          schema:
            example: dsky
            type: string
          style: simple
        - description: The start date of the meal planned week in the format yyyy-mm-dd.
          explode: false
          in: path
          name: start-date
          required: true
          schema:
            example: 2020-06-01
            type: string
          style: simple
        - description: The private hash for the username.
          explode: false
          in: query
          name: hash
          required: true
          schema:
            example: 4b5v4398573406
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Meal Plan Week
  /recipes/analyzeInstructions:
    post:
      deprecated: false
      description: This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions
      operationId: analyzeRecipeInstructions
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                instructions:
                  description: The instructions to be analyzed.
                  example: Put the garlic in a pan and then add the onion. Add some salt and oregano.
                  type: string
              required:
                - instructions
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Analyze Recipe Instructions
  /recipes/autocomplete:
    get:
      deprecated: false
      description: Autocomplete a partial input to suggest possible recipe names.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search
      operationId: autocompleteRecipeSearch
      parameters:
        - description: The query to be autocompleted.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: burger
            type: string
          style: form
        - description: The number of results to return (between 1 and 25).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Autocomplete Recipe Search
  /recipes/complexSearch:
    get:
      deprecated: false
      description: "Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint."
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Recipes
      operationId: searchRecipes
      parameters:
        - description: The (natural language) recipe search query.
          explode: false
          in: query
          name: query
          required: true
          schema:
            example: pasta
            type: string
          style: form
        - description: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
          explode: false
          in: query
          name: cuisine
          required: false
          schema:
            example: italian
            type: string
          style: form
        - description: The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
          explode: false
          in: query
          name: excludeCuisine
          required: false
          schema:
            example: greek
            type: string
          style: form
        - description: The diet for which the recipes must be suitable. See a full list of supported diets.
          explode: false
          in: query
          name: diet
          required: false
          schema:
            example: vegetarian
            type: string
          style: form
        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
          explode: false
          in: query
          name: intolerances
          required: false
          schema:
            example: gluten
            type: string
          style: form
        - description: The equipment required. Multiple values will be interpreted as 'or'. For example, value could be "blender, frying pan, bowl".
          explode: false
          in: query
          name: equipment
          required: false
          schema:
            example: pan
            type: string
          style: form
        - description: A comma-separated list of ingredients that should/must be used in the recipes.
          explode: false
          in: query
          name: includeIngredients
          required: false
          schema:
            example: tomato,cheese
            type: string
          style: form
        - description: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
          explode: false
          in: query
          name: excludeIngredients
          required: false
          schema:
            example: eggs
            type: string
          style: form
        - description: The type of recipe. See a full list of supported meal types.
          explode: false
          in: query
          name: type
          required: false
          schema:
            example: main course
            type: string
          style: form
        - description: Whether the recipes must have instructions.
          explode: false
          in: query
          name: instructionsRequired
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: Add information about the ingredients and whether they are used or missing in relation to the query.
          explode: false
          in: query
          name: fillIngredients
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: If set to true, you get more information about the recipes returned.
          explode: false
          in: query
          name: addRecipeInformation
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: If set to true, you get nutritional information about each recipes returned.
          explode: false
          in: query
          name: addRecipeNutrition
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: The username of the recipe author.
          explode: false
          in: query
          name: author
          required: false
          schema:
            example: coffeebean
            type: string
          style: form
        - description: User defined tags that have to match. The author param has to be set.
          explode: false
          in: query
          name: tags
          required: false
          schema:
            example: myCustomTag
            type: string
          style: form
        - description: The id of the recipe box to which the search should be limited to.
          explode: false
          in: query
          name: recipeBoxId
          required: false
          schema:
            example: 2468
            type: number
          style: form
        - description: Enter text that must be found in the title of the recipes.
          explode: false
          in: query
          name: titleMatch
          required: false
          schema:
            example: Crock Pot
            type: string
          style: form
        - description: The maximum time in minutes it should take to prepare and cook the recipe.
          explode: false
          in: query
          name: maxReadyTime
          required: false
          schema:
            example: 20
            type: number
          style: form
        - description: Whether to ignore typical pantry items, such as water, salt, flour, etc.
          explode: false
          in: query
          name: ignorePantry
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: The strategy to sort recipes by. See a full list of supported sorting options.
          explode: false
          in: query
          name: sort
          required: false
          schema:
            example: calories
            type: string
          style: form
        - description: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
          explode: false
          in: query
          name: sortDirection
          required: false
          schema:
            example: asc
            type: string
          style: form
        - description: The minimum amount of carbohydrates in grams the recipe must have.
          explode: false
          in: query
          name: minCarbs
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of carbohydrates in grams the recipe can have.
          explode: false
          in: query
          name: maxCarbs
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of protein in grams the recipe must have.
          explode: false
          in: query
          name: minProtein
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of protein in grams the recipe can have.
          explode: false
          in: query
          name: maxProtein
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of calories the recipe must have.
          explode: false
          in: query
          name: minCalories
          required: false
          schema:
            example: 50
            type: number
          style: form
        - description: The maximum amount of calories the recipe can have.
          explode: false
          in: query
          name: maxCalories
          required: false
          schema:
            example: 800
            type: number
          style: form
        - description: The minimum amount of fat in grams the recipe must have.
          explode: false
          in: query
          name: minFat
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: The maximum amount of fat in grams the recipe can have.
          explode: false
          in: query
          name: maxFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of alcohol in grams the recipe must have.
          explode: false
          in: query
          name: minAlcohol
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of alcohol in grams the recipe can have.
          explode: false
          in: query
          name: maxAlcohol
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of caffeine in milligrams the recipe must have.
          explode: false
          in: query
          name: minCaffeine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of caffeine in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCaffeine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of copper in milligrams the recipe must have.
          explode: false
          in: query
          name: minCopper
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of copper in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCopper
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of calcium in milligrams the recipe must have.
          explode: false
          in: query
          name: minCalcium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of calcium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCalcium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of choline in milligrams the recipe must have.
          explode: false
          in: query
          name: minCholine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of choline in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCholine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of cholesterol in milligrams the recipe must have.
          explode: false
          in: query
          name: minCholesterol
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of cholesterol in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCholesterol
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fluoride in milligrams the recipe must have.
          explode: false
          in: query
          name: minFluoride
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of fluoride in milligrams the recipe can have.
          explode: false
          in: query
          name: maxFluoride
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of saturated fat in grams the recipe must have.
          explode: false
          in: query
          name: minSaturatedFat
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of saturated fat in grams the recipe can have.
          explode: false
          in: query
          name: maxSaturatedFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin A in IU the recipe must have.
          explode: false
          in: query
          name: minVitaminA
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin A in IU the recipe can have.
          explode: false
          in: query
          name: maxVitaminA
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin C milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminC
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin C in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminC
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin D in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminD
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin D in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminD
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin E in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminE
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin E in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminE
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin K in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminK
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin K in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminK
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B1 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB1
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B1 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB1
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B2 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB2
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B2 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB2
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B5 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB5
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B5 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB5
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B3 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB3
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B3 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB3
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B6 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB6
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B6 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB6
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B12 in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminB12
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B12 in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminB12
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fiber in grams the recipe must have.
          explode: false
          in: query
          name: minFiber
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of fiber in grams the recipe can have.
          explode: false
          in: query
          name: maxFiber
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of folate in micrograms the recipe must have.
          explode: false
          in: query
          name: minFolate
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of folate in micrograms the recipe can have.
          explode: false
          in: query
          name: maxFolate
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of folic acid in micrograms the recipe must have.
          explode: false
          in: query
          name: minFolicAcid
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of folic acid in micrograms the recipe can have.
          explode: false
          in: query
          name: maxFolicAcid
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of iodine in micrograms the recipe must have.
          explode: false
          in: query
          name: minIodine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of iodine in micrograms the recipe can have.
          explode: false
          in: query
          name: maxIodine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of iron in milligrams the recipe must have.
          explode: false
          in: query
          name: minIron
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of iron in milligrams the recipe can have.
          explode: false
          in: query
          name: maxIron
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of magnesium in milligrams the recipe must have.
          explode: false
          in: query
          name: minMagnesium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of magnesium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxMagnesium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of manganese in milligrams the recipe must have.
          explode: false
          in: query
          name: minManganese
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of manganese in milligrams the recipe can have.
          explode: false
          in: query
          name: maxManganese
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of phosphorus in milligrams the recipe must have.
          explode: false
          in: query
          name: minPhosphorus
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of phosphorus in milligrams the recipe can have.
          explode: false
          in: query
          name: maxPhosphorus
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of potassium in milligrams the recipe must have.
          explode: false
          in: query
          name: minPotassium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of potassium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxPotassium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of selenium in micrograms the recipe must have.
          explode: false
          in: query
          name: minSelenium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of selenium in micrograms the recipe can have.
          explode: false
          in: query
          name: maxSelenium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of sodium in milligrams the recipe must have.
          explode: false
          in: query
          name: minSodium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of sodium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxSodium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of sugar in grams the recipe must have.
          explode: false
          in: query
          name: minSugar
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of sugar in grams the recipe can have.
          explode: false
          in: query
          name: maxSugar
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of zinc in milligrams the recipe must have.
          explode: false
          in: query
          name: minZinc
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of zinc in milligrams the recipe can have.
          explode: false
          in: query
          name: maxZinc
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The number of results to skip (between 0 and 900).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: Whether the recipes should have an open license that allows display with proper attribution.
          explode: false
          in: query
          name: limitLicense
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Recipes
  /recipes/convert:
    get:
      deprecated: false
      description: Convert amounts like "2 cups of flour to grams".
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Convert-Amounts
      operationId: convertAmounts
      parameters:
        - description: The ingredient which you want to convert.
          explode: false
          in: query
          name: ingredientName
          required: true
          schema:
            example: flour
            type: string
          style: form
        - description: The amount from which you want to convert, e.g. the 2.5 in "2.5 cups of flour to grams".
          explode: false
          in: query
          name: sourceAmount
          required: true
          schema:
            example: 2.5
            type: number
          style: form
        - description: The unit from which you want to convert, e.g. the grams in "2.5 cups of flour to grams". You can also use "piece", e.g. "3.4 oz tomatoes to piece"
          explode: false
          in: query
          name: sourceUnit
          required: true
          schema:
            example: cups
            type: string
          style: form
        - description: The unit to which you want to convert, e.g. the grams in "2.5 cups of flour to grams". You can also use "piece", e.g. "3.4 oz tomatoes to piece"
          explode: false
          in: query
          name: targetUnit
          required: true
          schema:
            example: grams
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Convert Amounts
  /recipes/cuisine:
    post:
      deprecated: false
      description: Classify the recipe's cuisine.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Classify-Cuisine
      operationId: classifyCuisine
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line (separate lines with \n).
                  example: 3 oz pork shoulder
                  type: string
                title:
                  description: The title of the recipe.
                  example: Pork roast with green beans
                  type: string
              required:
                - title
                - ingredientList
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Classify Cuisine
  /recipes/extract:
    get:
      deprecated: false
      description: This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website
      operationId: extractRecipeFromWebsite
      parameters:
        - description: The URL of the recipe page.
          explode: false
          in: query
          name: url
          required: true
          schema:
            example: https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies
            type: string
          style: form
        - description: If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
          explode: false
          in: query
          name: forceExtraction
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
          explode: false
          in: query
          name: analyze
          required: false
          schema:
            example: false
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Extract Recipe from Website
  /recipes/findByIngredients:
    get:
      deprecated: false
      description: "

        \            Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).

        \        "
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients
      operationId: searchRecipesByIngredients
      parameters:
        - description: A comma-separated list of ingredients that the recipes should contain.
          explode: false
          in: query
          name: ingredients
          required: true
          schema:
            example: apples,flour,sugar
            type: string
          style: form
        - description: The maximum number of recipes to return (between 1 and 100). Defaults to 10.
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: Whether the recipes should have an open license that allows display with proper attribution.
          explode: false
          in: query
          name: limitLicense
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
          explode: false
          in: query
          name: ranking
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: Whether to ignore typical pantry items, such as water, salt, flour, etc.
          explode: false
          in: query
          name: ignorePantry
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Recipes by Ingredients
  /recipes/findByNutrients:
    get:
      deprecated: false
      description: Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients
      operationId: searchRecipesByNutrients
      parameters:
        - description: The minimum amount of carbohydrates in grams the recipe must have.
          explode: false
          in: query
          name: minCarbs
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of carbohydrates in grams the recipe can have.
          explode: false
          in: query
          name: maxCarbs
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of protein in grams the recipe must have.
          explode: false
          in: query
          name: minProtein
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: The maximum amount of protein in grams the recipe can have.
          explode: false
          in: query
          name: maxProtein
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of calories the recipe must have.
          explode: false
          in: query
          name: minCalories
          required: false
          schema:
            example: 50
            type: number
          style: form
        - description: The maximum amount of calories the recipe can have.
          explode: false
          in: query
          name: maxCalories
          required: false
          schema:
            example: 800
            type: number
          style: form
        - description: The minimum amount of fat in grams the recipe must have.
          explode: false
          in: query
          name: minFat
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: The maximum amount of fat in grams the recipe can have.
          explode: false
          in: query
          name: maxFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of alcohol in grams the recipe must have.
          explode: false
          in: query
          name: minAlcohol
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of alcohol in grams the recipe can have.
          explode: false
          in: query
          name: maxAlcohol
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of caffeine in milligrams the recipe must have.
          explode: false
          in: query
          name: minCaffeine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of caffeine in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCaffeine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of copper in milligrams the recipe must have.
          explode: false
          in: query
          name: minCopper
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of copper in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCopper
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of calcium in milligrams the recipe must have.
          explode: false
          in: query
          name: minCalcium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of calcium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCalcium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of choline in milligrams the recipe must have.
          explode: false
          in: query
          name: minCholine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of choline in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCholine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of cholesterol in milligrams the recipe must have.
          explode: false
          in: query
          name: minCholesterol
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of cholesterol in milligrams the recipe can have.
          explode: false
          in: query
          name: maxCholesterol
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fluoride in milligrams the recipe must have.
          explode: false
          in: query
          name: minFluoride
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of fluoride in milligrams the recipe can have.
          explode: false
          in: query
          name: maxFluoride
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of saturated fat in grams the recipe must have.
          explode: false
          in: query
          name: minSaturatedFat
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of saturated fat in grams the recipe can have.
          explode: false
          in: query
          name: maxSaturatedFat
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin A in IU the recipe must have.
          explode: false
          in: query
          name: minVitaminA
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin A in IU the recipe can have.
          explode: false
          in: query
          name: maxVitaminA
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin C in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminC
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin C in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminC
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin D in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminD
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin D in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminD
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin E in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminE
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin E in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminE
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin K in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminK
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin K in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminK
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B1 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB1
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B1 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB1
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B2 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB2
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B2 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB2
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B5 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB5
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B5 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB5
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B3 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB3
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B3 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB3
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B6 in milligrams the recipe must have.
          explode: false
          in: query
          name: minVitaminB6
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B6 in milligrams the recipe can have.
          explode: false
          in: query
          name: maxVitaminB6
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of Vitamin B12 in micrograms the recipe must have.
          explode: false
          in: query
          name: minVitaminB12
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of Vitamin B12 in micrograms the recipe can have.
          explode: false
          in: query
          name: maxVitaminB12
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of fiber in grams the recipe must have.
          explode: false
          in: query
          name: minFiber
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of fiber in grams the recipe can have.
          explode: false
          in: query
          name: maxFiber
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of folate in micrograms the recipe must have.
          explode: false
          in: query
          name: minFolate
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of folate in micrograms the recipe can have.
          explode: false
          in: query
          name: maxFolate
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of folic acid in micrograms the recipe must have.
          explode: false
          in: query
          name: minFolicAcid
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of folic acid in micrograms the recipe can have.
          explode: false
          in: query
          name: maxFolicAcid
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of iodine in micrograms the recipe must have.
          explode: false
          in: query
          name: minIodine
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of iodine in micrograms the recipe can have.
          explode: false
          in: query
          name: maxIodine
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of iron in milligrams the recipe must have.
          explode: false
          in: query
          name: minIron
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of iron in milligrams the recipe can have.
          explode: false
          in: query
          name: maxIron
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of magnesium in milligrams the recipe must have.
          explode: false
          in: query
          name: minMagnesium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of magnesium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxMagnesium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of manganese in milligrams the recipe must have.
          explode: false
          in: query
          name: minManganese
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of manganese in milligrams the recipe can have.
          explode: false
          in: query
          name: maxManganese
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of phosphorus in milligrams the recipe must have.
          explode: false
          in: query
          name: minPhosphorus
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of phosphorus in milligrams the recipe can have.
          explode: false
          in: query
          name: maxPhosphorus
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of potassium in milligrams the recipe must have.
          explode: false
          in: query
          name: minPotassium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of potassium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxPotassium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of selenium in micrograms the recipe must have.
          explode: false
          in: query
          name: minSelenium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of selenium in micrograms the recipe can have.
          explode: false
          in: query
          name: maxSelenium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of sodium in milligrams the recipe must have.
          explode: false
          in: query
          name: minSodium
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of sodium in milligrams the recipe can have.
          explode: false
          in: query
          name: maxSodium
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of sugar in grams the recipe must have.
          explode: false
          in: query
          name: minSugar
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of sugar in grams the recipe can have.
          explode: false
          in: query
          name: maxSugar
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The minimum amount of zinc in milligrams the recipe must have.
          explode: false
          in: query
          name: minZinc
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The maximum amount of zinc in milligrams the recipe can have.
          explode: false
          in: query
          name: maxZinc
          required: false
          schema:
            example: 100
            type: number
          style: form
        - description: The number of results to skip (between 0 and 900).
          explode: false
          in: query
          name: offset
          required: false
          schema:
            example: 0
            type: number
          style: form
        - description: The number of expected results (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 10
            type: number
          style: form
        - description: If true, every request will give you a random set of recipes within the requested limits.
          explode: false
          in: query
          name: random
          required: false
          schema:
            example: false
            type: boolean
          style: form
        - description: Whether the recipes should have an open license that allows display with proper attribution.
          explode: false
          in: query
          name: limitLicense
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Search Recipes by Nutrients
  /recipes/guessNutrition:
    get:
      deprecated: false
      description: Estimate the macronutrients of a dish based on its title.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name
      operationId: guessNutritionByDishName
      parameters:
        - description: The title of the dish.
          explode: false
          in: query
          name: title
          required: true
          schema:
            example: Spaghetti Aglio et Olio
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Guess Nutrition by Dish Name
  /recipes/informationBulk:
    get:
      deprecated: false
      description: Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk
      operationId: getRecipeInformationBulk
      parameters:
        - description: A comma-separated list of recipe ids.
          explode: false
          in: query
          name: ids
          required: true
          schema:
            example: 715538,716429
            type: string
          style: form
        - description: Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
          explode: false
          in: query
          name: includeNutrition
          required: false
          schema:
            example: false
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Information Bulk
  /recipes/parseIngredients:
    post:
      deprecated: false
      description: Extract an ingredient from plain text.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Parse-Ingredients
      operationId: parseIngredients
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                includeNutrition:
                  description: Whether nutrition data should be added to correctly parsed ingredients.
                  example: true
                  type: boolean
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line.
                  example: 1 cup green tea
                  type: string
                servings:
                  description: The number of servings that you can make from the ingredients.
                  example: 1
                  type: number
              required:
                - ingredientList
                - servings
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Parse Ingredients
  /recipes/queries/analyze:
    get:
      deprecated: false
      description: Parse a recipe search query to find out its intention.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query
      operationId: analyzeARecipeSearchQuery
      parameters:
        - description: The recipe search query.
          explode: false
          in: query
          name: q
          required: true
          schema:
            example: salmon with fusilli and no nuts
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Analyze a Recipe Search Query
  /recipes/quickAnswer:
    get:
      deprecated: false
      description: Answer a nutrition related natural language question.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Quick-Answer
      operationId: quickAnswer
      parameters:
        - description: The nutrition related question.
          explode: false
          in: query
          name: q
          required: true
          schema:
            example: How much vitamin c is in 2 apples?
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Quick Answer
  /recipes/random:
    get:
      deprecated: false
      description: Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Random-Recipes
      operationId: getRandomRecipes
      parameters:
        - description: Whether the recipes should have an open license that allows display with proper attribution.
          explode: false
          in: query
          name: limitLicense
          required: false
          schema:
            example: true
            type: boolean
          style: form
        - description: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
          explode: false
          in: query
          name: tags
          required: false
          schema:
            example: vegetarian, dessert
            type: string
          style: form
        - description: The number of random recipes to be returned (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 1
            type: number
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Random Recipes
  /recipes/visualizeEquipment:
    post:
      deprecated: false
      description: Visualize the equipment used to make a recipe. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Equipment
      operationId: visualizeEquipment
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                defaultCss:
                  description: Whether the default CSS should be added to the response.
                  example: true
                  type: boolean
                instructions:
                  description: The recipe's instructions.
                  example: Preheat oven. Cut cucumber with a knife and put in a blender.
                  type: string
                showBacklink:
                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
                  example: true
                  type: boolean
                view:
                  description: How to visualize the equipment, either "grid" or "list".
                  example: grid
                  type: string
              required:
                - instructions
              type: object
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Equipment
  /recipes/visualizeIngredients:
    post:
      deprecated: false
      description: Visualize ingredients of a recipe. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Ingredients
      operationId: visualizeIngredients
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                defaultCss:
                  description: Whether the default CSS should be added to the response.
                  example: true
                  type: boolean
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line.
                  example: 3 oz flour
                  type: string
                measure:
                  description: The original system of measurement, either "metric" or "us".
                  example: metric
                  type: string
                servings:
                  description: The number of servings.
                  example: 2
                  type: number
                showBacklink:
                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
                  example: true
                  type: boolean
                view:
                  description: How to visualize the ingredients, either "grid" or "list".
                  example: grid
                  type: string
              required:
                - ingredientList
                - servings
              type: object
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Ingredients
  /recipes/visualizeNutrition:
    post:
      deprecated: false
      description: Visualize a recipe's nutritional information as HTML including CSS. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition
      operationId: visualizeRecipeNutrition
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                defaultCss:
                  description: Whether the default CSS should be added to the response.
                  example: true
                  type: boolean
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line.
                  example: 3 oz flour
                  type: string
                servings:
                  description: The number of servings.
                  example: 2
                  type: number
                showBacklink:
                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
                  example: true
                  type: boolean
              required:
                - ingredientList
                - servings
              type: object
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Nutrition
  /recipes/visualizePriceEstimator:
    post:
      deprecated: false
      description: Visualize the price breakdown of a recipe. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown
      operationId: visualizePriceBreakdown
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                defaultCss:
                  description: Whether the default CSS should be added to the response.
                  example: true
                  type: boolean
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line.
                  example: 3 oz flour
                  type: string
                mode:
                  description: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
                  example: 1
                  type: number
                servings:
                  description: The number of servings.
                  example: 2
                  type: number
                showBacklink:
                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
                  example: true
                  type: boolean
              required:
                - ingredientList
                - servings
              type: object
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Price Breakdown
  /recipes/visualizeRecipe:
    post:
      deprecated: false
      description: Generate a recipe card for a recipe.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Create-Recipe-Card
      operationId: createRecipeCard
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                author:
                  description: The author of the recipe.
                  example: Anna Banana
                  type: string
                backgroundColor:
                  description: The background color for the recipe card as a hex-string.
                  example: "#ffffff"
                  type: string
                backgroundImage:
                  description: The background image ("none","background1", or "background2").
                  example: background1
                  type: string
                fontColor:
                  description: The font color for the recipe card as a hex-string.
                  example: "#333333"
                  type: string
                image:
                  description: The binary image of the recipe as jpg.
                  example: ""
                  format: binary
                  type: string
                ingredients:
                  description: The ingredient list of the recipe, one ingredient per line (separate lines with \n).
                  example: 2 cups of green beans
                  type: string
                instructions:
                  description: The instructions to make the recipe. One step per line (separate lines with \n).
                  example: cook the beans
                  type: string
                mask:
                  description: The mask to put over the recipe image ("ellipseMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").
                  example: ellipseMask
                  type: string
                readyInMinutes:
                  description: The number of minutes it takes to get the recipe on the table.
                  example: 60
                  type: number
                servings:
                  description: The number of servings the recipe makes.
                  example: 2
                  type: number
                source:
                  description: The source of the recipe.
                  example: spoonacular.com
                  type: string
                title:
                  description: The title of the recipe.
                  example: My recipe
                  type: string
              required:
                - title
                - image
                - ingredients
                - instructions
                - readyInMinutes
                - servings
                - mask
                - backgroundImage
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Create Recipe Card
  /recipes/visualizeTaste:
    post:
      deprecated: false
      description: Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste
      operationId: visualizeRecipeTaste
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ingredientList:
                  description: The ingredient list of the recipe, one ingredient per line.
                  example: 1 lemon
                  type: string
              required:
                - ingredientList
              type: object
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Taste
  "/recipes/{id}/analyzedInstructions":
    get:
      deprecated: false
      description: Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions
      operationId: getAnalyzedRecipeInstructions
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 324694
            type: number
          style: simple
        - description: Whether to break down the recipe steps even more.
          explode: false
          in: query
          name: stepBreakdown
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Analyzed Recipe Instructions
  "/recipes/{id}/equipmentWidget":
    get:
      deprecated: false
      description: Visualize a recipe's equipment list.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID
      operationId: visualizeRecipeEquipmentByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 44860
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Equipment by ID
  "/recipes/{id}/equipmentWidget.json":
    get:
      deprecated: false
      description: Get a recipe's equipment list.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID
      operationId: getRecipeEquipmentByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1003464
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Equipment by ID
  "/recipes/{id}/information":
    get:
      deprecated: false
      description: Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Information
      operationId: getRecipeInformation
      parameters:
        - description: The id of the recipe.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 716429
            type: number
          style: simple
        - description: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
          explode: false
          in: query
          name: includeNutrition
          required: false
          schema:
            example: false
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Information
  "/recipes/{id}/ingredientWidget":
    get:
      deprecated: false
      description: Visualize a recipe's ingredient list.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID
      operationId: visualizeRecipeIngredientsByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1082038
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Ingredients by ID
  "/recipes/{id}/ingredientWidget.json":
    get:
      deprecated: false
      description: Get a recipe's ingredient list.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID
      operationId: getRecipeIngredientsByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1003464
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Ingredients by ID
  "/recipes/{id}/nutritionWidget":
    get:
      deprecated: false
      description: Visualize a recipe's nutritional information as HTML including CSS.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID
      operationId: visualizeRecipeNutritionByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1082038
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Nutrition by ID
  "/recipes/{id}/nutritionWidget.json":
    get:
      deprecated: false
      description: Get a recipe's nutrition widget data.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID
      operationId: getRecipeNutritionWidgetByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1003464
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Nutrition Widget by ID
  "/recipes/{id}/priceBreakdownWidget":
    get:
      deprecated: false
      description: Visualize a recipe's price breakdown.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID
      operationId: visualizeRecipePriceBreakdownByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1082038
            type: number
          style: simple
        - description: Whether the default CSS should be added to the response.
          explode: false
          in: query
          name: defaultCss
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Price Breakdown by ID
  "/recipes/{id}/priceBreakdownWidget.json":
    get:
      deprecated: false
      description: Get a recipe's price breakdown data.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID
      operationId: getRecipePriceBreakdownByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 1003464
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Price Breakdown by ID
  "/recipes/{id}/similar":
    get:
      deprecated: false
      description: Find recipes which are similar to the given one.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Similar-Recipes
      operationId: getSimilarRecipes
      parameters:
        - description: The id of the source recipe for which similar recipes should be found.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 715538
            type: number
          style: simple
        - description: The number of random recipes to be returned (between 1 and 100).
          explode: false
          in: query
          name: number
          required: false
          schema:
            example: 1
            type: number
          style: form
        - description: Whether the recipes should have an open license that allows display with proper attribution.
          explode: false
          in: query
          name: limitLicense
          required: false
          schema:
            example: true
            type: boolean
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Similar Recipes
  "/recipes/{id}/summary":
    get:
      deprecated: false
      description: Automatically generate a short description that summarizes key information about the recipe.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Summarize-Recipe
      operationId: summarizeRecipe
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 4632
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Summarize Recipe
  "/recipes/{id}/tasteWidget":
    get:
      deprecated: false
      description: Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID
      operationId: visualizeRecipeTasteByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 69095
            type: number
          style: simple
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Visualize Recipe Taste by ID
  "/recipes/{id}/tasteWidget.json":
    get:
      deprecated: false
      description: Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID
      operationId: getRecipeTasteByID
      parameters:
        - description: The recipe id.
          explode: false
          in: path
          name: id
          required: true
          schema:
            example: 69095
            type: number
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get Recipe Taste by ID
  /users/connect:
    post:
      deprecated: false
      description: In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.
      externalDocs:
        description: Read entire docs
        url: https://spoonacular.com/food-api/docs#Connect-User
      operationId: connectUser
      parameters: []
      requestBody:
        content:
          "":
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Success
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Connect User
components:
  schemas: {}
  securitySchemes:
    apiKeyScheme:
      in: query
      name: apiKey
      type: apiKey
