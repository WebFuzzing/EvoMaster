openapi: 3.0.3
servers:
  - url: https://api.getpostman.com
info:
  contact: {}
  description: |-
    The Postman API allows you to programmatically access data stored in Postman account with ease.

    The easiest way to get started with the API is to click the **fork** button to fork this collection to your own workspace and use Postman to send requests.


    # Overview

    1. You need a valid <a href="#authentication">API Key</a> to send requests to the API endpoints. You can get your key from the [integrations dashboard](https://go.postman.co/settings/me/api-keys).

    1. The API has an access <a href="#rate-limits">rate limit</a> applied to it.

    1. The Postman API will only respond to secured communication done over HTTPS. HTTP requests will be sent a `301` redirect to corresponding HTTPS resources.

    1. Response to every request is sent in [JSON format](https://en.wikipedia.org/wiki/JSON). In case the API request results in an error, it is represented by an `"error": {}` key in the JSON response.

    1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.

    1. The API calls will respond with appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within Postman Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates all went well, while `4XX` or `5XX` response codes indicate an error from the requesting client or our API servers respectively.

    1. Individual resources in your Postman Account is accessible using its unique id (`uid`). The `uid` is a simple concatenation of the resource owner's user-id and the resource-id. For example, a collection's `uid` is `{{owner_id}}-{{collection_id}}`.

    # Authentication

    An API Key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header.

    > If you do not have an API Key, you can easily generate one by heading over to the [Postman Integrations Dashboard](https://go.postman.co/integrations/services/pm_pro_api).

    An API Key tells our API server that the request it received came from you. Everything that you have access to in Postman is accessible with an API Key that is generated by you.

    For ease of use inside Postman, you could store your API key in an [environment variable](https://www.getpostman.com/docs/environments) called `postman_api_key` and this [Collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.

    ## API Key related error response

    If an API Key is missing, malformed, or invalid, you will receive a `401 Unauthorised` response code and the following JSON response:

    ```
    {
      "error": { 
        "name": "AuthenticationError",
        "message": "API Key missing. Every request requires an API Key to be sent."
      }
    }
    ```

    ## Using the API Key as a query parameter

    Every request that accepts API Key as `X-Api-Key` request header, also accepts the key when sent as `apikey` URL query parameter.

    API key sent as part of the header has a higher priority in case you send the key using both request header and query parameter.


    # Rate Limits

    API access rate limits are applied at a per-key basis in unit time. Access to the API using a key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your consumption.


    | Header                  | Description |
    |-------------------------|-------------|
    | `X-RateLimit-Limit`     | The maximum number of requests that the consumer is permitted to make per minute. |
    | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |
    | `X-RateLimit-Reset`     | The time at which the current rate limit window resets in UTC epoch seconds. |


    Once you hit the rate limit, you will receive a response similar to the following JSON, with a status code of `429 Too Many Requests`.

    ```json
    {
      "error": {
        "name": "rateLimitError",
        "message": "Rate Limit exceeded. Please retry at 1465452702843"
      }
    }
    ```


    # Support

    For help regarding accessing the Postman API, feel free to discuss it in our [Discourse Community](https://community.getpostman.com). You can also drop in a line at [help@getpostman.com](mailto:help@getpostman.com).

    In the event you receive a `503` response from our servers, it implies that we have hit an unexpected spike in API access traffic and would usually be operational within the next 5 minutes. If the outage persists, or your receive any other form of `5XX` error, kindly let us know.


    # Terms of Use

    For information on API terms of use and privacy, refer to our terms at [http://postman.com/legal/terms/](http://postman.com/legal/terms/) and our privacy policy at [https://www.postman.com/legal/privacy-policy/](https://www.postman.com/legal/privacy-policy/).


    # API Reference
  title: Postman API
  version: 1.20.0
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://www.vectorlogo.zone/logos/getpostman/getpostman-ar21.svg
  x-origin:
    - format: openapi
      url: https://gist.githubusercontent.com/MikeRalphson/f5dd7e7e712a4f2caa8f1783f1053dbc/raw/05fb7ae8b877b37d93413a0b8183bf60c2e1bdfe/postman-api.yaml
      version: "3.0"
  x-providerName: getpostman.com
tags:
  - name: Collections
  - name: Environments
  - name: Mocks
  - name: Monitors
  - name: Workspaces
  - name: User
  - name: Import
  - name: API
  - description: This folder contains the requests around API versions.
    name: API Version
  - description: This folder contains all the endpoints related to Schemas.
    name: Schema
  - description: |-
      This contains requests related to relations. 

      Relations can be of the following types: 
      - `contracttest`
      - `integrationtest`
      - `documentation`
      - `testsuite`
      - `environment`
      - `mock`
      - `monitor`
    name: Relations
  - description: |-
      With webhooks you can trigger a collection at a specific time with your own custom payload which can then be accessed in the collection.

      Learn more about webhooks in our [learning center](https://learning.postman.com/docs/designing-and-developing-your-api/monitoring-your-api/integrations-for-alerts/).
    name: Webhooks
paths:
  /apis:
    get:
      description: |-
        This call fetches all the APIs present in the specified workspace

        Response contains an array named `apis` which would contain all the details of APIs present in the workspace.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getAllApIs
      parameters:
        - description: Only return APIs that are inside the given workspace.
          in: query
          name: workspace
          schema:
            example: "{{workspaceId}}"
            type: string
        - description: Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.
          in: query
          name: since
          schema:
            example: "{{since}}"
            type: string
        - description: Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.
          in: query
          name: until
          schema:
            example: "{{until}}"
            type: string
        - description: Only return APIs that have been created by the user ID represented by the given value.
          in: query
          name: createdBy
          schema:
            example: "{{createdBy}}"
            type: string
        - description: Only return APIs that have been updated by the user ID represented by the given value.
          in: query
          name: updatedBy
          schema:
            example: "{{updatedBy}}"
            type: string
        - description: Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.
          in: query
          name: isPublic
          schema:
            example: "{{isPublic}}"
            type: string
        - description: Only return APIs whose name includes the given value. Matching is case insensitive.
          in: query
          name: name
          schema:
            example: "{{name}}"
            type: string
        - description: Only return APIs whose summary includes the given value. Matching is case insensitive.
          in: query
          name: summary
          schema:
            example: "{{summary}}"
            type: string
        - description: Only return APIs whose description includes the given value. Matching is case insensitive.
          in: query
          name: description
          schema:
            example: "{{description}}"
            type: string
        - description: The value of sort can be one of the names of the fields included in the response.
          in: query
          name: sort
          schema:
            example: "{{sort}}"
            type: string
        - description: The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.
          in: query
          name: direction
          schema:
            example: "{{direction}}"
            type: string
      responses:
        "200":
          description: ""
      summary: Get all APIs
      tags:
        - API
    post:
      description: |-
        This call creates a new API with a default API Version.  

        Request body should contain an `api` object which should atleast have a property `name`.

        Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createApi
      parameters:
        - in: query
          name: workspace
          schema:
            example: "{{workspaceId}}"
            type: string
      requestBody:
        content:
          application/json:
            example:
              api:
                description: This is description.
                name: Sync Service API
                summary: This is supposed to be a short summary.
            schema:
              properties:
                api:
                  properties:
                    description:
                      example: This is description.
                      type: string
                    name:
                      example: Sync Service API
                      type: string
                    summary:
                      example: This is supposed to be a short summary.
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create API:
                  value:
                    api:
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      description: This is supposed to handle markdown *descriptions*.
                      id: 387c2863-6ee3-4a56-8210-225f774edade
                      name: Sync API
                      summary: This is a summary
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  api:
                    properties:
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      description:
                        example: This is supposed to handle markdown *descriptions*.
                        type: string
                      id:
                        example: 387c2863-6ee3-4a56-8210-225f774edade
                        type: string
                      name:
                        example: Sync API
                        type: string
                      summary:
                        example: This is a summary
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Create API
      summary: Create API
      tags:
        - API
  "/apis/{apiId}":
    delete:
      description: |-
        This call deletes an existing API having the specified id.  

        Response contains an `api` object with `id` of the API which was deleted.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteAnApi
      responses:
        "200":
          content:
            application/json:
              examples:
                Delete an API:
                  value:
                    api:
                      id: 387c2863-6ee3-4a56-8210-225f774edade
              schema:
                properties:
                  api:
                    properties:
                      id:
                        example: 387c2863-6ee3-4a56-8210-225f774edade
                        type: string
                    type: object
                type: object
          description: Delete an API
      summary: Delete an API
      tags:
        - API
    get:
      description: |-
        This call fetches a single API having the specified id.

        Response contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleApi
      responses:
        "200":
          content:
            application/json:
              examples:
                Get single API:
                  value:
                    api:
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      description: This is a description.This is a description.
                      id: 387c2863-6ee3-4a56-8210-225f774edade
                      name: Sync API
                      summary: This is a summary
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  api:
                    properties:
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      description:
                        example: This is a description.This is a description.
                        type: string
                      id:
                        example: 387c2863-6ee3-4a56-8210-225f774edade
                        type: string
                      name:
                        example: Sync API
                        type: string
                      summary:
                        example: This is a summary
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Get single API
      summary: Single API
      tags:
        - API
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
    put:
      description: |-
        This call updates an existing API .  

        Request body should contain an `api` object which should have the fields to be updated. Only `name`, `summary` and `description` fields can be edited for an API.

        Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description` etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateAnApi
      requestBody:
        content:
          application/json:
            example:
              api:
                description: This is an updated Description
                name: New name
            schema:
              properties:
                api:
                  properties:
                    description:
                      example: This is an updated Description
                      type: string
                    name:
                      example: New name
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Update an API:
                  value:
                    api:
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      description: This is a description.
                      id: 387c2863-6ee3-4a56-8210-225f774edade
                      name: Sync API
                      summary: This is a summary
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  api:
                    properties:
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      description:
                        example: This is a description.
                        type: string
                      id:
                        example: 387c2863-6ee3-4a56-8210-225f774edade
                        type: string
                      name:
                        example: Sync API
                        type: string
                      summary:
                        example: This is a summary
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Update an API
      summary: Update an API
      tags:
        - API
  "/apis/{apiId}/versions":
    get:
      description: |-
        This call fetches details about the all the API Versions in the specified API.

        The response will contain an array `versions` object which would be a list of all the API Version along with their details.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getAllApiVersions
      responses:
        "200":
          content:
            application/json:
              examples:
                Get All API versions:
                  value:
                    versions:
                      - createdAt: 2019-02-12 19:34:49
                        createdBy: "5665"
                        description: Description
                        id: 024660a6-c837-46ca-91d8-7e8dd7c669de
                        name: "0.1"
                        summary: Summary
                        updatedAt: 2019-02-12 19:34:49
                      - createdAt: 2019-02-12 19:34:49
                        createdBy: "5665"
                        description: Description
                        id: 00932d3b-20f1-454f-a77e-38b4023163ea
                        name: "0.2"
                        summary: Summary
                        updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  versions:
                    items:
                      properties:
                        createdAt:
                          example: 2019-02-12 19:34:49
                          type: string
                        createdBy:
                          example: "5665"
                          type: string
                        description:
                          example: Description
                          type: string
                        id:
                          example: 024660a6-c837-46ca-91d8-7e8dd7c669de
                          type: string
                        name:
                          example: "0.1"
                          type: string
                        summary:
                          example: Summary
                          type: string
                        updatedAt:
                          example: 2019-02-12 19:34:49
                          type: string
                      type: object
                    type: array
                type: object
          description: Get All API versions
      summary: Get All API Versions
      tags:
        - API
        - API Version
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
    post:
      description: |-
        This call creates a new API version in the specified API.  

        Request body should contain a `version` object which should have fields:

        <table>
        <tr>
        	<td>name</td>
        	<td>Required. Name of the API Version</td>
        </tr>
        <tr>
        	<td>source</td>
        	<td>
        		If specified, it will copy the contents of the specified api version to create a new api verison.
        		<table>
        			<tr>
        				<td>id</td>
        				<td>Required. Id of the apiversion from where the details are to be copied</td>
        			</tr>
        			<tr>
        				<td>schema</td>
        				<td>Boolean. If true then copies the schema from the specified api version</td>
        			</tr>
        			<tr>
        				<td>relations</td>
        				<td>Object. {"&lt;relationType&gt;": true/false}.  
        					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
        				Relation types which should be copied over to the new api verison</td>
        			</tr>
        		</table>
        	</td>
        </tr>
        </table>

        Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createApiVersion
      requestBody:
        content:
          application/json:
            example:
              version:
                name: "1.0"
                source:
                  id: "{{apiVersionId}}"
                  relations:
                    documentation: true
                    mock: true
                    monitor: true
                  schema: true
            schema:
              properties:
                version:
                  properties:
                    name:
                      example: "1.0"
                      type: string
                    source:
                      properties:
                        id:
                          example: "{{apiVersionId}}"
                          type: string
                        relations:
                          properties:
                            documentation:
                              example: true
                              type: boolean
                            mock:
                              example: true
                              type: boolean
                            monitor:
                              example: true
                              type: boolean
                          type: object
                        schema:
                          example: true
                          type: boolean
                      type: object
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create API version:
                  value:
                    version:
                      api: 2b95d07c-8379-4bd1-924f-e7e1af185284
                      id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                      name: "1.0"
              schema:
                properties:
                  version:
                    properties:
                      api:
                        example: 2b95d07c-8379-4bd1-924f-e7e1af185284
                        type: string
                      id:
                        example: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                        type: string
                      name:
                        example: "1.0"
                        type: string
                    type: object
                type: object
          description: Create API version
      summary: Create API Version
      tags:
        - API
        - API Version
  "/apis/{apiId}/versions/{apiVersionId}":
    delete:
      description: |-
        This call deletes an existing API Version having the specified id.  

        Response contains an `version` object with `id` of the API Version which was deleted.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteAnApiVersion
      responses:
        "200":
          content:
            application/json:
              examples:
                Delete an API version:
                  value:
                    version:
                      id: 03c17f53-7e2e-427d-b55a-006b244f29ff
              schema:
                properties:
                  version:
                    properties:
                      id:
                        example: 03c17f53-7e2e-427d-b55a-006b244f29ff
                        type: string
                    type: object
                type: object
          description: Delete an API version
      summary: Delete an API Version
      tags:
        - API
        - API Version
    get:
      description: |-
        This call fetches details about the specified API Version.

        The response will contain a `version` object which would contain all the details of the API Version.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getAnApiVersion
      responses:
        "200":
          content:
            application/json:
              examples:
                Get an API version:
                  value:
                    version:
                      api: 06e41ca3-8bea-4bc5-a726-70338b9f1940
                      createdAt: 2019-07-21T16:31:15.000Z
                      createdBy: "5665"
                      id: 03c17f53-7e2e-427d-b55a-006b244f29ff
                      name: "0.1"
                      schema:
                        - 3484cd1e-e00d-4c39-aea4-539663afe898
                      updatedAt: 2019-07-21T16:31:15.000Z
                      updatedBy: "5665"
              schema:
                properties:
                  version:
                    properties:
                      api:
                        example: 06e41ca3-8bea-4bc5-a726-70338b9f1940
                        type: string
                      createdAt:
                        example: 2019-07-21T16:31:15.000Z
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      id:
                        example: 03c17f53-7e2e-427d-b55a-006b244f29ff
                        type: string
                      name:
                        example: "0.1"
                        type: string
                      schema:
                        items:
                          example: 3484cd1e-e00d-4c39-aea4-539663afe898
                          type: string
                        type: array
                      updatedAt:
                        example: 2019-07-21T16:31:15.000Z
                        type: string
                      updatedBy:
                        example: "5665"
                        type: string
                    type: object
                type: object
          description: Get an API version
      summary: Get an API Version
      tags:
        - API
        - API Version
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
    put:
      description: |-
        This call updates an existing API Version.  

        Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.

        Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateAnApiVersion
      requestBody:
        content:
          application/json:
            example:
              version:
                name: "2.0"
            schema:
              properties:
                version:
                  properties:
                    name:
                      example: "2.0"
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Update an API version:
                  value:
                    version:
                      api: 2b95d07c-8379-4bd1-924f-e7e1af185284
                      createdAt: 2019-07-26T11:24:15.000Z
                      createdBy: "12"
                      id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                      name: "2.0"
                      updatedAt: 2019-08-09T09:27:36.000Z
                      updatedBy: "5665"
              schema:
                properties:
                  version:
                    properties:
                      api:
                        example: 2b95d07c-8379-4bd1-924f-e7e1af185284
                        type: string
                      createdAt:
                        example: 2019-07-26T11:24:15.000Z
                        type: string
                      createdBy:
                        example: "12"
                        type: string
                      id:
                        example: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                        type: string
                      name:
                        example: "2.0"
                        type: string
                      updatedAt:
                        example: 2019-08-09T09:27:36.000Z
                        type: string
                      updatedBy:
                        example: "5665"
                        type: string
                    type: object
                type: object
          description: Update an API version
      summary: Update an API Version
      tags:
        - API
        - API Version
  "/apis/{apiId}/versions/{apiVersionId}/contracttest":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getContractTestRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get contract test relations:
                  value:
                    contracttest:
                      - collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                        id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  contracttest:
                    items:
                      properties:
                        collectionId:
                          example: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                          type: string
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get contract test relations
      summary: Get contract test relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/documentation":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getDocumentationRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get documentation relations:
                  value:
                    documentation:
                      - collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                        id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  documentation:
                    items:
                      properties:
                        collectionId:
                          example: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                          type: string
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get documentation relations
      summary: Get  documentation relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/environment":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getEnvironmentRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get environment relations:
                  value:
                    environment:
                      - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  environment:
                    items:
                      properties:
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get environment relations
      summary: Get environment relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/integrationtest":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getIntegrationTestRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get integration test relations:
                  value:
                    integrationtest:
                      - collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                        id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  integrationtest:
                    items:
                      properties:
                        collectionId:
                          example: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                          type: string
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get integration test relations
      summary: Get integration test relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/monitor":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getMonitorRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get monitor relations:
                  value:
                    monitor:
                      - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        monitorId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        monitorId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  monitor:
                    items:
                      properties:
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        monitorId:
                          example: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get monitor relations
      summary: Get monitor relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/relations":
    get:
      description: |-
        This call fetches all the relations which are linked to the specified API version along with their details.

        The response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getLinkedRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get linked relations for an API version:
                  value:
                    relations:
                      contracttest:
                        2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
                          id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          name: C test
                          updatedAt: 2019-08-29T10:18:11.000Z
                      integrationtest:
                        521b0486-ab91-4d3a-9189-43c9380a0533:
                          id: 521b0486-ab91-4d3a-9189-43c9380a0533
                          name: C1
                          updatedAt: 2019-08-29T11:40:39.000Z
                        a236b715-e682-460b-97b6-c1db24f7612e:
                          id: a236b715-e682-460b-97b6-c1db24f7612e
                          name: C test
                          updatedAt: 2019-08-29T10:18:11.000Z
                      mock:
                        4ccd755f-2c80-481b-a262-49b55e12f5e1:
                          id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
                          name: Mock
                          updatedAt: 2019-08-20T10:18:13.000Z
                          url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
              schema:
                properties:
                  relations:
                    properties:
                      contracttest:
                        properties:
                          2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
                            properties:
                              id:
                                example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                type: string
                              name:
                                example: C test
                                type: string
                              updatedAt:
                                example: 2019-08-29T10:18:11.000Z
                                type: string
                            type: object
                        type: object
                      integrationtest:
                        properties:
                          521b0486-ab91-4d3a-9189-43c9380a0533:
                            properties:
                              id:
                                example: 521b0486-ab91-4d3a-9189-43c9380a0533
                                type: string
                              name:
                                example: C1
                                type: string
                              updatedAt:
                                example: 2019-08-29T11:40:39.000Z
                                type: string
                            type: object
                          a236b715-e682-460b-97b6-c1db24f7612e:
                            properties:
                              id:
                                example: a236b715-e682-460b-97b6-c1db24f7612e
                                type: string
                              name:
                                example: C test
                                type: string
                              updatedAt:
                                example: 2019-08-29T10:18:11.000Z
                                type: string
                            type: object
                        type: object
                      mock:
                        properties:
                          4ccd755f-2c80-481b-a262-49b55e12f5e1:
                            properties:
                              id:
                                example: 4ccd755f-2c80-481b-a262-49b55e12f5e1
                                type: string
                              name:
                                example: Mock
                                type: string
                              updatedAt:
                                example: 2019-08-20T10:18:13.000Z
                                type: string
                              url:
                                example: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
                                type: string
                            type: object
                        type: object
                    type: object
                type: object
          description: Get linked relations for an API version
      summary: Get linked relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
    post:
      description: |-
        This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. 

        <table>
          <tr>
            <th>Relation</th>
            <th>Entity ID type</th>
          <tr>
          <tr>
            <td>contracttest</td>
            <td>Collection UIDs</td>
          </tr>
          <tr>
            <td>integrationtest</td>
            <td>Collection UIDs</td>
          </tr>
          <tr>
            <td>documentation</td>
            <td>Collection UIDs</td>
          </tr>
          <tr>
            <td>testsuite</td>
            <td>Collection UIDs</td>
          </tr>
          <tr>
            <td>environment</td>
            <td>Environment UIDs</td>
          </tr>
          <tr>
            <td>mock</td>
            <td>Mock IDs</td>
          </tr>
          <tr>
            <td>monitor</td>
            <td>Monitor IDs</td>
          </tr>
        </table>

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createRelations
      requestBody:
        content:
          application/json:
            example:
              contracttest:
                - collection-uid-1
              documentation:
                - collection-uid-3
              mock:
                - mock-uid-1
              testsuite:
                - collection-uid-1
                - collection-uid-2
            schema:
              properties:
                contracttest:
                  items:
                    example: collection-uid-1
                    type: string
                  type: array
                documentation:
                  items:
                    example: collection-uid-3
                    type: string
                  type: array
                mock:
                  items:
                    example: mock-uid-1
                    type: string
                  type: array
                testsuite:
                  items:
                    example: collection-uid-1
                    type: string
                  type: array
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create multiple relations from existing collections:
                  value:
                    contracttest:
                      - 5bcece87-ca4b-4e75-a967-2a6845626164
                    documentation:
                      - 2084eba6-a17b-4751-8f03-ea60f30ba19c
                    testsuite:
                      - e525fa71-035e-4620-acda-ce878524f1e7
                      - 17a974b2-ce79-4b95-9d3f-217d6ff7e979
              schema:
                properties:
                  contracttest:
                    items:
                      example: 5bcece87-ca4b-4e75-a967-2a6845626164
                      type: string
                    type: array
                  documentation:
                    items:
                      example: 2084eba6-a17b-4751-8f03-ea60f30ba19c
                      type: string
                    type: array
                  testsuite:
                    items:
                      example: e525fa71-035e-4620-acda-ce878524f1e7
                      type: string
                    type: array
                type: object
          description: Create multiple relations from existing collections
      summary: Create relations
      tags:
        - API
        - Relations
  "/apis/{apiId}/versions/{apiVersionId}/schemas":
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
    post:
      description: |-
        This call creates a new schema.

        Request body should contain a `schema` object which should atleast have these properties with `string` values:

        - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
        - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
        - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.

        Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createSchema
      requestBody:
        content:
          application/json:
            example:
              schema:
                language: yaml
                schema: |-
                  {
                    "openapi": "3.0.0",
                    "info": null,
                    "version": "v1.0",
                    "title": "APi",
                    "servers": [
                      {
                        "url": "http://localhost:3000"
                      }
                    ],
                    "paths": {
                      "/user": {
                        "get": {
                          "summary": "Returns details about a particular user",
                          "operationId": "listUser",
                          "tags": [
                            "user"
                          ],
                          "parameters": [
                            {
                              "name": "id",
                              "in": "query",
                              "description": "ID of the user",
                              "required": true,
                              "schema": {
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          ],
                          "responses": {
                            "200": {
                              "description": "Details about a user by ID",
                              "headers": {
                                "x-next": {
                                  "description": "A link to the next page of responses",
                                  "schema": {
                                    "type": "string"
                                  }
                                }
                              },
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "\\'#/components/schemas/User\\'"
                                  }
                                }
                              }
                            },
                            "default": {
                              "description": "Unexpected error",
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "\\'#/components/schemas/Error\\'"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "components": {
                      "schemas": {
                        "User": {
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ],
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tag": {
                              "type": "string"
                            }
                          }
                        },
                        "Error": {
                          "type": "object",
                          "required": [
                            "code",
                            "message"
                          ],
                          "properties": {
                            "code": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                type: openapi3
            schema:
              properties:
                schema:
                  properties:
                    language:
                      example: yaml
                      type: string
                    schema:
                      example: |-
                        {
                          "openapi": "3.0.0",
                          "info": null,
                          "version": "v1.0",
                          "title": "APi",
                          "servers": [
                            {
                              "url": "http://localhost:3000"
                            }
                          ],
                          "paths": {
                            "/user": {
                              "get": {
                                "summary": "Returns details about a particular user",
                                "operationId": "listUser",
                                "tags": [
                                  "user"
                                ],
                                "parameters": [
                                  {
                                    "name": "id",
                                    "in": "query",
                                    "description": "ID of the user",
                                    "required": true,
                                    "schema": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                ],
                                "responses": {
                                  "200": {
                                    "description": "Details about a user by ID",
                                    "headers": {
                                      "x-next": {
                                        "description": "A link to the next page of responses",
                                        "schema": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "content": {
                                      "application/json": {
                                        "schema": {
                                          "$ref": "\\'#/components/schemas/User\\'"
                                        }
                                      }
                                    }
                                  },
                                  "default": {
                                    "description": "Unexpected error",
                                    "content": {
                                      "application/json": {
                                        "schema": {
                                          "$ref": "\\'#/components/schemas/Error\\'"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "components": {
                            "schemas": {
                              "User": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "name"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "tag": {
                                    "type": "string"
                                  }
                                }
                              },
                              "Error": {
                                "type": "object",
                                "required": [
                                  "code",
                                  "message"
                                ],
                                "properties": {
                                  "code": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      type: string
                    type:
                      example: openapi3
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create schema:
                  value:
                    schema:
                      apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                      language: yaml
                      type: openapi3
                      updateBy: "5665"
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  schema:
                    properties:
                      apiVersion:
                        example: ad810c39-df60-434e-a76f-a2192cd8d81f
                        type: string
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      id:
                        example: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                        type: string
                      language:
                        example: yaml
                        type: string
                      type:
                        example: openapi3
                        type: string
                      updateBy:
                        example: "5665"
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Create schema
      summary: Create Schema
      tags:
        - API
        - Schema
  "/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}":
    get:
      description: |-
        This call fetches a single schema having the specified id.

        Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getSchema
      responses:
        "200":
          content:
            application/json:
              examples:
                Get schema:
                  value:
                    schema:
                      apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                      language: yaml
                      type: openapi3
                      updateBy: "5665"
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  schema:
                    properties:
                      apiVersion:
                        example: ad810c39-df60-434e-a76f-a2192cd8d81f
                        type: string
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      id:
                        example: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                        type: string
                      language:
                        example: yaml
                        type: string
                      type:
                        example: openapi3
                        type: string
                      updateBy:
                        example: "5665"
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Get schema
      summary: Get Schema
      tags:
        - API
        - Schema
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
      - in: path
        name: schemaId
        required: true
        schema:
          type: string
    put:
      description: |-
        This call updates an existing schema.

        Request body should contain a `schema` object which should atleast have these properties with `string` values:

        - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
        - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
        - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.

        Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateSchema
      requestBody:
        content:
          application/json:
            example:
              schema:
                language: json
                schema: |-
                  {
                    "openapi": "3.0.0",
                    "info": null,
                    "version": "v1.0",
                    "title": "APi",
                    "servers": [
                      {
                        "url": "http://localhost:3000"
                      }
                    ],
                    "paths": {
                      "/user": {
                        "get": {
                          "summary": "Returns details about a particular user",
                          "operationId": "listUser",
                          "tags": [
                            "user"
                          ],
                          "parameters": [
                            {
                              "name": "id",
                              "in": "query",
                              "description": "ID of the user",
                              "required": true,
                              "schema": {
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          ],
                          "responses": {
                            "200": {
                              "description": "Details about a user by ID",
                              "headers": {
                                "x-next": {
                                  "description": "A link to the next page of responses",
                                  "schema": {
                                    "type": "string"
                                  }
                                }
                              },
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "\\'#/components/schemas/User\\'"
                                  }
                                }
                              }
                            },
                            "default": {
                              "description": "Unexpected error",
                              "content": {
                                "application/json": {
                                  "schema": {
                                    "$ref": "\\'#/components/schemas/Error\\'"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "components": {
                      "schemas": {
                        "User": {
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ],
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tag": {
                              "type": "string"
                            }
                          }
                        },
                        "Error": {
                          "type": "object",
                          "required": [
                            "code",
                            "message"
                          ],
                          "properties": {
                            "code": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                type: openapi3
            schema:
              properties:
                schema:
                  properties:
                    language:
                      example: json
                      type: string
                    schema:
                      example: |-
                        {
                          "openapi": "3.0.0",
                          "info": null,
                          "version": "v1.0",
                          "title": "APi",
                          "servers": [
                            {
                              "url": "http://localhost:3000"
                            }
                          ],
                          "paths": {
                            "/user": {
                              "get": {
                                "summary": "Returns details about a particular user",
                                "operationId": "listUser",
                                "tags": [
                                  "user"
                                ],
                                "parameters": [
                                  {
                                    "name": "id",
                                    "in": "query",
                                    "description": "ID of the user",
                                    "required": true,
                                    "schema": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                ],
                                "responses": {
                                  "200": {
                                    "description": "Details about a user by ID",
                                    "headers": {
                                      "x-next": {
                                        "description": "A link to the next page of responses",
                                        "schema": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "content": {
                                      "application/json": {
                                        "schema": {
                                          "$ref": "\\'#/components/schemas/User\\'"
                                        }
                                      }
                                    }
                                  },
                                  "default": {
                                    "description": "Unexpected error",
                                    "content": {
                                      "application/json": {
                                        "schema": {
                                          "$ref": "\\'#/components/schemas/Error\\'"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "components": {
                            "schemas": {
                              "User": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "name"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "tag": {
                                    "type": "string"
                                  }
                                }
                              },
                              "Error": {
                                "type": "object",
                                "required": [
                                  "code",
                                  "message"
                                ],
                                "properties": {
                                  "code": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      type: string
                    type:
                      example: openapi3
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Update schema:
                  value:
                    schema:
                      apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                      createdAt: 2019-02-12 19:34:49
                      createdBy: "5665"
                      id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                      language: yaml
                      type: openapi3
                      updateBy: "5665"
                      updatedAt: 2019-02-12 19:34:49
              schema:
                properties:
                  schema:
                    properties:
                      apiVersion:
                        example: ad810c39-df60-434e-a76f-a2192cd8d81f
                        type: string
                      createdAt:
                        example: 2019-02-12 19:34:49
                        type: string
                      createdBy:
                        example: "5665"
                        type: string
                      id:
                        example: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                        type: string
                      language:
                        example: yaml
                        type: string
                      type:
                        example: openapi3
                        type: string
                      updateBy:
                        example: "5665"
                        type: string
                      updatedAt:
                        example: 2019-02-12 19:34:49
                        type: string
                    type: object
                type: object
          description: Update schema
      summary: Update Schema
      tags:
        - API
        - Schema
  "/apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections":
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
      - in: path
        name: schemaId
        required: true
        schema:
          type: string
    post:
      description: |-
        This call creates a collection and links it to an API as one or multiple relations. 

        Request body requires two keys:
        - `name` - Name of the collection to be created.
        - `relations` - A list of relation(s) to be created.

        The allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createCollectionFromSchema
      parameters:
        - in: query
          name: workspace
          schema:
            example: "{{workspaceId}}"
            type: string
      requestBody:
        content:
          application/json:
            example:
              name: My generated collection
              relations:
                - type: contracttest
            schema:
              properties:
                name:
                  example: My generated collection
                  type: string
                relations:
                  items:
                    properties:
                      type:
                        example: contracttest
                        type: string
                    type: object
                  type: array
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create collection from schema:
                  value:
                    collection:
                      id: e6b0d46a-8722-4f42-ab86-f5f473187ddf
                      uid: 112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf
                    relations:
                      - id: 4b40f06a-5a6a-448f-bfcd-a6dbcb68da22
                        type: contracttest
              schema:
                properties:
                  collection:
                    properties:
                      id:
                        example: e6b0d46a-8722-4f42-ab86-f5f473187ddf
                        type: string
                      uid:
                        example: 112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf
                        type: string
                    type: object
                  relations:
                    items:
                      properties:
                        id:
                          example: 4b40f06a-5a6a-448f-bfcd-a6dbcb68da22
                          type: string
                        type:
                          example: contracttest
                          type: string
                      type: object
                    type: array
                type: object
          description: Create collection from schema
      summary: Create collection from schema
      tags:
        - API
        - Schema
  "/apis/{apiId}/versions/{apiVersionId}/testsuite":
    get:
      description: |-
        This call fetches all the relations by type which are linked to the specified API version along with their details.

        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: getTestSuiteRelations
      responses:
        "200":
          content:
            application/json:
              examples:
                Get test suite relations:
                  value:
                    testsuite:
                      - collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                        name: C test
                        updatedAt: 2019-08-29T10:18:11.000Z
                      - collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                        id: 521b0486-ab91-4d3a-9189-43c9380a0533
                        name: C1
                        updatedAt: 2019-08-29T11:40:39.000Z
              schema:
                properties:
                  testsuite:
                    items:
                      properties:
                        collectionId:
                          example: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                          type: string
                        id:
                          example: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                          type: string
                        name:
                          example: C test
                          type: string
                        updatedAt:
                          example: 2019-08-29T10:18:11.000Z
                          type: string
                      type: object
                    type: array
                type: object
          description: Get test suite relations
      summary: Get test suite relations
      tags:
        - API
        - Relations
    parameters:
      - in: path
        name: apiId
        required: true
        schema:
          type: string
      - in: path
        name: apiVersionId
        required: true
        schema:
          type: string
  "/apis/{apiId}/versions/{apiVersionId}/{entityType}/{entityId}/syncWithSchema":
    parameters:
      - description: Id of the API
        in: path
        name: apiId
        required: true
        schema:
          example: "{{apiId}}"
          type: string
      - description: Id of the API version
        in: path
        name: apiVersionId
        required: true
        schema:
          example: "{{apiVersionId}}"
          type: string
      - description: Relation type (e.g documentation, contracttest, integrationtest, testsuite, mock, monitor)
        in: path
        name: entityType
        required: true
        schema:
          example: "{{entityType}}"
          type: string
      - description: Relation id
        in: path
        name: entityId
        required: true
        schema:
          example: "{{entityId}}"
          type: string
    put:
      description: |-
        This call allows you to keep the relation in sync with the API schema.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: syncRelationsWithSchema
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful sync:
                  value:
                    success: true
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Successful sync
        "400":
          content:
            application/json:
              examples:
                Failed to sync:
                  value:
                    error:
                      message: Unable to validate. Only the OpenAPI 3.0 schema format is supported.
                      name: validationFailed
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: Unable to validate. Only the OpenAPI 3.0 schema format is supported.
                        type: string
                      name:
                        example: validationFailed
                        type: string
                    type: object
                type: object
          description: Failed to sync
      summary: Sync relations with schema
      tags:
        - API
        - Relations
  /collections:
    get:
      description: |-
        The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.

        The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: allCollections
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    collections:
                      - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                        name: Cloud API
                        owner: "631643"
                        uid: 631643-dac5eac9-148d-a32e-b76b-3edee9da28f7
                      - id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
                        name: Sample Collection
                        owner: "631643"
                        uid: 631643-f2e66c2e-5297-e4a5-739e-20cbb90900e3
                      - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
                        name: Postman Echo
                        owner: "631643"
                        uid: 631643-f695cab7-6878-eb55-7943-ad88e1ccfd65
              schema:
                properties:
                  collections:
                    items:
                      properties:
                        id:
                          example: dac5eac9-148d-a32e-b76b-3edee9da28f7
                          type: string
                        name:
                          example: Cloud API
                          type: string
                        owner:
                          example: "631643"
                          type: string
                        uid:
                          example: 631643-dac5eac9-148d-a32e-b76b-3edee9da28f7
                          type: string
                      type: object
                    type: array
                type: object
          description: Valid Response
      summary: All Collections
      tags:
        - Collections
    post:
      description: |-
        This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).

        On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.

        You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createCollection
      requestBody:
        content:
          application/json:
            example:
              collection:
                info:
                  description: This is just a sample collection.
                  name: Sample Collection {{$randomInt}}
                  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                item:
                  - item:
                      - name: Sample POST Request
                        request:
                          body:
                            mode: raw
                            raw: '{"data": "123"}'
                          description: This is a sample POST Request
                          header:
                            - key: Content-Type
                              value: application/json
                          method: POST
                          url: https://postman-echo.com/post
                    name: This is a folder
                  - name: Sample GET Request
                    request:
                      description: This is a sample GET Request
                      method: GET
                      url: https://postman-echo/get
            schema:
              properties:
                collection:
                  properties:
                    info:
                      properties:
                        description:
                          example: This is just a sample collection.
                          type: string
                        name:
                          example: Sample Collection {{$randomInt}}
                          type: string
                        schema:
                          example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                          type: string
                      type: object
                    item:
                      items:
                        properties:
                          item:
                            items:
                              properties:
                                name:
                                  example: Sample POST Request
                                  type: string
                                request:
                                  properties:
                                    body:
                                      properties:
                                        mode:
                                          example: raw
                                          type: string
                                        raw:
                                          example: '{"data": "123"}'
                                          type: string
                                      type: object
                                    description:
                                      example: This is a sample POST Request
                                      type: string
                                    header:
                                      items:
                                        properties:
                                          key:
                                            example: Content-Type
                                            type: string
                                          value:
                                            example: application/json
                                            type: string
                                        type: object
                                      type: array
                                    method:
                                      example: POST
                                      type: string
                                    url:
                                      example: https://postman-echo.com/post
                                      type: string
                                  type: object
                              type: object
                            type: array
                          name:
                            example: This is a folder
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create Collection in a Workspace:
                  value:
                    collection:
                      id: 2412a72c-1d8e-491b-aced-93809c0e94e9
                      name: Sample Collection
                      uid: 5852-2412a72c-1d8e-491b-aced-93809c0e94e9
              schema:
                properties:
                  collection:
                    properties:
                      id:
                        example: 2412a72c-1d8e-491b-aced-93809c0e94e9
                        type: string
                      name:
                        example: Sample Collection
                        type: string
                      uid:
                        example: 5852-2412a72c-1d8e-491b-aced-93809c0e94e9
                        type: string
                    type: object
                type: object
          description: Create Collection in a Workspace
        "400":
          content:
            application/json:
              examples:
                Malformed Request:
                  value:
                    error:
                      message: "Missing required property: name at info"
                      name: malformedRequestError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: "Missing required property: name at info"
                        type: string
                      name:
                        example: malformedRequestError
                        type: string
                    type: object
                type: object
          description: Malformed Request
      summary: Create Collection
      tags:
        - Collections
  "/collections/fork/{collection_uid}":
    parameters:
      - in: path
        name: collection_uid
        required: true
        schema:
          type: string
    post:
      description: |-
        This endpoint allows you to create a fork from an existing collection.

        On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.

        You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createAFork
      parameters:
        - description: Workspace ID is required to create a fork
          in: query
          name: workspace
          schema:
            example: "{{workspace_id}}"
            type: string
      requestBody:
        content:
          application/json:
            example:
              name: Fork name
            schema:
              properties:
                name:
                  example: Fork name
                  type: string
              type: object
      responses:
        "200":
          description: ""
      summary: Create a Fork
      tags:
        - Collections
  /collections/merge:
    post:
      description: |-
        This endpoint allows you to merge a forked collection back to its destination collection.

        On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.

        You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.

        Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies

        | Merge Strategy | Behaviour |
        | --- | --- |
        | deleteSource | Forked collection is deleted after merging |
        | updateSourceWithDestination | Forked collection is up to date with changes in destination collection |

        If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: mergeAFork
      requestBody:
        content:
          application/json:
            example:
              destination: "{{destination_collection_uid}}"
              source: "{{source_collection_uid}}"
              strategy: deleteSource
            schema:
              properties:
                destination:
                  example: "{{destination_collection_uid}}"
                  type: string
                source:
                  example: "{{source_collection_uid}}"
                  type: string
                strategy:
                  example: deleteSource
                  type: string
              type: object
      responses:
        "200":
          description: ""
      summary: Merge a Fork
      tags:
        - Collections
  "/collections/{collection_uid}":
    delete:
      description: |-
        This endpoint allows you to delete an existing collection.

        On successful deletion of the collection, the response returns the `id` and `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteCollection
      responses:
        "200":
          content:
            application/json:
              examples:
                Collection Deleted:
                  value:
                    collection:
                      id: a14c6da7-afba-4a84-bf22-4febbaaced6c
                      uid: 5852-a14c6da7-afba-4a84-bf22-4febbaaced6c
              schema:
                properties:
                  collection:
                    properties:
                      id:
                        example: a14c6da7-afba-4a84-bf22-4febbaaced6c
                        type: string
                      uid:
                        example: 5852-a14c6da7-afba-4a84-bf22-4febbaaced6c
                        type: string
                    type: object
                type: object
          description: Collection Deleted
        "404":
          content:
            application/json:
              examples:
                Collection Not Found:
                  value:
                    error:
                      details:
                        id: a14c6da7-afba-4a84-bf22-4febbaaced6c
                        item: collection
                      message: The specified item does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        properties:
                          id:
                            example: a14c6da7-afba-4a84-bf22-4febbaaced6c
                            type: string
                          item:
                            example: collection
                            type: string
                        type: object
                      message:
                        example: The specified item does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Collection Not Found
      summary: Delete Collection
      tags:
        - Collections
    get:
      description: |-
        Access the contents of a collection that is accessible to you using its unique id (`uid`).

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleCollection
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    collection:
                      info:
                        _postman_id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
                        description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                        name: Sample Collection
                        schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                      item:
                        - event:
                            - listen: test
                              script:
                                exec: |+
                                  var responseJSON;
                                  try {
                                      tests["Body contains headers"] = responseBody.has("headers");
                                      responseJSON = JSON.parse(responseBody);
                                      tests["Header contains host"] = "host" in responseJSON.headers;
                                      tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                                  }
                                  catch (e) { }



                                type: text/javascript
                          id: 82ee981b-e19f-962a-401e-ea34ebfb4848
                          name: Request Headers
                          request:
                            body:
                              formdata: []
                              mode: formdata
                            description: ""
                            header:
                              - description: ""
                                key: my-sample-header
                                value: Lorem ipsum dolor sit amet
                            method: GET
                            url: https://echo.getpostman.com/headers
                          response: []
                      variables: []
              schema:
                properties:
                  collection:
                    properties:
                      info:
                        properties:
                          _postman_id:
                            example: f2e66c2e-5297-e4a5-739e-20cbb90900e3
                            type: string
                          description:
                            example: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                            type: string
                          name:
                            example: Sample Collection
                            type: string
                          schema:
                            example: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                            type: string
                        type: object
                      item:
                        items:
                          properties:
                            event:
                              items:
                                properties:
                                  listen:
                                    example: test
                                    type: string
                                  script:
                                    properties:
                                      exec:
                                        example: |+
                                          var responseJSON;
                                          try {
                                              tests["Body contains headers"] = responseBody.has("headers");
                                              responseJSON = JSON.parse(responseBody);
                                              tests["Header contains host"] = "host" in responseJSON.headers;
                                              tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                                          }
                                          catch (e) { }



                                        type: string
                                      type:
                                        example: text/javascript
                                        type: string
                                    type: object
                                type: object
                              type: array
                            id:
                              example: 82ee981b-e19f-962a-401e-ea34ebfb4848
                              type: string
                            name:
                              example: Request Headers
                              type: string
                            request:
                              properties:
                                body:
                                  properties:
                                    formdata:
                                      items: {}
                                      type: array
                                    mode:
                                      example: formdata
                                      type: string
                                  type: object
                                description:
                                  example: ""
                                  type: string
                                header:
                                  items:
                                    properties:
                                      description:
                                        example: ""
                                        type: string
                                      key:
                                        example: my-sample-header
                                        type: string
                                      value:
                                        example: Lorem ipsum dolor sit amet
                                        type: string
                                    type: object
                                  type: array
                                method:
                                  example: GET
                                  type: string
                                url:
                                  example: https://echo.getpostman.com/headers
                                  type: string
                              type: object
                            response:
                              items: {}
                              type: array
                          type: object
                        type: array
                      variables:
                        items: {}
                        type: array
                    type: object
                type: object
          description: Valid Response
      summary: "Single Collection "
      tags:
        - Collections
    parameters:
      - in: path
        name: collection_uid
        required: true
        schema:
          type: string
    put:
      description: |-
        This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).

        On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

        Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body.
      operationId: updateCollection
      requestBody:
        content:
          application/json:
            example:
              collection:
                info:
                  _postman_id: 174bad7c-07e3-45f3-914f-36cf84e5586f
                  description: This is just a sample collection.
                  name: Sample Collection {{$randomInt}}
                  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                item:
                  - item:
                      - name: Sample POST Request
                        request:
                          body:
                            mode: raw
                            raw: '{"data": "123"}'
                          description: This is a sample POST Request
                          header:
                            - key: Content-Type
                              value: application/json
                          method: POST
                          url: https://postman-echo.com/post
                    name: This is a folder
                  - name: Sample GET Request
                    request:
                      description: This is a sample GET Request
                      method: GET
                      url: https://postman-echo/get
            schema:
              properties:
                collection:
                  properties:
                    info:
                      properties:
                        _postman_id:
                          example: 174bad7c-07e3-45f3-914f-36cf84e5586f
                          type: string
                        description:
                          example: This is just a sample collection.
                          type: string
                        name:
                          example: Sample Collection {{$randomInt}}
                          type: string
                        schema:
                          example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                          type: string
                      type: object
                    item:
                      items:
                        properties:
                          item:
                            items:
                              properties:
                                name:
                                  example: Sample POST Request
                                  type: string
                                request:
                                  properties:
                                    body:
                                      properties:
                                        mode:
                                          example: raw
                                          type: string
                                        raw:
                                          example: '{"data": "123"}'
                                          type: string
                                      type: object
                                    description:
                                      example: This is a sample POST Request
                                      type: string
                                    header:
                                      items:
                                        properties:
                                          key:
                                            example: Content-Type
                                            type: string
                                          value:
                                            example: application/json
                                            type: string
                                        type: object
                                      type: array
                                    method:
                                      example: POST
                                      type: string
                                    url:
                                      example: https://postman-echo.com/post
                                      type: string
                                  type: object
                              type: object
                            type: array
                          name:
                            example: This is a folder
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Collection Updated:
                  value:
                    collection:
                      id: 1d3daef4-2037-4584-ab86-bafd8c8f8a55
                      name: Sample Collection
                      uid: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
              schema:
                properties:
                  collection:
                    properties:
                      id:
                        example: 1d3daef4-2037-4584-ab86-bafd8c8f8a55
                        type: string
                      name:
                        example: Sample Collection
                        type: string
                      uid:
                        example: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
                        type: string
                    type: object
                type: object
          description: Collection Updated
        "400":
          content:
            application/json:
              examples:
                Collection ID Mismatch:
                  value:
                    error:
                      message: The collection ID in the path does not match the collection ID in the request body.
                      name: collectionMismatchError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: The collection ID in the path does not match the collection ID in the request body.
                        type: string
                      name:
                        example: collectionMismatchError
                        type: string
                    type: object
                type: object
          description: Collection ID Mismatch
        "403":
          content:
            application/json:
              examples:
                Not Enough Permissions:
                  value:
                    error:
                      message: You do not have enough permissions to perform this action.
                      name: forbiddenError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: You do not have enough permissions to perform this action.
                        type: string
                      name:
                        example: forbiddenError
                        type: string
                    type: object
                type: object
          description: Not Enough Permissions
        "404":
          content:
            application/json:
              examples:
                Collection Not Found:
                  value:
                    error:
                      details:
                        id: 1d3daef4-2037-4584-ab86-bafd8c8f8a54
                        item: collection
                      message: The specified item does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        properties:
                          id:
                            example: 1d3daef4-2037-4584-ab86-bafd8c8f8a54
                            type: string
                          item:
                            example: collection
                            type: string
                        type: object
                      message:
                        example: The specified item does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Collection Not Found
      summary: Update Collection
      tags:
        - Collections
  /environments:
    get:
      description: |-
        The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..

        The response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: allEnvironments
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    environments:
                      - id: 357668d2-84f1-2264-438b-113095359f80
                        name: Postman Cloud API
                        owner: "631643"
                        uid: 631643-357668d2-84f1-2264-438b-113095359f80
                      - id: 84a119b6-f4b1-9120-5f11-a73b17818d70
                        name: Postman Cloud API.template
                        owner: "631643"
                        uid: 631643-84a119b6-f4b1-9120-5f11-a73b17818d70
              schema:
                properties:
                  environments:
                    items:
                      properties:
                        id:
                          example: 357668d2-84f1-2264-438b-113095359f80
                          type: string
                        name:
                          example: Postman Cloud API
                          type: string
                        owner:
                          example: "631643"
                          type: string
                        uid:
                          example: 631643-357668d2-84f1-2264-438b-113095359f80
                          type: string
                      type: object
                    type: array
                type: object
          description: Valid Response
      summary: All Environments
      tags:
        - Environments
    post:
      description: |-
        A sample body is added to the request that conforms to the following JSON schema:

        ```json
        {
          "type": "object",
          "properties": {
            "environment": {
              "type": "object",
              "properties": {
                "name": {
                      "type": "string",
                      "maxLength": 254,
                      "minLength": 1
                    },
                "values": {
                  "type": "array",
                  "maxItems": 100,
                  "additionalItems": false,
                  "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "maxLength": 254
                          "minLength": 1
                        },
                        "value": { "type": "string" },
                        "enabled": { "type": "boolean" }
                      },
                      "required": ["key", "value"]
                    }
                }
              },
              "required": ["name"]
            }
          },
          "required": ["environment"]
        }
        ```

        On successful creation of the environment, the API returns the environment name and `id`.

        You can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createEnvironment
      requestBody:
        content:
          application/json:
            example:
              environment:
                name: Sample Environment Name (required)
                values:
                  - key: variable_name_1
                    value: The value of the variable
                  - key: variable_name_2
                    value: ""
            schema:
              properties:
                environment:
                  properties:
                    name:
                      example: Sample Environment Name (required)
                      type: string
                    values:
                      items:
                        properties:
                          key:
                            example: variable_name_1
                            type: string
                          value:
                            example: The value of the variable
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    environment:
                      id: f158266e-306b-4702-a2b9-e4ede7878b7a
                      name: Sample Environment Name (required)
                      uid: 5665-f158266e-306b-4702-a2b9-e4ede7878b7a
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        example: f158266e-306b-4702-a2b9-e4ede7878b7a
                        type: string
                      name:
                        example: Sample Environment Name (required)
                        type: string
                      uid:
                        example: 5665-f158266e-306b-4702-a2b9-e4ede7878b7a
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              examples:
                Failure Response:
                  value:
                    error:
                      message: "Missing required property: environment"
                      name: malformedRequestError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: "Missing required property: environment"
                        type: string
                      name:
                        example: malformedRequestError
                        type: string
                    type: object
                type: object
          description: Failure Response
      summary: Create Environment
      tags:
        - Environments
  "/environments/{environment_uid}":
    delete:
      description: |-
        This endpoint allows you to delete a single environment based on an environment's unique `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteEnvironment
      responses:
        "200":
          content:
            application/json:
              examples:
                Environment Deleted:
                  value:
                    environment:
                      id: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                      uid: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        example: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                        type: string
                      uid:
                        example: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                        type: string
                    type: object
                type: object
          description: Environment Deleted
        "404":
          content:
            application/json:
              examples:
                Environment Not Found:
                  value:
                    error:
                      message: The specified environment does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: The specified environment does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Environment Not Found
      summary: Delete Environment
      tags:
        - Environments
    get:
      description: |-
        Access the contents of an environment that is accessible to you using its unique id (`uid`).

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleEnvironment
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    environment:
                      id: 84a119b6-f4b1-9120-5f11-a73b17818d70
                      name: Postman Cloud API.template
                      values:
                        - enabled: true
                          hovered: false
                          key: postman_api_key
                          type: text
                          value: ""
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        example: 84a119b6-f4b1-9120-5f11-a73b17818d70
                        type: string
                      name:
                        example: Postman Cloud API.template
                        type: string
                      values:
                        items:
                          properties:
                            enabled:
                              example: true
                              type: boolean
                            hovered:
                              example: false
                              type: boolean
                            key:
                              example: postman_api_key
                              type: string
                            type:
                              example: text
                              type: string
                            value:
                              example: ""
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
          description: Valid Response
      summary: Single Environment
      tags:
        - Environments
    parameters:
      - in: path
        name: environment_uid
        required: true
        schema:
          type: string
    put:
      description: |-
        This endpoint replaces an existing environment.

        A sample body is added to the request that conforms to the following JSON schema:

        ```json
        {
        	"type": "object",
        	"properties": {
        		"environment": {
        			"type": "object",
        			"properties": {
        				"name": {
        					"type": "string",
        					"maxLength": 254,
        					"minLength": 1
        				},
        				"values": {
        					"type": "array",
        					"maxItems": 100,
        					"additionalItems": false,
        					"items": {
        						"type": "object",
        						"properties": {
        							"key": {
        								"type": "string",
        								"maxLength": 254,
        								"minLength": 1
        							},
        							"value": {
        								"type": "string",
        								"maxLength": 254,
        								"minLength": 1
        							},
        							"type": {
        								"type": "string"
        							},
        							"enabled": {
        								"type": "boolean"
        							}
        						},
        						"required": [
        							"key",
        							"value"
        						]
        					}
        				}
        			}
        		}
        	},
        	"required": [
        		"environment"
        	]
        }
        ```

        On successful updation of the environment, the API returns the environment name and `id`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateEnvironment
      requestBody:
        content:
          application/json:
            example:
              environment:
                name: New Name
                values:
                  - key: name
                    value: Bruce Wayne
                  - key: occupation
                    value: Vigilante
            schema:
              properties:
                environment:
                  properties:
                    name:
                      example: New Name
                      type: string
                    values:
                      items:
                        properties:
                          key:
                            example: name
                            type: string
                          value:
                            example: Bruce Wayne
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    environment:
                      id: 357668d2-84f1-2264-438b-113095359f80
                      name: New Name
                      uid: 631643-357668d2-84f1-2264-438b-113095359f80
              schema:
                properties:
                  environment:
                    properties:
                      id:
                        example: 357668d2-84f1-2264-438b-113095359f80
                        type: string
                      name:
                        example: New Name
                        type: string
                      uid:
                        example: 631643-357668d2-84f1-2264-438b-113095359f80
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              examples:
                Failure Response:
                  value:
                    error:
                      message: "Invalid type: null (expected object) at environment.values.0"
                      name: malformedRequestError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: "Invalid type: null (expected object) at environment.values.0"
                        type: string
                      name:
                        example: malformedRequestError
                        type: string
                    type: object
                type: object
          description: Failure Response
      summary: Update Environment
      tags:
        - Environments
  /import/exported:
    post:
      description: |-
        This endpoint allows you to import your exported Postman data.
        For more information about how you can export your data, refer <a href="https://go.postman.co/me/export">Export your Postman data.</a>

        On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.

        **Note**: Refer to examples for different scenarios.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
      operationId: importExportedData
      requestBody:
        content:
          application/octet-stream: {}
      responses:
        "200":
          content:
            application/json:
              examples:
                "Success: Import to a specific workspace with workspace ID passed as a query parameter":
                  value:
                    collections:
                      - id: b31be584-1b1e-4444-b581-761edf88fe77
                        name: Swagger Petstore
                        uid: 2282-b31be584-1b1e-4444-b581-761edf88fe77
              schema:
                properties:
                  collections:
                    items:
                      properties:
                        id:
                          example: b31be584-1b1e-4444-b581-761edf88fe77
                          type: string
                        name:
                          example: Swagger Petstore
                          type: string
                        uid:
                          example: 2282-b31be584-1b1e-4444-b581-761edf88fe77
                          type: string
                      type: object
                    type: array
                type: object
          description: "Success: Import to a specific workspace with workspace ID passed as a query parameter"
        "400":
          content:
            application/json:
              examples:
                "Error: Param Missing":
                  value:
                    error:
                      details:
                        param: type
                      message: The request body is missing a value for the type parameter. Check your request and try again.
                      name: paramMissingError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        properties:
                          param:
                            example: type
                            type: string
                        type: object
                      message:
                        example: The request body is missing a value for the type parameter. Check your request and try again.
                        type: string
                      name:
                        example: paramMissingError
                        type: string
                    type: object
                type: object
          description: "Error: Param Missing"
      summary: Import exported data
      tags:
        - Import
  /import/openapi:
    post:
      description: |-
        This endpoint allows you to import external API specifications into Postman.

        Currently, this endpoint only supports the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI</a> specification, for which the `importType` will be `openapi`.

        On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.

        Supported `type`s:

        - string
        - json
        - file

        The `input` parameter should be defined based on the `type`.

        > To import a file, request body must be form-data with `type` param set to `file`.

        **Note**: Refer to examples for different scenarios.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
      operationId: importExternalApiSpecification
      requestBody:
        content:
          application/json:
            example:
              input:
                info:
                  license:
                    name: MIT
                  title: Swagger Petstore
                  version: 1.0.0
                openapi: 3.0.0
                paths:
                  /pets:
                    get:
                      operationId: listPets
                      parameters:
                        - description: limit
                          in: query
                          name: limit
                          required: false
                          schema:
                            format: int32
                            type: integer
                      responses:
                        default:
                          content:
                            application/json:
                              schema:
                                properties:
                                  code:
                                    format: int32
                                    type: integer
                                  message:
                                    type: string
                                required:
                                  - code
                                  - message
                          description: unexpected error
                      summary: List all pets
                servers:
                  - url: http://petstore.swagger.io/v1
              type: json
            schema:
              properties:
                input:
                  properties:
                    info:
                      properties:
                        license:
                          properties:
                            name:
                              example: MIT
                              type: string
                          type: object
                        title:
                          example: Swagger Petstore
                          type: string
                        version:
                          example: 1.0.0
                          type: string
                      type: object
                    openapi:
                      example: 3.0.0
                      type: string
                    paths:
                      properties:
                        /pets:
                          properties:
                            get:
                              properties:
                                operationId:
                                  example: listPets
                                  type: string
                                parameters:
                                  items:
                                    properties:
                                      description:
                                        example: limit
                                        type: string
                                      in:
                                        example: query
                                        type: string
                                      name:
                                        example: limit
                                        type: string
                                      required:
                                        example: false
                                        type: boolean
                                      schema:
                                        properties:
                                          format:
                                            example: int32
                                            type: string
                                          type:
                                            example: integer
                                            type: string
                                        type: object
                                    type: object
                                  type: array
                                responses:
                                  properties:
                                    default:
                                      properties:
                                        content:
                                          properties:
                                            application/json:
                                              properties:
                                                schema:
                                                  properties:
                                                    properties:
                                                      properties:
                                                        code:
                                                          properties:
                                                            format:
                                                              example: int32
                                                              type: string
                                                            type:
                                                              example: integer
                                                              type: string
                                                          type: object
                                                        message:
                                                          properties:
                                                            type:
                                                              example: string
                                                              type: string
                                                          type: object
                                                      type: object
                                                    required:
                                                      items:
                                                        example: code
                                                        type: string
                                                      type: array
                                                  type: object
                                              type: object
                                          type: object
                                        description:
                                          example: unexpected error
                                          type: string
                                      type: object
                                  type: object
                                summary:
                                  example: List all pets
                                  type: string
                              type: object
                          type: object
                      type: object
                    servers:
                      items:
                        properties:
                          url:
                            example: http://petstore.swagger.io/v1
                            type: string
                        type: object
                      type: array
                  type: object
                type:
                  example: json
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                "Success: Import to a specific workspace with workspace ID passed as a query parameter":
                  value:
                    collections:
                      - id: b31be584-1b1e-4444-b581-761edf88fe77
                        name: Swagger Petstore
                        uid: 2282-b31be584-1b1e-4444-b581-761edf88fe77
              schema:
                properties:
                  collections:
                    items:
                      properties:
                        id:
                          example: b31be584-1b1e-4444-b581-761edf88fe77
                          type: string
                        name:
                          example: Swagger Petstore
                          type: string
                        uid:
                          example: 2282-b31be584-1b1e-4444-b581-761edf88fe77
                          type: string
                      type: object
                    type: array
                type: object
          description: "Success: Import to a specific workspace with workspace ID passed as a query parameter"
        "400":
          content:
            application/json:
              examples:
                "Error: Param Missing":
                  value:
                    error:
                      details:
                        param: type
                      message: The request body is missing a value for the type parameter. Check your request and try again.
                      name: paramMissingError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        properties:
                          param:
                            example: type
                            type: string
                        type: object
                      message:
                        example: The request body is missing a value for the type parameter. Check your request and try again.
                        type: string
                      name:
                        example: paramMissingError
                        type: string
                    type: object
                type: object
          description: "Error: Param Missing"
      summary: Import external API specification
      tags:
        - Import
  /me:
    get:
      description: |-
        the `/me` Postman API endpoint lets you access information about the authenticated user. You can retrieve the authenticated user's username, full name, e-mail address, and any other available information.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: apiKeyOwner
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    operations:
                      - limit: 1000000
                        name: mock_usage
                        overage: 0
                        usage: 2382
                      - limit: 10000000
                        name: monitor_request_runs
                        overage: 0
                        usage: 49492
                      - limit: 5000000
                        name: documenter_public_views
                        overage: 0
                        usage: 120232
                      - limit: 1000000
                        name: api_usage
                        overage: 0
                        usage: 1345
                      - limit: 25
                        name: custom_domains
                        overage: 0
                        usage: 1
                      - limit: 1
                        name: custom_authentication_methods
                        overage: 0
                        usage: 1
                      - limit: 10000
                        name: serverless_requests
                        overage: 0
                        usage: 0
                      - limit: 5000
                        name: integrations
                        overage: 0
                        usage: 145
                      - limit: 1000000
                        name: cloud_agent_requests
                        overage: 0
                        usage: 23823
                    user:
                      avatar: https://www.gravatar.com/avatar/e1f3994f2632af3d1c8c2dcc168a10e6
                      email: janedoe@example.com
                      fullName: Jane Doe
                      id: "631643"
                      isPublic: false
                      username: janedoe
              schema:
                properties:
                  operations:
                    items:
                      properties:
                        limit:
                          example: 1000000
                          type: number
                        name:
                          example: mock_usage
                          type: string
                        overage:
                          example: 0
                          type: number
                        usage:
                          example: 2382
                          type: number
                      type: object
                    type: array
                  user:
                    properties:
                      avatar:
                        example: https://www.gravatar.com/avatar/e1f3994f2632af3d1c8c2dcc168a10e6
                        type: string
                      email:
                        example: janedoe@example.com
                        type: string
                      fullName:
                        example: Jane Doe
                        type: string
                      id:
                        example: "631643"
                        type: string
                      isPublic:
                        example: false
                        type: boolean
                      username:
                        example: janedoe
                        type: string
                    type: object
                type: object
          description: Valid Response
      summary: API Key Owner
      tags:
        - User
  /mocks:
    get:
      description: |-
        This endpoint fetches all the mocks that you have created.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: allMocks
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    mocks:
                      - collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                        environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                        id: 0fca2246-c108-41f5-8454-cc032def329f
                        mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                        owner: "1679925"
                        uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                      - collection: 1679925-37294bb0-e27b-5e52-93ae-c07dd445216d
                        id: 2c624389-705a-4e66-9777-05314b431796
                        mockUrl: https://2c624389-705a-4e66-9777-05314b431796.mock.pstmn.io
                        owner: "1679925"
                        uid: 1679925-2c624389-705a-4e66-9777-05314b431796
              schema:
                properties:
                  mocks:
                    items:
                      properties:
                        collection:
                          example: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                          type: string
                        environment:
                          example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                          type: string
                        id:
                          example: 0fca2246-c108-41f5-8454-cc032def329f
                          type: string
                        mockUrl:
                          example: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                          type: string
                        owner:
                          example: "1679925"
                          type: string
                        uid:
                          example: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                          type: string
                      type: object
                    type: array
                type: object
          description: Successful Response
      summary: All Mocks
      tags:
        - Mocks
    post:
      description: |-
        This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.

        You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createMock
      requestBody:
        content:
          application/json:
            example:
              mock:
                collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
            schema:
              properties:
                mock:
                  properties:
                    collection:
                      example: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                      type: string
                    environment:
                      example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    mock:
                      collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                      environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                      id: 0fca2246-c108-41f5-8454-cc032def329f
                      mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                      owner: "1679925"
                      uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
              schema:
                properties:
                  mock:
                    properties:
                      collection:
                        example: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                        type: string
                      environment:
                        example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                        type: string
                      id:
                        example: 0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                      mockUrl:
                        example: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                        type: string
                      owner:
                        example: "1679925"
                        type: string
                      uid:
                        example: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                    type: object
                type: object
          description: Successful Response
      summary: Create Mock
      tags:
        - Mocks
  "/mocks/{mock_uid}":
    delete:
      description: |-
        This endpoint allows you to delete an existing mock using its `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteMock
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    mock:
                      id: 0fca2246-c108-41f5-8454-cc032def329f
                      uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
              schema:
                properties:
                  mock:
                    properties:
                      id:
                        example: 0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                      uid:
                        example: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                    type: object
                type: object
          description: Successful Response
      summary: Delete Mock
      tags:
        - Mocks
    get:
      description: |-
        This endpoint fetches you the basic information about a single mock using its `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleMock
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    mock:
                      collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                      environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                      id: 0fca2246-c108-41f5-8454-cc032def329f
                      mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                      owner: "1679925"
                      uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
              schema:
                properties:
                  mock:
                    properties:
                      collection:
                        example: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                        type: string
                      environment:
                        example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                        type: string
                      id:
                        example: 0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                      mockUrl:
                        example: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                        type: string
                      owner:
                        example: "1679925"
                        type: string
                      uid:
                        example: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                        type: string
                    type: object
                type: object
          description: Successful Response
      summary: Single Mock
      tags:
        - Mocks
    parameters:
      - in: path
        name: mock_uid
        required: true
        schema:
          type: string
    put:
      description: |-
        This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,
        * name
        * environment
        * description
        * private
        * versionTag

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateMock
      requestBody:
        content:
          application/json:
            example:
              mock:
                description: example describing update mock description
                environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                name: My Mock Server
                private: false
                versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
            schema:
              properties:
                mock:
                  properties:
                    description:
                      example: example describing update mock description
                      type: string
                    environment:
                      example: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                      type: string
                    name:
                      example: My Mock Server
                      type: string
                    private:
                      example: false
                      type: boolean
                    versionTag:
                      example: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                success Response:
                  value:
                    mock:
                      collection: 11582779-fd6797e2-de6b-4699-975c-85290e4c2499
                      config:
                        headers: []
                        matchBody: false
                        matchQueryParams: true
                        matchWildcards: true
                      environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                      id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
                      mockUrl: https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io
                      name: My Mock Server
                      owner: "11582779"
                      uid: 11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723
              schema:
                properties:
                  mock:
                    properties:
                      collection:
                        example: 11582779-fd6797e2-de6b-4699-975c-85290e4c2499
                        type: string
                      config:
                        properties:
                          headers:
                            items: {}
                            type: array
                          matchBody:
                            example: false
                            type: boolean
                          matchQueryParams:
                            example: true
                            type: boolean
                          matchWildcards:
                            example: true
                            type: boolean
                        type: object
                      environment:
                        example: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                        type: string
                      id:
                        example: 06040138-dd6b-4cce-9a02-7e1c1ab59723
                        type: string
                      mockUrl:
                        example: https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io
                        type: string
                      name:
                        example: My Mock Server
                        type: string
                      owner:
                        example: "11582779"
                        type: string
                      uid:
                        example: 11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723
                        type: string
                    type: object
                type: object
          description: success Response
      summary: Update Mock
      tags:
        - Mocks
  "/mocks/{mock_uid}/publish":
    parameters:
      - in: path
        name: mock_uid
        required: true
        schema:
          type: string
    post:
      description: |-
        This endpoint publishes the mock you have created using its `uid`

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
      operationId: publishMock
      responses:
        "200":
          content:
            application/json:
              examples:
                Success Response:
                  value:
                    mock:
                      id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
              schema:
                properties:
                  mock:
                    properties:
                      id:
                        example: 06040138-dd6b-4cce-9a02-7e1c1ab59723
                        type: string
                    type: object
                type: object
          description: Success Response
      summary: Publish Mock
      tags:
        - Mocks
  "/mocks/{mock_uid}/unpublish":
    delete:
      description: |-
        This endpoint unpublishes the mock you have created using its `uid`

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
      operationId: unpublishMock
      responses:
        "200":
          content:
            application/json:
              examples:
                Success Response:
                  value:
                    mock:
                      id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
              schema:
                properties:
                  mock:
                    properties:
                      id:
                        example: 06040138-dd6b-4cce-9a02-7e1c1ab59723
                        type: string
                    type: object
                type: object
          description: Success Response
      summary: Unpublish Mock
      tags:
        - Mocks
    parameters:
      - in: path
        name: mock_uid
        required: true
        schema:
          type: string
  /monitors:
    get:
      description: |-
        The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.

        The response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: allMonitors
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    monitors:
                      - id: 1e6b6c77-2031-42d0-9948-76d7251b2dd1
                        name: Batman & Sherlock Holmes Monitor
                        owner: "5852"
                        uid: 5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1
                      - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
                        name: Team Level Monitor
                        owner: "5886"
                        uid: 5886-1e6b6cb7-f13d-4000-acb7-0695757174a8
                      - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                        name: Postman Echo Monitor
                        owner: "5852"
                        uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
              schema:
                properties:
                  monitors:
                    items:
                      properties:
                        id:
                          example: 1e6b6c77-2031-42d0-9948-76d7251b2dd1
                          type: string
                        name:
                          example: Batman & Sherlock Holmes Monitor
                          type: string
                        owner:
                          example: "5852"
                          type: string
                        uid:
                          example: 5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1
                          type: string
                      type: object
                    type: array
                type: object
          description: Successful Response
      summary: All Monitors
      tags:
        - Monitors
    post:
      description: |-
        This endpoint allows you to create a monitor.

        Some sample `cron` values are:

        | Frequency                  | Cron Pattern   |
        |-----------------------|----------------|
        | Every 5 minutes       | `*/5 * * * *`  |
        | Every 30 minutes     | `*/30 * * * *` |
        | Every Hour         | `0 */1 * * *`  |
        | Every 6 Hours      | `0 */6 * * *`  |
        | Every day at 5pm    | `0 17 * * *`   |
        | Every Monday at 12pm  | `0 12 * * MON` |
        | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |

        Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 

        For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

        You can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createMonitor
      requestBody:
        content:
          application/json:
            example:
              monitor:
                collection: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                environment: 5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef
                name: This is a Monitor Name
                schedule:
                  cron: 0 0 * * *
                  timezone: Asia/Kolkata
            schema:
              properties:
                monitor:
                  properties:
                    collection:
                      example: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                      type: string
                    environment:
                      example: 5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef
                      type: string
                    name:
                      example: This is a Monitor Name
                      type: string
                    schedule:
                      properties:
                        cron:
                          example: 0 0 * * *
                          type: string
                        timezone:
                          example: Asia/Kolkata
                          type: string
                      type: object
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Create Monitor in a Workspace:
                  value:
                    monitor:
                      id: 1e6b6dfd-7ba4-4590-9ee1-5948102d7797
                      name: Monitor Name
                      uid: 5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797
              schema:
                properties:
                  monitor:
                    properties:
                      id:
                        example: 1e6b6dfd-7ba4-4590-9ee1-5948102d7797
                        type: string
                      name:
                        example: Monitor Name
                        type: string
                      uid:
                        example: 5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797
                        type: string
                    type: object
                type: object
          description: Create Monitor in a Workspace
        "400":
          content:
            application/json:
              examples:
                Parameter Missing:
                  value:
                    error:
                      details:
                        param: monitor
                      message: Parameter is missing in the request.
                      name: paramMissingError
              schema:
                properties:
                  error:
                    properties:
                      details:
                        properties:
                          param:
                            example: monitor
                            type: string
                        type: object
                      message:
                        example: Parameter is missing in the request.
                        type: string
                      name:
                        example: paramMissingError
                        type: string
                    type: object
                type: object
          description: Parameter Missing
      summary: Create Monitor
      tags:
        - Monitors
  "/monitors/{monitor_uid}":
    delete:
      description: |-
        This endpoint can be used to delete an existing monitor using its `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteMonitor
      responses:
        "200":
          content:
            application/json:
              examples:
                Monitor Deleted:
                  value:
                    monitor:
                      id: 1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
                      uid: 5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
              schema:
                properties:
                  monitor:
                    properties:
                      id:
                        example: 1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
                        type: string
                      uid:
                        example: 5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
                        type: string
                    type: object
                type: object
          description: Monitor Deleted
        "404":
          content:
            application/json:
              examples:
                Monitor Not Found:
                  value:
                    error:
                      message: The specified monitor does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: The specified monitor does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Monitor Not Found
      summary: Delete Monitor
      tags:
        - Monitors
    get:
      description: |-
        This endpoint fetches you basic information about the monitor using its `uid`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleMonitor
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    monitor:
                      collectionUid: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                      distribution: []
                      environmentUid: 5851-8d05dd85-222c-1452-553b-e76a531b71ed
                      id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                      lastRun:
                        finishedAt: 2020-03-25T15:45:31.340Z
                        startedAt: 2020-03-25T15:45:29.218Z
                        stats:
                          assertions:
                            failed: 1
                            total: 8
                          requests:
                            total: 4
                        status: failed
                      name: Postman Echo Monitor
                      notifications:
                        onError:
                          - email: john.appleseed@example.com
                        onFailure:
                          - email: john.appleseed@example.com
                      options:
                        followRedirects: true
                        requestDelay: 0
                        requestTimeout: 3000
                        strictSSL: true
                      owner: "5852"
                      schedule:
                        cron: 0 0 * * * *
                        nextRun: 2016-11-30T09:30:00.000Z
                        timezone: Asia/Calcutta
                      uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
              schema:
                properties:
                  monitor:
                    properties:
                      collectionUid:
                        example: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                        type: string
                      distribution:
                        items: {}
                        type: array
                      environmentUid:
                        example: 5851-8d05dd85-222c-1452-553b-e76a531b71ed
                        type: string
                      id:
                        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                        type: string
                      lastRun:
                        properties:
                          finishedAt:
                            example: 2020-03-25T15:45:31.340Z
                            type: string
                          startedAt:
                            example: 2020-03-25T15:45:29.218Z
                            type: string
                          stats:
                            properties:
                              assertions:
                                properties:
                                  failed:
                                    example: 1
                                    type: number
                                  total:
                                    example: 8
                                    type: number
                                type: object
                              requests:
                                properties:
                                  total:
                                    example: 4
                                    type: number
                                type: object
                            type: object
                          status:
                            example: failed
                            type: string
                        type: object
                      name:
                        example: Postman Echo Monitor
                        type: string
                      notifications:
                        properties:
                          onError:
                            items:
                              properties:
                                email:
                                  example: john.appleseed@example.com
                                  type: string
                              type: object
                            type: array
                          onFailure:
                            items:
                              properties:
                                email:
                                  example: john.appleseed@example.com
                                  type: string
                              type: object
                            type: array
                        type: object
                      options:
                        properties:
                          followRedirects:
                            example: true
                            type: boolean
                          requestDelay:
                            example: 0
                            type: number
                          requestTimeout:
                            example: 3000
                            type: number
                          strictSSL:
                            example: true
                            type: boolean
                        type: object
                      owner:
                        example: "5852"
                        type: string
                      schedule:
                        properties:
                          cron:
                            example: 0 0 * * * *
                            type: string
                          nextRun:
                            example: 2016-11-30T09:30:00.000Z
                            type: string
                          timezone:
                            example: Asia/Calcutta
                            type: string
                        type: object
                      uid:
                        example: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                        type: string
                    type: object
                type: object
          description: Successful Response
        "404":
          content:
            application/json:
              examples:
                Monitor Not Found:
                  value:
                    error:
                      message: The specified monitor does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: The specified monitor does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Monitor Not Found
      summary: Single Monitor
      tags:
        - Monitors
    parameters:
      - in: path
        name: monitor_uid
        required: true
        schema:
          type: string
    put:
      description: |-
        This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.

        Some example `cron` values are:

        | Frequency                  | Cron Pattern   |
        |-----------------------|----------------|
        | Every 5 minutes       | `*/5 * * * *`  |
        | Every 30 minutes     | `*/30 * * * *` |
        | Every Hour         | `0 */1 * * *`  |
        | Every 6 Hours      | `0 */6 * * *`  |
        | Every day at 5pm    | `0 17 * * *`   |
        | Every Monday at 12pm  | `0 12 * * MON` |
        | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |

        Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. 

        For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: updateMonitor
      requestBody:
        content:
          application/json:
            example:
              monitor:
                name: Updated Monitor Name
                schedule:
                  cron: "*/5 * * * *"
                  timezone: America/Chicago
            schema:
              properties:
                monitor:
                  properties:
                    name:
                      example: Updated Monitor Name
                      type: string
                    schedule:
                      properties:
                        cron:
                          example: "*/5 * * * *"
                          type: string
                        timezone:
                          example: America/Chicago
                          type: string
                      type: object
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Monitor Updated:
                  value:
                    monitor:
                      id: 1e6b6e2a-c2ad-4090-b750-0df4e6624352
                      name: Updated Monitor Name
                      uid: 5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352
              schema:
                properties:
                  monitor:
                    properties:
                      id:
                        example: 1e6b6e2a-c2ad-4090-b750-0df4e6624352
                        type: string
                      name:
                        example: Updated Monitor Name
                        type: string
                      uid:
                        example: 5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352
                        type: string
                    type: object
                type: object
          description: Monitor Updated
      summary: Update Monitor
      tags:
        - Monitors
  "/monitors/{monitor_uid}/run":
    parameters:
      - in: path
        name: monitor_uid
        required: true
        schema:
          type: string
    post:
      description: |-
        This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: runAMonitor
      responses:
        "200":
          content:
            application/json:
              examples:
                Monitor Run with Errors:
                  value:
                    run:
                      executions:
                        - id: 1
                          item:
                            id: b5e8d7dd-909c-4ba7-aef4-8609bc50b586
                            name: Sample POST Request
                          request:
                            body:
                              contentLength: 18
                              mode: raw
                            headers:
                              accept: "*/*"
                              accept-encoding: gzip, deflate
                              content-length: 18
                              content-type: application/json
                            method: POST
                            timestamp: 2016-12-04T14:30:26.025Z
                            url: echo.getpostman.com/post
                          response:
                            body:
                              contentLength: 298
                            code: 200
                            headers:
                              connection: keep-alive
                              content-encoding: gzip
                              content-type: application/json
                              date: Sun, 04 Dec 2016 14:30:26 GMT
                              transfer-encoding: chunked
                            responseSize: 298
                            responseTime: 26
                        - assertions:
                            Status code is 400: false
                          id: 2
                          item:
                            id: f790d046-755d-44f5-a416-b825e18dfd9d
                            name: Sample GET Request
                          request:
                            body:
                              contentLength: 0
                              mode: formdata
                            headers:
                              accept: "*/*"
                              accept-encoding: gzip, deflate
                            method: GET
                            timestamp: 2016-12-04T14:30:26.093Z
                            url: echo.getpostman.com/get
                          response:
                            body:
                              contentLength: 280
                            code: 200
                            headers:
                              connection: keep-alive
                              content-encoding: gzip
                              content-type: application/json
                              date: Sun, 04 Dec 2016 14:30:26 GMT
                              transfer-encoding: chunked
                            responseSize: 280
                            responseTime: 46
                        - id: 3
                          item:
                            id: 336e6e17-6d3e-4b8f-a48f-b7e75cf13afb
                            name: This is the second request
                          request:
                            body:
                              contentLength: 0
                              mode: formdata
                            headers:
                              accept: "*/*"
                              accept-encoding: gzip, deflate
                              content-length: 18
                            method: POST
                            timestamp: 2016-12-04T14:30:26.477Z
                            url: echo.getpostman.com/post
                          response:
                            body:
                              contentLength: 345
                            code: 200
                            headers:
                              connection: keep-alive
                              content-encoding: gzip
                              content-type: application/json
                              date: Sun, 04 Dec 2016 14:30:26 GMT
                              transfer-encoding: chunked
                            responseSize: 345
                            responseTime: 9
                      failures:
                        - assertion:
                            Status code is 400: false
                          executionId: 2
                          message: Expected 'Status code is 400' to be truthy
                          name: AssertionError
                      info:
                        collectionUid: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
                        finishedAt: 2016-12-04T14:30:26.000Z
                        jobId: 1e6ba2e3-1aaf-4c10-bd5f-905943284b2a
                        monitorId: 1e6b8970-fd13-4480-b011-b3b3e3cd271d
                        name: "Sample Collection monitor 1 #56"
                        startedAt: 2016-12-04T14:30:25.000Z
                        status: failed
                      stats:
                        assertions:
                          failed: 1
                          total: 1
                        requests:
                          failed: 1
                          total: 3
              schema:
                properties:
                  run:
                    properties:
                      executions:
                        items:
                          properties:
                            id:
                              example: 1
                              type: number
                            item:
                              properties:
                                id:
                                  example: b5e8d7dd-909c-4ba7-aef4-8609bc50b586
                                  type: string
                                name:
                                  example: Sample POST Request
                                  type: string
                              type: object
                            request:
                              properties:
                                body:
                                  properties:
                                    contentLength:
                                      example: 18
                                      type: number
                                    mode:
                                      example: raw
                                      type: string
                                  type: object
                                headers:
                                  properties:
                                    accept:
                                      example: "*/*"
                                      type: string
                                    accept-encoding:
                                      example: gzip, deflate
                                      type: string
                                    content-length:
                                      example: 18
                                      type: number
                                    content-type:
                                      example: application/json
                                      type: string
                                  type: object
                                method:
                                  example: POST
                                  type: string
                                timestamp:
                                  example: 2016-12-04T14:30:26.025Z
                                  type: string
                                url:
                                  example: echo.getpostman.com/post
                                  type: string
                              type: object
                            response:
                              properties:
                                body:
                                  properties:
                                    contentLength:
                                      example: 298
                                      type: number
                                  type: object
                                code:
                                  example: 200
                                  type: number
                                headers:
                                  properties:
                                    connection:
                                      example: keep-alive
                                      type: string
                                    content-encoding:
                                      example: gzip
                                      type: string
                                    content-type:
                                      example: application/json
                                      type: string
                                    date:
                                      example: Sun, 04 Dec 2016 14:30:26 GMT
                                      type: string
                                    transfer-encoding:
                                      example: chunked
                                      type: string
                                  type: object
                                responseSize:
                                  example: 298
                                  type: number
                                responseTime:
                                  example: 26
                                  type: number
                              type: object
                          type: object
                        type: array
                      failures:
                        items:
                          properties:
                            assertion:
                              properties:
                                Status code is 400:
                                  example: false
                                  type: boolean
                              type: object
                            executionId:
                              example: 2
                              type: number
                            message:
                              example: Expected 'Status code is 400' to be truthy
                              type: string
                            name:
                              example: AssertionError
                              type: string
                          type: object
                        type: array
                      info:
                        properties:
                          collectionUid:
                            example: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
                            type: string
                          finishedAt:
                            example: 2016-12-04T14:30:26.000Z
                            type: string
                          jobId:
                            example: 1e6ba2e3-1aaf-4c10-bd5f-905943284b2a
                            type: string
                          monitorId:
                            example: 1e6b8970-fd13-4480-b011-b3b3e3cd271d
                            type: string
                          name:
                            example: "Sample Collection monitor 1 #56"
                            type: string
                          startedAt:
                            example: 2016-12-04T14:30:25.000Z
                            type: string
                          status:
                            example: failed
                            type: string
                        type: object
                      stats:
                        properties:
                          assertions:
                            properties:
                              failed:
                                example: 1
                                type: number
                              total:
                                example: 1
                                type: number
                            type: object
                          requests:
                            properties:
                              failed:
                                example: 1
                                type: number
                              total:
                                example: 3
                                type: number
                            type: object
                        type: object
                    type: object
                type: object
          description: Monitor Run with Errors
      summary: Run a Monitor
      tags:
        - Monitors
  /webhooks:
    post:
      description: |-
        Create a webhook that triggers a collection with your custom payload.

        You can specify the webhook name and the collection to trigger by using the following attributes of the `webhook` object on your JSON body:

        * `name`: the name of the webhook that you're creating.
        * `collection`: the ID of the collection that you want to trigger once this webhook is called.

        Once created, the webhook URL can be retrieved by accessing the `webhookUrl` attribute of the `webhook` object on the response JSON payload.
      operationId: createWebhook
      parameters:
        - in: query
          name: workspace
          schema:
            example: "{{workspace_id}}"
            type: string
      requestBody:
        content:
          application/json:
            example:
              webhook:
                collection: "{{collection_id}}"
                name: "{{webhook_name}}"
            schema:
              properties:
                webhook:
                  properties:
                    collection:
                      example: "{{collection_id}}"
                      type: string
                    name:
                      example: "{{webhook_name}}"
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: ""
      summary: Create Webhook
      tags:
        - Webhooks
  /workspaces:
    get:
      description: |-
        The `/workspaces` endpoint returns a list of all [workspaces](https://www.getpostman.com/docs/v6/postman/workspaces/intro_to_workspaces) that is accessible by you. The list includes your own workspaces and the workspaces that you have access to.

        The response contains an array of collection information containing the `name`, `id`, and `type` of each workspace.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: allWorkspaces
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    workspaces:
                      - id: 4e6d34c2-cfdb-4b33-8868-12a875bebda3
                        name: My Workspace
                        type: personal
                      - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                        name: Team workspace
                        type: team
              schema:
                properties:
                  workspaces:
                    items:
                      properties:
                        id:
                          example: 4e6d34c2-cfdb-4b33-8868-12a875bebda3
                          type: string
                        name:
                          example: My Workspace
                          type: string
                        type:
                          example: personal
                          type: string
                      type: object
                    type: array
                type: object
          description: Valid Response
      summary: All workspaces
      tags:
        - Workspaces
    post:
      description: |-
        This endpoint allows you to create a workspace and populate it with entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.

        On successful creation of the workspace, the response returns the workspcae `name` and `id`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            example:
              workspace:
                collections:
                  - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                    name: Straw hats
                    uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                description: Some description
                environments:
                  - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                    name: env
                    uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                mocks:
                  - id: cda672ef-1375-40e9-baee-e20ece8d7b65
                monitors:
                  - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
                name: New Workspace
                type: personal
            schema:
              properties:
                workspace:
                  properties:
                    collections:
                      items:
                        properties:
                          id:
                            example: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                            type: string
                          name:
                            example: Straw hats
                            type: string
                          uid:
                            example: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                            type: string
                        type: object
                      type: array
                    description:
                      example: Some description
                      type: string
                    environments:
                      items:
                        properties:
                          id:
                            example: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                            type: string
                          name:
                            example: env
                            type: string
                          uid:
                            example: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                            type: string
                        type: object
                      type: array
                    mocks:
                      items:
                        properties:
                          id:
                            example: cda672ef-1375-40e9-baee-e20ece8d7b65
                            type: string
                        type: object
                      type: array
                    monitors:
                      items:
                        properties:
                          id:
                            example: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
                            type: string
                        type: object
                      type: array
                    name:
                      example: New Workspace
                      type: string
                    type:
                      example: personal
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    workspace:
                      id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                      name: New Workspace
              schema:
                properties:
                  workspace:
                    properties:
                      id:
                        example: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                        type: string
                      name:
                        example: New Workspace
                        type: string
                    type: object
                type: object
          description: Successful Response
        "400":
          content:
            application/json:
              examples:
                Instance supplied not found:
                  value:
                    error:
                      message: Instance not found in the database.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: Instance not found in the database.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Instance supplied not found
      summary: Create Workspace
      tags:
        - Workspaces
  "/workspaces/{workspace_id}":
    delete:
      description: |-
        This endpoint allows you to delete an existing workspace.

        On successful deletion of the workspace, the response returns the `id`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: deleteWorkspace
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    workspace:
                      id: "{{workspace_id}}"
              schema:
                properties:
                  workspace:
                    properties:
                      id:
                        example: "{{workspace_id}}"
                        type: string
                    type: object
                type: object
          description: Successful Response
      summary: Delete Workspace
      tags:
        - Workspaces
    get:
      description: |-
        Access the contents of a workspace that is accessible to you using its id (`id`). Includes the collections, environments, mocks and monitors of that workspace.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: singleWorkspace
      responses:
        "200":
          content:
            application/json:
              examples:
                Valid Response:
                  value:
                    workspace:
                      collections:
                        - id: 7c31b469-bd43-4411-9283-6d397855ee0e
                          name: Mock demo - collection
                          uid: 1234-7c31b469-bd43-4411-9283-6d397855ee0e
                        - id: 356fe068-a0f8-4f31-b34d-d12149eac681
                          name: Mock demo - response code
                          uid: 1234-356fe068-a0f8-4f31-b34d-d12149eac681
                      description: Demos.
                      environments:
                        - id: 423fd955-a9c8-47cd-9ab0-09a6a575c4be
                          name: Mock demo - CNX
                          uid: 1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be
                        - id: 24c45c84-5147-4c15-bb9a-c3186b81d3cc
                          name: Mock Demo - response code
                          uid: 1234-24c45c84-5147-4c15-bb9a-c3186b81d3cc
                      id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                      name: Demo workspace
                      type: personal
              schema:
                properties:
                  workspace:
                    properties:
                      collections:
                        items:
                          properties:
                            id:
                              example: 7c31b469-bd43-4411-9283-6d397855ee0e
                              type: string
                            name:
                              example: Mock demo - collection
                              type: string
                            uid:
                              example: 1234-7c31b469-bd43-4411-9283-6d397855ee0e
                              type: string
                          type: object
                        type: array
                      description:
                        example: Demos.
                        type: string
                      environments:
                        items:
                          properties:
                            id:
                              example: 423fd955-a9c8-47cd-9ab0-09a6a575c4be
                              type: string
                            name:
                              example: Mock demo - CNX
                              type: string
                            uid:
                              example: 1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be
                              type: string
                          type: object
                        type: array
                      id:
                        example: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                        type: string
                      name:
                        example: Demo workspace
                        type: string
                      type:
                        example: personal
                        type: string
                    type: object
                type: object
          description: Valid Response
        "404":
          content:
            application/json:
              examples:
                Workspace Not Found:
                  value:
                    error:
                      message: Instance not found in the database.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: Instance not found in the database.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Workspace Not Found
      summary: Single workspace
      tags:
        - Workspaces
    parameters:
      - in: path
        name: workspace_id
        required: true
        schema:
          type: string
    put:
      description: |-
        This endpoint allows you to update a workspace and update it's association to entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.

        On successful updation of the workspace, the response returns the workspcae `name` and `id`.

        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

        **Note** : The endpoint expects you to send the desired state of the workspace in terms of the associated entities so be careful when trying to update these entities.

        For eg. if your workspace has collections A and B, and in the update call, you send C's uid in the collections array, then A and B would be removed from the workspace and C would be added.
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            example:
              workspace:
                collections:
                  - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                    name: Straw hats
                    uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                description: Some description
                environments:
                  - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                    name: env
                    uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                mocks:
                  - id: cda672ef-1375-40e9-baee-e20ece8d7b65
                monitors:
                  - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
                name: New Workspace updated
            schema:
              properties:
                workspace:
                  properties:
                    collections:
                      items:
                        properties:
                          id:
                            example: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                            type: string
                          name:
                            example: Straw hats
                            type: string
                          uid:
                            example: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                            type: string
                        type: object
                      type: array
                    description:
                      example: Some description
                      type: string
                    environments:
                      items:
                        properties:
                          id:
                            example: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                            type: string
                          name:
                            example: env
                            type: string
                          uid:
                            example: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                            type: string
                        type: object
                      type: array
                    mocks:
                      items:
                        properties:
                          id:
                            example: cda672ef-1375-40e9-baee-e20ece8d7b65
                            type: string
                        type: object
                      type: array
                    monitors:
                      items:
                        properties:
                          id:
                            example: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
                            type: string
                        type: object
                      type: array
                    name:
                      example: New Workspace updated
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Response:
                  value:
                    workspace:
                      id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                      name: New Workspace
              schema:
                properties:
                  workspace:
                    properties:
                      id:
                        example: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                        type: string
                      name:
                        example: New Workspace
                        type: string
                    type: object
                type: object
          description: Successful Response
        "403":
          content:
            application/json:
              examples:
                Not enough permissions:
                  value:
                    error:
                      message: You do not have access to update this workspace.
                      name: forbiddenError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: You do not have access to update this workspace.
                        type: string
                      name:
                        example: forbiddenError
                        type: string
                    type: object
                type: object
          description: Not enough permissions
        "404":
          content:
            application/json:
              examples:
                Specified workspace/entities do not exist:
                  value:
                    error:
                      message: The specified workspace does not exist.
                      name: instanceNotFoundError
              schema:
                properties:
                  error:
                    properties:
                      message:
                        example: The specified workspace does not exist.
                        type: string
                      name:
                        example: instanceNotFoundError
                        type: string
                    type: object
                type: object
          description: Specified workspace/entities do not exist
      summary: Update Workspace
      tags:
        - Workspaces
