openapi: 3.0.1
servers:
  - url: https://connect.signl4.com/api
x-hasEquivalentPaths: true
info:
  contact:
    url: https://www.signl4.com/feedback-we-love-hear-from-you/
    x-twitter: signl4me
  description: "<p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>"
  license:
    name: Derdack GmbH
    url: https://www.signl4.com
  title: SIGNL4 API
  version: v1
  x-apisguru-categories:
    - messaging
  x-origin:
    - format: openapi
      url: https://connect.signl4.com/api/docs/v1/swagger.json
      version: "3.0"
  x-providerName: signl4.com
security:
  - oauth2:
      - public_api_write
      - public_api_read
      - offline_access
tags:
  - description: Provide access to all informations about signls and the ability to interact with them.
    name: Alerts
  - description: Provides access to services and system categories in a SIGNL4 team.
    name: Categories
  - description: Provide access to duty information and the ability to create, delete and update them.
    name: Duties
  - description: Provide access to all informations about events and their parameters.
    name: Events
  - description: Provides access to the prepaid balance and transactions
    name: Prepaid
  - description: Provides access to apps that are available in SIGNL4 and e.g. allows adding an app to a SIGNL4 team.
    name: Scripts
  - description: Provides management capabilities for a SIGNL4 subscription.
    name: Subscriptions
  - description: Provides misc. operations, e.g. for managing settings or preferences, of a team in a SIGNL4 subscription.
    name: Teams
  - description: Provides management for team members in a SIGNL4 team.
    name: Users
  - description: Provides management for outbound notifications (e.g. a Signl was confirmed) via webhooks.
    name: Webhooks
paths:
  /alerts:
    post:
      description: Triggers a new alert for your team. All team members on duty will receive alert notifications.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/RaiseAlertInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/RaiseAlertInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/RaiseAlertInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/RaiseAlertInfo"
        description: Alert to raise.
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Trigger Alert
      tags:
        - Alerts
  /alerts/acknowledgeAll:
    post:
      description: This method confirms all unhandled alerts your team currently has by a specific user.
      parameters:
        - description: User ID of the user to be used to acknowledge the alarms.
          in: query
          name: userId
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          description: Internal general error occured.
      summary: Confirms all visible alerts
      tags:
        - Alerts
  /alerts/acknowledgeMultiple:
    post:
      description: This method confirms all alerts provided.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Acknowlegde multiple alerts
      tags:
        - Alerts
  /alerts/closeAll:
    post:
      description: This method closes all acknowledged alerts your team currently has.
      parameters:
        - description: User ID of the user to be used to close the alarms.
          in: query
          name: userId
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusFilterInfo"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Close all acknowledged alerts.
      tags:
        - Alerts
  /alerts/closeMultiple:
    post:
      description: This method closes all alerts provided.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Close multiple alerts
      tags:
        - Alerts
  /alerts/paged:
    post:
      parameters:
        - description: "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r

            \                Number of alerts could be less if filtered but at least 1."
          in: query
          name: maxResults
          schema:
            format: int32
            type: integer
        - description: User ID of the user you want to get alerts for.
          in: query
          name: userId
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/AlertFilterPublic"
          application/json:
            schema:
              $ref: "#/components/schemas/AlertFilterPublic"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/AlertFilterPublic"
          text/json:
            schema:
              $ref: "#/components/schemas/AlertFilterPublic"
        description: The filter defines which alerts are supposed to be retrieved.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewAlertPagedResultsPublic"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewAlertPagedResultsPublic"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewAlertPagedResultsPublic"
          description: Returns a paged result with found alerts and continuation token if more alerts are in the database.
        "204":
          description: There were no alerts found for the specified filter.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Authorization failed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Gets alerts paged
      tags:
        - Alerts
  /alerts/report:
    get:
      description: "Returns information about the occurred alert volume in different time periods as well as information about the\r

        response behaviour (amount of confirmed and unhandled alerts) of your team members."
      parameters:
        - description: User ID of the user for whom you want a report.
          in: query
          name: userId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertReport"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertReport"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertReport"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get Alert Report
      tags:
        - Alerts
  /alerts/undoAcknowledgeMultiple:
    post:
      description: This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
        description: Configure which user should be undone for which alerts.
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Queue undo of multiple acknowledgments.
      tags:
        - Alerts
  /alerts/undoCloseMultiple:
    post:
      description: This method tries to undo multiple alert closes. The operation is handled in the background.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusMultipleInfo"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Withdraw closure of multiple alerts
      tags:
        - Alerts
  "/alerts/{alertId}":
    get:
      description: Gets an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get Alert
      tags:
        - Alerts
  "/alerts/{alertId}/acknowledge":
    post:
      parameters:
        - description: Id to acknowledge an alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: No alert with id was found.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Alert can't be acknowledged because it is against the defined alert lifecycle.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Acknowledge an alert
      tags:
        - Alerts
  "/alerts/{alertId}/annotate":
    post:
      description: Annotates an alert by given Annotation Info.
      parameters:
        - description: Id of the alert to annotate.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/AlertAnnotationInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/AlertAnnotationInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/AlertAnnotationInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/AlertAnnotationInfo"
        description: Annotation Information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertAnnotationInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertAnnotationInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertAnnotationInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Annotate Alert
      tags:
        - Alerts
  "/alerts/{alertId}/annotations":
    get:
      description: Get annotations of an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAnnotationInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAnnotationInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAnnotationInfo"
                type: array
          description: Success
        "204":
          description: No annotations were found for the alert.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get annotations of an alert
      tags:
        - Alerts
  "/alerts/{alertId}/attachments":
    get:
      description: Get attachments of an alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAttachmentInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAttachmentInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAttachmentInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get attachments of an alert
      tags:
        - Alerts
  "/alerts/{alertId}/attachments/{attachmentId}":
    get:
      parameters:
        - description: Id of the alert that contains the wanted attachment.
          in: path
          name: alertId
          required: true
          schema:
            type: string
        - description: Id of the attachment, that you want to retrieve.
          in: path
          name: attachmentId
          required: true
          schema:
            type: string
        - description: Optional parameter defining the wanted width of the picture that is retrieved.
          in: query
          name: width
          schema:
            format: int32
            type: integer
        - description: Optional parameter defining the wanted height of the picture that is retrieved.
          in: query
          name: height
          schema:
            format: int32
            type: integer
        - description: "Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to\r

            true."
          in: query
          name: scale
          schema:
            default: true
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Returns the attachment image with additional meta information.
        "204":
          description: The image of the attachment was not uploaded yet.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: A passed parameter was either empty or invalid.
        "403":
          description: Authorization failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The attachment image was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Gets a specified attachment of a specified alert.
      tags:
        - Alerts
  "/alerts/{alertId}/close":
    post:
      parameters:
        - description: Id to acknowledge an alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: No alert with id was found.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Alert can't be closed because it is against the defined alert lifecycle.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Close an alert
      tags:
        - Alerts
  "/alerts/{alertId}/notifications":
    get:
      description: Get notifications of all users by alert id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertNotificationInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertNotificationInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/AlertNotificationInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get alert notifications
      tags:
        - Alerts
  "/alerts/{alertId}/overview":
    get:
      description: Get overview alert by id.
      parameters:
        - description: Id of the requested Alert.
          in: path
          name: alertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
          description: Returns alert with all information attached.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get an overview alert.
      tags:
        - Alerts
  "/alerts/{alertId}/undoAcknowledge":
    post:
      description: This method tries to undo an alert acknowledgement.
      parameters:
        - in: path
          name: alertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
          description: Returns updated alert.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: User is not allowed to undo the acknowledgement.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Undo the acknowledgement of an alert.
      tags:
        - Alerts
  "/alerts/{alertId}/undoClose":
    post:
      description: This method tries to undo an alert close.
      parameters:
        - in: path
          name: alertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ChangeAlertStatusInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewAlert"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: User is not allowed to undo the close.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Undo the closure of an alert.
      tags:
        - Alerts
  /categories/images:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
            text/json:
              schema:
                items:
                  type: string
                type: array
            text/plain:
              schema:
                items:
                  type: string
                type: array
          description: Returns the alert categories.
        "204":
          description: Request was canceled.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access the resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: No categories were found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: "Gets the names of all alert category images.\r

        You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg"
      tags:
        - Categories
  "/categories/{teamId}":
    get:
      description: "Sample Request:\r

        \            \r

        \    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7"
      parameters:
        - description: ID of the team the categories belong to
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryInfo"
                type: array
          description: Returns the category infos
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Get all categories
      tags:
        - Categories
    post:
      description: "Sample Request:\r

        \            \r

        \    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7\r

        \    {\r

        \        \"name\": \"Water\",\r

        \        \"imageName\": \"water.svg\",\r

        \        \"color\": \"#0000cc\",\r

        \        \"keywordMatching\": \"Any\",\r

        \        \"keywords\": [\r

        \            {\r

        \                \"value\": \"H2O\"\r

        \            },\r

        \            {\r

        \                \"value\": \"Water\"\r

        \            }\r

        \        ]\r

        \    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
        description: Category to be created
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
          description: Returns the newly created category
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Create a new category
      tags:
        - Categories
  "/categories/{teamId}/metrics":
    get:
      description: "Sample Request:\r

        \            \r

        \    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics"
      parameters:
        - description: ID of the team the categories belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryMetrics"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryMetrics"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/CategoryMetrics"
                type: array
          description: Returns a list of category metrics
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Get metrics for all categories
      tags:
        - Categories
  "/categories/{teamId}/{categoryId}":
    delete:
      description: "Sample Request:\r

        \            \r

        \    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: ID of the category to delete
          in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: If the delete operation was successful
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Delete an existing category
      tags:
        - Categories
    get:
      description: "Sample Request:\r

        \            \r

        \    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: ID of the category to get
          in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
          description: Returns the category details
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Get a specific category
      tags:
        - Categories
    put:
      description: "Sample Request:\r

        \            \r

        \    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e\r

        \    {\r

        \        \"name\": \"Water-Updated\",\r

        \        \"imageName\": \"water.svg\",\r

        \        \"color\": \"#0000cc\",\r

        \        \"keywordMatching\": \"All\",\r

        \        \"keywords\": [\r

        \            {\r

        \                \"value\": \"H2O\"\r

        \            },\r

        \            {\r

        \                \"value\": \"Water\"\r

        \            },\r

        \            {\r

        \                \"value\": \"Wet\"\r

        \            }\r

        \        ]\r

        \    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/CategoryInfo"
        description: Category to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/CategoryInfo"
          description: Returns the updated category
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Update an existing category
      tags:
        - Categories
  "/categories/{teamId}/{categoryId}/metrics":
    get:
      description: "Sample Request:\r

        \            \r

        \    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: ID of the category to get
          in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryMetrics"
            text/json:
              schema:
                $ref: "#/components/schemas/CategoryMetrics"
            text/plain:
              schema:
                $ref: "#/components/schemas/CategoryMetrics"
          description: Returns the category metrics
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Get metrics for a specific category
      tags:
        - Categories
  "/categories/{teamId}/{categoryId}/subscriptions":
    get:
      description: "Sample Request:\r

        \            \r

        \    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r

        \    {\r

        \    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: Category to get subscriptions for
          in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
          description: Returns the category subscriptions
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Get category subscriptions
      tags:
        - Categories
    post:
      description: "Sample Request:\r

        \            \r

        \    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r

        \    {\r

        \    }"
      parameters:
        - description: ID of the team the category belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: Category to be updated
          in: path
          name: categoryId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              items:
                $ref: "#/components/schemas/CategorySubscriptionInfo"
              type: array
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/CategorySubscriptionInfo"
              type: array
          application/json-patch+json:
            schema:
              items:
                $ref: "#/components/schemas/CategorySubscriptionInfo"
              type: array
          text/json:
            schema:
              items:
                $ref: "#/components/schemas/CategorySubscriptionInfo"
              type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySubscriptionInfo"
                type: array
          description: Returns the updated category subscriptions
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If you have no permission to access this resource
        "404":
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: If any server side errors occur
      summary: Set category subscriptions
      tags:
        - Categories
  /events/paged:
    post:
      description: Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
      parameters:
        - description: "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r

            \                 Number of alerts could be less if filtered but at least 1."
          in: query
          name: maxResults
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/EventFilter"
          application/json:
            schema:
              $ref: "#/components/schemas/EventFilter"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/EventFilter"
          text/json:
            schema:
              $ref: "#/components/schemas/EventFilter"
        description: The filter defines which alerts are supposed to be retrieved.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewEventPagedResultsPublic"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewEventPagedResultsPublic"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewEventPagedResultsPublic"
          description: Returns paged result with found events and continuation token, if database holds more events.
        "204":
          description: No event could be found (with passed filter)
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get overview event paged.
      tags:
        - Events
  "/events/{eventId}/overview":
    get:
      description: Get overview event by id.
      parameters:
        - description: Id of event to get.
          in: path
          name: eventId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewEvent"
            text/json:
              schema:
                $ref: "#/components/schemas/OverviewEvent"
            text/plain:
              schema:
                $ref: "#/components/schemas/OverviewEvent"
          description: Returns overview event with specific id.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Event with specified id could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get overview event
      tags:
        - Events
  "/events/{eventId}/parameters":
    get:
      description: Get parameters of an event by id.
      parameters:
        - description: Event Id of the requested Alert.
          in: path
          name: eventId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventParameterInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventParameterInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/EventParameterInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Get event parameters
      tags:
        - Events
  /prepaid/balance:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get your subscription's current prepaid balance.
      tags:
        - Prepaid
  /prepaid/settings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get your subscription's current prepaid settings.
      tags:
        - Prepaid
    put:
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
        description: Settings object containing the new values.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Update your subscription's current prepaid settings.
      tags:
        - Prepaid
  /prepaid/transactions:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get your subscription's prepaid transactions.
      tags:
        - Prepaid
  /scripts/instances:
    get:
      description: Returns all script instances in the subscription.
      parameters:
        - in: query
          name: teamId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScriptInstanceDetails"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScriptInstanceDetails"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/ScriptInstanceDetails"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
      summary: Returns all script instances of the SIGNL4 team
      tags:
        - Scripts
    post:
      description: Creates a new script instance of the script specified in the request body.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          application/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          text/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
        description: Script instance to be created.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Existing script instance was updated as specified in body.
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: New script instance was updated as specified in body.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: An internal error has occurred during instance creation.
      summary: Creates a new script instance in the in the SIGNL4 team.
      tags:
        - Scripts
  "/scripts/instances/{instanceId}":
    delete:
      description: Gets the script instance specified by the passed instance id.
      parameters:
        - description: Instance Id of script instance to be returned.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database or in memory.
      summary: Deletes a script instance.
      tags:
        - Scripts
    get:
      description: Gets the script instance specified by the passed instance id.
      parameters:
        - description: Instance Id of script instance to be returned.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database or in memory.
      summary: Returns all information about a given script instance which includes its runtime status.
      tags:
        - Scripts
    put:
      description: Updates the specified script instance.
      parameters:
        - description: InstanceId of the script to be updated.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          application/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
          text/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceDetails"
        description: Script instance to be updated.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: An internal error has occurred during instance creation.
      summary: Updates a given script instance, typically used for updating the configuration of a script.
      tags:
        - Scripts
  "/scripts/instances/{instanceId}/data":
    put:
      description: Updates the specified script instance.
      parameters:
        - description: InstanceId of the script to be updated.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceCustomUserData"
          application/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceCustomUserData"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceCustomUserData"
          text/json:
            schema:
              $ref: "#/components/schemas/ScriptInstanceCustomUserData"
        description: Script instance to be updated.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: An internal error has occurred during instance creation.
      summary: Updates custom data of a given script instance which includes its display name.
      tags:
        - Scripts
  "/scripts/instances/{instanceId}/disable":
    post:
      parameters:
        - description: Id of the instance to be disabled.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Disables a given script instance.
      tags:
        - Scripts
  "/scripts/instances/{instanceId}/enable":
    post:
      parameters:
        - description: Id of the instance to be enabled.
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Enables a script instance.
      tags:
        - Scripts
  /scripts/inventory:
    get:
      description: Returns all available inventory scripts which can be added to a SIGNL4 subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: An internal error orccurred while loading all inventory scripts.
      summary: Returns all available inventory scripts which can be added to a SIGNL4 subscription.
      tags:
        - Scripts
  /scripts/inventory/parsed:
    get:
      parameters:
        - description: ""
          in: query
          name: language
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/InventoryScriptInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns all inventory scripts.
      tags:
        - Scripts
  "/scripts/inventory/parsed/{scriptId}":
    get:
      description: Gets the script specified by the passed script id.
      parameters:
        - description: The Id of the script to be returned.
          in: path
          name: scriptId
          required: true
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScriptInstanceDetails"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database or in memory.
      summary: Returns an inventory script by its id.
      tags:
        - Scripts
  /subscriptions:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get infos of all available/managed subscriptions.
      tags:
        - Subscriptions
  "/subscriptions/{subscriptionId}":
    get:
      parameters:
        - description: Id of the subscription that's to be retrieved.
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get infos of a specific subscription.
      tags:
        - Subscriptions
  "/subscriptions/{subscriptionId}/channelPrices":
    get:
      parameters:
        - description: Id of the subscription that needs to be retrieved.
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelPriceInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ChannelPriceInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ChannelPriceInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns the subscription's channel price information.
      tags:
        - Subscriptions
  "/subscriptions/{subscriptionId}/features":
    get:
      parameters:
        - description: Id of the subscription from which the features need to be retrieved.
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionFeature"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionFeature"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionFeature"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns the features of a specified subscription.
      tags:
        - Subscriptions
  "/subscriptions/{subscriptionId}/prepaidBalance":
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidBalanceInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get a subscription's current prepaid balance.
      tags:
        - Prepaid
  "/subscriptions/{subscriptionId}/prepaidSettings":
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get a subscription's current prepaid settings.
      tags:
        - Prepaid
    put:
      parameters:
        - description: ID of the subscription
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/PrepaidSettingsInfo"
        description: Settings object containing the new values.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/PrepaidSettingsInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Update a subscription's current prepaid settings.
      tags:
        - Prepaid
  "/subscriptions/{subscriptionId}/prepaidTransactions":
    get:
      parameters:
        - description: ID of the subscription to get transactions for
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/PrepaidTransactionInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get a subscription's prepaid transactions.
      tags:
        - Prepaid
  "/subscriptions/{subscriptionId}/profile":
    put:
      parameters:
        - description: ID of the subscription to be updated
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/SubscriptionProfile"
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionProfile"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/SubscriptionProfile"
          text/json:
            schema:
              $ref: "#/components/schemas/SubscriptionProfile"
        description: Profile data to update subscription with
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Updates a subscriptions profile.
      tags:
        - Subscriptions
  "/subscriptions/{subscriptionId}/teams":
    get:
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get infos for all teams of the subscription.
      tags:
        - Teams
  "/subscriptions/{subscriptionId}/userLicenses":
    get:
      parameters:
        - description: ID of the subscription
          in: path
          name: subscriptionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLicenseInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserLicenseInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserLicenseInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets a subscription's user licenses.
      tags:
        - Subscriptions
  /teams:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/TeamInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get infos of all teams.
      tags:
        - Teams
  "/teams/{teamId}":
    get:
      parameters:
        - description: ID of the team that should be retrieved.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets infos of a specific team.
      tags:
        - Teams
  "/teams/{teamId}/alertReports":
    get:
      parameters:
        - description: ID of team you want to download reports from.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAuditReportFileInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAuditReportFileInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/AlertAuditReportFileInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get information about downloadable alert reports
      tags:
        - Teams
  "/teams/{teamId}/alertReports/{fileName}":
    get:
      parameters:
        - description: ID of team you want to get the duty report file infos for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: File name of file you want to download.
          in: path
          name: fileName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns Alert Report
      tags:
        - Teams
  "/teams/{teamId}/alertSettings":
    get:
      parameters:
        - description: ID of the team the settings should be retrieved for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertSettings"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets alert settings of a specific team.
      tags:
        - Teams
    post:
      parameters:
        - description: ID of the team the settings should be set for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/AlertSettings"
          application/json:
            schema:
              $ref: "#/components/schemas/AlertSettings"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/AlertSettings"
          text/json:
            schema:
              $ref: "#/components/schemas/AlertSettings"
        description: Alert settings to be set
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlertSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/AlertSettings"
            text/plain:
              schema:
                $ref: "#/components/schemas/AlertSettings"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Sets alert settings of a specific team.
      tags:
        - Teams
  "/teams/{teamId}/dutyReports":
    get:
      parameters:
        - description: ID of team you want to get the duty report file infos for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DutyAuditReportFileInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/DutyAuditReportFileInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/DutyAuditReportFileInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get Information about downloadable reports
      tags:
        - Duties
  "/teams/{teamId}/dutyReports/{fileName}":
    get:
      parameters:
        - description: ID of team you want to download the duty report for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: Filename of the csv to download.
          in: path
          name: fileName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Download duty report with a specific fileName
      tags:
        - Duties
  "/teams/{teamId}/dutysummary":
    get:
      parameters:
        - description: ID of the team the duty belongs to.
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: query
          name: lastTwoDuties
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDutySummaryInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamDutySummaryInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamDutySummaryInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get duty assistant info for a team
      tags:
        - Duties
  "/teams/{teamId}/eventSources":
    get:
      parameters:
        - description: ID of the team the sources should be retrieved for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventSourceEndpointInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventSourceEndpointInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/EventSourceEndpointInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets event sources of a specific team.
      tags:
        - Teams
  "/teams/{teamId}/memberships":
    get:
      parameters:
        - description: Team ID of team you want to request.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvitedUserInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvitedUserInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/InvitedUserInfo"
                type: array
          description: User invitations are returned.
        "204":
          description: Request was canceled.
        "400":
          description: Required parameters or authentifaction info could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Get all invites of a team.
      tags:
        - TeamsMemberships
    post:
      parameters:
        - description: Id of team the user should be invited to.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/UsersInvitation"
          application/json:
            schema:
              $ref: "#/components/schemas/UsersInvitation"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UsersInvitation"
          text/json:
            schema:
              $ref: "#/components/schemas/UsersInvitation"
        description: Information about user to invite and inviter id.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserInvitationResult"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserInvitationResult"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/UserInvitationResult"
                type: array
          description: User invitation results are returned.
        "204":
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters or authentifaction info could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: You're not allowed to request the access all required entities.
        "404":
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Invite users to a team
      tags:
        - TeamsMemberships
  "/teams/{teamId}/memberships/resendInviteMail":
    post:
      parameters:
        - description: Team ID of team with invited user.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/UserInvitationInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/UserInvitationInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UserInvitationInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/UserInvitationInfo"
        description: Information which user should be invited again.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Success
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Sends invite email again if an invite exists
      tags:
        - TeamsMemberships
  "/teams/{teamId}/memberships/{userId}":
    delete:
      parameters:
        - description: ID of the team the user should be deleted from
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: ID of the user that should be deleted
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: User ID of user which will remove the other user.
          in: query
          name: requesterUserId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Success message
        "204":
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters or authentifaction info could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Removes a user or invitation from a team, and may delete the user if he is not in any team.
      tags:
        - TeamsMemberships
    put:
      description: "Updates the user's team membership. You can move the user to another team within the subscription\r

        and/or change the user's role."
      parameters:
        - description: Team the user you want to update belongs to at the moment.
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: User ID of user you want to update.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights.
          in: query
          name: requesterUserId
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/UserMembership"
          application/json:
            schema:
              $ref: "#/components/schemas/UserMembership"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UserMembership"
          text/json:
            schema:
              $ref: "#/components/schemas/UserMembership"
        description: Information about role id and target team id.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserInfo"
          description: User was successfully updated.
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required parameters or authentifaction info could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Update user's team membership.
      tags:
        - TeamsMemberships
  "/teams/{teamId}/profile":
    put:
      parameters:
        - description: Team ID of team which should be updated.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/TeamProfile"
          application/json:
            schema:
              $ref: "#/components/schemas/TeamProfile"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/TeamProfile"
          text/json:
            schema:
              $ref: "#/components/schemas/TeamProfile"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Updates team profile of a team
      tags:
        - Teams
  "/teams/{teamId}/schedules":
    get:
      parameters:
        - description: Id of the team the schedules user belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: query
          name: UserId
          schema:
            type: string
        - in: query
          name: MinDate
          schema:
            format: date-time
            type: string
        - in: query
          name: Limit
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns information about all duties that belong to the team.
      tags:
        - Duties
    post:
      parameters:
        - description: Id of the team the duty is to be assigned to.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/ScheduleInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ScheduleInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/ScheduleInfo"
        description: information about the duty schedule to be created
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Create/Update given duty schedule.
      tags:
        - Duties
  "/teams/{teamId}/schedules/deleteRange":
    post:
      parameters:
        - description: Team ID you want to delete
          in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/DeleteRangeInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRangeInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/DeleteRangeInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/DeleteRangeInfo"
        description: Information with date range to delete from to
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Delete duty schedules in range
      tags:
        - Duties
  "/teams/{teamId}/schedules/multiple":
    post:
      parameters:
        - description: Team ID to set
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: Override or cut existing schedules if set to true.
          in: query
          name: overrideExisting
          schema:
            type: boolean
      requestBody:
        content:
          application/*+json:
            schema:
              items:
                $ref: "#/components/schemas/ScheduleInfo"
              type: array
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ScheduleInfo"
              type: array
          application/json-patch+json:
            schema:
              items:
                $ref: "#/components/schemas/ScheduleInfo"
              type: array
          text/json:
            schema:
              items:
                $ref: "#/components/schemas/ScheduleInfo"
              type: array
        description: List of schedules to save
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleInfo"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Save multiple schedules. It is possible to override existing schedules if you wish
      tags:
        - Duties
  "/teams/{teamId}/schedules/{dutyId}":
    delete:
      parameters:
        - description: ID of the team the duty belongs to.
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: ID of the duty to be deleted.
          in: path
          name: dutyId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Delete a specific duty.
      tags:
        - Duties
  "/teams/{teamId}/schedules/{scheduleId}":
    get:
      parameters:
        - description: Id of the team the duty belongs to
          in: path
          name: teamId
          required: true
          schema:
            type: string
        - description: Id of the requested duty schedule.
          in: path
          name: scheduleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/ScheduleInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Returns information of the duty schedule with the specified Id.
      tags:
        - Duties
  "/teams/{teamId}/setupProgress":
    get:
      parameters:
        - description: ID of the team the progress should be retrieved for.
          in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSetupProgress"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamSetupProgress"
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamSetupProgress"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets setup progress of a specific team.
      tags:
        - Teams
  /users:
    get:
      description: "Returns a list of user objects with details such as their email address and duty information. Only users who\r

        are part of your team will be returned."
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/UserInfo"
                type: array
          description: User could be successfully identified.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request the users with their information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
      summary: Get all Users
      tags:
        - Users
  "/users/{userId}":
    get:
      description: Returns a user object with details such as his email address and duty information.
      parameters:
        - description: "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r

            Can also be an email address of a user in the team or the unique id of an according user object.â"
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserInfo"
          description: User could be successfully identified.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request that user's information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
      summary: Get User by Id
      tags:
        - Users
  "/users/{userId}/changePassword":
    put:
      parameters:
        - description: User ID of user whose password should be changed.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordInfo"
      responses:
        "200":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Updates the password of a user
      tags:
        - Users
  "/users/{userId}/checkPermissions":
    post:
      parameters:
        - description: ID of the user to check permissions for.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/StringItemsWrapper"
          application/json:
            schema:
              $ref: "#/components/schemas/StringItemsWrapper"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/StringItemsWrapper"
          text/json:
            schema:
              $ref: "#/components/schemas/StringItemsWrapper"
        description: List of permissions to check
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserImage"
            text/json:
              schema:
                $ref: "#/components/schemas/UserImage"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserImage"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
      summary: Checks if a user has the provided permission.
      tags:
        - Users
  "/users/{userId}/dutyStatus":
    get:
      description: Returns a object with duty information.
      parameters:
        - description: "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.\r

            Can also be an email address of a user in the team or the unique id of an according user object.â"
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
          description: Duty successfully loaded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request that duty information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
      summary: Get duty status by user Id
      tags:
        - Users
  "/users/{userId}/image":
    get:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: height
          schema:
            format: int32
            type: integer
        - in: query
          name: width
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserImage"
            text/json:
              schema:
                $ref: "#/components/schemas/UserImage"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserImage"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
      tags:
        - Users
    post:
      parameters:
        - description: Id of the user.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: The image was successfully uploaded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: "Either a passed parameter was either empty/null or the request's multipart does not contain a\r

            file."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: User is not allowed to upoload an image for the specified user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Either the user was not found or they aren't activated yet.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal general error occured.
      summary: Uploaded a profile image for a specified user.
      tags:
        - Users
  "/users/{userId}/profile":
    put:
      parameters:
        - description: ID of user to update.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/UserProfile"
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UserProfile"
          text/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Updates user profile of an user
      tags:
        - Users
  "/users/{userId}/punchIn":
    post:
      description: The specified user will be punched in to duty.
      parameters:
        - description: "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r

            user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â"
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The user tried to change the punch in a different user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
      summary: Punch User in
      tags:
        - Users
  "/users/{userId}/punchInAsManager":
    post:
      description: The specified user will be punched in to duty as a manager.
      parameters:
        - description: "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r

            user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â"
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The user tried to change the punch in a different user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required entities could not be found in the database.
      summary: Punch User in as Manager
      tags:
        - Users
  "/users/{userId}/punchOut":
    post:
      description: The specified user will be punched out from duty.
      parameters:
        - description: "Identifier of the user to punch out. Use 'Me' to get information about the currently logged in\r

            user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â"
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDutyInfo"
          description: The user was punched out successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Required authentifaction information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The requesting user tried to punch out someone else, which is not allowed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The desired user was not found by passed id.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: "The desired user was not punched out because it would violate  the minumum on-duty members setting\r

            from the team."
      summary: Punch User out
      tags:
        - Users
  "/users/{userId}/setupProgress":
    get:
      parameters:
        - description: ID of the user the progress should be retrieved for.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSetupProgress"
            text/json:
              schema:
                $ref: "#/components/schemas/UserSetupProgress"
            text/plain:
              schema:
                $ref: "#/components/schemas/UserSetupProgress"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Gets setup progress of a specific user.
      tags:
        - Users
  /webhooks:
    get:
      description: Returns a collection of defined outbound webhooks in the system.
      parameters:
        - in: query
          name: teamId
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WebhookInfo"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/WebhookInfo"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/WebhookInfo"
                type: array
          description: Request was successful and response body contains information about all outbound webhooks in the subscription.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The subscription does not have any outbound webhooks.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Get Webhooks
      tags:
        - Webhooks
    post:
      description: Creates a new outbound webhook that will be notified when certain events occur.
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
        description: Json object that contains the external URL of the webhook.
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Action was successful and response contains the id of the newly created webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Either the webhook object or a necessary property was invalid or empty.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Create Webhook
      tags:
        - Webhooks
  "/webhooks/{webhookId}":
    delete:
      description: Deletes the specified webhook so that it will no longer be notified.
      parameters:
        - description: Id of the outbound webhook that will be deleted.
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Webhook was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The passed webhook id was invalid or empty.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Delete Webhook by Id
      tags:
        - Webhooks
    get:
      description: Returns information of the webhook specified by the passed id.
      operationId: GetWebhookById
      parameters:
        - description: Id of the outbound webhook to be retrieved.
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Request was successful and response body contains information about the requested webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The passed webhook id was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: The webhook was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Get Webhook by Id
      tags:
        - Webhooks
    put:
      description: Updates the specified webhook.
      parameters:
        - description: Id of the outbound webhook to be updated.
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
          text/json:
            schema:
              $ref: "#/components/schemas/WebhookBaseInfo"
        description: Json object containing the updated URL of the webhook.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
          description: Update was successful and response body contains the updated webhook details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: A passed parameter was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Update Webhook by Id
      tags:
        - Webhooks
  "/webhooks/{webhookId}/disable":
    post:
      parameters:
        - description: Webhook ID for webhook which should be disabled.
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
          description: Disable was successful and response body contains the webhook details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: A passed parameter was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Internal has occured. The response body may contain more information.
      summary: Ability to enable a webHook.
      tags:
        - Webhooks
  "/webhooks/{webhookId}/enable":
    post:
      parameters:
        - description: Webhook ID for webhook which should be enabled.
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/json:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
            text/plain:
              schema:
                $ref: "#/components/schemas/WebhookInfo"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponseContent"
          description: Server Error
      summary: Ability to disable a webHook.
      tags:
        - Webhooks
components:
  schemas:
    AlertAnnotationInfo:
      additionalProperties: false
      properties:
        annotationType:
          format: int32
          type: integer
        id:
          nullable: true
          type: string
        text:
          nullable: true
          type: string
        timestamp:
          format: date-time
          type: string
        userId:
          nullable: true
          type: string
      type: object
    AlertAttachment:
      additionalProperties: false
      properties:
        content:
          nullable: true
          type: string
        contentType:
          nullable: true
          type: string
        encoding:
          $ref: "#/components/schemas/Encoding"
        id:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    AlertAttachmentInfo:
      additionalProperties: false
      properties:
        contentType:
          nullable: true
          type: string
        id:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    AlertAuditReportFileInfo:
      additionalProperties: false
      type: object
    AlertCounts:
      additionalProperties: false
      properties:
        acked:
          format: int64
          type: integer
        closed:
          format: int64
          type: integer
        end:
          format: date-time
          nullable: true
          type: string
        lastModified:
          format: date-time
          nullable: true
          type: string
        start:
          format: date-time
          nullable: true
          type: string
        unhandled:
          format: int64
          type: integer
      type: object
    AlertDeliveryStatusCodes:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 6
        - 8
        - 22
        - 24
        - 26
        - 30
        - 31
      format: int32
      type: integer
    AlertDeliveryStatusInfo:
      additionalProperties: false
      properties:
        statusCode:
          $ref: "#/components/schemas/AlertDeliveryStatusCodes"
        users:
          items:
            $ref: "#/components/schemas/UserDeliveryStatusInfo"
          nullable: true
          type: array
      type: object
    AlertFilterActions:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    AlertFilterModes:
      enum:
        - 0
        - 1
      format: int32
      type: integer
    AlertFilterPublic:
      additionalProperties: false
      properties:
        alertIds:
          items:
            type: string
          nullable: true
          type: array
        alertsAfterId:
          nullable: true
          type: string
        categoryIds:
          items:
            type: string
          nullable: true
          type: array
        continuationToken:
          $ref: "#/components/schemas/PagedResultsPublicContinuationToken"
        maxCreationDate:
          format: date-time
          nullable: true
          type: string
        minCreationDate:
          format: date-time
          nullable: true
          type: string
        modifiedSince:
          format: date-time
          nullable: true
          type: string
        showPersonalHiddenCategories:
          type: boolean
        statusCodes:
          $ref: "#/components/schemas/AlertStatusCodes"
        teamId:
          nullable: true
          type: string
        textToSearch:
          nullable: true
          type: string
      type: object
    AlertHistoryInfoDetailed:
      additionalProperties: false
      properties:
        acknowledged:
          format: date-time
          nullable: true
          type: string
        acknowledgedgements:
          items:
            type: string
          nullable: true
          type: array
        closed:
          format: date-time
          nullable: true
          type: string
        closedBy:
          nullable: true
          type: string
        created:
          format: date-time
          type: string
        historyEntries:
          items:
            $ref: "#/components/schemas/AlertHistoryInfoEntry"
          nullable: true
          type: array
      type: object
    AlertHistoryInfoEntry:
      additionalProperties: false
      properties:
        id:
          nullable: true
          type: string
        timestamp:
          format: date-time
          type: string
        type:
          $ref: "#/components/schemas/AlertHistoryInfoUserEntryType"
        userId:
          nullable: true
          type: string
      type: object
    AlertHistoryInfoUserEntryType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
      format: int32
      type: integer
    AlertInfo:
      additionalProperties: false
      properties:
        annotations:
          items:
            $ref: "#/components/schemas/AlertAnnotationInfo"
          nullable: true
          type: array
        attachments:
          items:
            $ref: "#/components/schemas/AlertAttachment"
          nullable: true
          type: array
        category:
          nullable: true
          type: string
        categoryId:
          nullable: true
          type: string
        eventId:
          nullable: true
          type: string
        eventSourceId:
          nullable: true
          type: string
        eventSourceType:
          $ref: "#/components/schemas/EventSourceTypes"
        flags:
          format: int32
          type: integer
        history:
          $ref: "#/components/schemas/AlertHistoryInfoDetailed"
        id:
          nullable: true
          type: string
        lastModified:
          format: date-time
          type: string
        parameters:
          items:
            $ref: "#/components/schemas/EventParameterInfo"
          nullable: true
          type: array
        severity:
          $ref: "#/components/schemas/AlertSeverities"
        status:
          $ref: "#/components/schemas/AlertStatusCodes"
        subscriptionId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
        text:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
      type: object
    AlertNotificationInfo:
      additionalProperties: false
      properties:
        address:
          nullable: true
          type: string
        channelType:
          $ref: "#/components/schemas/AlertNotificationInfoChannelType"
        deviceName:
          nullable: true
          type: string
        lastUpdate:
          format: date-time
          type: string
        messageStatus:
          $ref: "#/components/schemas/AlertNotificationInfoMessageStatus"
        userId:
          nullable: true
          type: string
        userStatus:
          $ref: "#/components/schemas/AlertNotificationInfoUserStatus"
      type: object
    AlertNotificationInfoChannelType:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
      format: int32
      type: integer
    AlertNotificationInfoMessageStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      format: int32
      type: integer
    AlertNotificationInfoUserStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      format: int32
      type: integer
    AlertReport:
      additionalProperties: false
      properties:
        last24Hours:
          $ref: "#/components/schemas/AlertCounts"
        subscriptionId:
          nullable: true
          type: string
        teamCurrentDuty:
          $ref: "#/components/schemas/AlertCounts"
        teamId:
          nullable: true
          type: string
        teamLastDuty:
          $ref: "#/components/schemas/AlertCounts"
        userId:
          nullable: true
          type: string
        userLastDutyChange:
          $ref: "#/components/schemas/AlertCounts"
      type: object
    AlertResponseModes:
      enum:
        - 2
        - 4
      format: int32
      type: integer
    AlertSettings:
      additionalProperties: false
      properties:
        filterAction:
          $ref: "#/components/schemas/AlertFilterActions"
        filterMode:
          $ref: "#/components/schemas/AlertFilterModes"
        optOutMode:
          $ref: "#/components/schemas/TeamCategoryOptOutModes"
        persistentNotificicationMode:
          $ref: "#/components/schemas/PersistentNotificationModes"
        responseMode:
          $ref: "#/components/schemas/AlertResponseModes"
        responseTime:
          format: int32
          type: integer
      type: object
    AlertSeverities:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    AlertStatusCodes:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
        - 32
      format: int32
      type: integer
    CategoryAugmentation:
      additionalProperties: false
      properties:
        enabled:
          type: boolean
        name:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/CategoryAugmentationType"
        value:
          nullable: true
          type: string
      type: object
    CategoryAugmentationType:
      enum:
        - 0
        - 1
        - 2
        - 3
      format: int32
      type: integer
    CategoryInfo:
      additionalProperties: false
      properties:
        augmentations:
          items:
            $ref: "#/components/schemas/CategoryAugmentation"
          nullable: true
          type: array
        color:
          nullable: true
          type: string
        id:
          nullable: true
          type: string
        imageName:
          nullable: true
          type: string
        isDefault:
          readOnly: true
          type: boolean
        keywordMatching:
          $ref: "#/components/schemas/KeywordMatchingType"
        keywords:
          items:
            type: string
          nullable: true
          type: array
        lastMatch:
          format: date-time
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        options:
          $ref: "#/components/schemas/CategoryInfoOptions"
        order:
          format: int32
          type: integer
      type: object
    CategoryInfoOptions:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
      format: int32
      type: integer
    CategoryMetrics:
      additionalProperties: false
      properties:
        categoryId:
          nullable: true
          type: string
        last24Hours:
          format: int64
          type: integer
        lastAlert:
          format: date-time
          nullable: true
          type: string
        subscriberCount:
          format: int32
          type: integer
      type: object
    CategorySubscriptionInfo:
      additionalProperties: false
      properties:
        status:
          $ref: "#/components/schemas/CategorySubscriptionStatus"
        userId:
          nullable: true
          type: string
      type: object
    CategorySubscriptionStatus:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    ChangeAlertStatusFilterInfo:
      additionalProperties: false
      properties:
        categoryIds:
          items:
            type: string
          nullable: true
          type: array
        maxDate:
          format: date-time
          nullable: true
          type: string
        minDate:
          format: date-time
          nullable: true
          type: string
        scope:
          $ref: "#/components/schemas/StatusChangeScope"
        teamIds:
          items:
            type: string
          nullable: true
          type: array
      type: object
    ChangeAlertStatusInfo:
      additionalProperties: false
      properties:
        description:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    ChangeAlertStatusMultipleInfo:
      additionalProperties: false
      properties:
        alertIds:
          items:
            type: string
          nullable: true
          type: array
        description:
          nullable: true
          type: string
        userId:
          nullable: true
          type: string
      type: object
    ChannelPriceInfo:
      additionalProperties: false
      properties:
        smsPerMessage:
          format: int32
          type: integer
        voicePerMinute:
          format: int32
          type: integer
      type: object
    ChannelTypes:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
      format: int32
      type: integer
    ContactAddressInfo:
      additionalProperties: false
      properties:
        address:
          nullable: true
          type: string
        channel:
          $ref: "#/components/schemas/ChannelTypes"
        created:
          format: date-time
          type: string
        device:
          $ref: "#/components/schemas/Device"
        id:
          nullable: true
          type: string
        lastUpdated:
          format: date-time
          type: string
        options:
          format: int32
          type: integer
        userId:
          nullable: true
          type: string
      type: object
    DeleteRangeInfo:
      additionalProperties: false
      properties:
        from:
          format: date-time
          type: string
        to:
          format: date-time
          type: string
      type: object
    Device:
      additionalProperties: false
      properties:
        appVersion:
          nullable: true
          type: string
        deviceId:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        osVersion:
          nullable: true
          type: string
        ringtone:
          nullable: true
          type: string
        ringtoneDisabled:
          type: boolean
        type:
          $ref: "#/components/schemas/DeviceType"
      type: object
    DeviceType:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    DutyAuditReportFileInfo:
      additionalProperties: false
      type: object
    DutySummaryInfo:
      additionalProperties: false
      properties:
        dutyEnd:
          format: date-time
          nullable: true
          type: string
        dutyId:
          nullable: true
          type: string
        dutyStart:
          format: date-time
          nullable: true
          type: string
      type: object
    Encoding:
      enum:
        - 0
        - 1
      format: int32
      type: integer
    ErrorResponseContent:
      additionalProperties: false
      properties:
        code:
          format: int32
          type: integer
        details:
          nullable: true
          type: string
        errors:
          items:
            $ref: "#/components/schemas/ErrorResponseContentBase"
          nullable: true
          type: array
        message:
          nullable: true
          type: string
        requestId:
          nullable: true
          type: string
      type: object
    ErrorResponseContentBase:
      additionalProperties: false
      properties:
        details:
          nullable: true
          type: string
        message:
          nullable: true
          type: string
      type: object
    EventFilter:
      additionalProperties: false
      properties:
        continuationToken:
          $ref: "#/components/schemas/PagedResultsPublicContinuationToken"
        eventStatusCode:
          $ref: "#/components/schemas/EventStatusCodes"
        maxCreationDate:
          format: date-time
          nullable: true
          type: string
        minCreationDate:
          format: date-time
          nullable: true
          type: string
        modifiedSince:
          format: date-time
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
        textToSearch:
          nullable: true
          type: string
      type: object
    EventParameterInfo:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
        order:
          format: int32
          type: integer
        type:
          $ref: "#/components/schemas/EventParameterTypes"
        value:
          nullable: true
          type: string
      type: object
    EventParameterTypes:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 100
      format: int32
      type: integer
    EventSeverities:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    EventSourceEndpointInfo:
      additionalProperties: false
      properties:
        address:
          nullable: true
          type: string
        groupId:
          nullable: true
          type: string
        lastEventRaised:
          format: date-time
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/EventSourceEndpointTypes"
      type: object
    EventSourceEndpointTypes:
      enum:
        - 0
        - 1
        - 2
        - 3
      format: int32
      type: integer
    EventSourceTypes:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      format: int32
      type: integer
    EventStatusCodes:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 1000
      format: int32
      type: integer
    InventoryScriptInfo:
      additionalProperties: false
      properties:
        config:
          nullable: true
        data:
          $ref: "#/components/schemas/ScriptDescriptionData"
        eventPattern:
          nullable: true
        scriptId:
          nullable: true
          type: string
        scriptLocalizationDetails:
          items:
            $ref: "#/components/schemas/ScriptLocalizationDetail"
          nullable: true
          type: array
        scriptName:
          nullable: true
          type: string
        visibility:
          nullable: true
          type: string
      type: object
    InvitedUserInfo:
      additionalProperties: false
      properties:
        id:
          nullable: true
          type: string
        isInvite:
          type: boolean
        mail:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        roleId:
          nullable: true
          type: string
      type: object
    KeywordMatchingType:
      enum:
        - 0
        - 1
      format: int32
      type: integer
    OverviewAlert:
      additionalProperties: false
      properties:
        alertDeliveryStatus:
          $ref: "#/components/schemas/AlertDeliveryStatusInfo"
        annotations:
          items:
            $ref: "#/components/schemas/AlertAnnotationInfo"
          nullable: true
          type: array
        categoryId:
          nullable: true
          type: string
        eventId:
          nullable: true
          type: string
        flags:
          format: int32
          type: integer
        historyDetailed:
          $ref: "#/components/schemas/AlertHistoryInfoDetailed"
        id:
          nullable: true
          type: string
        lastModified:
          format: date-time
          type: string
        requiredAcknowledgements:
          format: int32
          type: integer
        status:
          $ref: "#/components/schemas/AlertStatusCodes"
        subscriptionId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
        text:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
      type: object
    OverviewAlertPagedResultsPublic:
      additionalProperties: false
      properties:
        continuationToken:
          $ref: "#/components/schemas/PagedResultsPublicContinuationToken"
        hasMore:
          readOnly: true
          type: boolean
        results:
          items:
            $ref: "#/components/schemas/OverviewAlert"
          nullable: true
          type: array
      type: object
    OverviewEvent:
      additionalProperties: false
      properties:
        acknowledgedAlerts:
          items:
            type: string
          nullable: true
          type: array
        alertId:
          nullable: true
          type: string
        categoryId:
          nullable: true
          type: string
        closedAlerts:
          items:
            type: string
          nullable: true
          type: array
        creationTime:
          format: date-time
          type: string
        eventSourceType:
          $ref: "#/components/schemas/EventSourceTypes"
        eventStatus:
          $ref: "#/components/schemas/EventStatusCodes"
        id:
          nullable: true
          type: string
        lastModified:
          format: date-time
          type: string
        severity:
          $ref: "#/components/schemas/EventSeverities"
        teamId:
          nullable: true
          type: string
        text:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
      type: object
    OverviewEventPagedResultsPublic:
      additionalProperties: false
      properties:
        continuationToken:
          $ref: "#/components/schemas/PagedResultsPublicContinuationToken"
        hasMore:
          readOnly: true
          type: boolean
        results:
          items:
            $ref: "#/components/schemas/OverviewEvent"
          nullable: true
          type: array
      type: object
    PagedResultsPublicContinuationToken:
      additionalProperties: false
      properties:
        nextPartitionKey:
          nullable: true
          type: string
        nextRowKey:
          nullable: true
          type: string
        nextTableName:
          nullable: true
          type: string
      type: object
    PersistentNotificationModes:
      enum:
        - 0
        - 1
      format: int32
      type: integer
    PrepaidBalanceInfo:
      additionalProperties: false
      properties:
        balance:
          format: int32
          type: integer
        latestTopUp:
          format: date-time
          nullable: true
          type: string
        pendingTransaction:
          type: boolean
      type: object
    PrepaidSettingsInfo:
      additionalProperties: false
      properties:
        topUpAmount:
          format: int32
          type: integer
        topUpEnabled:
          type: boolean
        topUpLimit:
          format: int32
          type: integer
      type: object
    PrepaidTransactionInfo:
      additionalProperties: false
      properties:
        autoTopUpId:
          nullable: true
          type: string
        created:
          format: date-time
          type: string
        createdBy:
          nullable: true
          type: string
        credits:
          format: int32
          type: integer
        currency:
          nullable: true
          type: string
        modified:
          format: date-time
          type: string
        packageCode:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
        statusCode:
          format: int32
          type: integer
        subscriptionId:
          nullable: true
          type: string
        transactionId:
          nullable: true
          type: string
      type: object
    RaiseAlertInfo:
      additionalProperties: false
      properties:
        attachments:
          items:
            $ref: "#/components/schemas/AlertAttachment"
          nullable: true
          type: array
        category:
          nullable: true
          type: string
        externalId:
          nullable: true
          type: string
        flags:
          format: int32
          type: integer
        parameters:
          items:
            $ref: "#/components/schemas/EventParameterInfo"
          nullable: true
          type: array
        severity:
          $ref: "#/components/schemas/AlertSeverities"
        text:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
      type: object
    ScheduleInfo:
      additionalProperties: false
      properties:
        end:
          format: date-time
          type: string
        id:
          nullable: true
          type: string
        options:
          format: int32
          type: integer
        start:
          format: date-time
          type: string
        userId:
          nullable: true
          type: string
      type: object
    ScriptDescriptionData:
      additionalProperties: false
      properties:
        description:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        scriptType:
          nullable: true
          type: string
        shortDescription:
          nullable: true
          type: string
      type: object
    ScriptInstanceCustomUserData:
      additionalProperties: false
      properties:
        customScriptDescription:
          nullable: true
          type: string
        customScriptName:
          nullable: true
          type: string
        instanceId:
          nullable: true
          type: string
        scriptId:
          nullable: true
          type: string
      type: object
    ScriptInstanceDetails:
      additionalProperties: false
      properties:
        config:
          nullable: true
        customScriptDescription:
          nullable: true
          type: string
        customScriptName:
          nullable: true
          type: string
        enabled:
          type: boolean
        eventPattern:
          nullable: true
        instanceId:
          nullable: true
          type: string
        lastModified:
          format: date-time
          nullable: true
          type: string
        runtimeInformation:
          $ref: "#/components/schemas/ScriptInstanceInfoRuntimeInformationModel"
        scriptId:
          nullable: true
          type: string
        scriptName:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
      type: object
    ScriptInstanceInfoRuntimeInformationModel:
      additionalProperties: false
      properties:
        status:
          $ref: "#/components/schemas/ScriptInstanceInfoRuntimeStatus"
        statusMessage:
          nullable: true
          type: string
      type: object
    ScriptInstanceInfoRuntimeStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
        - -1
      format: int32
      type: integer
    ScriptLocalizationDetail:
      additionalProperties: false
      properties:
        configMetadata:
          nullable: true
        data:
          $ref: "#/components/schemas/ScriptDescriptionData"
        language:
          nullable: true
          type: string
      type: object
    StatusChangeScope:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    StringItemsWrapper:
      additionalProperties: false
      properties:
        items:
          items:
            type: string
          nullable: true
          type: array
      type: object
    SubscriptionFeature:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
        type:
          format: int32
          type: integer
        value:
          nullable: true
          type: string
      type: object
    SubscriptionInfo:
      additionalProperties: false
      properties:
        branchId:
          nullable: true
          type: string
        country:
          nullable: true
          type: string
        currency:
          nullable: true
          type: string
        externalAccountId:
          nullable: true
          type: string
        id:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        nextBilling:
          format: date-time
          nullable: true
          type: string
        ownerId:
          nullable: true
          type: string
        planCode:
          nullable: true
          type: string
        planState:
          format: int32
          type: integer
        referralEnabled:
          type: boolean
        status:
          format: int32
          type: integer
      type: object
    SubscriptionProfile:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
      type: object
    TeamCategoryOptOutModes:
      enum:
        - 0
        - 1
        - 2
      format: int32
      type: integer
    TeamDutySummaryInfo:
      additionalProperties: false
      properties:
        dutyAssistEnabled:
          type: boolean
        dutySummaries:
          items:
            $ref: "#/components/schemas/DutySummaryInfo"
          nullable: true
          type: array
      type: object
    TeamInfo:
      additionalProperties: false
      properties:
        id:
          nullable: true
          type: string
        memberIds:
          items:
            type: string
          nullable: true
          type: array
        name:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        timezone:
          nullable: true
          type: string
      type: object
    TeamProfile:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
      type: object
    TeamSetupProgress:
      additionalProperties: false
      properties:
        completedSteps:
          items:
            type: string
          nullable: true
          type: array
        teamId:
          nullable: true
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    UpdatePasswordInfo:
      additionalProperties: false
      properties:
        currentPassword:
          nullable: true
          type: string
        newPassword:
          nullable: true
          type: string
      type: object
    UserDeliveryStatusInfo:
      additionalProperties: false
      properties:
        statusCode:
          $ref: "#/components/schemas/UserDeliveryStatusInfoCodes"
        userId:
          nullable: true
          type: string
      type: object
    UserDeliveryStatusInfoCodes:
      enum:
        - 0
        - 1
        - 2
        - 4
        - 6
        - 8
        - 24
        - 26
        - 30
        - 31
        - 32
      format: int32
      type: integer
    UserDutyInfo:
      additionalProperties: false
      properties:
        lastStatusChange:
          format: date-time
          nullable: true
          type: string
        onDuty:
          type: boolean
        onManagerDuty:
          type: boolean
        overdue:
          type: boolean
      type: object
    UserImage:
      additionalProperties: false
      properties:
        content:
          format: byte
          nullable: true
          type: string
        contentDisposition:
          nullable: true
          type: string
        contentEncoding:
          nullable: true
          type: string
        contentType:
          nullable: true
          type: string
        lastModified:
          format: date-time
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserInfo:
      additionalProperties: false
      properties:
        colorIndex:
          format: int32
          type: integer
        contactAddresses:
          items:
            $ref: "#/components/schemas/ContactAddressInfo"
          nullable: true
          type: array
        dutyInfo:
          $ref: "#/components/schemas/UserDutyInfo"
        id:
          nullable: true
          type: string
        isDeactivated:
          type: boolean
        isInvite:
          type: boolean
        mail:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        roleId:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        timeZone:
          nullable: true
          type: string
        userImageLastModified:
          format: date-time
          nullable: true
          type: string
      type: object
    UserInvitationInfo:
      additionalProperties: false
      properties:
        inviterId:
          nullable: true
          type: string
        userMail:
          nullable: true
          type: string
      type: object
    UserInvitationResult:
      additionalProperties: false
      properties:
        errorCode:
          format: int32
          nullable: true
          type: integer
        errorMessage:
          nullable: true
          type: string
        invitedUser:
          $ref: "#/components/schemas/InvitedUserInfo"
        success:
          type: boolean
      type: object
    UserInvite:
      additionalProperties: false
      properties:
        email:
          nullable: true
          type: string
        roleId:
          nullable: true
          type: string
      type: object
    UserLicenseInfo:
      additionalProperties: false
      properties:
        currentUsers:
          format: int32
          type: integer
        isFree:
          type: boolean
        isTrial:
          type: boolean
        licensedUsers:
          format: int32
          type: integer
        planCode:
          nullable: true
          type: string
      type: object
    UserMembership:
      additionalProperties: false
      properties:
        isValid:
          readOnly: true
          type: boolean
        roleId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
      type: object
    UserProfile:
      additionalProperties: false
      properties:
        name:
          nullable: true
          type: string
      type: object
    UserSetupProgress:
      additionalProperties: false
      properties:
        completedSteps:
          items:
            type: string
          nullable: true
          type: array
        timestamp:
          format: date-time
          type: string
        userId:
          nullable: true
          type: string
      type: object
    UsersInvitation:
      additionalProperties: false
      properties:
        inviterId:
          nullable: true
          type: string
        invites:
          items:
            $ref: "#/components/schemas/UserInvite"
          nullable: true
          type: array
      type: object
    WebhookBaseInfo:
      additionalProperties: false
      properties:
        externalAddress:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
      type: object
    WebhookInfo:
      additionalProperties: false
      properties:
        enabled:
          type: boolean
        externalAddress:
          nullable: true
          type: string
        id:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        subscriptionId:
          nullable: true
          type: string
        teamId:
          nullable: true
          type: string
      type: object
  securitySchemes:
    oauth2:
      flows:
        authorizationCode:
          authorizationUrl: https://connect.signl4.com/identity/connect/authorize
          refreshUrl: https://connect.signl4.com/identity/connect/token
          scopes:
            offline_access: Access write operations
            public_api_read: Access write operations
            public_api_write: Access read operations
          tokenUrl: https://connect.signl4.com/identity/connect/token
      type: oauth2
