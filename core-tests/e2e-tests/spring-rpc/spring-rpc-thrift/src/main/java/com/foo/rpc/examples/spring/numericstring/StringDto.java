/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.rpc.examples.spring.numericstring;

import javax.validation.constraints.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2022-04-26")
public class StringDto implements org.apache.thrift.TBase<StringDto, StringDto._Fields>, java.io.Serializable, Cloneable, Comparable<StringDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StringDto");

  private static final org.apache.thrift.protocol.TField LONG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("longValue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StringDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StringDtoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable @DecimalMax(value = "424242", inclusive = false) @Digits(integer = 6, fraction = 0) @DecimalMin(value = "0", inclusive = false) java.lang.String longValue; // required
  public @org.apache.thrift.annotation.Nullable @Digits(integer = 4, fraction = 0) @DecimalMax(value = "0", inclusive = false) java.lang.String intValue; // required
  public @org.apache.thrift.annotation.Nullable @Digits(integer = 2, fraction = 2) @DecimalMin(value = "0", inclusive = true) java.lang.String doubleValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LONG_VALUE((short)1, "longValue"),
    INT_VALUE((short)2, "intValue"),
    DOUBLE_VALUE((short)3, "doubleValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LONG_VALUE
          return LONG_VALUE;
        case 2: // INT_VALUE
          return INT_VALUE;
        case 3: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LONG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("longValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StringDto.class, metaDataMap);
  }

  public StringDto() {
  }

  public StringDto(
    java.lang.String longValue,
    java.lang.String intValue,
    java.lang.String doubleValue)
  {
    this();
    this.longValue = longValue;
    this.intValue = intValue;
    this.doubleValue = doubleValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StringDto(StringDto other) {
    if (other.isSetLongValue()) {
      this.longValue = other.longValue;
    }
    if (other.isSetIntValue()) {
      this.intValue = other.intValue;
    }
    if (other.isSetDoubleValue()) {
      this.doubleValue = other.doubleValue;
    }
  }

  public StringDto deepCopy() {
    return new StringDto(this);
  }

  @Override
  public void clear() {
    this.longValue = null;
    this.intValue = null;
    this.doubleValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLongValue() {
    return this.longValue;
  }

  public StringDto setLongValue(@org.apache.thrift.annotation.Nullable java.lang.String longValue) {
    this.longValue = longValue;
    return this;
  }

  public void unsetLongValue() {
    this.longValue = null;
  }

  /** Returns true if field longValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValue() {
    return this.longValue != null;
  }

  public void setLongValueIsSet(boolean value) {
    if (!value) {
      this.longValue = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIntValue() {
    return this.intValue;
  }

  public StringDto setIntValue(@org.apache.thrift.annotation.Nullable java.lang.String intValue) {
    this.intValue = intValue;
    return this;
  }

  public void unsetIntValue() {
    this.intValue = null;
  }

  /** Returns true if field intValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValue() {
    return this.intValue != null;
  }

  public void setIntValueIsSet(boolean value) {
    if (!value) {
      this.intValue = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDoubleValue() {
    return this.doubleValue;
  }

  public StringDto setDoubleValue(@org.apache.thrift.annotation.Nullable java.lang.String doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

  public void unsetDoubleValue() {
    this.doubleValue = null;
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return this.doubleValue != null;
  }

  public void setDoubleValueIsSet(boolean value) {
    if (!value) {
      this.doubleValue = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LONG_VALUE:
      if (value == null) {
        unsetLongValue();
      } else {
        setLongValue((java.lang.String)value);
      }
      break;

    case INT_VALUE:
      if (value == null) {
        unsetIntValue();
      } else {
        setIntValue((java.lang.String)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LONG_VALUE:
      return getLongValue();

    case INT_VALUE:
      return getIntValue();

    case DOUBLE_VALUE:
      return getDoubleValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LONG_VALUE:
      return isSetLongValue();
    case INT_VALUE:
      return isSetIntValue();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StringDto)
      return this.equals((StringDto)that);
    return false;
  }

  public boolean equals(StringDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_longValue = true && this.isSetLongValue();
    boolean that_present_longValue = true && that.isSetLongValue();
    if (this_present_longValue || that_present_longValue) {
      if (!(this_present_longValue && that_present_longValue))
        return false;
      if (!this.longValue.equals(that.longValue))
        return false;
    }

    boolean this_present_intValue = true && this.isSetIntValue();
    boolean that_present_intValue = true && that.isSetIntValue();
    if (this_present_intValue || that_present_intValue) {
      if (!(this_present_intValue && that_present_intValue))
        return false;
      if (!this.intValue.equals(that.intValue))
        return false;
    }

    boolean this_present_doubleValue = true && this.isSetDoubleValue();
    boolean that_present_doubleValue = true && that.isSetDoubleValue();
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (!this.doubleValue.equals(that.doubleValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLongValue()) ? 131071 : 524287);
    if (isSetLongValue())
      hashCode = hashCode * 8191 + longValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntValue()) ? 131071 : 524287);
    if (isSetIntValue())
      hashCode = hashCode * 8191 + intValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoubleValue()) ? 131071 : 524287);
    if (isSetDoubleValue())
      hashCode = hashCode * 8191 + doubleValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StringDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLongValue(), other.isSetLongValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longValue, other.longValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntValue(), other.isSetIntValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValue, other.intValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDoubleValue(), other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StringDto(");
    boolean first = true;

    sb.append("longValue:");
    if (this.longValue == null) {
      sb.append("null");
    } else {
      sb.append(this.longValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intValue:");
    if (this.intValue == null) {
      sb.append("null");
    } else {
      sb.append(this.intValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleValue:");
    if (this.doubleValue == null) {
      sb.append("null");
    } else {
      sb.append(this.doubleValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StringDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StringDtoStandardScheme getScheme() {
      return new StringDtoStandardScheme();
    }
  }

  private static class StringDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<StringDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StringDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LONG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.longValue = iprot.readString();
              struct.setLongValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intValue = iprot.readString();
              struct.setIntValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doubleValue = iprot.readString();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StringDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.longValue != null) {
        oprot.writeFieldBegin(LONG_VALUE_FIELD_DESC);
        oprot.writeString(struct.longValue);
        oprot.writeFieldEnd();
      }
      if (struct.intValue != null) {
        oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
        oprot.writeString(struct.intValue);
        oprot.writeFieldEnd();
      }
      if (struct.doubleValue != null) {
        oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
        oprot.writeString(struct.doubleValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StringDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StringDtoTupleScheme getScheme() {
      return new StringDtoTupleScheme();
    }
  }

  private static class StringDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<StringDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StringDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLongValue()) {
        optionals.set(0);
      }
      if (struct.isSetIntValue()) {
        optionals.set(1);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLongValue()) {
        oprot.writeString(struct.longValue);
      }
      if (struct.isSetIntValue()) {
        oprot.writeString(struct.intValue);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeString(struct.doubleValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StringDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.longValue = iprot.readString();
        struct.setLongValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.intValue = iprot.readString();
        struct.setIntValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doubleValue = iprot.readString();
        struct.setDoubleValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

