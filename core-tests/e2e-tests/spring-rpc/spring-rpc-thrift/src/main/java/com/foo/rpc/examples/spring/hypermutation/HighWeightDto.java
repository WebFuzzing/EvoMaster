/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.rpc.examples.spring.hypermutation;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-22")
public class HighWeightDto implements org.apache.thrift.TBase<HighWeightDto, HighWeightDto._Fields>, java.io.Serializable, Cloneable, Comparable<HighWeightDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HighWeightDto");

  private static final org.apache.thrift.protocol.TField F1_FIELD_DESC = new org.apache.thrift.protocol.TField("f1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField F2_FIELD_DESC = new org.apache.thrift.protocol.TField("f2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField F3_FIELD_DESC = new org.apache.thrift.protocol.TField("f3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField F4_FIELD_DESC = new org.apache.thrift.protocol.TField("f4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField F5_FIELD_DESC = new org.apache.thrift.protocol.TField("f5", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField F6_FIELD_DESC = new org.apache.thrift.protocol.TField("f6", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HighWeightDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HighWeightDtoTupleSchemeFactory();

  public int f1; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String f2; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String f3; // required
  public double f4; // required
  public double f5; // required
  public long f6; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    F1((short)1, "f1"),
    F2((short)2, "f2"),
    F3((short)3, "f3"),
    F4((short)4, "f4"),
    F5((short)5, "f5"),
    F6((short)6, "f6");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // F1
          return F1;
        case 2: // F2
          return F2;
        case 3: // F3
          return F3;
        case 4: // F4
          return F4;
        case 5: // F5
          return F5;
        case 6: // F6
          return F6;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __F1_ISSET_ID = 0;
  private static final int __F4_ISSET_ID = 1;
  private static final int __F5_ISSET_ID = 2;
  private static final int __F6_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.F1, new org.apache.thrift.meta_data.FieldMetaData("f1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F2, new org.apache.thrift.meta_data.FieldMetaData("f2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F3, new org.apache.thrift.meta_data.FieldMetaData("f3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F4, new org.apache.thrift.meta_data.FieldMetaData("f4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F5, new org.apache.thrift.meta_data.FieldMetaData("f5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F6, new org.apache.thrift.meta_data.FieldMetaData("f6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HighWeightDto.class, metaDataMap);
  }

  public HighWeightDto() {
  }

  public HighWeightDto(
    int f1,
    java.lang.String f2,
    java.lang.String f3,
    double f4,
    double f5,
    long f6)
  {
    this();
    this.f1 = f1;
    setF1IsSet(true);
    this.f2 = f2;
    this.f3 = f3;
    this.f4 = f4;
    setF4IsSet(true);
    this.f5 = f5;
    setF5IsSet(true);
    this.f6 = f6;
    setF6IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HighWeightDto(HighWeightDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.f1 = other.f1;
    if (other.isSetF2()) {
      this.f2 = other.f2;
    }
    if (other.isSetF3()) {
      this.f3 = other.f3;
    }
    this.f4 = other.f4;
    this.f5 = other.f5;
    this.f6 = other.f6;
  }

  public HighWeightDto deepCopy() {
    return new HighWeightDto(this);
  }

  @Override
  public void clear() {
    setF1IsSet(false);
    this.f1 = 0;
    this.f2 = null;
    this.f3 = null;
    setF4IsSet(false);
    this.f4 = 0.0;
    setF5IsSet(false);
    this.f5 = 0.0;
    setF6IsSet(false);
    this.f6 = 0;
  }

  public int getF1() {
    return this.f1;
  }

  public HighWeightDto setF1(int f1) {
    this.f1 = f1;
    setF1IsSet(true);
    return this;
  }

  public void unsetF1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F1_ISSET_ID);
  }

  /** Returns true if field f1 is set (has been assigned a value) and false otherwise */
  public boolean isSetF1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F1_ISSET_ID);
  }

  public void setF1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F1_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getF2() {
    return this.f2;
  }

  public HighWeightDto setF2(@org.apache.thrift.annotation.Nullable java.lang.String f2) {
    this.f2 = f2;
    return this;
  }

  public void unsetF2() {
    this.f2 = null;
  }

  /** Returns true if field f2 is set (has been assigned a value) and false otherwise */
  public boolean isSetF2() {
    return this.f2 != null;
  }

  public void setF2IsSet(boolean value) {
    if (!value) {
      this.f2 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getF3() {
    return this.f3;
  }

  public HighWeightDto setF3(@org.apache.thrift.annotation.Nullable java.lang.String f3) {
    this.f3 = f3;
    return this;
  }

  public void unsetF3() {
    this.f3 = null;
  }

  /** Returns true if field f3 is set (has been assigned a value) and false otherwise */
  public boolean isSetF3() {
    return this.f3 != null;
  }

  public void setF3IsSet(boolean value) {
    if (!value) {
      this.f3 = null;
    }
  }

  public double getF4() {
    return this.f4;
  }

  public HighWeightDto setF4(double f4) {
    this.f4 = f4;
    setF4IsSet(true);
    return this;
  }

  public void unsetF4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F4_ISSET_ID);
  }

  /** Returns true if field f4 is set (has been assigned a value) and false otherwise */
  public boolean isSetF4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F4_ISSET_ID);
  }

  public void setF4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F4_ISSET_ID, value);
  }

  public double getF5() {
    return this.f5;
  }

  public HighWeightDto setF5(double f5) {
    this.f5 = f5;
    setF5IsSet(true);
    return this;
  }

  public void unsetF5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F5_ISSET_ID);
  }

  /** Returns true if field f5 is set (has been assigned a value) and false otherwise */
  public boolean isSetF5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F5_ISSET_ID);
  }

  public void setF5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F5_ISSET_ID, value);
  }

  public long getF6() {
    return this.f6;
  }

  public HighWeightDto setF6(long f6) {
    this.f6 = f6;
    setF6IsSet(true);
    return this;
  }

  public void unsetF6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F6_ISSET_ID);
  }

  /** Returns true if field f6 is set (has been assigned a value) and false otherwise */
  public boolean isSetF6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F6_ISSET_ID);
  }

  public void setF6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F6_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case F1:
      if (value == null) {
        unsetF1();
      } else {
        setF1((java.lang.Integer)value);
      }
      break;

    case F2:
      if (value == null) {
        unsetF2();
      } else {
        setF2((java.lang.String)value);
      }
      break;

    case F3:
      if (value == null) {
        unsetF3();
      } else {
        setF3((java.lang.String)value);
      }
      break;

    case F4:
      if (value == null) {
        unsetF4();
      } else {
        setF4((java.lang.Double)value);
      }
      break;

    case F5:
      if (value == null) {
        unsetF5();
      } else {
        setF5((java.lang.Double)value);
      }
      break;

    case F6:
      if (value == null) {
        unsetF6();
      } else {
        setF6((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case F1:
      return getF1();

    case F2:
      return getF2();

    case F3:
      return getF3();

    case F4:
      return getF4();

    case F5:
      return getF5();

    case F6:
      return getF6();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case F1:
      return isSetF1();
    case F2:
      return isSetF2();
    case F3:
      return isSetF3();
    case F4:
      return isSetF4();
    case F5:
      return isSetF5();
    case F6:
      return isSetF6();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof HighWeightDto)
      return this.equals((HighWeightDto)that);
    return false;
  }

  public boolean equals(HighWeightDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_f1 = true;
    boolean that_present_f1 = true;
    if (this_present_f1 || that_present_f1) {
      if (!(this_present_f1 && that_present_f1))
        return false;
      if (this.f1 != that.f1)
        return false;
    }

    boolean this_present_f2 = true && this.isSetF2();
    boolean that_present_f2 = true && that.isSetF2();
    if (this_present_f2 || that_present_f2) {
      if (!(this_present_f2 && that_present_f2))
        return false;
      if (!this.f2.equals(that.f2))
        return false;
    }

    boolean this_present_f3 = true && this.isSetF3();
    boolean that_present_f3 = true && that.isSetF3();
    if (this_present_f3 || that_present_f3) {
      if (!(this_present_f3 && that_present_f3))
        return false;
      if (!this.f3.equals(that.f3))
        return false;
    }

    boolean this_present_f4 = true;
    boolean that_present_f4 = true;
    if (this_present_f4 || that_present_f4) {
      if (!(this_present_f4 && that_present_f4))
        return false;
      if (this.f4 != that.f4)
        return false;
    }

    boolean this_present_f5 = true;
    boolean that_present_f5 = true;
    if (this_present_f5 || that_present_f5) {
      if (!(this_present_f5 && that_present_f5))
        return false;
      if (this.f5 != that.f5)
        return false;
    }

    boolean this_present_f6 = true;
    boolean that_present_f6 = true;
    if (this_present_f6 || that_present_f6) {
      if (!(this_present_f6 && that_present_f6))
        return false;
      if (this.f6 != that.f6)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + f1;

    hashCode = hashCode * 8191 + ((isSetF2()) ? 131071 : 524287);
    if (isSetF2())
      hashCode = hashCode * 8191 + f2.hashCode();

    hashCode = hashCode * 8191 + ((isSetF3()) ? 131071 : 524287);
    if (isSetF3())
      hashCode = hashCode * 8191 + f3.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(f4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(f5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(f6);

    return hashCode;
  }

  @Override
  public int compareTo(HighWeightDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetF1(), other.isSetF1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f1, other.f1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF2(), other.isSetF2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2, other.f2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF3(), other.isSetF3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f3, other.f3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF4(), other.isSetF4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f4, other.f4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF5(), other.isSetF5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f5, other.f5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF6(), other.isSetF6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f6, other.f6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HighWeightDto(");
    boolean first = true;

    sb.append("f1:");
    sb.append(this.f1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2:");
    if (this.f2 == null) {
      sb.append("null");
    } else {
      sb.append(this.f2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("f3:");
    if (this.f3 == null) {
      sb.append("null");
    } else {
      sb.append(this.f3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("f4:");
    sb.append(this.f4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f5:");
    sb.append(this.f5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f6:");
    sb.append(this.f6);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'f1' because it's a primitive and you chose the non-beans generator.
    if (f2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'f2' was not present! Struct: " + toString());
    }
    if (f3 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'f3' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'f4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'f5' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'f6' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HighWeightDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HighWeightDtoStandardScheme getScheme() {
      return new HighWeightDtoStandardScheme();
    }
  }

  private static class HighWeightDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<HighWeightDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HighWeightDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // F1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f1 = iprot.readI32();
              struct.setF1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // F2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.f2 = iprot.readString();
              struct.setF2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // F3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.f3 = iprot.readString();
              struct.setF3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.f4 = iprot.readDouble();
              struct.setF4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // F5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.f5 = iprot.readDouble();
              struct.setF5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // F6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.f6 = iprot.readI64();
              struct.setF6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetF1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'f1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetF4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'f4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetF5()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'f5' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetF6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'f6' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HighWeightDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(F1_FIELD_DESC);
      oprot.writeI32(struct.f1);
      oprot.writeFieldEnd();
      if (struct.f2 != null) {
        oprot.writeFieldBegin(F2_FIELD_DESC);
        oprot.writeString(struct.f2);
        oprot.writeFieldEnd();
      }
      if (struct.f3 != null) {
        oprot.writeFieldBegin(F3_FIELD_DESC);
        oprot.writeString(struct.f3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(F4_FIELD_DESC);
      oprot.writeDouble(struct.f4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F5_FIELD_DESC);
      oprot.writeDouble(struct.f5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F6_FIELD_DESC);
      oprot.writeI64(struct.f6);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HighWeightDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HighWeightDtoTupleScheme getScheme() {
      return new HighWeightDtoTupleScheme();
    }
  }

  private static class HighWeightDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<HighWeightDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HighWeightDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.f1);
      oprot.writeString(struct.f2);
      oprot.writeString(struct.f3);
      oprot.writeDouble(struct.f4);
      oprot.writeDouble(struct.f5);
      oprot.writeI64(struct.f6);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HighWeightDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.f1 = iprot.readI32();
      struct.setF1IsSet(true);
      struct.f2 = iprot.readString();
      struct.setF2IsSet(true);
      struct.f3 = iprot.readString();
      struct.setF3IsSet(true);
      struct.f4 = iprot.readDouble();
      struct.setF4IsSet(true);
      struct.f5 = iprot.readDouble();
      struct.setF5IsSet(true);
      struct.f6 = iprot.readI64();
      struct.setF6IsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

