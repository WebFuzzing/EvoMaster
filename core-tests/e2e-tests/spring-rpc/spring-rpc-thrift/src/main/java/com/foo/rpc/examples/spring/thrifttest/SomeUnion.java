/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.rpc.examples.spring.thrifttest;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-08")
public class SomeUnion extends org.apache.thrift.TUnion<SomeUnion, SomeUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SomeUnion");
  private static final org.apache.thrift.protocol.TField MAP_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("map_thing", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("string_thing", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I32_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_thing", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField XTRUCT_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("xtruct_thing", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField INSANITY_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("insanity_thing", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_THING((short)1, "map_thing"),
    STRING_THING((short)2, "string_thing"),
    I32_THING((short)3, "i32_thing"),
    XTRUCT_THING((short)4, "xtruct_thing"),
    INSANITY_THING((short)5, "insanity_thing");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_THING
          return MAP_THING;
        case 2: // STRING_THING
          return STRING_THING;
        case 3: // I32_THING
          return I32_THING;
        case 4: // XTRUCT_THING
          return XTRUCT_THING;
        case 5: // INSANITY_THING
          return INSANITY_THING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_THING, new org.apache.thrift.meta_data.FieldMetaData("map_thing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Numberz.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "UserId"))));
    tmpMap.put(_Fields.STRING_THING, new org.apache.thrift.meta_data.FieldMetaData("string_thing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I32_THING, new org.apache.thrift.meta_data.FieldMetaData("i32_thing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.XTRUCT_THING, new org.apache.thrift.meta_data.FieldMetaData("xtruct_thing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Xtruct3.class)));
    tmpMap.put(_Fields.INSANITY_THING, new org.apache.thrift.meta_data.FieldMetaData("insanity_thing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Insanity.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SomeUnion.class, metaDataMap);
  }

  public SomeUnion() {
    super();
  }

  public SomeUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public SomeUnion(SomeUnion other) {
    super(other);
  }
  public SomeUnion deepCopy() {
    return new SomeUnion(this);
  }

  public static SomeUnion map_thing(java.util.Map<Numberz,java.lang.Long> value) {
    SomeUnion x = new SomeUnion();
    x.setMap_thing(value);
    return x;
  }

  public static SomeUnion string_thing(java.lang.String value) {
    SomeUnion x = new SomeUnion();
    x.setString_thing(value);
    return x;
  }

  public static SomeUnion i32_thing(int value) {
    SomeUnion x = new SomeUnion();
    x.setI32_thing(value);
    return x;
  }

  public static SomeUnion xtruct_thing(Xtruct3 value) {
    SomeUnion x = new SomeUnion();
    x.setXtruct_thing(value);
    return x;
  }

  public static SomeUnion insanity_thing(Insanity value) {
    SomeUnion x = new SomeUnion();
    x.setInsanity_thing(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case MAP_THING:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<Numberz,java.lang.Long> for field 'map_thing', but got " + value.getClass().getSimpleName());
      case STRING_THING:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'string_thing', but got " + value.getClass().getSimpleName());
      case I32_THING:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'i32_thing', but got " + value.getClass().getSimpleName());
      case XTRUCT_THING:
        if (value instanceof Xtruct3) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Xtruct3 for field 'xtruct_thing', but got " + value.getClass().getSimpleName());
      case INSANITY_THING:
        if (value instanceof Insanity) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Insanity for field 'insanity_thing', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case MAP_THING:
          if (field.type == MAP_THING_FIELD_DESC.type) {
            java.util.Map<Numberz,java.lang.Long> map_thing;
            {
              org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
              map_thing = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
              @org.apache.thrift.annotation.Nullable Numberz _key89;
              long _val90;
              for (int _i91 = 0; _i91 < _map88.size; ++_i91)
              {
                _key89 = com.foo.rpc.examples.spring.thrifttest.Numberz.findByValue(iprot.readI32());
                _val90 = iprot.readI64();
                if (_key89 != null)
                {
                  map_thing.put(_key89, _val90);
                }
              }
              iprot.readMapEnd();
            }
            return map_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_THING:
          if (field.type == STRING_THING_FIELD_DESC.type) {
            java.lang.String string_thing;
            string_thing = iprot.readString();
            return string_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_THING:
          if (field.type == I32_THING_FIELD_DESC.type) {
            java.lang.Integer i32_thing;
            i32_thing = iprot.readI32();
            return i32_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case XTRUCT_THING:
          if (field.type == XTRUCT_THING_FIELD_DESC.type) {
            Xtruct3 xtruct_thing;
            xtruct_thing = new Xtruct3();
            xtruct_thing.read(iprot);
            return xtruct_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INSANITY_THING:
          if (field.type == INSANITY_THING_FIELD_DESC.type) {
            Insanity insanity_thing;
            insanity_thing = new Insanity();
            insanity_thing.read(iprot);
            return insanity_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case MAP_THING:
        java.util.Map<Numberz,java.lang.Long> map_thing = (java.util.Map<Numberz,java.lang.Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, map_thing.size()));
          for (java.util.Map.Entry<Numberz, java.lang.Long> _iter92 : map_thing.entrySet())
          {
            oprot.writeI32(_iter92.getKey().getValue());
            oprot.writeI64(_iter92.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_THING:
        java.lang.String string_thing = (java.lang.String)value_;
        oprot.writeString(string_thing);
        return;
      case I32_THING:
        java.lang.Integer i32_thing = (java.lang.Integer)value_;
        oprot.writeI32(i32_thing);
        return;
      case XTRUCT_THING:
        Xtruct3 xtruct_thing = (Xtruct3)value_;
        xtruct_thing.write(oprot);
        return;
      case INSANITY_THING:
        Insanity insanity_thing = (Insanity)value_;
        insanity_thing.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case MAP_THING:
          java.util.Map<Numberz,java.lang.Long> map_thing;
          {
            org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
            map_thing = new java.util.EnumMap<Numberz,java.lang.Long>(Numberz.class);
            @org.apache.thrift.annotation.Nullable Numberz _key94;
            long _val95;
            for (int _i96 = 0; _i96 < _map93.size; ++_i96)
            {
              _key94 = com.foo.rpc.examples.spring.thrifttest.Numberz.findByValue(iprot.readI32());
              _val95 = iprot.readI64();
              if (_key94 != null)
              {
                map_thing.put(_key94, _val95);
              }
            }
            iprot.readMapEnd();
          }
          return map_thing;
        case STRING_THING:
          java.lang.String string_thing;
          string_thing = iprot.readString();
          return string_thing;
        case I32_THING:
          java.lang.Integer i32_thing;
          i32_thing = iprot.readI32();
          return i32_thing;
        case XTRUCT_THING:
          Xtruct3 xtruct_thing;
          xtruct_thing = new Xtruct3();
          xtruct_thing.read(iprot);
          return xtruct_thing;
        case INSANITY_THING:
          Insanity insanity_thing;
          insanity_thing = new Insanity();
          insanity_thing.read(iprot);
          return insanity_thing;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case MAP_THING:
        java.util.Map<Numberz,java.lang.Long> map_thing = (java.util.Map<Numberz,java.lang.Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, map_thing.size()));
          for (java.util.Map.Entry<Numberz, java.lang.Long> _iter97 : map_thing.entrySet())
          {
            oprot.writeI32(_iter97.getKey().getValue());
            oprot.writeI64(_iter97.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_THING:
        java.lang.String string_thing = (java.lang.String)value_;
        oprot.writeString(string_thing);
        return;
      case I32_THING:
        java.lang.Integer i32_thing = (java.lang.Integer)value_;
        oprot.writeI32(i32_thing);
        return;
      case XTRUCT_THING:
        Xtruct3 xtruct_thing = (Xtruct3)value_;
        xtruct_thing.write(oprot);
        return;
      case INSANITY_THING:
        Insanity insanity_thing = (Insanity)value_;
        insanity_thing.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case MAP_THING:
        return MAP_THING_FIELD_DESC;
      case STRING_THING:
        return STRING_THING_FIELD_DESC;
      case I32_THING:
        return I32_THING_FIELD_DESC;
      case XTRUCT_THING:
        return XTRUCT_THING_FIELD_DESC;
      case INSANITY_THING:
        return INSANITY_THING_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public java.util.Map<Numberz,java.lang.Long> getMap_thing() {
    if (getSetField() == _Fields.MAP_THING) {
      return (java.util.Map<Numberz,java.lang.Long>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'map_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMap_thing(java.util.Map<Numberz,java.lang.Long> value) {
    setField_ = _Fields.MAP_THING;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.MAP_THING");
  }

  public java.lang.String getString_thing() {
    if (getSetField() == _Fields.STRING_THING) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'string_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setString_thing(java.lang.String value) {
    setField_ = _Fields.STRING_THING;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.STRING_THING");
  }

  public int getI32_thing() {
    if (getSetField() == _Fields.I32_THING) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'i32_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_thing(int value) {
    setField_ = _Fields.I32_THING;
    value_ = value;
  }

  public Xtruct3 getXtruct_thing() {
    if (getSetField() == _Fields.XTRUCT_THING) {
      return (Xtruct3)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'xtruct_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setXtruct_thing(Xtruct3 value) {
    setField_ = _Fields.XTRUCT_THING;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.XTRUCT_THING");
  }

  public Insanity getInsanity_thing() {
    if (getSetField() == _Fields.INSANITY_THING) {
      return (Insanity)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'insanity_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInsanity_thing(Insanity value) {
    setField_ = _Fields.INSANITY_THING;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.INSANITY_THING");
  }

  public boolean isSetMap_thing() {
    return setField_ == _Fields.MAP_THING;
  }


  public boolean isSetString_thing() {
    return setField_ == _Fields.STRING_THING;
  }


  public boolean isSetI32_thing() {
    return setField_ == _Fields.I32_THING;
  }


  public boolean isSetXtruct_thing() {
    return setField_ == _Fields.XTRUCT_THING;
  }


  public boolean isSetInsanity_thing() {
    return setField_ == _Fields.INSANITY_THING;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof SomeUnion) {
      return equals((SomeUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(SomeUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(SomeUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
